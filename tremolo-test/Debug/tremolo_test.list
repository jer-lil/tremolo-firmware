
tremolo_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007908  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007a9c  08007a9c  00017a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ad4  08007ad4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007ad4  08007ad4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ad4  08007ad4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ad4  08007ad4  00017ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ad8  08007ad8  00017ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00001420  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000142c  2000142c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013ebc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b96  00000000  00000000  00033ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001070  00000000  00000000  00036a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f38  00000000  00000000  00037b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e8b  00000000  00000000  00038a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016d4d  00000000  00000000  0005a8c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d02fc  00000000  00000000  00071610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014190c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000043d4  00000000  00000000  0014195c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007a84 	.word	0x08007a84

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08007a84 	.word	0x08007a84

080001d4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08a      	sub	sp, #40	; 0x28
 80001d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80001da:	f107 031c 	add.w	r3, r7, #28
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	2200      	movs	r2, #0
 80001ea:	601a      	str	r2, [r3, #0]
 80001ec:	605a      	str	r2, [r3, #4]
 80001ee:	609a      	str	r2, [r3, #8]
 80001f0:	60da      	str	r2, [r3, #12]
 80001f2:	611a      	str	r2, [r3, #16]
 80001f4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001f6:	4b66      	ldr	r3, [pc, #408]	; (8000390 <MX_ADC1_Init+0x1bc>)
 80001f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80001fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001fe:	4b64      	ldr	r3, [pc, #400]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000200:	2200      	movs	r2, #0
 8000202:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000204:	4b62      	ldr	r3, [pc, #392]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000206:	2208      	movs	r2, #8
 8000208:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800020a:	4b61      	ldr	r3, [pc, #388]	; (8000390 <MX_ADC1_Init+0x1bc>)
 800020c:	2201      	movs	r2, #1
 800020e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000210:	4b5f      	ldr	r3, [pc, #380]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000212:	2201      	movs	r2, #1
 8000214:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000216:	4b5e      	ldr	r3, [pc, #376]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000218:	2200      	movs	r2, #0
 800021a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800021e:	4b5c      	ldr	r3, [pc, #368]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000220:	2200      	movs	r2, #0
 8000222:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000224:	4b5a      	ldr	r3, [pc, #360]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000226:	2201      	movs	r2, #1
 8000228:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800022a:	4b59      	ldr	r3, [pc, #356]	; (8000390 <MX_ADC1_Init+0x1bc>)
 800022c:	2200      	movs	r2, #0
 800022e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 8000230:	4b57      	ldr	r3, [pc, #348]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000232:	2209      	movs	r2, #9
 8000234:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000236:	4b56      	ldr	r3, [pc, #344]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000238:	2201      	movs	r2, #1
 800023a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800023e:	4b54      	ldr	r3, [pc, #336]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000240:	2208      	movs	r2, #8
 8000242:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000244:	4b52      	ldr	r3, [pc, #328]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000246:	2200      	movs	r2, #0
 8000248:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800024a:	4b51      	ldr	r3, [pc, #324]	; (8000390 <MX_ADC1_Init+0x1bc>)
 800024c:	2200      	movs	r2, #0
 800024e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000250:	484f      	ldr	r0, [pc, #316]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000252:	f001 ffcf 	bl	80021f4 <HAL_ADC_Init>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800025c:	f000 ff9c 	bl	8001198 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000260:	2300      	movs	r3, #0
 8000262:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000264:	f107 031c 	add.w	r3, r7, #28
 8000268:	4619      	mov	r1, r3
 800026a:	4849      	ldr	r0, [pc, #292]	; (8000390 <MX_ADC1_Init+0x1bc>)
 800026c:	f002 fdc4 	bl	8002df8 <HAL_ADCEx_MultiModeConfigChannel>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000276:	f000 ff8f 	bl	8001198 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800027a:	2301      	movs	r3, #1
 800027c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800027e:	2301      	movs	r3, #1
 8000280:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000282:	2300      	movs	r3, #0
 8000284:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000286:	2300      	movs	r3, #0
 8000288:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800028e:	2300      	movs	r3, #0
 8000290:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	4619      	mov	r1, r3
 8000296:	483e      	ldr	r0, [pc, #248]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000298:	f002 fac2 	bl	8002820 <HAL_ADC_ConfigChannel>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80002a2:	f000 ff79 	bl	8001198 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80002a6:	2302      	movs	r3, #2
 80002a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002aa:	2302      	movs	r3, #2
 80002ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	4619      	mov	r1, r3
 80002b2:	4837      	ldr	r0, [pc, #220]	; (8000390 <MX_ADC1_Init+0x1bc>)
 80002b4:	f002 fab4 	bl	8002820 <HAL_ADC_ConfigChannel>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80002be:	f000 ff6b 	bl	8001198 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002c2:	2303      	movs	r3, #3
 80002c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002c6:	2303      	movs	r3, #3
 80002c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4619      	mov	r1, r3
 80002ce:	4830      	ldr	r0, [pc, #192]	; (8000390 <MX_ADC1_Init+0x1bc>)
 80002d0:	f002 faa6 	bl	8002820 <HAL_ADC_ConfigChannel>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 80002da:	f000 ff5d 	bl	8001198 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80002de:	2304      	movs	r3, #4
 80002e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80002e2:	2304      	movs	r3, #4
 80002e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4619      	mov	r1, r3
 80002ea:	4829      	ldr	r0, [pc, #164]	; (8000390 <MX_ADC1_Init+0x1bc>)
 80002ec:	f002 fa98 	bl	8002820 <HAL_ADC_ConfigChannel>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80002f6:	f000 ff4f 	bl	8001198 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80002fa:	2306      	movs	r3, #6
 80002fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80002fe:	2305      	movs	r3, #5
 8000300:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	4619      	mov	r1, r3
 8000306:	4822      	ldr	r0, [pc, #136]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000308:	f002 fa8a 	bl	8002820 <HAL_ADC_ConfigChannel>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 8000312:	f000 ff41 	bl	8001198 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000316:	2307      	movs	r3, #7
 8000318:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800031a:	2306      	movs	r3, #6
 800031c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	4619      	mov	r1, r3
 8000322:	481b      	ldr	r0, [pc, #108]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000324:	f002 fa7c 	bl	8002820 <HAL_ADC_ConfigChannel>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 800032e:	f000 ff33 	bl	8001198 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000332:	2308      	movs	r3, #8
 8000334:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000336:	2307      	movs	r3, #7
 8000338:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	4619      	mov	r1, r3
 800033e:	4814      	ldr	r0, [pc, #80]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000340:	f002 fa6e 	bl	8002820 <HAL_ADC_ConfigChannel>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 800034a:	f000 ff25 	bl	8001198 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800034e:	2309      	movs	r3, #9
 8000350:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000352:	2308      	movs	r3, #8
 8000354:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4619      	mov	r1, r3
 800035a:	480d      	ldr	r0, [pc, #52]	; (8000390 <MX_ADC1_Init+0x1bc>)
 800035c:	f002 fa60 	bl	8002820 <HAL_ADC_ConfigChannel>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 8000366:	f000 ff17 	bl	8001198 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800036a:	230e      	movs	r3, #14
 800036c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800036e:	2309      	movs	r3, #9
 8000370:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	4619      	mov	r1, r3
 8000376:	4806      	ldr	r0, [pc, #24]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000378:	f002 fa52 	bl	8002820 <HAL_ADC_ConfigChannel>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_ADC1_Init+0x1b2>
  {
    Error_Handler();
 8000382:	f000 ff09 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000386:	bf00      	nop
 8000388:	3728      	adds	r7, #40	; 0x28
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000028 	.word	0x20000028

08000394 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b08c      	sub	sp, #48	; 0x30
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039c:	f107 031c 	add.w	r3, r7, #28
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
 80003aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80003b4:	d17e      	bne.n	80004b4 <HAL_ADC_MspInit+0x120>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80003b6:	4b41      	ldr	r3, [pc, #260]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a40      	ldr	r2, [pc, #256]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c0:	6153      	str	r3, [r2, #20]
 80003c2:	4b3e      	ldr	r3, [pc, #248]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ca:	61bb      	str	r3, [r7, #24]
 80003cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ce:	4b3b      	ldr	r3, [pc, #236]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	4a3a      	ldr	r2, [pc, #232]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003d8:	6153      	str	r3, [r2, #20]
 80003da:	4b38      	ldr	r3, [pc, #224]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003e2:	617b      	str	r3, [r7, #20]
 80003e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e6:	4b35      	ldr	r3, [pc, #212]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a34      	ldr	r2, [pc, #208]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003f0:	6153      	str	r3, [r2, #20]
 80003f2:	4b32      	ldr	r3, [pc, #200]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003fa:	613b      	str	r3, [r7, #16]
 80003fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fe:	4b2f      	ldr	r3, [pc, #188]	; (80004bc <HAL_ADC_MspInit+0x128>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a2e      	ldr	r2, [pc, #184]	; (80004bc <HAL_ADC_MspInit+0x128>)
 8000404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000408:	6153      	str	r3, [r2, #20]
 800040a:	4b2c      	ldr	r3, [pc, #176]	; (80004bc <HAL_ADC_MspInit+0x128>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB11     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = pAIN_SUBDIV_Pin|pAIN_EXP_Pin|pAIN_TRIM_1_Pin|pAIN_TRIM_2_Pin;
 8000416:	230f      	movs	r3, #15
 8000418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800041a:	2303      	movs	r3, #3
 800041c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041e:	2300      	movs	r3, #0
 8000420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000422:	f107 031c 	add.w	r3, r7, #28
 8000426:	4619      	mov	r1, r3
 8000428:	4825      	ldr	r0, [pc, #148]	; (80004c0 <HAL_ADC_MspInit+0x12c>)
 800042a:	f003 fa47 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = pAIN_RATE_Pin|pAIN_DEPTH_Pin|pAIN_SHAPE_Pin|pAIN_OFFSET_Pin;
 800042e:	230f      	movs	r3, #15
 8000430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000432:	2303      	movs	r3, #3
 8000434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000436:	2300      	movs	r3, #0
 8000438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043a:	f107 031c 	add.w	r3, r7, #28
 800043e:	4619      	mov	r1, r3
 8000440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000444:	f003 fa3a 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = pAIN_VOL_Pin;
 8000448:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800044c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800044e:	2303      	movs	r3, #3
 8000450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000452:	2300      	movs	r3, #0
 8000454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(pAIN_VOL_GPIO_Port, &GPIO_InitStruct);
 8000456:	f107 031c 	add.w	r3, r7, #28
 800045a:	4619      	mov	r1, r3
 800045c:	4819      	ldr	r0, [pc, #100]	; (80004c4 <HAL_ADC_MspInit+0x130>)
 800045e:	f003 fa2d 	bl	80038bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000462:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 8000464:	4a19      	ldr	r2, [pc, #100]	; (80004cc <HAL_ADC_MspInit+0x138>)
 8000466:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000468:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 800046a:	2200      	movs	r2, #0
 800046c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800046e:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000474:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 8000476:	2280      	movs	r2, #128	; 0x80
 8000478:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800047a:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 800047c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000480:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000482:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 8000484:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000488:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 800048c:	2220      	movs	r2, #32
 800048e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000490:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 8000492:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000496:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000498:	480b      	ldr	r0, [pc, #44]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 800049a:	f002 ffe0 	bl	800345e <HAL_DMA_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 80004a4:	f000 fe78 	bl	8001198 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a07      	ldr	r2, [pc, #28]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 80004ac:	639a      	str	r2, [r3, #56]	; 0x38
 80004ae:	4a06      	ldr	r2, [pc, #24]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80004b4:	bf00      	nop
 80004b6:	3730      	adds	r7, #48	; 0x30
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40021000 	.word	0x40021000
 80004c0:	48000800 	.word	0x48000800
 80004c4:	48000400 	.word	0x48000400
 80004c8:	20000078 	.word	0x20000078
 80004cc:	40020008 	.word	0x40020008

080004d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d6:	4b26      	ldr	r3, [pc, #152]	; (8000570 <MX_DMA_Init+0xa0>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a25      	ldr	r2, [pc, #148]	; (8000570 <MX_DMA_Init+0xa0>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	4b23      	ldr	r3, [pc, #140]	; (8000570 <MX_DMA_Init+0xa0>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004ee:	4b20      	ldr	r3, [pc, #128]	; (8000570 <MX_DMA_Init+0xa0>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a1f      	ldr	r2, [pc, #124]	; (8000570 <MX_DMA_Init+0xa0>)
 80004f4:	f043 0302 	orr.w	r3, r3, #2
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <MX_DMA_Init+0xa0>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f003 0302 	and.w	r3, r3, #2
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 4, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2104      	movs	r1, #4
 800050a:	200b      	movs	r0, #11
 800050c:	f002 ff71 	bl	80033f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000510:	200b      	movs	r0, #11
 8000512:	f002 ff8a 	bl	800342a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 4, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	2104      	movs	r1, #4
 800051a:	200e      	movs	r0, #14
 800051c:	f002 ff69 	bl	80033f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000520:	200e      	movs	r0, #14
 8000522:	f002 ff82 	bl	800342a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2100      	movs	r1, #0
 800052a:	2038      	movs	r0, #56	; 0x38
 800052c:	f002 ff61 	bl	80033f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000530:	2038      	movs	r0, #56	; 0x38
 8000532:	f002 ff7a 	bl	800342a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2100      	movs	r1, #0
 800053a:	2039      	movs	r0, #57	; 0x39
 800053c:	f002 ff59 	bl	80033f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000540:	2039      	movs	r0, #57	; 0x39
 8000542:	f002 ff72 	bl	800342a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	203a      	movs	r0, #58	; 0x3a
 800054c:	f002 ff51 	bl	80033f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000550:	203a      	movs	r0, #58	; 0x3a
 8000552:	f002 ff6a 	bl	800342a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2100      	movs	r1, #0
 800055a:	203c      	movs	r0, #60	; 0x3c
 800055c:	f002 ff49 	bl	80033f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000560:	203c      	movs	r0, #60	; 0x3c
 8000562:	f002 ff62 	bl	800342a <HAL_NVIC_EnableIRQ>

}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000

08000574 <MX_GPIO_Init>:
        * EXTI
     PC0   ------> ADCx_IN6
     PC1   ------> ADCx_IN7
*/
void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058a:	4b66      	ldr	r3, [pc, #408]	; (8000724 <MX_GPIO_Init+0x1b0>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	4a65      	ldr	r2, [pc, #404]	; (8000724 <MX_GPIO_Init+0x1b0>)
 8000590:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000594:	6153      	str	r3, [r2, #20]
 8000596:	4b63      	ldr	r3, [pc, #396]	; (8000724 <MX_GPIO_Init+0x1b0>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005a2:	4b60      	ldr	r3, [pc, #384]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	4a5f      	ldr	r2, [pc, #380]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005ac:	6153      	str	r3, [r2, #20]
 80005ae:	4b5d      	ldr	r3, [pc, #372]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b5a      	ldr	r3, [pc, #360]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a59      	ldr	r2, [pc, #356]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c4:	6153      	str	r3, [r2, #20]
 80005c6:	4b57      	ldr	r3, [pc, #348]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	4b54      	ldr	r3, [pc, #336]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4a53      	ldr	r2, [pc, #332]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005dc:	6153      	str	r3, [r2, #20]
 80005de:	4b51      	ldr	r3, [pc, #324]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ea:	4b4e      	ldr	r3, [pc, #312]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a4d      	ldr	r2, [pc, #308]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f4:	6153      	str	r3, [r2, #20]
 80005f6:	4b4b      	ldr	r3, [pc, #300]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, pDOUT_MUTE_1_Pin|pDOUT_MUTE_2_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000608:	4847      	ldr	r0, [pc, #284]	; (8000728 <MX_GPIO_Init+0x1b4>)
 800060a:	f003 faf9 	bl	8003c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pDOUT_RLY_SET_GPIO_Port, pDOUT_RLY_SET_Pin, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000618:	f003 faf2 	bl	8003c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pDOUT_LED1_B_GPIO_Port, pDOUT_LED1_B_Pin, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000622:	4841      	ldr	r0, [pc, #260]	; (8000728 <MX_GPIO_Init+0x1b4>)
 8000624:	f003 faec 	bl	8003c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pDOUT_LED1_G_GPIO_Port, pDOUT_LED1_G_Pin, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2104      	movs	r1, #4
 800062c:	483f      	ldr	r0, [pc, #252]	; (800072c <MX_GPIO_Init+0x1b8>)
 800062e:	f003 fae7 	bl	8003c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, pDOUT_LED1_R_Pin|pDOUT_LED2_B_Pin|pDOUT_LED2_G_Pin|pDOUT_LED2_R_Pin, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	21f0      	movs	r1, #240	; 0xf0
 8000636:	483e      	ldr	r0, [pc, #248]	; (8000730 <MX_GPIO_Init+0x1bc>)
 8000638:	f003 fae2 	bl	8003c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = pDOUT_MUTE_1_Pin|pDOUT_MUTE_2_Pin|pDOUT_LED1_B_Pin;
 800063c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	4834      	ldr	r0, [pc, #208]	; (8000728 <MX_GPIO_Init+0x1b4>)
 8000656:	f003 f931 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = pAIN_SUBDIV_Pin|pAIN_EXP_Pin;
 800065a:	2303      	movs	r3, #3
 800065c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800065e:	2303      	movs	r3, #3
 8000660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	482e      	ldr	r0, [pc, #184]	; (8000728 <MX_GPIO_Init+0x1b4>)
 800066e:	f003 f925 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = pDIN_PAN_MODE_1_Pin|pDIN_EXP_Pin|pDIN_DIP_4_Pin;
 8000672:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800067c:	2301      	movs	r3, #1
 800067e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4619      	mov	r1, r3
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f003 f917 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = pDIN_DIP_1_Pin|pDIN_DIP_2_Pin|pDIN_DIP_3_Pin|pDIN_HARM_MODE_2_Pin
 800068e:	f247 6307 	movw	r3, #30215	; 0x7607
 8000692:	617b      	str	r3, [r7, #20]
                          |pDIN_PAN_MODE_2_Pin|pDIN_ENV_MODE_1_Pin|pDIN_ENV_MODE_2_Pin|pDIN_HARM_MODE_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000698:	2301      	movs	r3, #1
 800069a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	4823      	ldr	r0, [pc, #140]	; (8000730 <MX_GPIO_Init+0x1bc>)
 80006a4:	f003 f90a 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = pDOUT_RLY_SET_Pin;
 80006a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(pDOUT_RLY_SET_GPIO_Port, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f003 f8fa 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = pDIN_JACK_SW_1_Pin|pDIN_JACK_SW_2_Pin;
 80006c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d2:	2301      	movs	r3, #1
 80006d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	4812      	ldr	r0, [pc, #72]	; (8000728 <MX_GPIO_Init+0x1b4>)
 80006de:	f003 f8ed 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = pDOUT_LED1_G_Pin;
 80006e2:	2304      	movs	r3, #4
 80006e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	2300      	movs	r3, #0
 80006f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(pDOUT_LED1_G_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <MX_GPIO_Init+0x1b8>)
 80006fa:	f003 f8df 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = pDOUT_LED1_R_Pin|pDOUT_LED2_B_Pin|pDOUT_LED2_G_Pin|pDOUT_LED2_R_Pin;
 80006fe:	23f0      	movs	r3, #240	; 0xf0
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	2301      	movs	r3, #1
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2300      	movs	r3, #0
 800070c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4619      	mov	r1, r3
 8000714:	4806      	ldr	r0, [pc, #24]	; (8000730 <MX_GPIO_Init+0x1bc>)
 8000716:	f003 f8d1 	bl	80038bc <HAL_GPIO_Init>

}
 800071a:	bf00      	nop
 800071c:	3728      	adds	r7, #40	; 0x28
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000
 8000728:	48000800 	.word	0x48000800
 800072c:	48000c00 	.word	0x48000c00
 8000730:	48000400 	.word	0x48000400

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b08d      	sub	sp, #52	; 0x34
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073a:	f001 fcbd 	bl	80020b8 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* Iniitalize state machines */
  StateBypassSw state_bypass_sw = STATE_IDLE;
 800073e:	2300      	movs	r3, #0
 8000740:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  StateEffect state_effect = STATE_BYPASS;
 8000744:	2301      	movs	r3, #1
 8000746:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  StateRelayMute state_relay_mute = STATE_BYPASS_UNMUTE;
 800074a:	2302      	movs	r3, #2
 800074c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  StatePhase state_phase = STATE_STD;
 8000750:	2300      	movs	r3, #0
 8000752:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  //StatePhase state_phase = STATE_MONO;
  //StateHarm state_harm = STATE_STANDARD;

  init_LEDs(&LED_bypass, &LED_tap);
 8000756:	4997      	ldr	r1, [pc, #604]	; (80009b4 <main+0x280>)
 8000758:	4897      	ldr	r0, [pc, #604]	; (80009b8 <main+0x284>)
 800075a:	f000 f9f3 	bl	8000b44 <init_LEDs>

  Adc adc_raw;
  init_adc_channels(&adc_raw, adc_array);
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	4996      	ldr	r1, [pc, #600]	; (80009bc <main+0x288>)
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f9b8 	bl	8000ad8 <init_adc_channels>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000768:	f000 f94a 	bl	8000a00 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  // Needs to be done first to fix bug in autogenerated code X_X
  MX_DMA_Init();
 800076c:	f7ff feb0 	bl	80004d0 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000770:	f7ff ff00 	bl	8000574 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000774:	f7ff fd2e 	bl	80001d4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000778:	f000 fdfc 	bl	8001374 <MX_TIM2_Init>
  MX_TIM3_Init();
 800077c:	f000 fe7c 	bl	8001478 <MX_TIM3_Init>
  MX_DMA_Init();
 8000780:	f7ff fea6 	bl	80004d0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000784:	f001 fa60 	bl	8001c48 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000788:	f000 fef2 	bl	8001570 <MX_TIM4_Init>
  MX_TIM8_Init();
 800078c:	f000 ff5c 	bl	8001648 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  // TODO clean up and move to function
  if (HAL_ADC_Start_DMA(&hadc1, adc_array,
 8000790:	2209      	movs	r2, #9
 8000792:	498a      	ldr	r1, [pc, #552]	; (80009bc <main+0x288>)
 8000794:	488a      	ldr	r0, [pc, #552]	; (80009c0 <main+0x28c>)
 8000796:	f001 ff27 	bl	80025e8 <HAL_ADC_Start_DMA>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <main+0x70>
		  ADC_DMA_BUF_LENGTH) != HAL_OK)
  {
	  Error_Handler();
 80007a0:	f000 fcfa 	bl	8001198 <Error_Handler>
  }

  // Start PWM for Volume outputs
  if ((HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) |
 80007a4:	2100      	movs	r1, #0
 80007a6:	4887      	ldr	r0, [pc, #540]	; (80009c4 <main+0x290>)
 80007a8:	f005 f916 	bl	80059d8 <HAL_TIM_PWM_Start>
 80007ac:	4603      	mov	r3, r0
 80007ae:	461c      	mov	r4, r3
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2)) != HAL_OK)
 80007b0:	2104      	movs	r1, #4
 80007b2:	4884      	ldr	r0, [pc, #528]	; (80009c4 <main+0x290>)
 80007b4:	f005 f910 	bl	80059d8 <HAL_TIM_PWM_Start>
 80007b8:	4603      	mov	r3, r0
 80007ba:	4323      	orrs	r3, r4
 80007bc:	b2db      	uxtb	r3, r3
  if ((HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) |
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <main+0x92>
  {
	  Error_Handler();
 80007c2:	f000 fce9 	bl	8001198 <Error_Handler>
  }



  // Start PWM output for PWM timers (the ones that actually output the LFOs)
  if ((HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) |
 80007c6:	2100      	movs	r1, #0
 80007c8:	487f      	ldr	r0, [pc, #508]	; (80009c8 <main+0x294>)
 80007ca:	f005 f905 	bl	80059d8 <HAL_TIM_PWM_Start>
 80007ce:	4603      	mov	r3, r0
 80007d0:	461c      	mov	r4, r3
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) |
 80007d2:	2104      	movs	r1, #4
 80007d4:	487c      	ldr	r0, [pc, #496]	; (80009c8 <main+0x294>)
 80007d6:	f005 f8ff 	bl	80059d8 <HAL_TIM_PWM_Start>
 80007da:	4603      	mov	r3, r0
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) |
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4)) != HAL_OK)
 80007dc:	4323      	orrs	r3, r4
 80007de:	b2dc      	uxtb	r4, r3
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) |
 80007e0:	2108      	movs	r1, #8
 80007e2:	4879      	ldr	r0, [pc, #484]	; (80009c8 <main+0x294>)
 80007e4:	f005 f8f8 	bl	80059d8 <HAL_TIM_PWM_Start>
 80007e8:	4603      	mov	r3, r0
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4)) != HAL_OK)
 80007ea:	4323      	orrs	r3, r4
 80007ec:	b2dc      	uxtb	r4, r3
 80007ee:	210c      	movs	r1, #12
 80007f0:	4875      	ldr	r0, [pc, #468]	; (80009c8 <main+0x294>)
 80007f2:	f005 f8f1 	bl	80059d8 <HAL_TIM_PWM_Start>
 80007f6:	4603      	mov	r3, r0
 80007f8:	4323      	orrs	r3, r4
 80007fa:	b2db      	uxtb	r3, r3
  if ((HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) |
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <main+0xd0>
  {
	  Error_Handler();
 8000800:	f000 fcca 	bl	8001198 <Error_Handler>
  }

  // Link Transfer complete callback to DMA handle:
  hdma_tim8_ch1.XferCpltCallback = My_DMA_XferCpltCallback;
 8000804:	4b71      	ldr	r3, [pc, #452]	; (80009cc <main+0x298>)
 8000806:	4a72      	ldr	r2, [pc, #456]	; (80009d0 <main+0x29c>)
 8000808:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_tim8_ch1.XferHalfCpltCallback = My_DMA_XferHalfCpltCallback;
 800080a:	4b70      	ldr	r3, [pc, #448]	; (80009cc <main+0x298>)
 800080c:	4a71      	ldr	r2, [pc, #452]	; (80009d4 <main+0x2a0>)
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_tim8_ch2.XferCpltCallback = My_DMA_XferCpltCallback;
 8000810:	4b71      	ldr	r3, [pc, #452]	; (80009d8 <main+0x2a4>)
 8000812:	4a6f      	ldr	r2, [pc, #444]	; (80009d0 <main+0x29c>)
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_tim8_ch2.XferHalfCpltCallback = My_DMA_XferHalfCpltCallback;
 8000816:	4b70      	ldr	r3, [pc, #448]	; (80009d8 <main+0x2a4>)
 8000818:	4a6e      	ldr	r2, [pc, #440]	; (80009d4 <main+0x2a0>)
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_tim8_ch3_up.XferCpltCallback = My_DMA_XferCpltCallback;
 800081c:	4b6f      	ldr	r3, [pc, #444]	; (80009dc <main+0x2a8>)
 800081e:	4a6c      	ldr	r2, [pc, #432]	; (80009d0 <main+0x29c>)
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_tim8_ch3_up.XferHalfCpltCallback = My_DMA_XferHalfCpltCallback;
 8000822:	4b6e      	ldr	r3, [pc, #440]	; (80009dc <main+0x2a8>)
 8000824:	4a6b      	ldr	r2, [pc, #428]	; (80009d4 <main+0x2a0>)
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_tim8_ch4_trig_com.XferCpltCallback = My_DMA_XferCpltCallback;
 8000828:	4b6d      	ldr	r3, [pc, #436]	; (80009e0 <main+0x2ac>)
 800082a:	4a69      	ldr	r2, [pc, #420]	; (80009d0 <main+0x29c>)
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_tim8_ch4_trig_com.XferHalfCpltCallback = My_DMA_XferHalfCpltCallback;
 800082e:	4b6c      	ldr	r3, [pc, #432]	; (80009e0 <main+0x2ac>)
 8000830:	4a68      	ldr	r2, [pc, #416]	; (80009d4 <main+0x2a0>)
 8000832:	62da      	str	r2, [r3, #44]	; 0x2c

  // First just setting all 4 channels synced to same wavetable
  // TODO figure out best way to have different phases per channel
  __HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 8000834:	4b6b      	ldr	r3, [pc, #428]	; (80009e4 <main+0x2b0>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	68da      	ldr	r2, [r3, #12]
 800083a:	4b6a      	ldr	r3, [pc, #424]	; (80009e4 <main+0x2b0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000842:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 8000844:	4b67      	ldr	r3, [pc, #412]	; (80009e4 <main+0x2b0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	68da      	ldr	r2, [r3, #12]
 800084a:	4b66      	ldr	r3, [pc, #408]	; (80009e4 <main+0x2b0>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000852:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 8000854:	4b63      	ldr	r3, [pc, #396]	; (80009e4 <main+0x2b0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	68da      	ldr	r2, [r3, #12]
 800085a:	4b62      	ldr	r3, [pc, #392]	; (80009e4 <main+0x2b0>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000862:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC4);
 8000864:	4b5f      	ldr	r3, [pc, #380]	; (80009e4 <main+0x2b0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	68da      	ldr	r2, [r3, #12]
 800086a:	4b5e      	ldr	r3, [pc, #376]	; (80009e4 <main+0x2b0>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000872:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(&hdma_tim8_ch1, DMA_IT_HT);
 8000874:	4b55      	ldr	r3, [pc, #340]	; (80009cc <main+0x298>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	4b54      	ldr	r3, [pc, #336]	; (80009cc <main+0x298>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f042 0204 	orr.w	r2, r2, #4
 8000882:	601a      	str	r2, [r3, #0]
  __HAL_DMA_ENABLE_IT(&hdma_tim8_ch2, DMA_IT_HT);
 8000884:	4b54      	ldr	r3, [pc, #336]	; (80009d8 <main+0x2a4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	4b53      	ldr	r3, [pc, #332]	; (80009d8 <main+0x2a4>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f042 0204 	orr.w	r2, r2, #4
 8000892:	601a      	str	r2, [r3, #0]
  __HAL_DMA_ENABLE_IT(&hdma_tim8_ch3_up, DMA_IT_HT);
 8000894:	4b51      	ldr	r3, [pc, #324]	; (80009dc <main+0x2a8>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	4b50      	ldr	r3, [pc, #320]	; (80009dc <main+0x2a8>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f042 0204 	orr.w	r2, r2, #4
 80008a2:	601a      	str	r2, [r3, #0]
  __HAL_DMA_ENABLE_IT(&hdma_tim8_ch4_trig_com, DMA_IT_HT);
 80008a4:	4b4e      	ldr	r3, [pc, #312]	; (80009e0 <main+0x2ac>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	4b4d      	ldr	r3, [pc, #308]	; (80009e0 <main+0x2ac>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f042 0204 	orr.w	r2, r2, #4
 80008b2:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim8_ch1, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR1), WAVETABLE_WIDTH);
 80008b4:	494c      	ldr	r1, [pc, #304]	; (80009e8 <main+0x2b4>)
 80008b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ba:	4a4c      	ldr	r2, [pc, #304]	; (80009ec <main+0x2b8>)
 80008bc:	4843      	ldr	r0, [pc, #268]	; (80009cc <main+0x298>)
 80008be:	f002 fe57 	bl	8003570 <HAL_DMA_Start_IT>
  HAL_DMA_Start_IT(&hdma_tim8_ch2, (uint32_t)dma_wavetable_b, (uint32_t)&(TIM3->CCR2), WAVETABLE_WIDTH);
 80008c2:	494b      	ldr	r1, [pc, #300]	; (80009f0 <main+0x2bc>)
 80008c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c8:	4a4a      	ldr	r2, [pc, #296]	; (80009f4 <main+0x2c0>)
 80008ca:	4843      	ldr	r0, [pc, #268]	; (80009d8 <main+0x2a4>)
 80008cc:	f002 fe50 	bl	8003570 <HAL_DMA_Start_IT>
  HAL_DMA_Start_IT(&hdma_tim8_ch3_up, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR3), WAVETABLE_WIDTH);
 80008d0:	4945      	ldr	r1, [pc, #276]	; (80009e8 <main+0x2b4>)
 80008d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d6:	4a48      	ldr	r2, [pc, #288]	; (80009f8 <main+0x2c4>)
 80008d8:	4840      	ldr	r0, [pc, #256]	; (80009dc <main+0x2a8>)
 80008da:	f002 fe49 	bl	8003570 <HAL_DMA_Start_IT>
  HAL_DMA_Start_IT(&hdma_tim8_ch4_trig_com, (uint32_t)dma_wavetable_b, (uint32_t)&(TIM3->CCR4), WAVETABLE_WIDTH);
 80008de:	4944      	ldr	r1, [pc, #272]	; (80009f0 <main+0x2bc>)
 80008e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e4:	4a45      	ldr	r2, [pc, #276]	; (80009fc <main+0x2c8>)
 80008e6:	483e      	ldr	r0, [pc, #248]	; (80009e0 <main+0x2ac>)
 80008e8:	f002 fe42 	bl	8003570 <HAL_DMA_Start_IT>

  // Start output compare for waveform timers (to update the wavetables)
  if ((HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_1) |
 80008ec:	2100      	movs	r1, #0
 80008ee:	483d      	ldr	r0, [pc, #244]	; (80009e4 <main+0x2b0>)
 80008f0:	f004 ff0e 	bl	8005710 <HAL_TIM_OC_Start>
 80008f4:	4603      	mov	r3, r0
 80008f6:	461c      	mov	r4, r3
	  HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_2) |
 80008f8:	2104      	movs	r1, #4
 80008fa:	483a      	ldr	r0, [pc, #232]	; (80009e4 <main+0x2b0>)
 80008fc:	f004 ff08 	bl	8005710 <HAL_TIM_OC_Start>
 8000900:	4603      	mov	r3, r0
	  HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_3) |
	  HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_4)) != HAL_OK)
 8000902:	4323      	orrs	r3, r4
 8000904:	b2dc      	uxtb	r4, r3
	  HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_3) |
 8000906:	2108      	movs	r1, #8
 8000908:	4836      	ldr	r0, [pc, #216]	; (80009e4 <main+0x2b0>)
 800090a:	f004 ff01 	bl	8005710 <HAL_TIM_OC_Start>
 800090e:	4603      	mov	r3, r0
	  HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_4)) != HAL_OK)
 8000910:	4323      	orrs	r3, r4
 8000912:	b2dc      	uxtb	r4, r3
 8000914:	210c      	movs	r1, #12
 8000916:	4833      	ldr	r0, [pc, #204]	; (80009e4 <main+0x2b0>)
 8000918:	f004 fefa 	bl	8005710 <HAL_TIM_OC_Start>
 800091c:	4603      	mov	r3, r0
 800091e:	4323      	orrs	r3, r4
 8000920:	b2db      	uxtb	r3, r3
  if ((HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_1) |
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <main+0x1f6>
  {
	  Error_Handler();
 8000926:	f000 fc37 	bl	8001198 <Error_Handler>
  {
	  // Toggle heartbeat LED
	  //led_toggle_tick(HEARTBEAT_MS, pDOUT_LED1_R_GPIO_Port, pDOUT_LED1_R_Pin);

	  // Check for bypass switch state and run state machine
	  EventBypassSw event_bypass_sw = EVENT_RELEASED;
 800092a:	2301      	movs	r3, #1
 800092c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  if (!HAL_GPIO_ReadPin(pDIN_BYP_GPIO_Port, pDIN_BYP_Pin)){
 8000930:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000938:	f003 f94a 	bl	8003bd0 <HAL_GPIO_ReadPin>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d102      	bne.n	8000948 <main+0x214>
		  event_bypass_sw = EVENT_PRESSED;
 8000942:	2300      	movs	r3, #0
 8000944:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  }
	  sm_bypass_sw(&state_bypass_sw, event_bypass_sw, &state_effect);
 8000948:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800094c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8000950:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000954:	4618      	mov	r0, r3
 8000956:	f001 fa81 	bl	8001e5c <sm_bypass_sw>

	  EventRelayMute event_relay_mute = EVENT_BYPASS;
 800095a:	2301      	movs	r3, #1
 800095c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  if (state_effect == STATE_EFFECT){
 8000960:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000964:	2b00      	cmp	r3, #0
 8000966:	d102      	bne.n	800096e <main+0x23a>
		  event_relay_mute = EVENT_EFFECT;
 8000968:	2300      	movs	r3, #0
 800096a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  }

	  sm_relay_mute(&state_relay_mute, event_relay_mute, &LED_bypass);
 800096e:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8000972:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8000976:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <main+0x284>)
 8000978:	4618      	mov	r0, r3
 800097a:	f001 faf7 	bl	8001f6c <sm_relay_mute>

	  // Generate new triangle wave based on latest depth input
	  generate_triangle_wave_floatingpoint(*adc_raw.Depth, *adc_raw.Offset);
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4619      	mov	r1, r3
 8000988:	4610      	mov	r0, r2
 800098a:	f000 fb25 	bl	8000fd8 <generate_triangle_wave_floatingpoint>

	  // Set parameters based on control inputs
	  set_rate(*adc_raw.Rate);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	b29b      	uxth	r3, r3
 8000994:	4618      	mov	r0, r3
 8000996:	f000 faed 	bl	8000f74 <set_rate>
	  set_volume(*adc_raw.Vol);
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 faab 	bl	8000efc <set_volume>
	  set_phase(&state_phase, &LED_tap);
 80009a6:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80009aa:	4902      	ldr	r1, [pc, #8]	; (80009b4 <main+0x280>)
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 f90d 	bl	8000bcc <set_phase>
  {
 80009b2:	e7ba      	b.n	800092a <main+0x1f6>
 80009b4:	200000d8 	.word	0x200000d8
 80009b8:	200000bc 	.word	0x200000bc
 80009bc:	200000f4 	.word	0x200000f4
 80009c0:	20000028 	.word	0x20000028
 80009c4:	20001118 	.word	0x20001118
 80009c8:	20001164 	.word	0x20001164
 80009cc:	2000128c 	.word	0x2000128c
 80009d0:	0800117d 	.word	0x0800117d
 80009d4:	08001161 	.word	0x08001161
 80009d8:	200012d0 	.word	0x200012d0
 80009dc:	20001314 	.word	0x20001314
 80009e0:	20001358 	.word	0x20001358
 80009e4:	200011fc 	.word	0x200011fc
 80009e8:	20000118 	.word	0x20000118
 80009ec:	40000434 	.word	0x40000434
 80009f0:	20000918 	.word	0x20000918
 80009f4:	40000438 	.word	0x40000438
 80009f8:	4000043c 	.word	0x4000043c
 80009fc:	40000440 	.word	0x40000440

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b0a6      	sub	sp, #152	; 0x98
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a0a:	2228      	movs	r2, #40	; 0x28
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f007 f830 	bl	8007a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2258      	movs	r2, #88	; 0x58
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f007 f822 	bl	8007a74 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a30:	2301      	movs	r3, #1
 8000a32:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a38:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000a4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000a50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f003 f900 	bl	8003c64 <HAL_RCC_OscConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a6a:	f000 fb95 	bl	8001198 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6e:	230f      	movs	r3, #15
 8000a70:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a72:	2302      	movs	r3, #2
 8000a74:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a82:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a86:	2101      	movs	r1, #1
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f004 f93f 	bl	8004d0c <HAL_RCC_ClockConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a94:	f000 fb80 	bl	8001198 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM8
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <SystemClock_Config+0xd4>)
 8000a9a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV8;
 8000aa0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_PLLCLK;
 8000aa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aaa:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_PLLCLK;
 8000aac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_PLLCLK;
 8000ab2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ab6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	4618      	mov	r0, r3
 8000abc:	f004 fb5c 	bl	8005178 <HAL_RCCEx_PeriphCLKConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ac6:	f000 fb67 	bl	8001198 <Error_Handler>
  }
}
 8000aca:	bf00      	nop
 8000acc:	3798      	adds	r7, #152	; 0x98
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	00302081 	.word	0x00302081

08000ad8 <init_adc_channels>:

/* USER CODE BEGIN 4 */

// This maps named Adc struct members to the DMA buffer for convenience
void init_adc_channels(Adc *adc, uint32_t adc_buffer[]){
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
	adc->Rate = &adc_buffer[0];
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	683a      	ldr	r2, [r7, #0]
 8000ae6:	601a      	str	r2, [r3, #0]
	adc->Depth = &adc_buffer[1];
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	1d1a      	adds	r2, r3, #4
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	605a      	str	r2, [r3, #4]
	adc->Shape = &adc_buffer[2];
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	f103 0208 	add.w	r2, r3, #8
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	609a      	str	r2, [r3, #8]
	adc->Offset = &adc_buffer[3];
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	f103 020c 	add.w	r2, r3, #12
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	60da      	str	r2, [r3, #12]
	adc->Subdiv = &adc_buffer[4];
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	f103 0210 	add.w	r2, r3, #16
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	611a      	str	r2, [r3, #16]
	adc->Exp = &adc_buffer[5];
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	f103 0214 	add.w	r2, r3, #20
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	615a      	str	r2, [r3, #20]
	adc->Trim1 = &adc_buffer[6];
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	f103 0218 	add.w	r2, r3, #24
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	619a      	str	r2, [r3, #24]
	adc->Trim2 = &adc_buffer[7];
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	f103 021c 	add.w	r2, r3, #28
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	61da      	str	r2, [r3, #28]
	adc->Vol = &adc_buffer[8];
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	f103 0220 	add.w	r2, r3, #32
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	621a      	str	r2, [r3, #32]
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
	...

08000b44 <init_LEDs>:

// Initialize LEDs with GPIO ports/pins, and set default states
void init_LEDs(LED* LED_bypass, LED* LED_tap){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
	LED_tap->PortRed = pDOUT_LED1_R_GPIO_Port;
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	4a1b      	ldr	r2, [pc, #108]	; (8000bc0 <init_LEDs+0x7c>)
 8000b52:	605a      	str	r2, [r3, #4]
	LED_tap->PinRed = pDOUT_LED1_R_Pin;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	2210      	movs	r2, #16
 8000b58:	811a      	strh	r2, [r3, #8]
	LED_tap->PortGreen = pDOUT_LED1_G_GPIO_Port;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <init_LEDs+0x80>)
 8000b5e:	60da      	str	r2, [r3, #12]
	LED_tap->PinGreen = pDOUT_LED1_G_Pin;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	2204      	movs	r2, #4
 8000b64:	821a      	strh	r2, [r3, #16]
	LED_tap->PortBlue = pDOUT_LED1_B_GPIO_Port;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <init_LEDs+0x84>)
 8000b6a:	615a      	str	r2, [r3, #20]
	LED_tap->PinBlue = pDOUT_LED1_B_Pin;
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b72:	831a      	strh	r2, [r3, #24]

	LED_bypass->PortRed = pDOUT_LED2_R_GPIO_Port;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <init_LEDs+0x7c>)
 8000b78:	605a      	str	r2, [r3, #4]
	LED_bypass->PinRed = pDOUT_LED2_R_Pin;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2280      	movs	r2, #128	; 0x80
 8000b7e:	811a      	strh	r2, [r3, #8]
	LED_bypass->PortGreen = pDOUT_LED2_G_GPIO_Port;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a0f      	ldr	r2, [pc, #60]	; (8000bc0 <init_LEDs+0x7c>)
 8000b84:	60da      	str	r2, [r3, #12]
	LED_bypass->PinGreen = pDOUT_LED2_G_Pin;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2240      	movs	r2, #64	; 0x40
 8000b8a:	821a      	strh	r2, [r3, #16]
	LED_bypass->PortBlue = pDOUT_LED2_B_GPIO_Port;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a0c      	ldr	r2, [pc, #48]	; (8000bc0 <init_LEDs+0x7c>)
 8000b90:	615a      	str	r2, [r3, #20]
	LED_bypass->PinBlue = pDOUT_LED2_B_Pin;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2220      	movs	r2, #32
 8000b96:	831a      	strh	r2, [r3, #24]

	set_LED_color(LED_tap, GREEN);
 8000b98:	2101      	movs	r1, #1
 8000b9a:	6838      	ldr	r0, [r7, #0]
 8000b9c:	f001 f8c8 	bl	8001d30 <set_LED_color>
	set_LED_color(LED_bypass, GREEN);
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f001 f8c4 	bl	8001d30 <set_LED_color>
	set_LED_state(LED_tap, OFF);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	6838      	ldr	r0, [r7, #0]
 8000bac:	f001 f8d5 	bl	8001d5a <set_LED_state>
	set_LED_state(LED_bypass, OFF);
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f001 f8d1 	bl	8001d5a <set_LED_state>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	48000400 	.word	0x48000400
 8000bc4:	48000c00 	.word	0x48000c00
 8000bc8:	48000800 	.word	0x48000800

08000bcc <set_phase>:

void set_phase(StatePhase* state, LED* LED_bypass){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
	  uint32_t ph_right = HAL_GPIO_ReadPin(pDIN_HARM_MODE_1_GPIO_Port,
 8000bd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bda:	4813      	ldr	r0, [pc, #76]	; (8000c28 <set_phase+0x5c>)
 8000bdc:	f002 fff8 	bl	8003bd0 <HAL_GPIO_ReadPin>
 8000be0:	4603      	mov	r3, r0
 8000be2:	60fb      	str	r3, [r7, #12]
			  pDIN_HARM_MODE_1_Pin);
	  uint32_t ph_left = HAL_GPIO_ReadPin(pDIN_HARM_MODE_2_GPIO_Port,
 8000be4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be8:	480f      	ldr	r0, [pc, #60]	; (8000c28 <set_phase+0x5c>)
 8000bea:	f002 fff1 	bl	8003bd0 <HAL_GPIO_ReadPin>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	60bb      	str	r3, [r7, #8]
			  pDIN_HARM_MODE_2_Pin);
	  if (!ph_left){sm_phase(state, EVENT_PAN, LED_bypass);}
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d105      	bne.n	8000c04 <set_phase+0x38>
 8000bf8:	683a      	ldr	r2, [r7, #0]
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f000 f815 	bl	8000c2c <sm_phase>
	  else if (!ph_right){sm_phase(state, EVENT_HARM, LED_bypass);}
	  else {sm_phase(state, EVENT_STD, LED_bypass);}
}
 8000c02:	e00d      	b.n	8000c20 <set_phase+0x54>
	  else if (!ph_right){sm_phase(state, EVENT_HARM, LED_bypass);}
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d105      	bne.n	8000c16 <set_phase+0x4a>
 8000c0a:	683a      	ldr	r2, [r7, #0]
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f000 f80c 	bl	8000c2c <sm_phase>
}
 8000c14:	e004      	b.n	8000c20 <set_phase+0x54>
	  else {sm_phase(state, EVENT_STD, LED_bypass);}
 8000c16:	683a      	ldr	r2, [r7, #0]
 8000c18:	2100      	movs	r1, #0
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 f806 	bl	8000c2c <sm_phase>
}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	48000400 	.word	0x48000400

08000c2c <sm_phase>:

// TODO this is a bad function.
// -> Maybe can simplify by using a struct to reduce states
void sm_phase(StatePhase* state, EventPhase event, LED* LED_bypass){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	460b      	mov	r3, r1
 8000c36:	607a      	str	r2, [r7, #4]
 8000c38:	72fb      	strb	r3, [r7, #11]
	switch (*state) {
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	f000 80d6 	beq.w	8000df0 <sm_phase+0x1c4>
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	f300 8139 	bgt.w	8000ebc <sm_phase+0x290>
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d002      	beq.n	8000c54 <sm_phase+0x28>
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d067      	beq.n	8000d22 <sm_phase+0xf6>
				set_LED_color(LED_bypass, GREEN);
			}
			break;

		default:
			break;
 8000c52:	e133      	b.n	8000ebc <sm_phase+0x290>
			if (event == EVENT_HARM){
 8000c54:	7afb      	ldrb	r3, [r7, #11]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d12f      	bne.n	8000cba <sm_phase+0x8e>
				*state = STATE_HARM;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	701a      	strb	r2, [r3, #0]
				HAL_DMA_Abort(&hdma_tim8_ch1);
 8000c60:	489c      	ldr	r0, [pc, #624]	; (8000ed4 <sm_phase+0x2a8>)
 8000c62:	f002 fce4 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch1, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR1), WAVETABLE_WIDTH);
 8000c66:	499c      	ldr	r1, [pc, #624]	; (8000ed8 <sm_phase+0x2ac>)
 8000c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6c:	4a9b      	ldr	r2, [pc, #620]	; (8000edc <sm_phase+0x2b0>)
 8000c6e:	4899      	ldr	r0, [pc, #612]	; (8000ed4 <sm_phase+0x2a8>)
 8000c70:	f002 fc7e 	bl	8003570 <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch2);
 8000c74:	489a      	ldr	r0, [pc, #616]	; (8000ee0 <sm_phase+0x2b4>)
 8000c76:	f002 fcda 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch2, (uint32_t)dma_wavetable_b, (uint32_t)&(TIM3->CCR2), WAVETABLE_WIDTH);
 8000c7a:	499a      	ldr	r1, [pc, #616]	; (8000ee4 <sm_phase+0x2b8>)
 8000c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c80:	4a99      	ldr	r2, [pc, #612]	; (8000ee8 <sm_phase+0x2bc>)
 8000c82:	4897      	ldr	r0, [pc, #604]	; (8000ee0 <sm_phase+0x2b4>)
 8000c84:	f002 fc74 	bl	8003570 <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch3_up);
 8000c88:	4898      	ldr	r0, [pc, #608]	; (8000eec <sm_phase+0x2c0>)
 8000c8a:	f002 fcd0 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch3_up, (uint32_t)dma_wavetable_b, (uint32_t)&(TIM3->CCR3), WAVETABLE_WIDTH);
 8000c8e:	4995      	ldr	r1, [pc, #596]	; (8000ee4 <sm_phase+0x2b8>)
 8000c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c94:	4a96      	ldr	r2, [pc, #600]	; (8000ef0 <sm_phase+0x2c4>)
 8000c96:	4895      	ldr	r0, [pc, #596]	; (8000eec <sm_phase+0x2c0>)
 8000c98:	f002 fc6a 	bl	8003570 <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
 8000c9c:	4895      	ldr	r0, [pc, #596]	; (8000ef4 <sm_phase+0x2c8>)
 8000c9e:	f002 fcc6 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch4_trig_com, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR4), WAVETABLE_WIDTH);
 8000ca2:	498d      	ldr	r1, [pc, #564]	; (8000ed8 <sm_phase+0x2ac>)
 8000ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca8:	4a93      	ldr	r2, [pc, #588]	; (8000ef8 <sm_phase+0x2cc>)
 8000caa:	4892      	ldr	r0, [pc, #584]	; (8000ef4 <sm_phase+0x2c8>)
 8000cac:	f002 fc60 	bl	8003570 <HAL_DMA_Start_IT>
				set_LED_color(LED_bypass, GREEN);
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f001 f83c 	bl	8001d30 <set_LED_color>
			break;
 8000cb8:	e102      	b.n	8000ec0 <sm_phase+0x294>
			else if (event == EVENT_PAN){
 8000cba:	7afb      	ldrb	r3, [r7, #11]
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	f040 80ff 	bne.w	8000ec0 <sm_phase+0x294>
				*state = STATE_PAN;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2202      	movs	r2, #2
 8000cc6:	701a      	strb	r2, [r3, #0]
				HAL_DMA_Abort(&hdma_tim8_ch1);
 8000cc8:	4882      	ldr	r0, [pc, #520]	; (8000ed4 <sm_phase+0x2a8>)
 8000cca:	f002 fcb0 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch1, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR1), WAVETABLE_WIDTH);
 8000cce:	4982      	ldr	r1, [pc, #520]	; (8000ed8 <sm_phase+0x2ac>)
 8000cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd4:	4a81      	ldr	r2, [pc, #516]	; (8000edc <sm_phase+0x2b0>)
 8000cd6:	487f      	ldr	r0, [pc, #508]	; (8000ed4 <sm_phase+0x2a8>)
 8000cd8:	f002 fc4a 	bl	8003570 <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch2);
 8000cdc:	4880      	ldr	r0, [pc, #512]	; (8000ee0 <sm_phase+0x2b4>)
 8000cde:	f002 fca6 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch2, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR2), WAVETABLE_WIDTH);
 8000ce2:	497d      	ldr	r1, [pc, #500]	; (8000ed8 <sm_phase+0x2ac>)
 8000ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce8:	4a7f      	ldr	r2, [pc, #508]	; (8000ee8 <sm_phase+0x2bc>)
 8000cea:	487d      	ldr	r0, [pc, #500]	; (8000ee0 <sm_phase+0x2b4>)
 8000cec:	f002 fc40 	bl	8003570 <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch3_up);
 8000cf0:	487e      	ldr	r0, [pc, #504]	; (8000eec <sm_phase+0x2c0>)
 8000cf2:	f002 fc9c 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch3_up, (uint32_t)dma_wavetable_b, (uint32_t)&(TIM3->CCR3), WAVETABLE_WIDTH);
 8000cf6:	497b      	ldr	r1, [pc, #492]	; (8000ee4 <sm_phase+0x2b8>)
 8000cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfc:	4a7c      	ldr	r2, [pc, #496]	; (8000ef0 <sm_phase+0x2c4>)
 8000cfe:	487b      	ldr	r0, [pc, #492]	; (8000eec <sm_phase+0x2c0>)
 8000d00:	f002 fc36 	bl	8003570 <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
 8000d04:	487b      	ldr	r0, [pc, #492]	; (8000ef4 <sm_phase+0x2c8>)
 8000d06:	f002 fc92 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch4_trig_com, (uint32_t)dma_wavetable_b, (uint32_t)&(TIM3->CCR4), WAVETABLE_WIDTH);
 8000d0a:	4976      	ldr	r1, [pc, #472]	; (8000ee4 <sm_phase+0x2b8>)
 8000d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d10:	4a79      	ldr	r2, [pc, #484]	; (8000ef8 <sm_phase+0x2cc>)
 8000d12:	4878      	ldr	r0, [pc, #480]	; (8000ef4 <sm_phase+0x2c8>)
 8000d14:	f002 fc2c 	bl	8003570 <HAL_DMA_Start_IT>
				set_LED_color(LED_bypass, BLUE);
 8000d18:	2102      	movs	r1, #2
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f001 f808 	bl	8001d30 <set_LED_color>
			break;
 8000d20:	e0ce      	b.n	8000ec0 <sm_phase+0x294>
			if (event == EVENT_STD){
 8000d22:	7afb      	ldrb	r3, [r7, #11]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d12f      	bne.n	8000d88 <sm_phase+0x15c>
				*state = STATE_STD;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
				HAL_DMA_Abort(&hdma_tim8_ch1);
 8000d2e:	4869      	ldr	r0, [pc, #420]	; (8000ed4 <sm_phase+0x2a8>)
 8000d30:	f002 fc7d 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch1, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR1), WAVETABLE_WIDTH);
 8000d34:	4968      	ldr	r1, [pc, #416]	; (8000ed8 <sm_phase+0x2ac>)
 8000d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d3a:	4a68      	ldr	r2, [pc, #416]	; (8000edc <sm_phase+0x2b0>)
 8000d3c:	4865      	ldr	r0, [pc, #404]	; (8000ed4 <sm_phase+0x2a8>)
 8000d3e:	f002 fc17 	bl	8003570 <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch2);
 8000d42:	4867      	ldr	r0, [pc, #412]	; (8000ee0 <sm_phase+0x2b4>)
 8000d44:	f002 fc73 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch2, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR2), WAVETABLE_WIDTH);
 8000d48:	4963      	ldr	r1, [pc, #396]	; (8000ed8 <sm_phase+0x2ac>)
 8000d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d4e:	4a66      	ldr	r2, [pc, #408]	; (8000ee8 <sm_phase+0x2bc>)
 8000d50:	4863      	ldr	r0, [pc, #396]	; (8000ee0 <sm_phase+0x2b4>)
 8000d52:	f002 fc0d 	bl	8003570 <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch3_up);
 8000d56:	4865      	ldr	r0, [pc, #404]	; (8000eec <sm_phase+0x2c0>)
 8000d58:	f002 fc69 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch3_up, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR3), WAVETABLE_WIDTH);
 8000d5c:	495e      	ldr	r1, [pc, #376]	; (8000ed8 <sm_phase+0x2ac>)
 8000d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d62:	4a63      	ldr	r2, [pc, #396]	; (8000ef0 <sm_phase+0x2c4>)
 8000d64:	4861      	ldr	r0, [pc, #388]	; (8000eec <sm_phase+0x2c0>)
 8000d66:	f002 fc03 	bl	8003570 <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
 8000d6a:	4862      	ldr	r0, [pc, #392]	; (8000ef4 <sm_phase+0x2c8>)
 8000d6c:	f002 fc5f 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch4_trig_com, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR4), WAVETABLE_WIDTH);
 8000d70:	4959      	ldr	r1, [pc, #356]	; (8000ed8 <sm_phase+0x2ac>)
 8000d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d76:	4a60      	ldr	r2, [pc, #384]	; (8000ef8 <sm_phase+0x2cc>)
 8000d78:	485e      	ldr	r0, [pc, #376]	; (8000ef4 <sm_phase+0x2c8>)
 8000d7a:	f002 fbf9 	bl	8003570 <HAL_DMA_Start_IT>
				set_LED_color(LED_bypass, RED);
 8000d7e:	2100      	movs	r1, #0
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f000 ffd5 	bl	8001d30 <set_LED_color>
			break;
 8000d86:	e09d      	b.n	8000ec4 <sm_phase+0x298>
			else if (event == EVENT_PAN){
 8000d88:	7afb      	ldrb	r3, [r7, #11]
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	f040 809a 	bne.w	8000ec4 <sm_phase+0x298>
				*state = STATE_PAN;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2202      	movs	r2, #2
 8000d94:	701a      	strb	r2, [r3, #0]
				HAL_DMA_Abort(&hdma_tim8_ch1);
 8000d96:	484f      	ldr	r0, [pc, #316]	; (8000ed4 <sm_phase+0x2a8>)
 8000d98:	f002 fc49 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start(&hdma_tim8_ch1, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR1), WAVETABLE_WIDTH);
 8000d9c:	494e      	ldr	r1, [pc, #312]	; (8000ed8 <sm_phase+0x2ac>)
 8000d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da2:	4a4e      	ldr	r2, [pc, #312]	; (8000edc <sm_phase+0x2b0>)
 8000da4:	484b      	ldr	r0, [pc, #300]	; (8000ed4 <sm_phase+0x2a8>)
 8000da6:	f002 fba1 	bl	80034ec <HAL_DMA_Start>
				HAL_DMA_Abort(&hdma_tim8_ch2);
 8000daa:	484d      	ldr	r0, [pc, #308]	; (8000ee0 <sm_phase+0x2b4>)
 8000dac:	f002 fc3f 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start(&hdma_tim8_ch2, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR2), WAVETABLE_WIDTH);
 8000db0:	4949      	ldr	r1, [pc, #292]	; (8000ed8 <sm_phase+0x2ac>)
 8000db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db6:	4a4c      	ldr	r2, [pc, #304]	; (8000ee8 <sm_phase+0x2bc>)
 8000db8:	4849      	ldr	r0, [pc, #292]	; (8000ee0 <sm_phase+0x2b4>)
 8000dba:	f002 fb97 	bl	80034ec <HAL_DMA_Start>
				HAL_DMA_Abort(&hdma_tim8_ch3_up);
 8000dbe:	484b      	ldr	r0, [pc, #300]	; (8000eec <sm_phase+0x2c0>)
 8000dc0:	f002 fc35 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start(&hdma_tim8_ch3_up, (uint32_t)dma_wavetable_b, (uint32_t)&(TIM3->CCR3), WAVETABLE_WIDTH);
 8000dc4:	4947      	ldr	r1, [pc, #284]	; (8000ee4 <sm_phase+0x2b8>)
 8000dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dca:	4a49      	ldr	r2, [pc, #292]	; (8000ef0 <sm_phase+0x2c4>)
 8000dcc:	4847      	ldr	r0, [pc, #284]	; (8000eec <sm_phase+0x2c0>)
 8000dce:	f002 fb8d 	bl	80034ec <HAL_DMA_Start>
				HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
 8000dd2:	4848      	ldr	r0, [pc, #288]	; (8000ef4 <sm_phase+0x2c8>)
 8000dd4:	f002 fc2b 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start(&hdma_tim8_ch4_trig_com, (uint32_t)dma_wavetable_b, (uint32_t)&(TIM3->CCR4), WAVETABLE_WIDTH);
 8000dd8:	4942      	ldr	r1, [pc, #264]	; (8000ee4 <sm_phase+0x2b8>)
 8000dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dde:	4a46      	ldr	r2, [pc, #280]	; (8000ef8 <sm_phase+0x2cc>)
 8000de0:	4844      	ldr	r0, [pc, #272]	; (8000ef4 <sm_phase+0x2c8>)
 8000de2:	f002 fb83 	bl	80034ec <HAL_DMA_Start>
				set_LED_color(LED_bypass, BLUE);
 8000de6:	2102      	movs	r1, #2
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f000 ffa1 	bl	8001d30 <set_LED_color>
			break;
 8000dee:	e069      	b.n	8000ec4 <sm_phase+0x298>
			if (event == EVENT_STD){
 8000df0:	7afb      	ldrb	r3, [r7, #11]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d12f      	bne.n	8000e56 <sm_phase+0x22a>
				*state = STATE_STD;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
				HAL_DMA_Abort(&hdma_tim8_ch1);
 8000dfc:	4835      	ldr	r0, [pc, #212]	; (8000ed4 <sm_phase+0x2a8>)
 8000dfe:	f002 fc16 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch1, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR1), WAVETABLE_WIDTH);
 8000e02:	4935      	ldr	r1, [pc, #212]	; (8000ed8 <sm_phase+0x2ac>)
 8000e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e08:	4a34      	ldr	r2, [pc, #208]	; (8000edc <sm_phase+0x2b0>)
 8000e0a:	4832      	ldr	r0, [pc, #200]	; (8000ed4 <sm_phase+0x2a8>)
 8000e0c:	f002 fbb0 	bl	8003570 <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch2);
 8000e10:	4833      	ldr	r0, [pc, #204]	; (8000ee0 <sm_phase+0x2b4>)
 8000e12:	f002 fc0c 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch2, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR2), WAVETABLE_WIDTH);
 8000e16:	4930      	ldr	r1, [pc, #192]	; (8000ed8 <sm_phase+0x2ac>)
 8000e18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e1c:	4a32      	ldr	r2, [pc, #200]	; (8000ee8 <sm_phase+0x2bc>)
 8000e1e:	4830      	ldr	r0, [pc, #192]	; (8000ee0 <sm_phase+0x2b4>)
 8000e20:	f002 fba6 	bl	8003570 <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch3_up);
 8000e24:	4831      	ldr	r0, [pc, #196]	; (8000eec <sm_phase+0x2c0>)
 8000e26:	f002 fc02 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch3_up, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR3), WAVETABLE_WIDTH);
 8000e2a:	492b      	ldr	r1, [pc, #172]	; (8000ed8 <sm_phase+0x2ac>)
 8000e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e30:	4a2f      	ldr	r2, [pc, #188]	; (8000ef0 <sm_phase+0x2c4>)
 8000e32:	482e      	ldr	r0, [pc, #184]	; (8000eec <sm_phase+0x2c0>)
 8000e34:	f002 fb9c 	bl	8003570 <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
 8000e38:	482e      	ldr	r0, [pc, #184]	; (8000ef4 <sm_phase+0x2c8>)
 8000e3a:	f002 fbf8 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch4_trig_com, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR4), WAVETABLE_WIDTH);
 8000e3e:	4926      	ldr	r1, [pc, #152]	; (8000ed8 <sm_phase+0x2ac>)
 8000e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e44:	4a2c      	ldr	r2, [pc, #176]	; (8000ef8 <sm_phase+0x2cc>)
 8000e46:	482b      	ldr	r0, [pc, #172]	; (8000ef4 <sm_phase+0x2c8>)
 8000e48:	f002 fb92 	bl	8003570 <HAL_DMA_Start_IT>
				set_LED_color(LED_bypass, RED);
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f000 ff6e 	bl	8001d30 <set_LED_color>
			break;
 8000e54:	e038      	b.n	8000ec8 <sm_phase+0x29c>
			else if (event == EVENT_HARM){
 8000e56:	7afb      	ldrb	r3, [r7, #11]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d135      	bne.n	8000ec8 <sm_phase+0x29c>
				*state = STATE_HARM;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
				HAL_DMA_Abort(&hdma_tim8_ch1);
 8000e62:	481c      	ldr	r0, [pc, #112]	; (8000ed4 <sm_phase+0x2a8>)
 8000e64:	f002 fbe3 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch1, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR1), WAVETABLE_WIDTH);
 8000e68:	491b      	ldr	r1, [pc, #108]	; (8000ed8 <sm_phase+0x2ac>)
 8000e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e6e:	4a1b      	ldr	r2, [pc, #108]	; (8000edc <sm_phase+0x2b0>)
 8000e70:	4818      	ldr	r0, [pc, #96]	; (8000ed4 <sm_phase+0x2a8>)
 8000e72:	f002 fb7d 	bl	8003570 <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch2);
 8000e76:	481a      	ldr	r0, [pc, #104]	; (8000ee0 <sm_phase+0x2b4>)
 8000e78:	f002 fbd9 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch2, (uint32_t)dma_wavetable_b, (uint32_t)&(TIM3->CCR2), WAVETABLE_WIDTH);
 8000e7c:	4919      	ldr	r1, [pc, #100]	; (8000ee4 <sm_phase+0x2b8>)
 8000e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e82:	4a19      	ldr	r2, [pc, #100]	; (8000ee8 <sm_phase+0x2bc>)
 8000e84:	4816      	ldr	r0, [pc, #88]	; (8000ee0 <sm_phase+0x2b4>)
 8000e86:	f002 fb73 	bl	8003570 <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch3_up);
 8000e8a:	4818      	ldr	r0, [pc, #96]	; (8000eec <sm_phase+0x2c0>)
 8000e8c:	f002 fbcf 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch3_up, (uint32_t)dma_wavetable_b, (uint32_t)&(TIM3->CCR3), WAVETABLE_WIDTH);
 8000e90:	4914      	ldr	r1, [pc, #80]	; (8000ee4 <sm_phase+0x2b8>)
 8000e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e96:	4a16      	ldr	r2, [pc, #88]	; (8000ef0 <sm_phase+0x2c4>)
 8000e98:	4814      	ldr	r0, [pc, #80]	; (8000eec <sm_phase+0x2c0>)
 8000e9a:	f002 fb69 	bl	8003570 <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
 8000e9e:	4815      	ldr	r0, [pc, #84]	; (8000ef4 <sm_phase+0x2c8>)
 8000ea0:	f002 fbc5 	bl	800362e <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch4_trig_com, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR4), WAVETABLE_WIDTH);
 8000ea4:	490c      	ldr	r1, [pc, #48]	; (8000ed8 <sm_phase+0x2ac>)
 8000ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eaa:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <sm_phase+0x2cc>)
 8000eac:	4811      	ldr	r0, [pc, #68]	; (8000ef4 <sm_phase+0x2c8>)
 8000eae:	f002 fb5f 	bl	8003570 <HAL_DMA_Start_IT>
				set_LED_color(LED_bypass, GREEN);
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 ff3b 	bl	8001d30 <set_LED_color>
			break;
 8000eba:	e005      	b.n	8000ec8 <sm_phase+0x29c>
			break;
 8000ebc:	bf00      	nop
 8000ebe:	e004      	b.n	8000eca <sm_phase+0x29e>
			break;
 8000ec0:	bf00      	nop
 8000ec2:	e002      	b.n	8000eca <sm_phase+0x29e>
			break;
 8000ec4:	bf00      	nop
 8000ec6:	e000      	b.n	8000eca <sm_phase+0x29e>
			break;
 8000ec8:	bf00      	nop
	}
}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000128c 	.word	0x2000128c
 8000ed8:	20000118 	.word	0x20000118
 8000edc:	40000434 	.word	0x40000434
 8000ee0:	200012d0 	.word	0x200012d0
 8000ee4:	20000918 	.word	0x20000918
 8000ee8:	40000438 	.word	0x40000438
 8000eec:	20001314 	.word	0x20001314
 8000ef0:	4000043c 	.word	0x4000043c
 8000ef4:	20001358 	.word	0x20001358
 8000ef8:	40000440 	.word	0x40000440

08000efc <set_volume>:

void set_volume(uint16_t vol){
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	80fb      	strh	r3, [r7, #6]
	float fl_vol = (float)(ADC_RESOLUTION - vol);
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8000f0c:	3303      	adds	r3, #3
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f16:	edc7 7a03 	vstr	s15, [r7, #12]
	float fl_vol_map = fl_vol * (VOL_MAP_MAX - VOL_MAP_MIN) / ADC_RESOLUTION;
 8000f1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f1e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000f68 <set_volume+0x6c>
 8000f22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f26:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000f6c <set_volume+0x70>
 8000f2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f2e:	edc7 7a02 	vstr	s15, [r7, #8]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, (uint16_t)fl_vol_map);
 8000f32:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f3a:	ee17 3a90 	vmov	r3, s15
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <set_volume+0x74>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (uint16_t)fl_vol_map);
 8000f46:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f4e:	ee17 3a90 	vmov	r3, s15
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <set_volume+0x74>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	4466c000 	.word	0x4466c000
 8000f6c:	447fc000 	.word	0x447fc000
 8000f70:	20001118 	.word	0x20001118

08000f74 <set_rate>:

// TODO implement with tap and external sync
// TODO add subdivision
void set_rate(uint16_t rate_knob){
 8000f74:	b480      	push	{r7}
 8000f76:	b087      	sub	sp, #28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	80fb      	strh	r3, [r7, #6]
	float fl_rate = (float)(ADC_RESOLUTION - rate_knob);
 8000f7e:	88fb      	ldrh	r3, [r7, #6]
 8000f80:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8000f84:	3303      	adds	r3, #3
 8000f86:	ee07 3a90 	vmov	s15, r3
 8000f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f8e:	edc7 7a05 	vstr	s15, [r7, #20]
	float fl_rate_arr = fl_rate * (RATE_ARR_MAX - RATE_ARR_MIN) / ADC_RESOLUTION;
 8000f92:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f96:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000fcc <set_rate+0x58>
 8000f9a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f9e:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000fd0 <set_rate+0x5c>
 8000fa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa6:	edc7 7a04 	vstr	s15, [r7, #16]
	uint16_t rate_arr = (uint16_t)fl_rate_arr;
 8000faa:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fb2:	ee17 3a90 	vmov	r3, s15
 8000fb6:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_PRESCALER(&htim8, rate_arr);
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <set_rate+0x60>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	89fa      	ldrh	r2, [r7, #14]
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fc0:	bf00      	nop
 8000fc2:	371c      	adds	r7, #28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	42880000 	.word	0x42880000
 8000fd0:	447fc000 	.word	0x447fc000
 8000fd4:	200011fc 	.word	0x200011fc

08000fd8 <generate_triangle_wave_floatingpoint>:

void generate_triangle_wave_floatingpoint(uint32_t depth, uint32_t offset)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b08d      	sub	sp, #52	; 0x34
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
	float fl_depth = (float)depth;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fec:	edc7 7a07 	vstr	s15, [r7, #28]
	float fl_offset = (float) offset;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ffa:	edc7 7a06 	vstr	s15, [r7, #24]
	float fl_max = WAVETABLE_DEPTH;
 8000ffe:	4b49      	ldr	r3, [pc, #292]	; (8001124 <generate_triangle_wave_floatingpoint+0x14c>)
 8001000:	617b      	str	r3, [r7, #20]
	float fl_min = WAVETABLE_DEPTH - fl_depth;
 8001002:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001128 <generate_triangle_wave_floatingpoint+0x150>
 8001006:	edd7 7a07 	vldr	s15, [r7, #28]
 800100a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100e:	edc7 7a04 	vstr	s15, [r7, #16]
	// Step up is initialized later only if offset != 0
	float fl_step_up;
	float fl_step_down = fl_depth / (WAVETABLE_WIDTH-fl_offset);
 8001012:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800112c <generate_triangle_wave_floatingpoint+0x154>
 8001016:	edd7 7a06 	vldr	s15, [r7, #24]
 800101a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800101e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001026:	edc7 7a03 	vstr	s15, [r7, #12]
	float fl_val = fl_min;
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint16_t j = WAVETABLE_WIDTH>>1;
 800102e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001032:	857b      	strh	r3, [r7, #42]	; 0x2a

	if (offset > 0){
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d039      	beq.n	80010ae <generate_triangle_wave_floatingpoint+0xd6>
		fl_step_up = fl_depth / fl_offset;
 800103a:	edd7 6a07 	vldr	s13, [r7, #28]
 800103e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001046:	edc7 7a02 	vstr	s15, [r7, #8]
		for (int i=0; i<offset; i++){
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
 800104e:	e02a      	b.n	80010a6 <generate_triangle_wave_floatingpoint+0xce>
			dma_wavetable_a[i] = (uint16_t)fl_val;
 8001050:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001058:	ee17 3a90 	vmov	r3, s15
 800105c:	b299      	uxth	r1, r3
 800105e:	4a34      	ldr	r2, [pc, #208]	; (8001130 <generate_triangle_wave_floatingpoint+0x158>)
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			j = (j + 1) % (WAVETABLE_WIDTH);
 8001066:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001068:	3301      	adds	r3, #1
 800106a:	425a      	negs	r2, r3
 800106c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001070:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001074:	bf58      	it	pl
 8001076:	4253      	negpl	r3, r2
 8001078:	857b      	strh	r3, [r7, #42]	; 0x2a
			dma_wavetable_b[j] = (uint16_t)fl_val;
 800107a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800107c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001084:	ee17 2a90 	vmov	r2, s15
 8001088:	b291      	uxth	r1, r2
 800108a:	4a2a      	ldr	r2, [pc, #168]	; (8001134 <generate_triangle_wave_floatingpoint+0x15c>)
 800108c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			fl_val = fl_val+fl_step_up;
 8001090:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001094:	edd7 7a02 	vldr	s15, [r7, #8]
 8001098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800109c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		for (int i=0; i<offset; i++){
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	3301      	adds	r3, #1
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d8d0      	bhi.n	8001050 <generate_triangle_wave_floatingpoint+0x78>
		}
	}

	// Always want value at offset index to be max value
	fl_val = fl_max;
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i=offset; i<WAVETABLE_WIDTH; i++){
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	623b      	str	r3, [r7, #32]
 80010b6:	e02a      	b.n	800110e <generate_triangle_wave_floatingpoint+0x136>
		dma_wavetable_a[i] = (uint16_t)fl_val;
 80010b8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010c0:	ee17 3a90 	vmov	r3, s15
 80010c4:	b299      	uxth	r1, r3
 80010c6:	4a1a      	ldr	r2, [pc, #104]	; (8001130 <generate_triangle_wave_floatingpoint+0x158>)
 80010c8:	6a3b      	ldr	r3, [r7, #32]
 80010ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		j = (j + 1) % (WAVETABLE_WIDTH);
 80010ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80010d0:	3301      	adds	r3, #1
 80010d2:	425a      	negs	r2, r3
 80010d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010d8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80010dc:	bf58      	it	pl
 80010de:	4253      	negpl	r3, r2
 80010e0:	857b      	strh	r3, [r7, #42]	; 0x2a
		dma_wavetable_b[j] = (uint16_t)fl_val;
 80010e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80010e4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ec:	ee17 2a90 	vmov	r2, s15
 80010f0:	b291      	uxth	r1, r2
 80010f2:	4a10      	ldr	r2, [pc, #64]	; (8001134 <generate_triangle_wave_floatingpoint+0x15c>)
 80010f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		fl_val = fl_val-fl_step_down;
 80010f8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80010fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001104:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for (int i=offset; i<WAVETABLE_WIDTH; i++){
 8001108:	6a3b      	ldr	r3, [r7, #32]
 800110a:	3301      	adds	r3, #1
 800110c:	623b      	str	r3, [r7, #32]
 800110e:	6a3b      	ldr	r3, [r7, #32]
 8001110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001114:	dbd0      	blt.n	80010b8 <generate_triangle_wave_floatingpoint+0xe0>
	}
	return;
 8001116:	bf00      	nop
}
 8001118:	3734      	adds	r7, #52	; 0x34
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	447fc000 	.word	0x447fc000
 8001128:	447fc000 	.word	0x447fc000
 800112c:	44800000 	.word	0x44800000
 8001130:	20000118 	.word	0x20000118
 8001134:	20000918 	.word	0x20000918

08001138 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <My_DMA_XferHalfCpltCallback>:

void My_DMA_XferHalfCpltCallback(DMA_HandleTypeDef *hdma)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	// TODO don't call function from interrupt
	set_LED_state(&LED_tap, OFF);
 8001168:	2100      	movs	r1, #0
 800116a:	4803      	ldr	r0, [pc, #12]	; (8001178 <My_DMA_XferHalfCpltCallback+0x18>)
 800116c:	f000 fdf5 	bl	8001d5a <set_LED_state>
	return;
 8001170:	bf00      	nop
}
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200000d8 	.word	0x200000d8

0800117c <My_DMA_XferCpltCallback>:

void My_DMA_XferCpltCallback(DMA_HandleTypeDef *hdma)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	set_LED_state(&LED_tap, ON);
 8001184:	2101      	movs	r1, #1
 8001186:	4803      	ldr	r0, [pc, #12]	; (8001194 <My_DMA_XferCpltCallback+0x18>)
 8001188:	f000 fde7 	bl	8001d5a <set_LED_state>
	return;
 800118c:	bf00      	nop
}
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200000d8 	.word	0x200000d8

08001198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
}
 800119e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  HAL_GPIO_WritePin(pDOUT_LED2_B_GPIO_Port, pDOUT_LED2_B_Pin, LED_PIN_SET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2120      	movs	r1, #32
 80011a4:	481c      	ldr	r0, [pc, #112]	; (8001218 <Error_Handler+0x80>)
 80011a6:	f002 fd2b 	bl	8003c00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin, LED_PIN_SET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	481a      	ldr	r0, [pc, #104]	; (8001218 <Error_Handler+0x80>)
 80011b0:	f002 fd26 	bl	8003c00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(pDOUT_LED2_G_GPIO_Port, pDOUT_LED2_G_Pin, LED_PIN_SET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2140      	movs	r1, #64	; 0x40
 80011b8:	4817      	ldr	r0, [pc, #92]	; (8001218 <Error_Handler+0x80>)
 80011ba:	f002 fd21 	bl	8003c00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(pDOUT_LED1_B_GPIO_Port, pDOUT_LED1_B_Pin, LED_PIN_SET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c4:	4815      	ldr	r0, [pc, #84]	; (800121c <Error_Handler+0x84>)
 80011c6:	f002 fd1b 	bl	8003c00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(pDOUT_LED1_R_GPIO_Port, pDOUT_LED1_R_Pin, LED_PIN_SET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2110      	movs	r1, #16
 80011ce:	4812      	ldr	r0, [pc, #72]	; (8001218 <Error_Handler+0x80>)
 80011d0:	f002 fd16 	bl	8003c00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(pDOUT_LED1_G_GPIO_Port, pDOUT_LED1_G_Pin, LED_PIN_SET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2104      	movs	r1, #4
 80011d8:	4811      	ldr	r0, [pc, #68]	; (8001220 <Error_Handler+0x88>)
 80011da:	f002 fd11 	bl	8003c00 <HAL_GPIO_WritePin>

  while (1)
  {
	  HAL_Delay(250);
 80011de:	20fa      	movs	r0, #250	; 0xfa
 80011e0:	f000 ffd0 	bl	8002184 <HAL_Delay>

	  HAL_GPIO_TogglePin(pDOUT_LED2_B_GPIO_Port, pDOUT_LED2_B_Pin);
 80011e4:	2120      	movs	r1, #32
 80011e6:	480c      	ldr	r0, [pc, #48]	; (8001218 <Error_Handler+0x80>)
 80011e8:	f002 fd22 	bl	8003c30 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin);
 80011ec:	2180      	movs	r1, #128	; 0x80
 80011ee:	480a      	ldr	r0, [pc, #40]	; (8001218 <Error_Handler+0x80>)
 80011f0:	f002 fd1e 	bl	8003c30 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(pDOUT_LED2_G_GPIO_Port, pDOUT_LED2_G_Pin);
 80011f4:	2140      	movs	r1, #64	; 0x40
 80011f6:	4808      	ldr	r0, [pc, #32]	; (8001218 <Error_Handler+0x80>)
 80011f8:	f002 fd1a 	bl	8003c30 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(pDOUT_LED1_B_GPIO_Port, pDOUT_LED1_B_Pin);
 80011fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001200:	4806      	ldr	r0, [pc, #24]	; (800121c <Error_Handler+0x84>)
 8001202:	f002 fd15 	bl	8003c30 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(pDOUT_LED1_R_GPIO_Port, pDOUT_LED1_R_Pin);
 8001206:	2110      	movs	r1, #16
 8001208:	4803      	ldr	r0, [pc, #12]	; (8001218 <Error_Handler+0x80>)
 800120a:	f002 fd11 	bl	8003c30 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(pDOUT_LED1_G_GPIO_Port, pDOUT_LED1_G_Pin);
 800120e:	2104      	movs	r1, #4
 8001210:	4803      	ldr	r0, [pc, #12]	; (8001220 <Error_Handler+0x88>)
 8001212:	f002 fd0d 	bl	8003c30 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8001216:	e7e2      	b.n	80011de <Error_Handler+0x46>
 8001218:	48000400 	.word	0x48000400
 800121c:	48000800 	.word	0x48000800
 8001220:	48000c00 	.word	0x48000c00

08001224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <HAL_MspInit+0x44>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <HAL_MspInit+0x44>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6193      	str	r3, [r2, #24]
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <HAL_MspInit+0x44>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_MspInit+0x44>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	4a08      	ldr	r2, [pc, #32]	; (8001268 <HAL_MspInit+0x44>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	61d3      	str	r3, [r2, #28]
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_MspInit+0x44>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000

0800126c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <NMI_Handler+0x4>

08001272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	Error_Handler();
 8001276:	f7ff ff8f 	bl	8001198 <Error_Handler>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <HardFault_Handler+0x8>

0800127c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <MemManage_Handler+0x4>

08001282 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <UsageFault_Handler+0x4>

0800128e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012bc:	f000 ff42 	bl	8002144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <DMA1_Channel1_IRQHandler+0x10>)
 80012ca:	f002 f9e9 	bl	80036a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000078 	.word	0x20000078

080012d8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <DMA1_Channel4_IRQHandler+0x10>)
 80012de:	f002 f9df 	bl	80036a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20001248 	.word	0x20001248

080012ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <TIM4_IRQHandler+0x10>)
 80012f2:	f004 fcd4 	bl	8005c9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200011b0 	.word	0x200011b0

08001300 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3_up);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <DMA2_Channel1_IRQHandler+0x10>)
 8001306:	f002 f9cb 	bl	80036a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20001314 	.word	0x20001314

08001314 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch4_trig_com);
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <DMA2_Channel2_IRQHandler+0x10>)
 800131a:	f002 f9c1 	bl	80036a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20001358 	.word	0x20001358

08001328 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <DMA2_Channel3_IRQHandler+0x10>)
 800132e:	f002 f9b7 	bl	80036a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2000128c 	.word	0x2000128c

0800133c <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <DMA2_Channel5_IRQHandler+0x10>)
 8001342:	f002 f9ad 	bl	80036a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200012d0 	.word	0x200012d0

08001350 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <SystemInit+0x20>)
 8001356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135a:	4a05      	ldr	r2, [pc, #20]	; (8001370 <SystemInit+0x20>)
 800135c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim8_ch3_up;
DMA_HandleTypeDef hdma_tim8_ch4_trig_com;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08e      	sub	sp, #56	; 0x38
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001388:	f107 031c 	add.w	r3, r7, #28
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001394:	463b      	mov	r3, r7
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]
 80013a2:	615a      	str	r2, [r3, #20]
 80013a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013a6:	4b33      	ldr	r3, [pc, #204]	; (8001474 <MX_TIM2_Init+0x100>)
 80013a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013ae:	4b31      	ldr	r3, [pc, #196]	; (8001474 <MX_TIM2_Init+0x100>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b4:	4b2f      	ldr	r3, [pc, #188]	; (8001474 <MX_TIM2_Init+0x100>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_PERIOD;
 80013ba:	4b2e      	ldr	r3, [pc, #184]	; (8001474 <MX_TIM2_Init+0x100>)
 80013bc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80013c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c2:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <MX_TIM2_Init+0x100>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013c8:	4b2a      	ldr	r3, [pc, #168]	; (8001474 <MX_TIM2_Init+0x100>)
 80013ca:	2280      	movs	r2, #128	; 0x80
 80013cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013ce:	4829      	ldr	r0, [pc, #164]	; (8001474 <MX_TIM2_Init+0x100>)
 80013d0:	f004 f8f0 	bl	80055b4 <HAL_TIM_Base_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80013da:	f7ff fedd 	bl	8001198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013e8:	4619      	mov	r1, r3
 80013ea:	4822      	ldr	r0, [pc, #136]	; (8001474 <MX_TIM2_Init+0x100>)
 80013ec:	f004 ffa0 	bl	8006330 <HAL_TIM_ConfigClockSource>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80013f6:	f7ff fecf 	bl	8001198 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013fa:	481e      	ldr	r0, [pc, #120]	; (8001474 <MX_TIM2_Init+0x100>)
 80013fc:	f004 fa94 	bl	8005928 <HAL_TIM_PWM_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001406:	f7ff fec7 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	4619      	mov	r1, r3
 8001418:	4816      	ldr	r0, [pc, #88]	; (8001474 <MX_TIM2_Init+0x100>)
 800141a:	f005 fe03 	bl	8007024 <HAL_TIMEx_MasterConfigSynchronization>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001424:	f7ff feb8 	bl	8001198 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001428:	2360      	movs	r3, #96	; 0x60
 800142a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	2200      	movs	r2, #0
 800143c:	4619      	mov	r1, r3
 800143e:	480d      	ldr	r0, [pc, #52]	; (8001474 <MX_TIM2_Init+0x100>)
 8001440:	f004 fe62 	bl	8006108 <HAL_TIM_PWM_ConfigChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800144a:	f7ff fea5 	bl	8001198 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800144e:	463b      	mov	r3, r7
 8001450:	2204      	movs	r2, #4
 8001452:	4619      	mov	r1, r3
 8001454:	4807      	ldr	r0, [pc, #28]	; (8001474 <MX_TIM2_Init+0x100>)
 8001456:	f004 fe57 	bl	8006108 <HAL_TIM_PWM_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001460:	f7ff fe9a 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001464:	4803      	ldr	r0, [pc, #12]	; (8001474 <MX_TIM2_Init+0x100>)
 8001466:	f000 fb59 	bl	8001b1c <HAL_TIM_MspPostInit>

}
 800146a:	bf00      	nop
 800146c:	3738      	adds	r7, #56	; 0x38
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20001118 	.word	0x20001118

08001478 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800148a:	463b      	mov	r3, r7
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
 8001498:	615a      	str	r2, [r3, #20]
 800149a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800149c:	4b32      	ldr	r3, [pc, #200]	; (8001568 <MX_TIM3_Init+0xf0>)
 800149e:	4a33      	ldr	r2, [pc, #204]	; (800156c <MX_TIM3_Init+0xf4>)
 80014a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014a2:	4b31      	ldr	r3, [pc, #196]	; (8001568 <MX_TIM3_Init+0xf0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a8:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <MX_TIM3_Init+0xf0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_PERIOD;
 80014ae:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <MX_TIM3_Init+0xf0>)
 80014b0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80014b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b6:	4b2c      	ldr	r3, [pc, #176]	; (8001568 <MX_TIM3_Init+0xf0>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014bc:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <MX_TIM3_Init+0xf0>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014c2:	4829      	ldr	r0, [pc, #164]	; (8001568 <MX_TIM3_Init+0xf0>)
 80014c4:	f004 fa30 	bl	8005928 <HAL_TIM_PWM_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80014ce:	f7ff fe63 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	4619      	mov	r1, r3
 80014e0:	4821      	ldr	r0, [pc, #132]	; (8001568 <MX_TIM3_Init+0xf0>)
 80014e2:	f005 fd9f 	bl	8007024 <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80014ec:	f7ff fe54 	bl	8001198 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f0:	2360      	movs	r3, #96	; 0x60
 80014f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001500:	463b      	mov	r3, r7
 8001502:	2200      	movs	r2, #0
 8001504:	4619      	mov	r1, r3
 8001506:	4818      	ldr	r0, [pc, #96]	; (8001568 <MX_TIM3_Init+0xf0>)
 8001508:	f004 fdfe 	bl	8006108 <HAL_TIM_PWM_ConfigChannel>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001512:	f7ff fe41 	bl	8001198 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001516:	463b      	mov	r3, r7
 8001518:	2204      	movs	r2, #4
 800151a:	4619      	mov	r1, r3
 800151c:	4812      	ldr	r0, [pc, #72]	; (8001568 <MX_TIM3_Init+0xf0>)
 800151e:	f004 fdf3 	bl	8006108 <HAL_TIM_PWM_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001528:	f7ff fe36 	bl	8001198 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800152c:	463b      	mov	r3, r7
 800152e:	2208      	movs	r2, #8
 8001530:	4619      	mov	r1, r3
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <MX_TIM3_Init+0xf0>)
 8001534:	f004 fde8 	bl	8006108 <HAL_TIM_PWM_ConfigChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 800153e:	f7ff fe2b 	bl	8001198 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001542:	463b      	mov	r3, r7
 8001544:	220c      	movs	r2, #12
 8001546:	4619      	mov	r1, r3
 8001548:	4807      	ldr	r0, [pc, #28]	; (8001568 <MX_TIM3_Init+0xf0>)
 800154a:	f004 fddd 	bl	8006108 <HAL_TIM_PWM_ConfigChannel>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8001554:	f7ff fe20 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001558:	4803      	ldr	r0, [pc, #12]	; (8001568 <MX_TIM3_Init+0xf0>)
 800155a:	f000 fadf 	bl	8001b1c <HAL_TIM_MspPostInit>

}
 800155e:	bf00      	nop
 8001560:	3728      	adds	r7, #40	; 0x28
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20001164 	.word	0x20001164
 800156c:	40000400 	.word	0x40000400

08001570 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800158e:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <MX_TIM4_Init+0xd0>)
 8001590:	4a2c      	ldr	r2, [pc, #176]	; (8001644 <MX_TIM4_Init+0xd4>)
 8001592:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1023;
 8001594:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <MX_TIM4_Init+0xd0>)
 8001596:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800159a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159c:	4b28      	ldr	r3, [pc, #160]	; (8001640 <MX_TIM4_Init+0xd0>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015a2:	4b27      	ldr	r3, [pc, #156]	; (8001640 <MX_TIM4_Init+0xd0>)
 80015a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015aa:	4b25      	ldr	r3, [pc, #148]	; (8001640 <MX_TIM4_Init+0xd0>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b0:	4b23      	ldr	r3, [pc, #140]	; (8001640 <MX_TIM4_Init+0xd0>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80015b6:	4822      	ldr	r0, [pc, #136]	; (8001640 <MX_TIM4_Init+0xd0>)
 80015b8:	f004 fb1a 	bl	8005bf0 <HAL_TIM_IC_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80015c2:	f7ff fde9 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	481a      	ldr	r0, [pc, #104]	; (8001640 <MX_TIM4_Init+0xd0>)
 80015d6:	f005 fd25 	bl	8007024 <HAL_TIMEx_MasterConfigSynchronization>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80015e0:	f7ff fdda 	bl	8001198 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80015e4:	2302      	movs	r3, #2
 80015e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015e8:	2301      	movs	r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 80015f0:	230f      	movs	r3, #15
 80015f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	2200      	movs	r2, #0
 80015f8:	4619      	mov	r1, r3
 80015fa:	4811      	ldr	r0, [pc, #68]	; (8001640 <MX_TIM4_Init+0xd0>)
 80015fc:	f004 fce8 	bl	8005fd0 <HAL_TIM_IC_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001606:	f7ff fdc7 	bl	8001198 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	2204      	movs	r2, #4
 800160e:	4619      	mov	r1, r3
 8001610:	480b      	ldr	r0, [pc, #44]	; (8001640 <MX_TIM4_Init+0xd0>)
 8001612:	f004 fcdd 	bl	8005fd0 <HAL_TIM_IC_ConfigChannel>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800161c:	f7ff fdbc 	bl	8001198 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2208      	movs	r2, #8
 8001624:	4619      	mov	r1, r3
 8001626:	4806      	ldr	r0, [pc, #24]	; (8001640 <MX_TIM4_Init+0xd0>)
 8001628:	f004 fcd2 	bl	8005fd0 <HAL_TIM_IC_ConfigChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8001632:	f7ff fdb1 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	3720      	adds	r7, #32
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200011b0 	.word	0x200011b0
 8001644:	40000800 	.word	0x40000800

08001648 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b096      	sub	sp, #88	; 0x58
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800165a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]
 800166a:	615a      	str	r2, [r3, #20]
 800166c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	222c      	movs	r2, #44	; 0x2c
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f006 f9fd 	bl	8007a74 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800167a:	4b49      	ldr	r3, [pc, #292]	; (80017a0 <MX_TIM8_Init+0x158>)
 800167c:	4a49      	ldr	r2, [pc, #292]	; (80017a4 <MX_TIM8_Init+0x15c>)
 800167e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001680:	4b47      	ldr	r3, [pc, #284]	; (80017a0 <MX_TIM8_Init+0x158>)
 8001682:	2200      	movs	r2, #0
 8001684:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001686:	4b46      	ldr	r3, [pc, #280]	; (80017a0 <MX_TIM8_Init+0x158>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1023;
 800168c:	4b44      	ldr	r3, [pc, #272]	; (80017a0 <MX_TIM8_Init+0x158>)
 800168e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001692:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001694:	4b42      	ldr	r3, [pc, #264]	; (80017a0 <MX_TIM8_Init+0x158>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800169a:	4b41      	ldr	r3, [pc, #260]	; (80017a0 <MX_TIM8_Init+0x158>)
 800169c:	2200      	movs	r2, #0
 800169e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a0:	4b3f      	ldr	r3, [pc, #252]	; (80017a0 <MX_TIM8_Init+0x158>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80016a6:	483e      	ldr	r0, [pc, #248]	; (80017a0 <MX_TIM8_Init+0x158>)
 80016a8:	f003 ffdb 	bl	8005662 <HAL_TIM_OC_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80016b2:	f7ff fd71 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b6:	2300      	movs	r3, #0
 80016b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016c6:	4619      	mov	r1, r3
 80016c8:	4835      	ldr	r0, [pc, #212]	; (80017a0 <MX_TIM8_Init+0x158>)
 80016ca:	f005 fcab 	bl	8007024 <HAL_TIMEx_MasterConfigSynchronization>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80016d4:	f7ff fd60 	bl	8001198 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80016d8:	2300      	movs	r3, #0
 80016da:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016e0:	2300      	movs	r3, #0
 80016e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016e4:	2300      	movs	r3, #0
 80016e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016ec:	2300      	movs	r3, #0
 80016ee:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016f0:	2300      	movs	r3, #0
 80016f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016f8:	2200      	movs	r2, #0
 80016fa:	4619      	mov	r1, r3
 80016fc:	4828      	ldr	r0, [pc, #160]	; (80017a0 <MX_TIM8_Init+0x158>)
 80016fe:	f004 fbed 	bl	8005edc <HAL_TIM_OC_ConfigChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001708:	f7ff fd46 	bl	8001198 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800170c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001710:	2204      	movs	r2, #4
 8001712:	4619      	mov	r1, r3
 8001714:	4822      	ldr	r0, [pc, #136]	; (80017a0 <MX_TIM8_Init+0x158>)
 8001716:	f004 fbe1 	bl	8005edc <HAL_TIM_OC_ConfigChannel>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8001720:	f7ff fd3a 	bl	8001198 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001724:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001728:	2208      	movs	r2, #8
 800172a:	4619      	mov	r1, r3
 800172c:	481c      	ldr	r0, [pc, #112]	; (80017a0 <MX_TIM8_Init+0x158>)
 800172e:	f004 fbd5 	bl	8005edc <HAL_TIM_OC_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8001738:	f7ff fd2e 	bl	8001198 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800173c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001740:	220c      	movs	r2, #12
 8001742:	4619      	mov	r1, r3
 8001744:	4816      	ldr	r0, [pc, #88]	; (80017a0 <MX_TIM8_Init+0x158>)
 8001746:	f004 fbc9 	bl	8005edc <HAL_TIM_OC_ConfigChannel>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8001750:	f7ff fd22 	bl	8001198 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	4619      	mov	r1, r3
 8001788:	4805      	ldr	r0, [pc, #20]	; (80017a0 <MX_TIM8_Init+0x158>)
 800178a:	f005 fcd7 	bl	800713c <HAL_TIMEx_ConfigBreakDeadTime>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM8_Init+0x150>
  {
    Error_Handler();
 8001794:	f7ff fd00 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	3758      	adds	r7, #88	; 0x58
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	200011fc 	.word	0x200011fc
 80017a4:	40013400 	.word	0x40013400

080017a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b8:	d10b      	bne.n	80017d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_TIM_Base_MspInit+0x38>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <HAL_TIM_Base_MspInit+0x38>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	61d3      	str	r3, [r2, #28]
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_TIM_Base_MspInit+0x38>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000

080017e4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0a      	ldr	r2, [pc, #40]	; (800181c <HAL_TIM_PWM_MspInit+0x38>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d10b      	bne.n	800180e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017f6:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <HAL_TIM_PWM_MspInit+0x3c>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	4a09      	ldr	r2, [pc, #36]	; (8001820 <HAL_TIM_PWM_MspInit+0x3c>)
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	61d3      	str	r3, [r2, #28]
 8001802:	4b07      	ldr	r3, [pc, #28]	; (8001820 <HAL_TIM_PWM_MspInit+0x3c>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40000400 	.word	0x40000400
 8001820:	40021000 	.word	0x40021000

08001824 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM4)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a3f      	ldr	r2, [pc, #252]	; (8001940 <HAL_TIM_IC_MspInit+0x11c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d177      	bne.n	8001936 <HAL_TIM_IC_MspInit+0x112>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001846:	4b3f      	ldr	r3, [pc, #252]	; (8001944 <HAL_TIM_IC_MspInit+0x120>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4a3e      	ldr	r2, [pc, #248]	; (8001944 <HAL_TIM_IC_MspInit+0x120>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	61d3      	str	r3, [r2, #28]
 8001852:	4b3c      	ldr	r3, [pc, #240]	; (8001944 <HAL_TIM_IC_MspInit+0x120>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	4b39      	ldr	r3, [pc, #228]	; (8001944 <HAL_TIM_IC_MspInit+0x120>)
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	4a38      	ldr	r2, [pc, #224]	; (8001944 <HAL_TIM_IC_MspInit+0x120>)
 8001864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001868:	6153      	str	r3, [r2, #20]
 800186a:	4b36      	ldr	r3, [pc, #216]	; (8001944 <HAL_TIM_IC_MspInit+0x120>)
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	4b33      	ldr	r3, [pc, #204]	; (8001944 <HAL_TIM_IC_MspInit+0x120>)
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	4a32      	ldr	r2, [pc, #200]	; (8001944 <HAL_TIM_IC_MspInit+0x120>)
 800187c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001880:	6153      	str	r3, [r2, #20]
 8001882:	4b30      	ldr	r3, [pc, #192]	; (8001944 <HAL_TIM_IC_MspInit+0x120>)
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = pDIN_BYP_Pin|pDIN_TAP_Pin;
 800188e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001898:	2301      	movs	r3, #1
 800189a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80018a0:	230a      	movs	r3, #10
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ae:	f002 f805 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = pDIN_TAP_EXT_Pin;
 80018b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018bc:	2301      	movs	r3, #1
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018c4:	2302      	movs	r3, #2
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(pDIN_TAP_EXT_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	481e      	ldr	r0, [pc, #120]	; (8001948 <HAL_TIM_IC_MspInit+0x124>)
 80018d0:	f001 fff4 	bl	80038bc <HAL_GPIO_Init>

    /* TIM4 DMA Init */
    /* TIM4_CH2 Init */
    hdma_tim4_ch2.Instance = DMA1_Channel4;
 80018d4:	4b1d      	ldr	r3, [pc, #116]	; (800194c <HAL_TIM_IC_MspInit+0x128>)
 80018d6:	4a1e      	ldr	r2, [pc, #120]	; (8001950 <HAL_TIM_IC_MspInit+0x12c>)
 80018d8:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018da:	4b1c      	ldr	r3, [pc, #112]	; (800194c <HAL_TIM_IC_MspInit+0x128>)
 80018dc:	2200      	movs	r2, #0
 80018de:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e0:	4b1a      	ldr	r3, [pc, #104]	; (800194c <HAL_TIM_IC_MspInit+0x128>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80018e6:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_TIM_IC_MspInit+0x128>)
 80018e8:	2280      	movs	r2, #128	; 0x80
 80018ea:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018ec:	4b17      	ldr	r3, [pc, #92]	; (800194c <HAL_TIM_IC_MspInit+0x128>)
 80018ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f2:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_TIM_IC_MspInit+0x128>)
 80018f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018fa:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 80018fc:	4b13      	ldr	r3, [pc, #76]	; (800194c <HAL_TIM_IC_MspInit+0x128>)
 80018fe:	2220      	movs	r2, #32
 8001900:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001902:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_TIM_IC_MspInit+0x128>)
 8001904:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001908:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 800190a:	4810      	ldr	r0, [pc, #64]	; (800194c <HAL_TIM_IC_MspInit+0x128>)
 800190c:	f001 fda7 	bl	800345e <HAL_DMA_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_TIM_IC_MspInit+0xf6>
    {
      Error_Handler();
 8001916:	f7ff fc3f 	bl	8001198 <Error_Handler>
    }

    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a0b      	ldr	r2, [pc, #44]	; (800194c <HAL_TIM_IC_MspInit+0x128>)
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
 8001920:	4a0a      	ldr	r2, [pc, #40]	; (800194c <HAL_TIM_IC_MspInit+0x128>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2106      	movs	r1, #6
 800192a:	201e      	movs	r0, #30
 800192c:	f001 fd61 	bl	80033f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001930:	201e      	movs	r0, #30
 8001932:	f001 fd7a 	bl	800342a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001936:	bf00      	nop
 8001938:	3728      	adds	r7, #40	; 0x28
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40000800 	.word	0x40000800
 8001944:	40021000 	.word	0x40021000
 8001948:	48000400 	.word	0x48000400
 800194c:	20001248 	.word	0x20001248
 8001950:	40020044 	.word	0x40020044

08001954 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM8)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a64      	ldr	r2, [pc, #400]	; (8001af4 <HAL_TIM_OC_MspInit+0x1a0>)
 8001962:	4293      	cmp	r3, r2
 8001964:	f040 80c2 	bne.w	8001aec <HAL_TIM_OC_MspInit+0x198>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001968:	4b63      	ldr	r3, [pc, #396]	; (8001af8 <HAL_TIM_OC_MspInit+0x1a4>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	4a62      	ldr	r2, [pc, #392]	; (8001af8 <HAL_TIM_OC_MspInit+0x1a4>)
 800196e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001972:	6193      	str	r3, [r2, #24]
 8001974:	4b60      	ldr	r3, [pc, #384]	; (8001af8 <HAL_TIM_OC_MspInit+0x1a4>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* TIM8_CH1 Init */
    hdma_tim8_ch1.Instance = DMA2_Channel3;
 8001980:	4b5e      	ldr	r3, [pc, #376]	; (8001afc <HAL_TIM_OC_MspInit+0x1a8>)
 8001982:	4a5f      	ldr	r2, [pc, #380]	; (8001b00 <HAL_TIM_OC_MspInit+0x1ac>)
 8001984:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001986:	4b5d      	ldr	r3, [pc, #372]	; (8001afc <HAL_TIM_OC_MspInit+0x1a8>)
 8001988:	2210      	movs	r2, #16
 800198a:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800198c:	4b5b      	ldr	r3, [pc, #364]	; (8001afc <HAL_TIM_OC_MspInit+0x1a8>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001992:	4b5a      	ldr	r3, [pc, #360]	; (8001afc <HAL_TIM_OC_MspInit+0x1a8>)
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001998:	4b58      	ldr	r3, [pc, #352]	; (8001afc <HAL_TIM_OC_MspInit+0x1a8>)
 800199a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800199e:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019a0:	4b56      	ldr	r3, [pc, #344]	; (8001afc <HAL_TIM_OC_MspInit+0x1a8>)
 80019a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019a6:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 80019a8:	4b54      	ldr	r3, [pc, #336]	; (8001afc <HAL_TIM_OC_MspInit+0x1a8>)
 80019aa:	2220      	movs	r2, #32
 80019ac:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80019ae:	4b53      	ldr	r3, [pc, #332]	; (8001afc <HAL_TIM_OC_MspInit+0x1a8>)
 80019b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019b4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 80019b6:	4851      	ldr	r0, [pc, #324]	; (8001afc <HAL_TIM_OC_MspInit+0x1a8>)
 80019b8:	f001 fd51 	bl	800345e <HAL_DMA_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_TIM_OC_MspInit+0x72>
    {
      Error_Handler();
 80019c2:	f7ff fbe9 	bl	8001198 <Error_Handler>
    }

    __HAL_LINKDMA(tim_ocHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a4c      	ldr	r2, [pc, #304]	; (8001afc <HAL_TIM_OC_MspInit+0x1a8>)
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24
 80019cc:	4a4b      	ldr	r2, [pc, #300]	; (8001afc <HAL_TIM_OC_MspInit+0x1a8>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM8_CH2 Init */
    hdma_tim8_ch2.Instance = DMA2_Channel5;
 80019d2:	4b4c      	ldr	r3, [pc, #304]	; (8001b04 <HAL_TIM_OC_MspInit+0x1b0>)
 80019d4:	4a4c      	ldr	r2, [pc, #304]	; (8001b08 <HAL_TIM_OC_MspInit+0x1b4>)
 80019d6:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019d8:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <HAL_TIM_OC_MspInit+0x1b0>)
 80019da:	2210      	movs	r2, #16
 80019dc:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80019de:	4b49      	ldr	r3, [pc, #292]	; (8001b04 <HAL_TIM_OC_MspInit+0x1b0>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80019e4:	4b47      	ldr	r3, [pc, #284]	; (8001b04 <HAL_TIM_OC_MspInit+0x1b0>)
 80019e6:	2280      	movs	r2, #128	; 0x80
 80019e8:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019ea:	4b46      	ldr	r3, [pc, #280]	; (8001b04 <HAL_TIM_OC_MspInit+0x1b0>)
 80019ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019f0:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019f2:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <HAL_TIM_OC_MspInit+0x1b0>)
 80019f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019f8:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.Mode = DMA_CIRCULAR;
 80019fa:	4b42      	ldr	r3, [pc, #264]	; (8001b04 <HAL_TIM_OC_MspInit+0x1b0>)
 80019fc:	2220      	movs	r2, #32
 80019fe:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001a00:	4b40      	ldr	r3, [pc, #256]	; (8001b04 <HAL_TIM_OC_MspInit+0x1b0>)
 8001a02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a06:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 8001a08:	483e      	ldr	r0, [pc, #248]	; (8001b04 <HAL_TIM_OC_MspInit+0x1b0>)
 8001a0a:	f001 fd28 	bl	800345e <HAL_DMA_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_TIM_OC_MspInit+0xc4>
    {
      Error_Handler();
 8001a14:	f7ff fbc0 	bl	8001198 <Error_Handler>
    }

    __HAL_LINKDMA(tim_ocHandle,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a3a      	ldr	r2, [pc, #232]	; (8001b04 <HAL_TIM_OC_MspInit+0x1b0>)
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28
 8001a1e:	4a39      	ldr	r2, [pc, #228]	; (8001b04 <HAL_TIM_OC_MspInit+0x1b0>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM8_CH3_UP Init */
    hdma_tim8_ch3_up.Instance = DMA2_Channel1;
 8001a24:	4b39      	ldr	r3, [pc, #228]	; (8001b0c <HAL_TIM_OC_MspInit+0x1b8>)
 8001a26:	4a3a      	ldr	r2, [pc, #232]	; (8001b10 <HAL_TIM_OC_MspInit+0x1bc>)
 8001a28:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a2a:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <HAL_TIM_OC_MspInit+0x1b8>)
 8001a2c:	2210      	movs	r2, #16
 8001a2e:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a30:	4b36      	ldr	r3, [pc, #216]	; (8001b0c <HAL_TIM_OC_MspInit+0x1b8>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8001a36:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <HAL_TIM_OC_MspInit+0x1b8>)
 8001a38:	2280      	movs	r2, #128	; 0x80
 8001a3a:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a3c:	4b33      	ldr	r3, [pc, #204]	; (8001b0c <HAL_TIM_OC_MspInit+0x1b8>)
 8001a3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a42:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a44:	4b31      	ldr	r3, [pc, #196]	; (8001b0c <HAL_TIM_OC_MspInit+0x1b8>)
 8001a46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a4a:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3_up.Init.Mode = DMA_CIRCULAR;
 8001a4c:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <HAL_TIM_OC_MspInit+0x1b8>)
 8001a4e:	2220      	movs	r2, #32
 8001a50:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <HAL_TIM_OC_MspInit+0x1b8>)
 8001a54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a58:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim8_ch3_up) != HAL_OK)
 8001a5a:	482c      	ldr	r0, [pc, #176]	; (8001b0c <HAL_TIM_OC_MspInit+0x1b8>)
 8001a5c:	f001 fcff 	bl	800345e <HAL_DMA_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_TIM_OC_MspInit+0x116>
    {
      Error_Handler();
 8001a66:	f7ff fb97 	bl	8001198 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_ocHandle,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3_up);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a27      	ldr	r2, [pc, #156]	; (8001b0c <HAL_TIM_OC_MspInit+0x1b8>)
 8001a6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a70:	4a26      	ldr	r2, [pc, #152]	; (8001b0c <HAL_TIM_OC_MspInit+0x1b8>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_ocHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim8_ch3_up);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a24      	ldr	r2, [pc, #144]	; (8001b0c <HAL_TIM_OC_MspInit+0x1b8>)
 8001a7a:	621a      	str	r2, [r3, #32]
 8001a7c:	4a23      	ldr	r2, [pc, #140]	; (8001b0c <HAL_TIM_OC_MspInit+0x1b8>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM8_CH4_TRIG_COM Init */
    hdma_tim8_ch4_trig_com.Instance = DMA2_Channel2;
 8001a82:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <HAL_TIM_OC_MspInit+0x1c0>)
 8001a84:	4a24      	ldr	r2, [pc, #144]	; (8001b18 <HAL_TIM_OC_MspInit+0x1c4>)
 8001a86:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a88:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <HAL_TIM_OC_MspInit+0x1c0>)
 8001a8a:	2210      	movs	r2, #16
 8001a8c:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a8e:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <HAL_TIM_OC_MspInit+0x1c0>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8001a94:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <HAL_TIM_OC_MspInit+0x1c0>)
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a9a:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <HAL_TIM_OC_MspInit+0x1c0>)
 8001a9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aa0:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <HAL_TIM_OC_MspInit+0x1c0>)
 8001aa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aa8:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <HAL_TIM_OC_MspInit+0x1c0>)
 8001aac:	2220      	movs	r2, #32
 8001aae:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_TIM_OC_MspInit+0x1c0>)
 8001ab2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ab6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim8_ch4_trig_com) != HAL_OK)
 8001ab8:	4816      	ldr	r0, [pc, #88]	; (8001b14 <HAL_TIM_OC_MspInit+0x1c0>)
 8001aba:	f001 fcd0 	bl	800345e <HAL_DMA_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <HAL_TIM_OC_MspInit+0x174>
    {
      Error_Handler();
 8001ac4:	f7ff fb68 	bl	8001198 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_ocHandle,hdma[TIM_DMA_ID_CC4],hdma_tim8_ch4_trig_com);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a12      	ldr	r2, [pc, #72]	; (8001b14 <HAL_TIM_OC_MspInit+0x1c0>)
 8001acc:	631a      	str	r2, [r3, #48]	; 0x30
 8001ace:	4a11      	ldr	r2, [pc, #68]	; (8001b14 <HAL_TIM_OC_MspInit+0x1c0>)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_ocHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim8_ch4_trig_com);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a0f      	ldr	r2, [pc, #60]	; (8001b14 <HAL_TIM_OC_MspInit+0x1c0>)
 8001ad8:	639a      	str	r2, [r3, #56]	; 0x38
 8001ada:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <HAL_TIM_OC_MspInit+0x1c0>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_ocHandle,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim8_ch4_trig_com);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <HAL_TIM_OC_MspInit+0x1c0>)
 8001ae4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ae6:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <HAL_TIM_OC_MspInit+0x1c0>)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001aec:	bf00      	nop
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40013400 	.word	0x40013400
 8001af8:	40021000 	.word	0x40021000
 8001afc:	2000128c 	.word	0x2000128c
 8001b00:	40020430 	.word	0x40020430
 8001b04:	200012d0 	.word	0x200012d0
 8001b08:	40020458 	.word	0x40020458
 8001b0c:	20001314 	.word	0x20001314
 8001b10:	40020408 	.word	0x40020408
 8001b14:	20001358 	.word	0x20001358
 8001b18:	4002041c 	.word	0x4002041c

08001b1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08c      	sub	sp, #48	; 0x30
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b3c:	d139      	bne.n	8001bb2 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	4b3e      	ldr	r3, [pc, #248]	; (8001c38 <HAL_TIM_MspPostInit+0x11c>)
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	4a3d      	ldr	r2, [pc, #244]	; (8001c38 <HAL_TIM_MspPostInit+0x11c>)
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	6153      	str	r3, [r2, #20]
 8001b4a:	4b3b      	ldr	r3, [pc, #236]	; (8001c38 <HAL_TIM_MspPostInit+0x11c>)
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	61bb      	str	r3, [r7, #24]
 8001b54:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b56:	4b38      	ldr	r3, [pc, #224]	; (8001c38 <HAL_TIM_MspPostInit+0x11c>)
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	4a37      	ldr	r2, [pc, #220]	; (8001c38 <HAL_TIM_MspPostInit+0x11c>)
 8001b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b60:	6153      	str	r3, [r2, #20]
 8001b62:	4b35      	ldr	r3, [pc, #212]	; (8001c38 <HAL_TIM_MspPostInit+0x11c>)
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = pPWM_VOL_1_Pin;
 8001b6e:	2320      	movs	r3, #32
 8001b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(pPWM_VOL_1_GPIO_Port, &GPIO_InitStruct);
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	4619      	mov	r1, r3
 8001b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8c:	f001 fe96 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = pPWM_VOL_2_Pin;
 8001b90:	2308      	movs	r3, #8
 8001b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(pPWM_VOL_2_GPIO_Port, &GPIO_InitStruct);
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4824      	ldr	r0, [pc, #144]	; (8001c3c <HAL_TIM_MspPostInit+0x120>)
 8001bac:	f001 fe86 	bl	80038bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001bb0:	e03e      	b.n	8001c30 <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM3)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a22      	ldr	r2, [pc, #136]	; (8001c40 <HAL_TIM_MspPostInit+0x124>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d139      	bne.n	8001c30 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbc:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <HAL_TIM_MspPostInit+0x11c>)
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	4a1d      	ldr	r2, [pc, #116]	; (8001c38 <HAL_TIM_MspPostInit+0x11c>)
 8001bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc6:	6153      	str	r3, [r2, #20]
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_TIM_MspPostInit+0x11c>)
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd4:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_TIM_MspPostInit+0x11c>)
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	4a17      	ldr	r2, [pc, #92]	; (8001c38 <HAL_TIM_MspPostInit+0x11c>)
 8001bda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bde:	6153      	str	r3, [r2, #20]
 8001be0:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <HAL_TIM_MspPostInit+0x11c>)
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = pPWM_2_Pin|pPWM_1_Pin;
 8001bec:	2350      	movs	r3, #80	; 0x50
 8001bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4619      	mov	r1, r3
 8001c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c0a:	f001 fe57 	bl	80038bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = pPWM_3_Pin|pPWM_4_Pin;
 8001c0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c20:	2302      	movs	r3, #2
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4806      	ldr	r0, [pc, #24]	; (8001c44 <HAL_TIM_MspPostInit+0x128>)
 8001c2c:	f001 fe46 	bl	80038bc <HAL_GPIO_Init>
}
 8001c30:	bf00      	nop
 8001c32:	3730      	adds	r7, #48	; 0x30
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	48000400 	.word	0x48000400
 8001c40:	40000400 	.word	0x40000400
 8001c44:	48000800 	.word	0x48000800

08001c48 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c4c:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <MX_USART1_UART_Init+0x58>)
 8001c4e:	4a15      	ldr	r2, [pc, #84]	; (8001ca4 <MX_USART1_UART_Init+0x5c>)
 8001c50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c52:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <MX_USART1_UART_Init+0x58>)
 8001c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <MX_USART1_UART_Init+0x58>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <MX_USART1_UART_Init+0x58>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <MX_USART1_UART_Init+0x58>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <MX_USART1_UART_Init+0x58>)
 8001c6e:	220c      	movs	r2, #12
 8001c70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <MX_USART1_UART_Init+0x58>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <MX_USART1_UART_Init+0x58>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <MX_USART1_UART_Init+0x58>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <MX_USART1_UART_Init+0x58>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <MX_USART1_UART_Init+0x58>)
 8001c8c:	f005 fafa 	bl	8007284 <HAL_UART_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c96:	f7ff fa7f 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2000139c 	.word	0x2000139c
 8001ca4:	40013800 	.word	0x40013800

08001ca8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	; 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a17      	ldr	r2, [pc, #92]	; (8001d24 <HAL_UART_MspInit+0x7c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d127      	bne.n	8001d1a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cca:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <HAL_UART_MspInit+0x80>)
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	4a16      	ldr	r2, [pc, #88]	; (8001d28 <HAL_UART_MspInit+0x80>)
 8001cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd4:	6193      	str	r3, [r2, #24]
 8001cd6:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <HAL_UART_MspInit+0x80>)
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_UART_MspInit+0x80>)
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	4a10      	ldr	r2, [pc, #64]	; (8001d28 <HAL_UART_MspInit+0x80>)
 8001ce8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001cec:	6153      	str	r3, [r2, #20]
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <HAL_UART_MspInit+0x80>)
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001cfa:	2330      	movs	r3, #48	; 0x30
 8001cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d06:	2303      	movs	r3, #3
 8001d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d0a:	2307      	movs	r3, #7
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	4619      	mov	r1, r3
 8001d14:	4805      	ldr	r0, [pc, #20]	; (8001d2c <HAL_UART_MspInit+0x84>)
 8001d16:	f001 fdd1 	bl	80038bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	3728      	adds	r7, #40	; 0x28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40013800 	.word	0x40013800
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	48000800 	.word	0x48000800

08001d30 <set_LED_color>:

/*
 *  Updates the color of the LED
 *  Only changes the GPIO state if the LED is already on
 */
void set_LED_color(LED* led, LEDColor color){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	70fb      	strb	r3, [r7, #3]
	led->Color = color;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	78fa      	ldrb	r2, [r7, #3]
 8001d40:	701a      	strb	r2, [r3, #0]
	// Only update GPIO pins if LED is already on
	if (led->OnState == ON){
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	785b      	ldrb	r3, [r3, #1]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d103      	bne.n	8001d52 <set_LED_color+0x22>
		set_LED_state(led, ON);
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f804 	bl	8001d5a <set_LED_state>
	}
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <set_LED_state>:

/*
 *  Updates LED on-state and sets GPIO pins to match
 */
void set_LED_state(LED* led, LEDOnState on_state){
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	70fb      	strb	r3, [r7, #3]
	led->OnState = on_state;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	78fa      	ldrb	r2, [r7, #3]
 8001d6a:	705a      	strb	r2, [r3, #1]
	if (on_state == ON){
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d155      	bne.n	8001e1e <set_LED_state+0xc4>
		switch (led->Color) {
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d038      	beq.n	8001dec <set_LED_state+0x92>
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	dc68      	bgt.n	8001e50 <set_LED_state+0xf6>
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <set_LED_state+0x2e>
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d019      	beq.n	8001dba <set_LED_state+0x60>
				HAL_GPIO_WritePin(led->PortRed, led->PinRed, LED_PIN_RESET);
				HAL_GPIO_WritePin(led->PortGreen, led->PinGreen, LED_PIN_RESET);
				HAL_GPIO_WritePin(led->PortBlue, led->PinBlue, LED_PIN_SET);
				break;
			default:
				break;
 8001d86:	e063      	b.n	8001e50 <set_LED_state+0xf6>
				HAL_GPIO_WritePin(led->PortRed, led->PinRed, LED_PIN_SET);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6858      	ldr	r0, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	891b      	ldrh	r3, [r3, #8]
 8001d90:	2200      	movs	r2, #0
 8001d92:	4619      	mov	r1, r3
 8001d94:	f001 ff34 	bl	8003c00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led->PortGreen, led->PinGreen, LED_PIN_RESET);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68d8      	ldr	r0, [r3, #12]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	8a1b      	ldrh	r3, [r3, #16]
 8001da0:	2201      	movs	r2, #1
 8001da2:	4619      	mov	r1, r3
 8001da4:	f001 ff2c 	bl	8003c00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led->PortBlue, led->PinBlue, LED_PIN_RESET);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6958      	ldr	r0, [r3, #20]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	8b1b      	ldrh	r3, [r3, #24]
 8001db0:	2201      	movs	r2, #1
 8001db2:	4619      	mov	r1, r3
 8001db4:	f001 ff24 	bl	8003c00 <HAL_GPIO_WritePin>
				break;
 8001db8:	e04b      	b.n	8001e52 <set_LED_state+0xf8>
				HAL_GPIO_WritePin(led->PortRed, led->PinRed, LED_PIN_RESET);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6858      	ldr	r0, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	891b      	ldrh	r3, [r3, #8]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f001 ff1b 	bl	8003c00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led->PortGreen, led->PinGreen, LED_PIN_SET);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68d8      	ldr	r0, [r3, #12]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	8a1b      	ldrh	r3, [r3, #16]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f001 ff13 	bl	8003c00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led->PortBlue, led->PinBlue, LED_PIN_RESET);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6958      	ldr	r0, [r3, #20]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	8b1b      	ldrh	r3, [r3, #24]
 8001de2:	2201      	movs	r2, #1
 8001de4:	4619      	mov	r1, r3
 8001de6:	f001 ff0b 	bl	8003c00 <HAL_GPIO_WritePin>
				break;
 8001dea:	e032      	b.n	8001e52 <set_LED_state+0xf8>
				HAL_GPIO_WritePin(led->PortRed, led->PinRed, LED_PIN_RESET);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6858      	ldr	r0, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	891b      	ldrh	r3, [r3, #8]
 8001df4:	2201      	movs	r2, #1
 8001df6:	4619      	mov	r1, r3
 8001df8:	f001 ff02 	bl	8003c00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led->PortGreen, led->PinGreen, LED_PIN_RESET);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68d8      	ldr	r0, [r3, #12]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	8a1b      	ldrh	r3, [r3, #16]
 8001e04:	2201      	movs	r2, #1
 8001e06:	4619      	mov	r1, r3
 8001e08:	f001 fefa 	bl	8003c00 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led->PortBlue, led->PinBlue, LED_PIN_SET);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6958      	ldr	r0, [r3, #20]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	8b1b      	ldrh	r3, [r3, #24]
 8001e14:	2200      	movs	r2, #0
 8001e16:	4619      	mov	r1, r3
 8001e18:	f001 fef2 	bl	8003c00 <HAL_GPIO_WritePin>
				break;
 8001e1c:	e019      	b.n	8001e52 <set_LED_state+0xf8>
		}
	}
	else {
		HAL_GPIO_WritePin(led->PortRed, led->PinRed, LED_PIN_RESET);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6858      	ldr	r0, [r3, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	891b      	ldrh	r3, [r3, #8]
 8001e26:	2201      	movs	r2, #1
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f001 fee9 	bl	8003c00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led->PortGreen, led->PinGreen, LED_PIN_RESET);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68d8      	ldr	r0, [r3, #12]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	8a1b      	ldrh	r3, [r3, #16]
 8001e36:	2201      	movs	r2, #1
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f001 fee1 	bl	8003c00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led->PortBlue, led->PinBlue, LED_PIN_RESET);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6958      	ldr	r0, [r3, #20]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	8b1b      	ldrh	r3, [r3, #24]
 8001e46:	2201      	movs	r2, #1
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f001 fed9 	bl	8003c00 <HAL_GPIO_WritePin>
	}

}
 8001e4e:	e000      	b.n	8001e52 <set_LED_state+0xf8>
				break;
 8001e50:	bf00      	nop
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <sm_bypass_sw>:

#include "lib/sm_bypass.h"
#include "stm32f3xx_hal.h"
#include "main.h"

void sm_bypass_sw(StateBypassSw *state_switch, EventBypassSw event, StateEffect *state_effect){
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	460b      	mov	r3, r1
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	72fb      	strb	r3, [r7, #11]

	static uint32_t debounce_start = 0;
	const uint32_t debounce_time_ms = 100;
 8001e6a:	2364      	movs	r3, #100	; 0x64
 8001e6c:	617b      	str	r3, [r7, #20]

	switch (*state_switch) {
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d840      	bhi.n	8001ef8 <sm_bypass_sw+0x9c>
 8001e76:	a201      	add	r2, pc, #4	; (adr r2, 8001e7c <sm_bypass_sw+0x20>)
 8001e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7c:	08001e8d 	.word	0x08001e8d
 8001e80:	08001ec7 	.word	0x08001ec7
 8001e84:	08001ead 	.word	0x08001ead
 8001e88:	08001edf 	.word	0x08001edf
		case STATE_IDLE:
			if (event == EVENT_PRESSED) {
 8001e8c:	7afb      	ldrb	r3, [r7, #11]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d136      	bne.n	8001f00 <sm_bypass_sw+0xa4>
				*state_switch = STATE_DEBOUNCE_PRESS;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2202      	movs	r2, #2
 8001e96:	701a      	strb	r2, [r3, #0]
				sm_effect(state_effect, EVENT_TOGGLE);
 8001e98:	2100      	movs	r1, #0
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f83e 	bl	8001f1c <sm_effect>
				debounce_start = HAL_GetTick();
 8001ea0:	f000 f964 	bl	800216c <HAL_GetTick>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	4a1c      	ldr	r2, [pc, #112]	; (8001f18 <sm_bypass_sw+0xbc>)
 8001ea8:	6013      	str	r3, [r2, #0]
			}
			break;
 8001eaa:	e029      	b.n	8001f00 <sm_bypass_sw+0xa4>

		case STATE_DEBOUNCE_PRESS:
			if (HAL_GetTick() - debounce_start >= debounce_time_ms) {
 8001eac:	f000 f95e 	bl	800216c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <sm_bypass_sw+0xbc>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d822      	bhi.n	8001f04 <sm_bypass_sw+0xa8>
				*state_switch = STATE_WAIT_RELEASE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001ec4:	e01e      	b.n	8001f04 <sm_bypass_sw+0xa8>

		case STATE_WAIT_RELEASE:
			if (event == EVENT_RELEASED) {
 8001ec6:	7afb      	ldrb	r3, [r7, #11]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d11d      	bne.n	8001f08 <sm_bypass_sw+0xac>
				debounce_start = HAL_GetTick();
 8001ecc:	f000 f94e 	bl	800216c <HAL_GetTick>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	4a11      	ldr	r2, [pc, #68]	; (8001f18 <sm_bypass_sw+0xbc>)
 8001ed4:	6013      	str	r3, [r2, #0]

				*state_switch = STATE_DEBOUNCE_RELEASE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2203      	movs	r2, #3
 8001eda:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001edc:	e014      	b.n	8001f08 <sm_bypass_sw+0xac>

		case STATE_DEBOUNCE_RELEASE:
			if (HAL_GetTick() - debounce_start >= debounce_time_ms) {
 8001ede:	f000 f945 	bl	800216c <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <sm_bypass_sw+0xbc>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d80d      	bhi.n	8001f0c <sm_bypass_sw+0xb0>
				*state_switch = STATE_IDLE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001ef6:	e009      	b.n	8001f0c <sm_bypass_sw+0xb0>

		default:
			*state_switch = STATE_IDLE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	701a      	strb	r2, [r3, #0]
			break;
 8001efe:	e006      	b.n	8001f0e <sm_bypass_sw+0xb2>
			break;
 8001f00:	bf00      	nop
 8001f02:	e004      	b.n	8001f0e <sm_bypass_sw+0xb2>
			break;
 8001f04:	bf00      	nop
 8001f06:	e002      	b.n	8001f0e <sm_bypass_sw+0xb2>
			break;
 8001f08:	bf00      	nop
 8001f0a:	e000      	b.n	8001f0e <sm_bypass_sw+0xb2>
			break;
 8001f0c:	bf00      	nop
	}
}
 8001f0e:	bf00      	nop
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20001420 	.word	0x20001420

08001f1c <sm_effect>:

void sm_effect(StateEffect *state, EventEffect event){
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	70fb      	strb	r3, [r7, #3]
	switch (*state) {
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d008      	beq.n	8001f42 <sm_effect+0x26>
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d10d      	bne.n	8001f50 <sm_effect+0x34>
		case STATE_BYPASS:
			if (event == EVENT_TOGGLE){
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10e      	bne.n	8001f58 <sm_effect+0x3c>
				*state = STATE_EFFECT;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]

			}
			break;
 8001f40:	e00a      	b.n	8001f58 <sm_effect+0x3c>
		case STATE_EFFECT:
			if (event == EVENT_TOGGLE){
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d109      	bne.n	8001f5c <sm_effect+0x40>
				*state = STATE_BYPASS;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001f4e:	e005      	b.n	8001f5c <sm_effect+0x40>

		default:
			*state = STATE_BYPASS;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
			break;
 8001f56:	e002      	b.n	8001f5e <sm_effect+0x42>
			break;
 8001f58:	bf00      	nop
 8001f5a:	e000      	b.n	8001f5e <sm_effect+0x42>
			break;
 8001f5c:	bf00      	nop
	}
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <sm_relay_mute>:

void sm_relay_mute(StateRelayMute *state, EventRelayMute event,
		LED* LED_bypass)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	460b      	mov	r3, r1
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	72fb      	strb	r3, [r7, #11]
	static uint32_t mute_start = 0;
	const uint32_t mute_time_ms = 10;
 8001f7a:	230a      	movs	r3, #10
 8001f7c:	617b      	str	r3, [r7, #20]

	switch (*state) {
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d85c      	bhi.n	8002040 <sm_relay_mute+0xd4>
 8001f86:	a201      	add	r2, pc, #4	; (adr r2, 8001f8c <sm_relay_mute+0x20>)
 8001f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8c:	08002021 	.word	0x08002021
 8001f90:	08001fef 	.word	0x08001fef
 8001f94:	08001f9d 	.word	0x08001f9d
 8001f98:	08001fbd 	.word	0x08001fbd
		case STATE_BYPASS_UNMUTE:
			if (event == EVENT_EFFECT){
 8001f9c:	7afb      	ldrb	r3, [r7, #11]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d152      	bne.n	8002048 <sm_relay_mute+0xdc>
				*state = STATE_BYPASS_MUTE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	701a      	strb	r2, [r3, #0]
				mute_start = HAL_GetTick();
 8001fa8:	f000 f8e0 	bl	800216c <HAL_GetTick>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4a2c      	ldr	r2, [pc, #176]	; (8002060 <sm_relay_mute+0xf4>)
 8001fb0:	6013      	str	r3, [r2, #0]
				set_LED_state(LED_bypass, ON);
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff fed0 	bl	8001d5a <set_LED_state>
			}
			break;
 8001fba:	e045      	b.n	8002048 <sm_relay_mute+0xdc>
		case STATE_BYPASS_MUTE:
			if (HAL_GetTick() - mute_start >= mute_time_ms){
 8001fbc:	f000 f8d6 	bl	800216c <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	4b27      	ldr	r3, [pc, #156]	; (8002060 <sm_relay_mute+0xf4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d83e      	bhi.n	800204c <sm_relay_mute+0xe0>
				if (event == EVENT_BYPASS){
 8001fce:	7afb      	ldrb	r3, [r7, #11]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d103      	bne.n	8001fdc <sm_relay_mute+0x70>
					*state = STATE_BYPASS_UNMUTE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	701a      	strb	r2, [r3, #0]
				else {
					*state = STATE_EFFECT_MUTE;
					mute_start = HAL_GetTick();
				}
			}
			break;
 8001fda:	e037      	b.n	800204c <sm_relay_mute+0xe0>
					*state = STATE_EFFECT_MUTE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
					mute_start = HAL_GetTick();
 8001fe2:	f000 f8c3 	bl	800216c <HAL_GetTick>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4a1d      	ldr	r2, [pc, #116]	; (8002060 <sm_relay_mute+0xf4>)
 8001fea:	6013      	str	r3, [r2, #0]
			break;
 8001fec:	e02e      	b.n	800204c <sm_relay_mute+0xe0>
		case STATE_EFFECT_MUTE:
			if (HAL_GetTick() - mute_start >= mute_time_ms){
 8001fee:	f000 f8bd 	bl	800216c <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <sm_relay_mute+0xf4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d827      	bhi.n	8002050 <sm_relay_mute+0xe4>
				if (event == EVENT_BYPASS){
 8002000:	7afb      	ldrb	r3, [r7, #11]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d108      	bne.n	8002018 <sm_relay_mute+0xac>
					*state = STATE_BYPASS_MUTE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2203      	movs	r2, #3
 800200a:	701a      	strb	r2, [r3, #0]
					mute_start = HAL_GetTick();
 800200c:	f000 f8ae 	bl	800216c <HAL_GetTick>
 8002010:	4603      	mov	r3, r0
 8002012:	4a13      	ldr	r2, [pc, #76]	; (8002060 <sm_relay_mute+0xf4>)
 8002014:	6013      	str	r3, [r2, #0]
				}
				else {
					*state = STATE_EFFECT_UNMUTE;
				}
			}
			break;
 8002016:	e01b      	b.n	8002050 <sm_relay_mute+0xe4>
					*state = STATE_EFFECT_UNMUTE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
			break;
 800201e:	e017      	b.n	8002050 <sm_relay_mute+0xe4>
		case STATE_EFFECT_UNMUTE:
			if (event == EVENT_BYPASS){
 8002020:	7afb      	ldrb	r3, [r7, #11]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d116      	bne.n	8002054 <sm_relay_mute+0xe8>
				*state = STATE_EFFECT_MUTE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
				mute_start = HAL_GetTick();
 800202c:	f000 f89e 	bl	800216c <HAL_GetTick>
 8002030:	4603      	mov	r3, r0
 8002032:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <sm_relay_mute+0xf4>)
 8002034:	6013      	str	r3, [r2, #0]
				set_LED_state(LED_bypass, OFF);
 8002036:	2100      	movs	r1, #0
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff fe8e 	bl	8001d5a <set_LED_state>
			}
			break;
 800203e:	e009      	b.n	8002054 <sm_relay_mute+0xe8>
		default:
			*state = STATE_BYPASS;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
			break;
 8002046:	e006      	b.n	8002056 <sm_relay_mute+0xea>
			break;
 8002048:	bf00      	nop
 800204a:	e004      	b.n	8002056 <sm_relay_mute+0xea>
			break;
 800204c:	bf00      	nop
 800204e:	e002      	b.n	8002056 <sm_relay_mute+0xea>
			break;
 8002050:	bf00      	nop
 8002052:	e000      	b.n	8002056 <sm_relay_mute+0xea>
			break;
 8002054:	bf00      	nop
	}
}
 8002056:	bf00      	nop
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20001424 	.word	0x20001424

08002064 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800209c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002068:	480d      	ldr	r0, [pc, #52]	; (80020a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800206a:	490e      	ldr	r1, [pc, #56]	; (80020a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800206c:	4a0e      	ldr	r2, [pc, #56]	; (80020a8 <LoopForever+0xe>)
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002070:	e002      	b.n	8002078 <LoopCopyDataInit>

08002072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002076:	3304      	adds	r3, #4

08002078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800207a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800207c:	d3f9      	bcc.n	8002072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800207e:	4a0b      	ldr	r2, [pc, #44]	; (80020ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002080:	4c0b      	ldr	r4, [pc, #44]	; (80020b0 <LoopForever+0x16>)
  movs r3, #0
 8002082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002084:	e001      	b.n	800208a <LoopFillZerobss>

08002086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002088:	3204      	adds	r2, #4

0800208a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800208a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800208c:	d3fb      	bcc.n	8002086 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800208e:	f7ff f95f 	bl	8001350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002092:	f005 fccb 	bl	8007a2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002096:	f7fe fb4d 	bl	8000734 <main>

0800209a <LoopForever>:

LoopForever:
    b LoopForever
 800209a:	e7fe      	b.n	800209a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800209c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80020a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80020a8:	08007adc 	.word	0x08007adc
  ldr r2, =_sbss
 80020ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80020b0:	2000142c 	.word	0x2000142c

080020b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020b4:	e7fe      	b.n	80020b4 <ADC1_2_IRQHandler>
	...

080020b8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020bc:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <HAL_Init+0x28>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a07      	ldr	r2, [pc, #28]	; (80020e0 <HAL_Init+0x28>)
 80020c2:	f043 0310 	orr.w	r3, r3, #16
 80020c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c8:	2003      	movs	r0, #3
 80020ca:	f001 f987 	bl	80033dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ce:	200f      	movs	r0, #15
 80020d0:	f000 f808 	bl	80020e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020d4:	f7ff f8a6 	bl	8001224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40022000 	.word	0x40022000

080020e4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020ec:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_InitTick+0x54>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_InitTick+0x58>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	4619      	mov	r1, r3
 80020f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80020fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002102:	4618      	mov	r0, r3
 8002104:	f001 f99f 	bl	8003446 <HAL_SYSTICK_Config>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e00e      	b.n	8002130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b0f      	cmp	r3, #15
 8002116:	d80a      	bhi.n	800212e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002118:	2200      	movs	r2, #0
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	f04f 30ff 	mov.w	r0, #4294967295
 8002120:	f001 f967 	bl	80033f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002124:	4a06      	ldr	r2, [pc, #24]	; (8002140 <HAL_InitTick+0x5c>)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	e000      	b.n	8002130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000000 	.word	0x20000000
 800213c:	20000008 	.word	0x20000008
 8002140:	20000004 	.word	0x20000004

08002144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_IncTick+0x20>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_IncTick+0x24>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4413      	add	r3, r2
 8002154:	4a04      	ldr	r2, [pc, #16]	; (8002168 <HAL_IncTick+0x24>)
 8002156:	6013      	str	r3, [r2, #0]
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000008 	.word	0x20000008
 8002168:	20001428 	.word	0x20001428

0800216c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <HAL_GetTick+0x14>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20001428 	.word	0x20001428

08002184 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800218c:	f7ff ffee 	bl	800216c <HAL_GetTick>
 8002190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219c:	d005      	beq.n	80021aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800219e:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <HAL_Delay+0x44>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4413      	add	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80021aa:	bf00      	nop
 80021ac:	f7ff ffde 	bl	800216c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d8f7      	bhi.n	80021ac <HAL_Delay+0x28>
  {
  }
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000008 	.word	0x20000008

080021cc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b09a      	sub	sp, #104	; 0x68
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e1e3      	b.n	80025dc <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f003 0310 	and.w	r3, r3, #16
 8002222:	2b00      	cmp	r3, #0
 8002224:	d176      	bne.n	8002314 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	2b00      	cmp	r3, #0
 800222c:	d152      	bne.n	80022d4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7fe f8a3 	bl	8000394 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d13b      	bne.n	80022d4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 ff87 	bl	8003170 <ADC_Disable>
 8002262:	4603      	mov	r3, r0
 8002264:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	2b00      	cmp	r3, #0
 8002272:	d12f      	bne.n	80022d4 <HAL_ADC_Init+0xe0>
 8002274:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002278:	2b00      	cmp	r3, #0
 800227a:	d12b      	bne.n	80022d4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002284:	f023 0302 	bic.w	r3, r3, #2
 8002288:	f043 0202 	orr.w	r2, r3, #2
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800229e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022ae:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022b0:	4b92      	ldr	r3, [pc, #584]	; (80024fc <HAL_ADC_Init+0x308>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a92      	ldr	r2, [pc, #584]	; (8002500 <HAL_ADC_Init+0x30c>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	0c9a      	lsrs	r2, r3, #18
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022c6:	e002      	b.n	80022ce <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f9      	bne.n	80022c8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d007      	beq.n	80022f2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80022ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022f0:	d110      	bne.n	8002314 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f023 0312 	bic.w	r3, r3, #18
 80022fa:	f043 0210 	orr.w	r2, r3, #16
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	2b00      	cmp	r3, #0
 800231e:	f040 8150 	bne.w	80025c2 <HAL_ADC_Init+0x3ce>
 8002322:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 814b 	bne.w	80025c2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002336:	2b00      	cmp	r3, #0
 8002338:	f040 8143 	bne.w	80025c2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002344:	f043 0202 	orr.w	r2, r3, #2
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002354:	d004      	beq.n	8002360 <HAL_ADC_Init+0x16c>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a6a      	ldr	r2, [pc, #424]	; (8002504 <HAL_ADC_Init+0x310>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d101      	bne.n	8002364 <HAL_ADC_Init+0x170>
 8002360:	4b69      	ldr	r3, [pc, #420]	; (8002508 <HAL_ADC_Init+0x314>)
 8002362:	e000      	b.n	8002366 <HAL_ADC_Init+0x172>
 8002364:	4b69      	ldr	r3, [pc, #420]	; (800250c <HAL_ADC_Init+0x318>)
 8002366:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002370:	d102      	bne.n	8002378 <HAL_ADC_Init+0x184>
 8002372:	4b64      	ldr	r3, [pc, #400]	; (8002504 <HAL_ADC_Init+0x310>)
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	e01a      	b.n	80023ae <HAL_ADC_Init+0x1ba>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a61      	ldr	r2, [pc, #388]	; (8002504 <HAL_ADC_Init+0x310>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d103      	bne.n	800238a <HAL_ADC_Init+0x196>
 8002382:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	e011      	b.n	80023ae <HAL_ADC_Init+0x1ba>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a60      	ldr	r2, [pc, #384]	; (8002510 <HAL_ADC_Init+0x31c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d102      	bne.n	800239a <HAL_ADC_Init+0x1a6>
 8002394:	4b5f      	ldr	r3, [pc, #380]	; (8002514 <HAL_ADC_Init+0x320>)
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	e009      	b.n	80023ae <HAL_ADC_Init+0x1ba>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a5d      	ldr	r2, [pc, #372]	; (8002514 <HAL_ADC_Init+0x320>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d102      	bne.n	80023aa <HAL_ADC_Init+0x1b6>
 80023a4:	4b5a      	ldr	r3, [pc, #360]	; (8002510 <HAL_ADC_Init+0x31c>)
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e001      	b.n	80023ae <HAL_ADC_Init+0x1ba>
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d108      	bne.n	80023ce <HAL_ADC_Init+0x1da>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_ADC_Init+0x1da>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_ADC_Init+0x1dc>
 80023ce:	2300      	movs	r3, #0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d11c      	bne.n	800240e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023d4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d010      	beq.n	80023fc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d107      	bne.n	80023f6 <HAL_ADC_Init+0x202>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_Init+0x202>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <HAL_ADC_Init+0x204>
 80023f6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d108      	bne.n	800240e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80023fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	431a      	orrs	r2, r3
 800240a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800240c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	7e5b      	ldrb	r3, [r3, #25]
 8002412:	035b      	lsls	r3, r3, #13
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002418:	2a01      	cmp	r2, #1
 800241a:	d002      	beq.n	8002422 <HAL_ADC_Init+0x22e>
 800241c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002420:	e000      	b.n	8002424 <HAL_ADC_Init+0x230>
 8002422:	2200      	movs	r2, #0
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4313      	orrs	r3, r2
 8002432:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002434:	4313      	orrs	r3, r2
 8002436:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d11b      	bne.n	800247a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	7e5b      	ldrb	r3, [r3, #25]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d109      	bne.n	800245e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	3b01      	subs	r3, #1
 8002450:	045a      	lsls	r2, r3, #17
 8002452:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002454:	4313      	orrs	r3, r2
 8002456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245a:	663b      	str	r3, [r7, #96]	; 0x60
 800245c:	e00d      	b.n	800247a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002466:	f043 0220 	orr.w	r2, r3, #32
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	f043 0201 	orr.w	r2, r3, #1
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247e:	2b01      	cmp	r3, #1
 8002480:	d054      	beq.n	800252c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a22      	ldr	r2, [pc, #136]	; (8002510 <HAL_ADC_Init+0x31c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d004      	beq.n	8002496 <HAL_ADC_Init+0x2a2>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a20      	ldr	r2, [pc, #128]	; (8002514 <HAL_ADC_Init+0x320>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d140      	bne.n	8002518 <HAL_ADC_Init+0x324>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800249e:	d02a      	beq.n	80024f6 <HAL_ADC_Init+0x302>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024a8:	d022      	beq.n	80024f0 <HAL_ADC_Init+0x2fc>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80024b2:	d01a      	beq.n	80024ea <HAL_ADC_Init+0x2f6>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80024bc:	d012      	beq.n	80024e4 <HAL_ADC_Init+0x2f0>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80024c6:	d00a      	beq.n	80024de <HAL_ADC_Init+0x2ea>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024cc:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80024d0:	d002      	beq.n	80024d8 <HAL_ADC_Init+0x2e4>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d6:	e023      	b.n	8002520 <HAL_ADC_Init+0x32c>
 80024d8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80024dc:	e020      	b.n	8002520 <HAL_ADC_Init+0x32c>
 80024de:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80024e2:	e01d      	b.n	8002520 <HAL_ADC_Init+0x32c>
 80024e4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80024e8:	e01a      	b.n	8002520 <HAL_ADC_Init+0x32c>
 80024ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ee:	e017      	b.n	8002520 <HAL_ADC_Init+0x32c>
 80024f0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80024f4:	e014      	b.n	8002520 <HAL_ADC_Init+0x32c>
 80024f6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80024fa:	e011      	b.n	8002520 <HAL_ADC_Init+0x32c>
 80024fc:	20000000 	.word	0x20000000
 8002500:	431bde83 	.word	0x431bde83
 8002504:	50000100 	.word	0x50000100
 8002508:	50000300 	.word	0x50000300
 800250c:	50000700 	.word	0x50000700
 8002510:	50000400 	.word	0x50000400
 8002514:	50000500 	.word	0x50000500
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002524:	4313      	orrs	r3, r2
 8002526:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002528:	4313      	orrs	r3, r2
 800252a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b00      	cmp	r3, #0
 8002538:	d114      	bne.n	8002564 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002548:	f023 0302 	bic.w	r3, r3, #2
 800254c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	7e1b      	ldrb	r3, [r3, #24]
 8002552:	039a      	lsls	r2, r3, #14
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4313      	orrs	r3, r2
 800255e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002560:	4313      	orrs	r3, r2
 8002562:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <HAL_ADC_Init+0x3f0>)
 800256c:	4013      	ands	r3, r2
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002574:	430b      	orrs	r3, r1
 8002576:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d10c      	bne.n	800259a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f023 010f 	bic.w	r1, r3, #15
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	1e5a      	subs	r2, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
 8002598:	e007      	b.n	80025aa <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 020f 	bic.w	r2, r2, #15
 80025a8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	f023 0303 	bic.w	r3, r3, #3
 80025b8:	f043 0201 	orr.w	r2, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	641a      	str	r2, [r3, #64]	; 0x40
 80025c0:	e00a      	b.n	80025d8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f023 0312 	bic.w	r3, r3, #18
 80025ca:	f043 0210 	orr.w	r2, r3, #16
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80025d2:	2301      	movs	r3, #1
 80025d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80025d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3768      	adds	r7, #104	; 0x68
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	fff0c007 	.word	0xfff0c007

080025e8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b00      	cmp	r3, #0
 8002604:	f040 80f7 	bne.w	80027f6 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800260e:	2b01      	cmp	r3, #1
 8002610:	d101      	bne.n	8002616 <HAL_ADC_Start_DMA+0x2e>
 8002612:	2302      	movs	r3, #2
 8002614:	e0f2      	b.n	80027fc <HAL_ADC_Start_DMA+0x214>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002626:	d004      	beq.n	8002632 <HAL_ADC_Start_DMA+0x4a>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a75      	ldr	r2, [pc, #468]	; (8002804 <HAL_ADC_Start_DMA+0x21c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d109      	bne.n	8002646 <HAL_ADC_Start_DMA+0x5e>
 8002632:	4b75      	ldr	r3, [pc, #468]	; (8002808 <HAL_ADC_Start_DMA+0x220>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 031f 	and.w	r3, r3, #31
 800263a:	2b00      	cmp	r3, #0
 800263c:	bf0c      	ite	eq
 800263e:	2301      	moveq	r3, #1
 8002640:	2300      	movne	r3, #0
 8002642:	b2db      	uxtb	r3, r3
 8002644:	e008      	b.n	8002658 <HAL_ADC_Start_DMA+0x70>
 8002646:	4b71      	ldr	r3, [pc, #452]	; (800280c <HAL_ADC_Start_DMA+0x224>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 031f 	and.w	r3, r3, #31
 800264e:	2b00      	cmp	r3, #0
 8002650:	bf0c      	ite	eq
 8002652:	2301      	moveq	r3, #1
 8002654:	2300      	movne	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 80c5 	beq.w	80027e8 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 fd22 	bl	80030a8 <ADC_Enable>
 8002664:	4603      	mov	r3, r0
 8002666:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002668:	7dfb      	ldrb	r3, [r7, #23]
 800266a:	2b00      	cmp	r3, #0
 800266c:	f040 80b7 	bne.w	80027de <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800268c:	d004      	beq.n	8002698 <HAL_ADC_Start_DMA+0xb0>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a5c      	ldr	r2, [pc, #368]	; (8002804 <HAL_ADC_Start_DMA+0x21c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d106      	bne.n	80026a6 <HAL_ADC_Start_DMA+0xbe>
 8002698:	4b5b      	ldr	r3, [pc, #364]	; (8002808 <HAL_ADC_Start_DMA+0x220>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d010      	beq.n	80026c6 <HAL_ADC_Start_DMA+0xde>
 80026a4:	e005      	b.n	80026b2 <HAL_ADC_Start_DMA+0xca>
 80026a6:	4b59      	ldr	r3, [pc, #356]	; (800280c <HAL_ADC_Start_DMA+0x224>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 031f 	and.w	r3, r3, #31
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d009      	beq.n	80026c6 <HAL_ADC_Start_DMA+0xde>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026ba:	d004      	beq.n	80026c6 <HAL_ADC_Start_DMA+0xde>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a53      	ldr	r2, [pc, #332]	; (8002810 <HAL_ADC_Start_DMA+0x228>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d115      	bne.n	80026f2 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d036      	beq.n	800274e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80026f0:	e02d      	b.n	800274e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002706:	d004      	beq.n	8002712 <HAL_ADC_Start_DMA+0x12a>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a3d      	ldr	r2, [pc, #244]	; (8002804 <HAL_ADC_Start_DMA+0x21c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d10a      	bne.n	8002728 <HAL_ADC_Start_DMA+0x140>
 8002712:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf14      	ite	ne
 8002720:	2301      	movne	r3, #1
 8002722:	2300      	moveq	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	e008      	b.n	800273a <HAL_ADC_Start_DMA+0x152>
 8002728:	4b39      	ldr	r3, [pc, #228]	; (8002810 <HAL_ADC_Start_DMA+0x228>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	bf14      	ite	ne
 8002734:	2301      	movne	r3, #1
 8002736:	2300      	moveq	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d007      	beq.n	800274e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002746:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800275a:	d106      	bne.n	800276a <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002760:	f023 0206 	bic.w	r2, r3, #6
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	645a      	str	r2, [r3, #68]	; 0x44
 8002768:	e002      	b.n	8002770 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277c:	4a25      	ldr	r2, [pc, #148]	; (8002814 <HAL_ADC_Start_DMA+0x22c>)
 800277e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002784:	4a24      	ldr	r2, [pc, #144]	; (8002818 <HAL_ADC_Start_DMA+0x230>)
 8002786:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278c:	4a23      	ldr	r2, [pc, #140]	; (800281c <HAL_ADC_Start_DMA+0x234>)
 800278e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	221c      	movs	r2, #28
 8002796:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0210 	orr.w	r2, r2, #16
 80027a6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	3340      	adds	r3, #64	; 0x40
 80027c2:	4619      	mov	r1, r3
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f000 fed2 	bl	8003570 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0204 	orr.w	r2, r2, #4
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	e00d      	b.n	80027fa <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80027e6:	e008      	b.n	80027fa <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80027f4:	e001      	b.n	80027fa <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027f6:	2302      	movs	r3, #2
 80027f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80027fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	50000100 	.word	0x50000100
 8002808:	50000300 	.word	0x50000300
 800280c:	50000700 	.word	0x50000700
 8002810:	50000400 	.word	0x50000400
 8002814:	08002fdd 	.word	0x08002fdd
 8002818:	08003057 	.word	0x08003057
 800281c:	08003073 	.word	0x08003073

08002820 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002820:	b480      	push	{r7}
 8002822:	b09b      	sub	sp, #108	; 0x6c
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x22>
 800283e:	2302      	movs	r3, #2
 8002840:	e2ca      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x5b8>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	f040 82ae 	bne.w	8002db6 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b04      	cmp	r3, #4
 8002860:	d81c      	bhi.n	800289c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4413      	add	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	461a      	mov	r2, r3
 8002876:	231f      	movs	r3, #31
 8002878:	4093      	lsls	r3, r2
 800287a:	43db      	mvns	r3, r3
 800287c:	4019      	ands	r1, r3
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4413      	add	r3, r2
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	fa00 f203 	lsl.w	r2, r0, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	631a      	str	r2, [r3, #48]	; 0x30
 800289a:	e063      	b.n	8002964 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b09      	cmp	r3, #9
 80028a2:	d81e      	bhi.n	80028e2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4413      	add	r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	3b1e      	subs	r3, #30
 80028b8:	221f      	movs	r2, #31
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	4019      	ands	r1, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	4413      	add	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	3b1e      	subs	r3, #30
 80028d4:	fa00 f203 	lsl.w	r2, r0, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	635a      	str	r2, [r3, #52]	; 0x34
 80028e0:	e040      	b.n	8002964 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b0e      	cmp	r3, #14
 80028e8:	d81e      	bhi.n	8002928 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4413      	add	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	3b3c      	subs	r3, #60	; 0x3c
 80028fe:	221f      	movs	r2, #31
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	4019      	ands	r1, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	4413      	add	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	3b3c      	subs	r3, #60	; 0x3c
 800291a:	fa00 f203 	lsl.w	r2, r0, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	639a      	str	r2, [r3, #56]	; 0x38
 8002926:	e01d      	b.n	8002964 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	3b5a      	subs	r3, #90	; 0x5a
 800293c:	221f      	movs	r2, #31
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	4019      	ands	r1, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6818      	ldr	r0, [r3, #0]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	3b5a      	subs	r3, #90	; 0x5a
 8002958:	fa00 f203 	lsl.w	r2, r0, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b00      	cmp	r3, #0
 8002970:	f040 80e5 	bne.w	8002b3e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b09      	cmp	r3, #9
 800297a:	d91c      	bls.n	80029b6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6999      	ldr	r1, [r3, #24]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	4613      	mov	r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	4413      	add	r3, r2
 800298c:	3b1e      	subs	r3, #30
 800298e:	2207      	movs	r2, #7
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	4019      	ands	r1, r3
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	6898      	ldr	r0, [r3, #8]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4613      	mov	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	4413      	add	r3, r2
 80029a6:	3b1e      	subs	r3, #30
 80029a8:	fa00 f203 	lsl.w	r2, r0, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	619a      	str	r2, [r3, #24]
 80029b4:	e019      	b.n	80029ea <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6959      	ldr	r1, [r3, #20]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	2207      	movs	r2, #7
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	4019      	ands	r1, r3
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	6898      	ldr	r0, [r3, #8]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4613      	mov	r3, r2
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	4413      	add	r3, r2
 80029de:	fa00 f203 	lsl.w	r2, r0, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	08db      	lsrs	r3, r3, #3
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d84f      	bhi.n	8002aac <HAL_ADC_ConfigChannel+0x28c>
 8002a0c:	a201      	add	r2, pc, #4	; (adr r2, 8002a14 <HAL_ADC_ConfigChannel+0x1f4>)
 8002a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a12:	bf00      	nop
 8002a14:	08002a25 	.word	0x08002a25
 8002a18:	08002a47 	.word	0x08002a47
 8002a1c:	08002a69 	.word	0x08002a69
 8002a20:	08002a8b 	.word	0x08002a8b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a2a:	4b9a      	ldr	r3, [pc, #616]	; (8002c94 <HAL_ADC_ConfigChannel+0x474>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	6812      	ldr	r2, [r2, #0]
 8002a32:	0691      	lsls	r1, r2, #26
 8002a34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a36:	430a      	orrs	r2, r1
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a42:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a44:	e07e      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a4c:	4b91      	ldr	r3, [pc, #580]	; (8002c94 <HAL_ADC_ConfigChannel+0x474>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	0691      	lsls	r1, r2, #26
 8002a56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a64:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a66:	e06d      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a6e:	4b89      	ldr	r3, [pc, #548]	; (8002c94 <HAL_ADC_ConfigChannel+0x474>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	6812      	ldr	r2, [r2, #0]
 8002a76:	0691      	lsls	r1, r2, #26
 8002a78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a86:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a88:	e05c      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a90:	4b80      	ldr	r3, [pc, #512]	; (8002c94 <HAL_ADC_ConfigChannel+0x474>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	0691      	lsls	r1, r2, #26
 8002a9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002aa8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002aaa:	e04b      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	069b      	lsls	r3, r3, #26
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d107      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ace:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ad6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	069b      	lsls	r3, r3, #26
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d107      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002af2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002afa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	069b      	lsls	r3, r3, #26
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d107      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b16:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	069b      	lsls	r3, r3, #26
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d10a      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b3a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002b3c:	e001      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002b3e:	bf00      	nop
 8002b40:	e000      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002b42:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d108      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x344>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x344>
 8002b60:	2301      	movs	r3, #1
 8002b62:	e000      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x346>
 8002b64:	2300      	movs	r3, #0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f040 8130 	bne.w	8002dcc <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d00f      	beq.n	8002b94 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2201      	movs	r2, #1
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43da      	mvns	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	400a      	ands	r2, r1
 8002b8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002b92:	e049      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	409a      	lsls	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b09      	cmp	r3, #9
 8002bb4:	d91c      	bls.n	8002bf0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6999      	ldr	r1, [r3, #24]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3b1b      	subs	r3, #27
 8002bc8:	2207      	movs	r2, #7
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	4019      	ands	r1, r3
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6898      	ldr	r0, [r3, #8]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	4413      	add	r3, r2
 8002be0:	3b1b      	subs	r3, #27
 8002be2:	fa00 f203 	lsl.w	r2, r0, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	619a      	str	r2, [r3, #24]
 8002bee:	e01b      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6959      	ldr	r1, [r3, #20]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	2207      	movs	r2, #7
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	4019      	ands	r1, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	6898      	ldr	r0, [r3, #8]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	4613      	mov	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	4413      	add	r3, r2
 8002c1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c30:	d004      	beq.n	8002c3c <HAL_ADC_ConfigChannel+0x41c>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a18      	ldr	r2, [pc, #96]	; (8002c98 <HAL_ADC_ConfigChannel+0x478>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d101      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x420>
 8002c3c:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <HAL_ADC_ConfigChannel+0x47c>)
 8002c3e:	e000      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x422>
 8002c40:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <HAL_ADC_ConfigChannel+0x480>)
 8002c42:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b10      	cmp	r3, #16
 8002c4a:	d105      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d015      	beq.n	8002c84 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c5c:	2b11      	cmp	r3, #17
 8002c5e:	d105      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00b      	beq.n	8002c84 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c70:	2b12      	cmp	r3, #18
 8002c72:	f040 80ab 	bne.w	8002dcc <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002c76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f040 80a4 	bne.w	8002dcc <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c8c:	d10a      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x484>
 8002c8e:	4b02      	ldr	r3, [pc, #8]	; (8002c98 <HAL_ADC_ConfigChannel+0x478>)
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	e022      	b.n	8002cda <HAL_ADC_ConfigChannel+0x4ba>
 8002c94:	83fff000 	.word	0x83fff000
 8002c98:	50000100 	.word	0x50000100
 8002c9c:	50000300 	.word	0x50000300
 8002ca0:	50000700 	.word	0x50000700
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a4e      	ldr	r2, [pc, #312]	; (8002de4 <HAL_ADC_ConfigChannel+0x5c4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d103      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x496>
 8002cae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	e011      	b.n	8002cda <HAL_ADC_ConfigChannel+0x4ba>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a4b      	ldr	r2, [pc, #300]	; (8002de8 <HAL_ADC_ConfigChannel+0x5c8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d102      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x4a6>
 8002cc0:	4b4a      	ldr	r3, [pc, #296]	; (8002dec <HAL_ADC_ConfigChannel+0x5cc>)
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	e009      	b.n	8002cda <HAL_ADC_ConfigChannel+0x4ba>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a48      	ldr	r2, [pc, #288]	; (8002dec <HAL_ADC_ConfigChannel+0x5cc>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d102      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x4b6>
 8002cd0:	4b45      	ldr	r3, [pc, #276]	; (8002de8 <HAL_ADC_ConfigChannel+0x5c8>)
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	e001      	b.n	8002cda <HAL_ADC_ConfigChannel+0x4ba>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 0303 	and.w	r3, r3, #3
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d108      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x4da>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d101      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x4da>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x4dc>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d150      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d00:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d010      	beq.n	8002d28 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d107      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x502>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x502>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x504>
 8002d22:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d13c      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d11d      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x54c>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d38:	d118      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d44:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d46:	4b2a      	ldr	r3, [pc, #168]	; (8002df0 <HAL_ADC_ConfigChannel+0x5d0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a2a      	ldr	r2, [pc, #168]	; (8002df4 <HAL_ADC_ConfigChannel+0x5d4>)
 8002d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d50:	0c9a      	lsrs	r2, r3, #18
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d5c:	e002      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f9      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d6a:	e02e      	b.n	8002dca <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b11      	cmp	r3, #17
 8002d72:	d10b      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x56c>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d7c:	d106      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d88:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d8a:	e01e      	b.n	8002dca <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b12      	cmp	r3, #18
 8002d92:	d11a      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002d94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d9e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002da0:	e013      	b.n	8002dca <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f043 0220 	orr.w	r2, r3, #32
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002db4:	e00a      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f043 0220 	orr.w	r2, r3, #32
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002dc8:	e000      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002dca:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002dd4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	376c      	adds	r7, #108	; 0x6c
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	50000100 	.word	0x50000100
 8002de8:	50000400 	.word	0x50000400
 8002dec:	50000500 	.word	0x50000500
 8002df0:	20000000 	.word	0x20000000
 8002df4:	431bde83 	.word	0x431bde83

08002df8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b099      	sub	sp, #100	; 0x64
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e10:	d102      	bne.n	8002e18 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002e12:	4b6d      	ldr	r3, [pc, #436]	; (8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	e01a      	b.n	8002e4e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a6a      	ldr	r2, [pc, #424]	; (8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d103      	bne.n	8002e2a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002e22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	e011      	b.n	8002e4e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a67      	ldr	r2, [pc, #412]	; (8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d102      	bne.n	8002e3a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e34:	4b66      	ldr	r3, [pc, #408]	; (8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002e36:	60bb      	str	r3, [r7, #8]
 8002e38:	e009      	b.n	8002e4e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a64      	ldr	r2, [pc, #400]	; (8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d102      	bne.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002e44:	4b61      	ldr	r3, [pc, #388]	; (8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	e001      	b.n	8002e4e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0b0      	b.n	8002fba <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e0a9      	b.n	8002fba <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f040 808d 	bne.w	8002f98 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f040 8086 	bne.w	8002f98 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e94:	d004      	beq.n	8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a4b      	ldr	r2, [pc, #300]	; (8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d101      	bne.n	8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002ea0:	4b4c      	ldr	r3, [pc, #304]	; (8002fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002ea2:	e000      	b.n	8002ea6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002ea4:	4b4c      	ldr	r3, [pc, #304]	; (8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002ea6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d040      	beq.n	8002f32 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002eb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	6859      	ldr	r1, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ec2:	035b      	lsls	r3, r3, #13
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eca:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d108      	bne.n	8002eec <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002eec:	2300      	movs	r3, #0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d15c      	bne.n	8002fac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d107      	bne.n	8002f0e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002f0e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d14b      	bne.n	8002fac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002f14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f1c:	f023 030f 	bic.w	r3, r3, #15
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	6811      	ldr	r1, [r2, #0]
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	6892      	ldr	r2, [r2, #8]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f2e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f30:	e03c      	b.n	8002fac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f3c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d108      	bne.n	8002f5e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d123      	bne.n	8002fac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d107      	bne.n	8002f80 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002f80:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d112      	bne.n	8002fac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f8e:	f023 030f 	bic.w	r3, r3, #15
 8002f92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f94:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f96:	e009      	b.n	8002fac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	f043 0220 	orr.w	r2, r3, #32
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002faa:	e000      	b.n	8002fae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fac:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002fb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3764      	adds	r7, #100	; 0x64
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	50000100 	.word	0x50000100
 8002fcc:	50000400 	.word	0x50000400
 8002fd0:	50000500 	.word	0x50000500
 8002fd4:	50000300 	.word	0x50000300
 8002fd8:	50000700 	.word	0x50000700

08002fdc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d126      	bne.n	8003044 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800300c:	2b00      	cmp	r3, #0
 800300e:	d115      	bne.n	800303c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003014:	2b00      	cmp	r3, #0
 8003016:	d111      	bne.n	800303c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d105      	bne.n	800303c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	f043 0201 	orr.w	r2, r3, #1
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f7fe f885 	bl	800114c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003042:	e004      	b.n	800304e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	4798      	blx	r3
}
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f7ff f8b1 	bl	80021cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003090:	f043 0204 	orr.w	r2, r3, #4
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f7ff f8a1 	bl	80021e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d108      	bne.n	80030d4 <ADC_Enable+0x2c>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <ADC_Enable+0x2c>
 80030d0:	2301      	movs	r3, #1
 80030d2:	e000      	b.n	80030d6 <ADC_Enable+0x2e>
 80030d4:	2300      	movs	r3, #0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d143      	bne.n	8003162 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	4b22      	ldr	r3, [pc, #136]	; (800316c <ADC_Enable+0xc4>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00d      	beq.n	8003104 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	f043 0210 	orr.w	r2, r3, #16
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f8:	f043 0201 	orr.w	r2, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e02f      	b.n	8003164 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003114:	f7ff f82a 	bl	800216c <HAL_GetTick>
 8003118:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800311a:	e01b      	b.n	8003154 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800311c:	f7ff f826 	bl	800216c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d914      	bls.n	8003154 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b01      	cmp	r3, #1
 8003136:	d00d      	beq.n	8003154 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	f043 0210 	orr.w	r2, r3, #16
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003148:	f043 0201 	orr.w	r2, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e007      	b.n	8003164 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b01      	cmp	r3, #1
 8003160:	d1dc      	bne.n	800311c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	8000003f 	.word	0x8000003f

08003170 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	2b01      	cmp	r3, #1
 8003188:	d108      	bne.n	800319c <ADC_Disable+0x2c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <ADC_Disable+0x2c>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <ADC_Disable+0x2e>
 800319c:	2300      	movs	r3, #0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d047      	beq.n	8003232 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 030d 	and.w	r3, r3, #13
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d10f      	bne.n	80031d0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0202 	orr.w	r2, r2, #2
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2203      	movs	r2, #3
 80031c6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80031c8:	f7fe ffd0 	bl	800216c <HAL_GetTick>
 80031cc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031ce:	e029      	b.n	8003224 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	f043 0210 	orr.w	r2, r3, #16
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e0:	f043 0201 	orr.w	r2, r3, #1
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e023      	b.n	8003234 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031ec:	f7fe ffbe 	bl	800216c <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d914      	bls.n	8003224 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b01      	cmp	r3, #1
 8003206:	d10d      	bne.n	8003224 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	f043 0210 	orr.w	r2, r3, #16
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003218:	f043 0201 	orr.w	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e007      	b.n	8003234 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b01      	cmp	r3, #1
 8003230:	d0dc      	beq.n	80031ec <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800324c:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <__NVIC_SetPriorityGrouping+0x44>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003258:	4013      	ands	r3, r2
 800325a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800326c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800326e:	4a04      	ldr	r2, [pc, #16]	; (8003280 <__NVIC_SetPriorityGrouping+0x44>)
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	60d3      	str	r3, [r2, #12]
}
 8003274:	bf00      	nop
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003288:	4b04      	ldr	r3, [pc, #16]	; (800329c <__NVIC_GetPriorityGrouping+0x18>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	0a1b      	lsrs	r3, r3, #8
 800328e:	f003 0307 	and.w	r3, r3, #7
}
 8003292:	4618      	mov	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	db0b      	blt.n	80032ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	f003 021f 	and.w	r2, r3, #31
 80032b8:	4907      	ldr	r1, [pc, #28]	; (80032d8 <__NVIC_EnableIRQ+0x38>)
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	095b      	lsrs	r3, r3, #5
 80032c0:	2001      	movs	r0, #1
 80032c2:	fa00 f202 	lsl.w	r2, r0, r2
 80032c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	e000e100 	.word	0xe000e100

080032dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	6039      	str	r1, [r7, #0]
 80032e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	db0a      	blt.n	8003306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	490c      	ldr	r1, [pc, #48]	; (8003328 <__NVIC_SetPriority+0x4c>)
 80032f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fa:	0112      	lsls	r2, r2, #4
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	440b      	add	r3, r1
 8003300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003304:	e00a      	b.n	800331c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	b2da      	uxtb	r2, r3
 800330a:	4908      	ldr	r1, [pc, #32]	; (800332c <__NVIC_SetPriority+0x50>)
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	3b04      	subs	r3, #4
 8003314:	0112      	lsls	r2, r2, #4
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	440b      	add	r3, r1
 800331a:	761a      	strb	r2, [r3, #24]
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	e000e100 	.word	0xe000e100
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003330:	b480      	push	{r7}
 8003332:	b089      	sub	sp, #36	; 0x24
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f1c3 0307 	rsb	r3, r3, #7
 800334a:	2b04      	cmp	r3, #4
 800334c:	bf28      	it	cs
 800334e:	2304      	movcs	r3, #4
 8003350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	3304      	adds	r3, #4
 8003356:	2b06      	cmp	r3, #6
 8003358:	d902      	bls.n	8003360 <NVIC_EncodePriority+0x30>
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3b03      	subs	r3, #3
 800335e:	e000      	b.n	8003362 <NVIC_EncodePriority+0x32>
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003364:	f04f 32ff 	mov.w	r2, #4294967295
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43da      	mvns	r2, r3
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	401a      	ands	r2, r3
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003378:	f04f 31ff 	mov.w	r1, #4294967295
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	fa01 f303 	lsl.w	r3, r1, r3
 8003382:	43d9      	mvns	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003388:	4313      	orrs	r3, r2
         );
}
 800338a:	4618      	mov	r0, r3
 800338c:	3724      	adds	r7, #36	; 0x24
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
	...

08003398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033a8:	d301      	bcc.n	80033ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033aa:	2301      	movs	r3, #1
 80033ac:	e00f      	b.n	80033ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ae:	4a0a      	ldr	r2, [pc, #40]	; (80033d8 <SysTick_Config+0x40>)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033b6:	210f      	movs	r1, #15
 80033b8:	f04f 30ff 	mov.w	r0, #4294967295
 80033bc:	f7ff ff8e 	bl	80032dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033c0:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <SysTick_Config+0x40>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033c6:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <SysTick_Config+0x40>)
 80033c8:	2207      	movs	r2, #7
 80033ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	e000e010 	.word	0xe000e010

080033dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff ff29 	bl	800323c <__NVIC_SetPriorityGrouping>
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b086      	sub	sp, #24
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	4603      	mov	r3, r0
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
 80033fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003404:	f7ff ff3e 	bl	8003284 <__NVIC_GetPriorityGrouping>
 8003408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	68b9      	ldr	r1, [r7, #8]
 800340e:	6978      	ldr	r0, [r7, #20]
 8003410:	f7ff ff8e 	bl	8003330 <NVIC_EncodePriority>
 8003414:	4602      	mov	r2, r0
 8003416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800341a:	4611      	mov	r1, r2
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff ff5d 	bl	80032dc <__NVIC_SetPriority>
}
 8003422:	bf00      	nop
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b082      	sub	sp, #8
 800342e:	af00      	add	r7, sp, #0
 8003430:	4603      	mov	r3, r0
 8003432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ff31 	bl	80032a0 <__NVIC_EnableIRQ>
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff ffa2 	bl	8003398 <SysTick_Config>
 8003454:	4603      	mov	r3, r0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e037      	b.n	80034e4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800348a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800348e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003498:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f9bc 	bl	8003844 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}  
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_DMA_Start+0x20>
 8003508:	2302      	movs	r3, #2
 800350a:	e02d      	b.n	8003568 <HAL_DMA_Start+0x7c>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800351a:	2b01      	cmp	r3, #1
 800351c:	d11d      	bne.n	800355a <HAL_DMA_Start+0x6e>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2202      	movs	r2, #2
 8003522:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0201 	bic.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	68b9      	ldr	r1, [r7, #8]
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f94f 	bl	80037e6 <DMA_SetConfig>
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;  
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0201 	orr.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	e005      	b.n	8003566 <HAL_DMA_Start+0x7a>
  }
  else
  {
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	/* Remain BUSY */
  	status = HAL_BUSY;
 8003562:	2302      	movs	r3, #2
 8003564:	75fb      	strb	r3, [r7, #23]
  }  

  return status; 
 8003566:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_DMA_Start_IT+0x20>
 800358c:	2302      	movs	r3, #2
 800358e:	e04a      	b.n	8003626 <HAL_DMA_Start_IT+0xb6>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d13a      	bne.n	8003618 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2202      	movs	r2, #2
 80035a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0201 	bic.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f90d 	bl	80037e6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d008      	beq.n	80035e6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 020e 	orr.w	r2, r2, #14
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	e00f      	b.n	8003606 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 020a 	orr.w	r2, r2, #10
 80035f4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0204 	bic.w	r2, r2, #4
 8003604:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 0201 	orr.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	e005      	b.n	8003624 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003620:	2302      	movs	r3, #2
 8003622:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003624:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800363c:	2b02      	cmp	r3, #2
 800363e:	d008      	beq.n	8003652 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2204      	movs	r2, #4
 8003644:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e020      	b.n	8003694 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 020e 	bic.w	r2, r2, #14
 8003660:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0201 	bic.w	r2, r2, #1
 8003670:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367a:	2101      	movs	r1, #1
 800367c:	fa01 f202 	lsl.w	r2, r1, r2
 8003680:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	2204      	movs	r2, #4
 80036be:	409a      	lsls	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d024      	beq.n	8003712 <HAL_DMA_IRQHandler+0x72>
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d01f      	beq.n	8003712 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0320 	and.w	r3, r3, #32
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d107      	bne.n	80036f0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0204 	bic.w	r2, r2, #4
 80036ee:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f8:	2104      	movs	r1, #4
 80036fa:	fa01 f202 	lsl.w	r2, r1, r2
 80036fe:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	2b00      	cmp	r3, #0
 8003706:	d06a      	beq.n	80037de <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003710:	e065      	b.n	80037de <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	2202      	movs	r2, #2
 8003718:	409a      	lsls	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4013      	ands	r3, r2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d02c      	beq.n	800377c <HAL_DMA_IRQHandler+0xdc>
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d027      	beq.n	800377c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10b      	bne.n	8003752 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 020a 	bic.w	r2, r2, #10
 8003748:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375a:	2102      	movs	r1, #2
 800375c:	fa01 f202 	lsl.w	r2, r1, r2
 8003760:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	2b00      	cmp	r3, #0
 8003770:	d035      	beq.n	80037de <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800377a:	e030      	b.n	80037de <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	2208      	movs	r2, #8
 8003782:	409a      	lsls	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d028      	beq.n	80037de <HAL_DMA_IRQHandler+0x13e>
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d023      	beq.n	80037de <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 020e 	bic.w	r2, r2, #14
 80037a4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ae:	2101      	movs	r1, #1
 80037b0:	fa01 f202 	lsl.w	r2, r1, r2
 80037b4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d004      	beq.n	80037de <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	4798      	blx	r3
    }
  }
}  
 80037dc:	e7ff      	b.n	80037de <HAL_DMA_IRQHandler+0x13e>
 80037de:	bf00      	nop
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b085      	sub	sp, #20
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
 80037f2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fc:	2101      	movs	r1, #1
 80037fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003802:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b10      	cmp	r3, #16
 8003812:	d108      	bne.n	8003826 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003824:	e007      	b.n	8003836 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	60da      	str	r2, [r3, #12]
}
 8003836:	bf00      	nop
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	4b14      	ldr	r3, [pc, #80]	; (80038a4 <DMA_CalcBaseAndBitshift+0x60>)
 8003854:	429a      	cmp	r2, r3
 8003856:	d80f      	bhi.n	8003878 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <DMA_CalcBaseAndBitshift+0x64>)
 8003860:	4413      	add	r3, r2
 8003862:	4a12      	ldr	r2, [pc, #72]	; (80038ac <DMA_CalcBaseAndBitshift+0x68>)
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	091b      	lsrs	r3, r3, #4
 800386a:	009a      	lsls	r2, r3, #2
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a0f      	ldr	r2, [pc, #60]	; (80038b0 <DMA_CalcBaseAndBitshift+0x6c>)
 8003874:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003876:	e00e      	b.n	8003896 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <DMA_CalcBaseAndBitshift+0x70>)
 8003880:	4413      	add	r3, r2
 8003882:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <DMA_CalcBaseAndBitshift+0x68>)
 8003884:	fba2 2303 	umull	r2, r3, r2, r3
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	009a      	lsls	r2, r3, #2
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a09      	ldr	r2, [pc, #36]	; (80038b8 <DMA_CalcBaseAndBitshift+0x74>)
 8003894:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40020407 	.word	0x40020407
 80038a8:	bffdfff8 	.word	0xbffdfff8
 80038ac:	cccccccd 	.word	0xcccccccd
 80038b0:	40020000 	.word	0x40020000
 80038b4:	bffdfbf8 	.word	0xbffdfbf8
 80038b8:	40020400 	.word	0x40020400

080038bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ca:	e160      	b.n	8003b8e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	2101      	movs	r1, #1
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	fa01 f303 	lsl.w	r3, r1, r3
 80038d8:	4013      	ands	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 8152 	beq.w	8003b88 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d005      	beq.n	80038fc <HAL_GPIO_Init+0x40>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d130      	bne.n	800395e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	2203      	movs	r2, #3
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4013      	ands	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003932:	2201      	movs	r2, #1
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4013      	ands	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	091b      	lsrs	r3, r3, #4
 8003948:	f003 0201 	and.w	r2, r3, #1
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	2b03      	cmp	r3, #3
 8003968:	d017      	beq.n	800399a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	2203      	movs	r2, #3
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	43db      	mvns	r3, r3
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4013      	ands	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d123      	bne.n	80039ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	08da      	lsrs	r2, r3, #3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3208      	adds	r2, #8
 80039ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	220f      	movs	r2, #15
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4013      	ands	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	08da      	lsrs	r2, r3, #3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3208      	adds	r2, #8
 80039e8:	6939      	ldr	r1, [r7, #16]
 80039ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	2203      	movs	r2, #3
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	4013      	ands	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f003 0203 	and.w	r2, r3, #3
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 80ac 	beq.w	8003b88 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a30:	4b5e      	ldr	r3, [pc, #376]	; (8003bac <HAL_GPIO_Init+0x2f0>)
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	4a5d      	ldr	r2, [pc, #372]	; (8003bac <HAL_GPIO_Init+0x2f0>)
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	6193      	str	r3, [r2, #24]
 8003a3c:	4b5b      	ldr	r3, [pc, #364]	; (8003bac <HAL_GPIO_Init+0x2f0>)
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a48:	4a59      	ldr	r2, [pc, #356]	; (8003bb0 <HAL_GPIO_Init+0x2f4>)
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	089b      	lsrs	r3, r3, #2
 8003a4e:	3302      	adds	r3, #2
 8003a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f003 0303 	and.w	r3, r3, #3
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	220f      	movs	r2, #15
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	43db      	mvns	r3, r3
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a72:	d025      	beq.n	8003ac0 <HAL_GPIO_Init+0x204>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a4f      	ldr	r2, [pc, #316]	; (8003bb4 <HAL_GPIO_Init+0x2f8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d01f      	beq.n	8003abc <HAL_GPIO_Init+0x200>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a4e      	ldr	r2, [pc, #312]	; (8003bb8 <HAL_GPIO_Init+0x2fc>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d019      	beq.n	8003ab8 <HAL_GPIO_Init+0x1fc>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a4d      	ldr	r2, [pc, #308]	; (8003bbc <HAL_GPIO_Init+0x300>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d013      	beq.n	8003ab4 <HAL_GPIO_Init+0x1f8>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a4c      	ldr	r2, [pc, #304]	; (8003bc0 <HAL_GPIO_Init+0x304>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00d      	beq.n	8003ab0 <HAL_GPIO_Init+0x1f4>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a4b      	ldr	r2, [pc, #300]	; (8003bc4 <HAL_GPIO_Init+0x308>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d007      	beq.n	8003aac <HAL_GPIO_Init+0x1f0>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a4a      	ldr	r2, [pc, #296]	; (8003bc8 <HAL_GPIO_Init+0x30c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d101      	bne.n	8003aa8 <HAL_GPIO_Init+0x1ec>
 8003aa4:	2306      	movs	r3, #6
 8003aa6:	e00c      	b.n	8003ac2 <HAL_GPIO_Init+0x206>
 8003aa8:	2307      	movs	r3, #7
 8003aaa:	e00a      	b.n	8003ac2 <HAL_GPIO_Init+0x206>
 8003aac:	2305      	movs	r3, #5
 8003aae:	e008      	b.n	8003ac2 <HAL_GPIO_Init+0x206>
 8003ab0:	2304      	movs	r3, #4
 8003ab2:	e006      	b.n	8003ac2 <HAL_GPIO_Init+0x206>
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e004      	b.n	8003ac2 <HAL_GPIO_Init+0x206>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e002      	b.n	8003ac2 <HAL_GPIO_Init+0x206>
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <HAL_GPIO_Init+0x206>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	f002 0203 	and.w	r2, r2, #3
 8003ac8:	0092      	lsls	r2, r2, #2
 8003aca:	4093      	lsls	r3, r2
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ad2:	4937      	ldr	r1, [pc, #220]	; (8003bb0 <HAL_GPIO_Init+0x2f4>)
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	089b      	lsrs	r3, r3, #2
 8003ad8:	3302      	adds	r3, #2
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ae0:	4b3a      	ldr	r3, [pc, #232]	; (8003bcc <HAL_GPIO_Init+0x310>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4013      	ands	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b04:	4a31      	ldr	r2, [pc, #196]	; (8003bcc <HAL_GPIO_Init+0x310>)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b0a:	4b30      	ldr	r3, [pc, #192]	; (8003bcc <HAL_GPIO_Init+0x310>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	43db      	mvns	r3, r3
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4013      	ands	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003b2e:	4a27      	ldr	r2, [pc, #156]	; (8003bcc <HAL_GPIO_Init+0x310>)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b34:	4b25      	ldr	r3, [pc, #148]	; (8003bcc <HAL_GPIO_Init+0x310>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4013      	ands	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003b58:	4a1c      	ldr	r2, [pc, #112]	; (8003bcc <HAL_GPIO_Init+0x310>)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b5e:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <HAL_GPIO_Init+0x310>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	43db      	mvns	r3, r3
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003b82:	4a12      	ldr	r2, [pc, #72]	; (8003bcc <HAL_GPIO_Init+0x310>)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	fa22 f303 	lsr.w	r3, r2, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f47f ae97 	bne.w	80038cc <HAL_GPIO_Init+0x10>
  }
}
 8003b9e:	bf00      	nop
 8003ba0:	bf00      	nop
 8003ba2:	371c      	adds	r7, #28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	40010000 	.word	0x40010000
 8003bb4:	48000400 	.word	0x48000400
 8003bb8:	48000800 	.word	0x48000800
 8003bbc:	48000c00 	.word	0x48000c00
 8003bc0:	48001000 	.word	0x48001000
 8003bc4:	48001400 	.word	0x48001400
 8003bc8:	48001800 	.word	0x48001800
 8003bcc:	40010400 	.word	0x40010400

08003bd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	887b      	ldrh	r3, [r7, #2]
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003be8:	2301      	movs	r3, #1
 8003bea:	73fb      	strb	r3, [r7, #15]
 8003bec:	e001      	b.n	8003bf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	807b      	strh	r3, [r7, #2]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c10:	787b      	ldrb	r3, [r7, #1]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c16:	887a      	ldrh	r2, [r7, #2]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c1c:	e002      	b.n	8003c24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c1e:	887a      	ldrh	r2, [r7, #2]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c42:	887a      	ldrh	r2, [r7, #2]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4013      	ands	r3, r2
 8003c48:	041a      	lsls	r2, r3, #16
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	43d9      	mvns	r1, r3
 8003c4e:	887b      	ldrh	r3, [r7, #2]
 8003c50:	400b      	ands	r3, r1
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	619a      	str	r2, [r3, #24]
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c74:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	f001 b83a 	b.w	8004cfe <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 816f 	beq.w	8003f7e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003ca0:	4bb5      	ldr	r3, [pc, #724]	; (8003f78 <HAL_RCC_OscConfig+0x314>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f003 030c 	and.w	r3, r3, #12
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d00c      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cac:	4bb2      	ldr	r3, [pc, #712]	; (8003f78 <HAL_RCC_OscConfig+0x314>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 030c 	and.w	r3, r3, #12
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d15c      	bne.n	8003d72 <HAL_RCC_OscConfig+0x10e>
 8003cb8:	4baf      	ldr	r3, [pc, #700]	; (8003f78 <HAL_RCC_OscConfig+0x314>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc4:	d155      	bne.n	8003d72 <HAL_RCC_OscConfig+0x10e>
 8003cc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cca:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003cd2:	fa93 f3a3 	rbit	r3, r3
 8003cd6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003cda:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cde:	fab3 f383 	clz	r3, r3
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	095b      	lsrs	r3, r3, #5
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d102      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x94>
 8003cf2:	4ba1      	ldr	r3, [pc, #644]	; (8003f78 <HAL_RCC_OscConfig+0x314>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	e015      	b.n	8003d24 <HAL_RCC_OscConfig+0xc0>
 8003cf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cfc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d00:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003d04:	fa93 f3a3 	rbit	r3, r3
 8003d08:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003d0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d10:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003d14:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003d18:	fa93 f3a3 	rbit	r3, r3
 8003d1c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003d20:	4b95      	ldr	r3, [pc, #596]	; (8003f78 <HAL_RCC_OscConfig+0x314>)
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d28:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003d2c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003d30:	fa92 f2a2 	rbit	r2, r2
 8003d34:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003d38:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003d3c:	fab2 f282 	clz	r2, r2
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	f042 0220 	orr.w	r2, r2, #32
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	f002 021f 	and.w	r2, r2, #31
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 8111 	beq.w	8003f7c <HAL_RCC_OscConfig+0x318>
 8003d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f040 8108 	bne.w	8003f7c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	f000 bfc6 	b.w	8004cfe <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d76:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d82:	d106      	bne.n	8003d92 <HAL_RCC_OscConfig+0x12e>
 8003d84:	4b7c      	ldr	r3, [pc, #496]	; (8003f78 <HAL_RCC_OscConfig+0x314>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a7b      	ldr	r2, [pc, #492]	; (8003f78 <HAL_RCC_OscConfig+0x314>)
 8003d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	e036      	b.n	8003e00 <HAL_RCC_OscConfig+0x19c>
 8003d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d96:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x158>
 8003da2:	4b75      	ldr	r3, [pc, #468]	; (8003f78 <HAL_RCC_OscConfig+0x314>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a74      	ldr	r2, [pc, #464]	; (8003f78 <HAL_RCC_OscConfig+0x314>)
 8003da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	4b72      	ldr	r3, [pc, #456]	; (8003f78 <HAL_RCC_OscConfig+0x314>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a71      	ldr	r2, [pc, #452]	; (8003f78 <HAL_RCC_OscConfig+0x314>)
 8003db4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	e021      	b.n	8003e00 <HAL_RCC_OscConfig+0x19c>
 8003dbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dc0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dcc:	d10c      	bne.n	8003de8 <HAL_RCC_OscConfig+0x184>
 8003dce:	4b6a      	ldr	r3, [pc, #424]	; (8003f78 <HAL_RCC_OscConfig+0x314>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a69      	ldr	r2, [pc, #420]	; (8003f78 <HAL_RCC_OscConfig+0x314>)
 8003dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	4b67      	ldr	r3, [pc, #412]	; (8003f78 <HAL_RCC_OscConfig+0x314>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a66      	ldr	r2, [pc, #408]	; (8003f78 <HAL_RCC_OscConfig+0x314>)
 8003de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	e00b      	b.n	8003e00 <HAL_RCC_OscConfig+0x19c>
 8003de8:	4b63      	ldr	r3, [pc, #396]	; (8003f78 <HAL_RCC_OscConfig+0x314>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a62      	ldr	r2, [pc, #392]	; (8003f78 <HAL_RCC_OscConfig+0x314>)
 8003dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	4b60      	ldr	r3, [pc, #384]	; (8003f78 <HAL_RCC_OscConfig+0x314>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a5f      	ldr	r2, [pc, #380]	; (8003f78 <HAL_RCC_OscConfig+0x314>)
 8003dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dfe:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d059      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e10:	f7fe f9ac 	bl	800216c <HAL_GetTick>
 8003e14:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e18:	e00a      	b.n	8003e30 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e1a:	f7fe f9a7 	bl	800216c <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b64      	cmp	r3, #100	; 0x64
 8003e28:	d902      	bls.n	8003e30 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	f000 bf67 	b.w	8004cfe <HAL_RCC_OscConfig+0x109a>
 8003e30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e34:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e38:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003e3c:	fa93 f3a3 	rbit	r3, r3
 8003e40:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003e44:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e48:	fab3 f383 	clz	r3, r3
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d102      	bne.n	8003e62 <HAL_RCC_OscConfig+0x1fe>
 8003e5c:	4b46      	ldr	r3, [pc, #280]	; (8003f78 <HAL_RCC_OscConfig+0x314>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	e015      	b.n	8003e8e <HAL_RCC_OscConfig+0x22a>
 8003e62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e66:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003e6e:	fa93 f3a3 	rbit	r3, r3
 8003e72:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003e76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e7a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003e7e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003e82:	fa93 f3a3 	rbit	r3, r3
 8003e86:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003e8a:	4b3b      	ldr	r3, [pc, #236]	; (8003f78 <HAL_RCC_OscConfig+0x314>)
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e92:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003e96:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003e9a:	fa92 f2a2 	rbit	r2, r2
 8003e9e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003ea2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003ea6:	fab2 f282 	clz	r2, r2
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	f042 0220 	orr.w	r2, r2, #32
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	f002 021f 	and.w	r2, r2, #31
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0ab      	beq.n	8003e1a <HAL_RCC_OscConfig+0x1b6>
 8003ec2:	e05c      	b.n	8003f7e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec4:	f7fe f952 	bl	800216c <HAL_GetTick>
 8003ec8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ecc:	e00a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ece:	f7fe f94d 	bl	800216c <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b64      	cmp	r3, #100	; 0x64
 8003edc:	d902      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	f000 bf0d 	b.w	8004cfe <HAL_RCC_OscConfig+0x109a>
 8003ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ee8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003ef0:	fa93 f3a3 	rbit	r3, r3
 8003ef4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003ef8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003efc:	fab3 f383 	clz	r3, r3
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d102      	bne.n	8003f16 <HAL_RCC_OscConfig+0x2b2>
 8003f10:	4b19      	ldr	r3, [pc, #100]	; (8003f78 <HAL_RCC_OscConfig+0x314>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	e015      	b.n	8003f42 <HAL_RCC_OscConfig+0x2de>
 8003f16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f1a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003f22:	fa93 f3a3 	rbit	r3, r3
 8003f26:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003f2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f2e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003f32:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003f36:	fa93 f3a3 	rbit	r3, r3
 8003f3a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003f3e:	4b0e      	ldr	r3, [pc, #56]	; (8003f78 <HAL_RCC_OscConfig+0x314>)
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f46:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003f4a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003f4e:	fa92 f2a2 	rbit	r2, r2
 8003f52:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003f56:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003f5a:	fab2 f282 	clz	r2, r2
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	f042 0220 	orr.w	r2, r2, #32
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	f002 021f 	and.w	r2, r2, #31
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f70:	4013      	ands	r3, r2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1ab      	bne.n	8003ece <HAL_RCC_OscConfig+0x26a>
 8003f76:	e002      	b.n	8003f7e <HAL_RCC_OscConfig+0x31a>
 8003f78:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 817f 	beq.w	8004292 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f94:	4ba7      	ldr	r3, [pc, #668]	; (8004234 <HAL_RCC_OscConfig+0x5d0>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f003 030c 	and.w	r3, r3, #12
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00c      	beq.n	8003fba <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003fa0:	4ba4      	ldr	r3, [pc, #656]	; (8004234 <HAL_RCC_OscConfig+0x5d0>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 030c 	and.w	r3, r3, #12
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d173      	bne.n	8004094 <HAL_RCC_OscConfig+0x430>
 8003fac:	4ba1      	ldr	r3, [pc, #644]	; (8004234 <HAL_RCC_OscConfig+0x5d0>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb8:	d16c      	bne.n	8004094 <HAL_RCC_OscConfig+0x430>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003fc4:	fa93 f3a3 	rbit	r3, r3
 8003fc8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003fcc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fd0:	fab3 f383 	clz	r3, r3
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d102      	bne.n	8003fea <HAL_RCC_OscConfig+0x386>
 8003fe4:	4b93      	ldr	r3, [pc, #588]	; (8004234 <HAL_RCC_OscConfig+0x5d0>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	e013      	b.n	8004012 <HAL_RCC_OscConfig+0x3ae>
 8003fea:	2302      	movs	r3, #2
 8003fec:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003ff4:	fa93 f3a3 	rbit	r3, r3
 8003ff8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004002:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004006:	fa93 f3a3 	rbit	r3, r3
 800400a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800400e:	4b89      	ldr	r3, [pc, #548]	; (8004234 <HAL_RCC_OscConfig+0x5d0>)
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	2202      	movs	r2, #2
 8004014:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004018:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800401c:	fa92 f2a2 	rbit	r2, r2
 8004020:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004024:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004028:	fab2 f282 	clz	r2, r2
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	f042 0220 	orr.w	r2, r2, #32
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	f002 021f 	and.w	r2, r2, #31
 8004038:	2101      	movs	r1, #1
 800403a:	fa01 f202 	lsl.w	r2, r1, r2
 800403e:	4013      	ands	r3, r2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <HAL_RCC_OscConfig+0x3f6>
 8004044:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004048:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d002      	beq.n	800405a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	f000 be52 	b.w	8004cfe <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405a:	4b76      	ldr	r3, [pc, #472]	; (8004234 <HAL_RCC_OscConfig+0x5d0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004062:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004066:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	21f8      	movs	r1, #248	; 0xf8
 8004070:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004074:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004078:	fa91 f1a1 	rbit	r1, r1
 800407c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004080:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004084:	fab1 f181 	clz	r1, r1
 8004088:	b2c9      	uxtb	r1, r1
 800408a:	408b      	lsls	r3, r1
 800408c:	4969      	ldr	r1, [pc, #420]	; (8004234 <HAL_RCC_OscConfig+0x5d0>)
 800408e:	4313      	orrs	r3, r2
 8004090:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004092:	e0fe      	b.n	8004292 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004094:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004098:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8088 	beq.w	80041b6 <HAL_RCC_OscConfig+0x552>
 80040a6:	2301      	movs	r3, #1
 80040a8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ac:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80040b0:	fa93 f3a3 	rbit	r3, r3
 80040b4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80040b8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040bc:	fab3 f383 	clz	r3, r3
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	461a      	mov	r2, r3
 80040ce:	2301      	movs	r3, #1
 80040d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d2:	f7fe f84b 	bl	800216c <HAL_GetTick>
 80040d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040da:	e00a      	b.n	80040f2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040dc:	f7fe f846 	bl	800216c <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d902      	bls.n	80040f2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	f000 be06 	b.w	8004cfe <HAL_RCC_OscConfig+0x109a>
 80040f2:	2302      	movs	r3, #2
 80040f4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80040fc:	fa93 f3a3 	rbit	r3, r3
 8004100:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004104:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004108:	fab3 f383 	clz	r3, r3
 800410c:	b2db      	uxtb	r3, r3
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	d102      	bne.n	8004122 <HAL_RCC_OscConfig+0x4be>
 800411c:	4b45      	ldr	r3, [pc, #276]	; (8004234 <HAL_RCC_OscConfig+0x5d0>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	e013      	b.n	800414a <HAL_RCC_OscConfig+0x4e6>
 8004122:	2302      	movs	r3, #2
 8004124:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004128:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800412c:	fa93 f3a3 	rbit	r3, r3
 8004130:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004134:	2302      	movs	r3, #2
 8004136:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800413a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800413e:	fa93 f3a3 	rbit	r3, r3
 8004142:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004146:	4b3b      	ldr	r3, [pc, #236]	; (8004234 <HAL_RCC_OscConfig+0x5d0>)
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	2202      	movs	r2, #2
 800414c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004150:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004154:	fa92 f2a2 	rbit	r2, r2
 8004158:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800415c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004160:	fab2 f282 	clz	r2, r2
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	f042 0220 	orr.w	r2, r2, #32
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	f002 021f 	and.w	r2, r2, #31
 8004170:	2101      	movs	r1, #1
 8004172:	fa01 f202 	lsl.w	r2, r1, r2
 8004176:	4013      	ands	r3, r2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0af      	beq.n	80040dc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800417c:	4b2d      	ldr	r3, [pc, #180]	; (8004234 <HAL_RCC_OscConfig+0x5d0>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004184:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004188:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	21f8      	movs	r1, #248	; 0xf8
 8004192:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004196:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800419a:	fa91 f1a1 	rbit	r1, r1
 800419e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80041a2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80041a6:	fab1 f181 	clz	r1, r1
 80041aa:	b2c9      	uxtb	r1, r1
 80041ac:	408b      	lsls	r3, r1
 80041ae:	4921      	ldr	r1, [pc, #132]	; (8004234 <HAL_RCC_OscConfig+0x5d0>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	600b      	str	r3, [r1, #0]
 80041b4:	e06d      	b.n	8004292 <HAL_RCC_OscConfig+0x62e>
 80041b6:	2301      	movs	r3, #1
 80041b8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041bc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80041c0:	fa93 f3a3 	rbit	r3, r3
 80041c4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80041c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041cc:	fab3 f383 	clz	r3, r3
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	461a      	mov	r2, r3
 80041de:	2300      	movs	r3, #0
 80041e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e2:	f7fd ffc3 	bl	800216c <HAL_GetTick>
 80041e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ec:	f7fd ffbe 	bl	800216c <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d902      	bls.n	8004202 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	f000 bd7e 	b.w	8004cfe <HAL_RCC_OscConfig+0x109a>
 8004202:	2302      	movs	r3, #2
 8004204:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004208:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800420c:	fa93 f3a3 	rbit	r3, r3
 8004210:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004214:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004218:	fab3 f383 	clz	r3, r3
 800421c:	b2db      	uxtb	r3, r3
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	b2db      	uxtb	r3, r3
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b01      	cmp	r3, #1
 800422a:	d105      	bne.n	8004238 <HAL_RCC_OscConfig+0x5d4>
 800422c:	4b01      	ldr	r3, [pc, #4]	; (8004234 <HAL_RCC_OscConfig+0x5d0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	e016      	b.n	8004260 <HAL_RCC_OscConfig+0x5fc>
 8004232:	bf00      	nop
 8004234:	40021000 	.word	0x40021000
 8004238:	2302      	movs	r3, #2
 800423a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004242:	fa93 f3a3 	rbit	r3, r3
 8004246:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800424a:	2302      	movs	r3, #2
 800424c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004250:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004254:	fa93 f3a3 	rbit	r3, r3
 8004258:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800425c:	4bbf      	ldr	r3, [pc, #764]	; (800455c <HAL_RCC_OscConfig+0x8f8>)
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	2202      	movs	r2, #2
 8004262:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004266:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800426a:	fa92 f2a2 	rbit	r2, r2
 800426e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004272:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004276:	fab2 f282 	clz	r2, r2
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	f042 0220 	orr.w	r2, r2, #32
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	f002 021f 	and.w	r2, r2, #31
 8004286:	2101      	movs	r1, #1
 8004288:	fa01 f202 	lsl.w	r2, r1, r2
 800428c:	4013      	ands	r3, r2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1ac      	bne.n	80041ec <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004292:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004296:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 8113 	beq.w	80044ce <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d07c      	beq.n	80043b2 <HAL_RCC_OscConfig+0x74e>
 80042b8:	2301      	movs	r3, #1
 80042ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c2:	fa93 f3a3 	rbit	r3, r3
 80042c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80042ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ce:	fab3 f383 	clz	r3, r3
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	4ba2      	ldr	r3, [pc, #648]	; (8004560 <HAL_RCC_OscConfig+0x8fc>)
 80042d8:	4413      	add	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	461a      	mov	r2, r3
 80042de:	2301      	movs	r3, #1
 80042e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042e2:	f7fd ff43 	bl	800216c <HAL_GetTick>
 80042e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ea:	e00a      	b.n	8004302 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ec:	f7fd ff3e 	bl	800216c <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d902      	bls.n	8004302 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	f000 bcfe 	b.w	8004cfe <HAL_RCC_OscConfig+0x109a>
 8004302:	2302      	movs	r3, #2
 8004304:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004308:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800430c:	fa93 f2a3 	rbit	r2, r3
 8004310:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004314:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800431e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004322:	2202      	movs	r2, #2
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800432a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	fa93 f2a3 	rbit	r2, r3
 8004334:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004338:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004342:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004346:	2202      	movs	r2, #2
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800434e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	fa93 f2a3 	rbit	r2, r3
 8004358:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800435c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004360:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004362:	4b7e      	ldr	r3, [pc, #504]	; (800455c <HAL_RCC_OscConfig+0x8f8>)
 8004364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004366:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800436a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800436e:	2102      	movs	r1, #2
 8004370:	6019      	str	r1, [r3, #0]
 8004372:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004376:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	fa93 f1a3 	rbit	r1, r3
 8004380:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004384:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004388:	6019      	str	r1, [r3, #0]
  return result;
 800438a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800438e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	fab3 f383 	clz	r3, r3
 8004398:	b2db      	uxtb	r3, r3
 800439a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	f003 031f 	and.w	r3, r3, #31
 80043a4:	2101      	movs	r1, #1
 80043a6:	fa01 f303 	lsl.w	r3, r1, r3
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d09d      	beq.n	80042ec <HAL_RCC_OscConfig+0x688>
 80043b0:	e08d      	b.n	80044ce <HAL_RCC_OscConfig+0x86a>
 80043b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80043ba:	2201      	movs	r2, #1
 80043bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	fa93 f2a3 	rbit	r2, r3
 80043cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043d0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80043d4:	601a      	str	r2, [r3, #0]
  return result;
 80043d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043da:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80043de:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e0:	fab3 f383 	clz	r3, r3
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	4b5d      	ldr	r3, [pc, #372]	; (8004560 <HAL_RCC_OscConfig+0x8fc>)
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	461a      	mov	r2, r3
 80043f0:	2300      	movs	r3, #0
 80043f2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f4:	f7fd feba 	bl	800216c <HAL_GetTick>
 80043f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043fc:	e00a      	b.n	8004414 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043fe:	f7fd feb5 	bl	800216c <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d902      	bls.n	8004414 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	f000 bc75 	b.w	8004cfe <HAL_RCC_OscConfig+0x109a>
 8004414:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004418:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800441c:	2202      	movs	r2, #2
 800441e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004420:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004424:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	fa93 f2a3 	rbit	r2, r3
 800442e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004432:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800443c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004440:	2202      	movs	r2, #2
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004448:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	fa93 f2a3 	rbit	r2, r3
 8004452:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004460:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004464:	2202      	movs	r2, #2
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800446c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	fa93 f2a3 	rbit	r2, r3
 8004476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800447a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800447e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004480:	4b36      	ldr	r3, [pc, #216]	; (800455c <HAL_RCC_OscConfig+0x8f8>)
 8004482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004484:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004488:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800448c:	2102      	movs	r1, #2
 800448e:	6019      	str	r1, [r3, #0]
 8004490:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004494:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	fa93 f1a3 	rbit	r1, r3
 800449e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044a2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80044a6:	6019      	str	r1, [r3, #0]
  return result;
 80044a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044ac:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	fab3 f383 	clz	r3, r3
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	f003 031f 	and.w	r3, r3, #31
 80044c2:	2101      	movs	r1, #1
 80044c4:	fa01 f303 	lsl.w	r3, r1, r3
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d197      	bne.n	80043fe <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 81a5 	beq.w	800482e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044e4:	2300      	movs	r3, #0
 80044e6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ea:	4b1c      	ldr	r3, [pc, #112]	; (800455c <HAL_RCC_OscConfig+0x8f8>)
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d116      	bne.n	8004524 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f6:	4b19      	ldr	r3, [pc, #100]	; (800455c <HAL_RCC_OscConfig+0x8f8>)
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	4a18      	ldr	r2, [pc, #96]	; (800455c <HAL_RCC_OscConfig+0x8f8>)
 80044fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004500:	61d3      	str	r3, [r2, #28]
 8004502:	4b16      	ldr	r3, [pc, #88]	; (800455c <HAL_RCC_OscConfig+0x8f8>)
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800450a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800450e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004518:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800451c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800451e:	2301      	movs	r3, #1
 8004520:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004524:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <HAL_RCC_OscConfig+0x900>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452c:	2b00      	cmp	r3, #0
 800452e:	d121      	bne.n	8004574 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004530:	4b0c      	ldr	r3, [pc, #48]	; (8004564 <HAL_RCC_OscConfig+0x900>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a0b      	ldr	r2, [pc, #44]	; (8004564 <HAL_RCC_OscConfig+0x900>)
 8004536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800453a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800453c:	f7fd fe16 	bl	800216c <HAL_GetTick>
 8004540:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004544:	e010      	b.n	8004568 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004546:	f7fd fe11 	bl	800216c <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	; 0x64
 8004554:	d908      	bls.n	8004568 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e3d1      	b.n	8004cfe <HAL_RCC_OscConfig+0x109a>
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
 8004560:	10908120 	.word	0x10908120
 8004564:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004568:	4b8d      	ldr	r3, [pc, #564]	; (80047a0 <HAL_RCC_OscConfig+0xb3c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0e8      	beq.n	8004546 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004574:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004578:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d106      	bne.n	8004592 <HAL_RCC_OscConfig+0x92e>
 8004584:	4b87      	ldr	r3, [pc, #540]	; (80047a4 <HAL_RCC_OscConfig+0xb40>)
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	4a86      	ldr	r2, [pc, #536]	; (80047a4 <HAL_RCC_OscConfig+0xb40>)
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	6213      	str	r3, [r2, #32]
 8004590:	e035      	b.n	80045fe <HAL_RCC_OscConfig+0x99a>
 8004592:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004596:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10c      	bne.n	80045bc <HAL_RCC_OscConfig+0x958>
 80045a2:	4b80      	ldr	r3, [pc, #512]	; (80047a4 <HAL_RCC_OscConfig+0xb40>)
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	4a7f      	ldr	r2, [pc, #508]	; (80047a4 <HAL_RCC_OscConfig+0xb40>)
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	6213      	str	r3, [r2, #32]
 80045ae:	4b7d      	ldr	r3, [pc, #500]	; (80047a4 <HAL_RCC_OscConfig+0xb40>)
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	4a7c      	ldr	r2, [pc, #496]	; (80047a4 <HAL_RCC_OscConfig+0xb40>)
 80045b4:	f023 0304 	bic.w	r3, r3, #4
 80045b8:	6213      	str	r3, [r2, #32]
 80045ba:	e020      	b.n	80045fe <HAL_RCC_OscConfig+0x99a>
 80045bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	2b05      	cmp	r3, #5
 80045ca:	d10c      	bne.n	80045e6 <HAL_RCC_OscConfig+0x982>
 80045cc:	4b75      	ldr	r3, [pc, #468]	; (80047a4 <HAL_RCC_OscConfig+0xb40>)
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	4a74      	ldr	r2, [pc, #464]	; (80047a4 <HAL_RCC_OscConfig+0xb40>)
 80045d2:	f043 0304 	orr.w	r3, r3, #4
 80045d6:	6213      	str	r3, [r2, #32]
 80045d8:	4b72      	ldr	r3, [pc, #456]	; (80047a4 <HAL_RCC_OscConfig+0xb40>)
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	4a71      	ldr	r2, [pc, #452]	; (80047a4 <HAL_RCC_OscConfig+0xb40>)
 80045de:	f043 0301 	orr.w	r3, r3, #1
 80045e2:	6213      	str	r3, [r2, #32]
 80045e4:	e00b      	b.n	80045fe <HAL_RCC_OscConfig+0x99a>
 80045e6:	4b6f      	ldr	r3, [pc, #444]	; (80047a4 <HAL_RCC_OscConfig+0xb40>)
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	4a6e      	ldr	r2, [pc, #440]	; (80047a4 <HAL_RCC_OscConfig+0xb40>)
 80045ec:	f023 0301 	bic.w	r3, r3, #1
 80045f0:	6213      	str	r3, [r2, #32]
 80045f2:	4b6c      	ldr	r3, [pc, #432]	; (80047a4 <HAL_RCC_OscConfig+0xb40>)
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	4a6b      	ldr	r2, [pc, #428]	; (80047a4 <HAL_RCC_OscConfig+0xb40>)
 80045f8:	f023 0304 	bic.w	r3, r3, #4
 80045fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004602:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8081 	beq.w	8004712 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004610:	f7fd fdac 	bl	800216c <HAL_GetTick>
 8004614:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004618:	e00b      	b.n	8004632 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800461a:	f7fd fda7 	bl	800216c <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	; 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e365      	b.n	8004cfe <HAL_RCC_OscConfig+0x109a>
 8004632:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004636:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800463a:	2202      	movs	r2, #2
 800463c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004642:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	fa93 f2a3 	rbit	r2, r3
 800464c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004650:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800465a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800465e:	2202      	movs	r2, #2
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004666:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	fa93 f2a3 	rbit	r2, r3
 8004670:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004674:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004678:	601a      	str	r2, [r3, #0]
  return result;
 800467a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800467e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004682:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004684:	fab3 f383 	clz	r3, r3
 8004688:	b2db      	uxtb	r3, r3
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	b2db      	uxtb	r3, r3
 800468e:	f043 0302 	orr.w	r3, r3, #2
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d102      	bne.n	800469e <HAL_RCC_OscConfig+0xa3a>
 8004698:	4b42      	ldr	r3, [pc, #264]	; (80047a4 <HAL_RCC_OscConfig+0xb40>)
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	e013      	b.n	80046c6 <HAL_RCC_OscConfig+0xa62>
 800469e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046a2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80046a6:	2202      	movs	r2, #2
 80046a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046ae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	fa93 f2a3 	rbit	r2, r3
 80046b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046bc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	4b38      	ldr	r3, [pc, #224]	; (80047a4 <HAL_RCC_OscConfig+0xb40>)
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80046ca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80046ce:	2102      	movs	r1, #2
 80046d0:	6011      	str	r1, [r2, #0]
 80046d2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80046d6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80046da:	6812      	ldr	r2, [r2, #0]
 80046dc:	fa92 f1a2 	rbit	r1, r2
 80046e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80046e4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80046e8:	6011      	str	r1, [r2, #0]
  return result;
 80046ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80046ee:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	fab2 f282 	clz	r2, r2
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	f002 021f 	and.w	r2, r2, #31
 8004704:	2101      	movs	r1, #1
 8004706:	fa01 f202 	lsl.w	r2, r1, r2
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d084      	beq.n	800461a <HAL_RCC_OscConfig+0x9b6>
 8004710:	e083      	b.n	800481a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004712:	f7fd fd2b 	bl	800216c <HAL_GetTick>
 8004716:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800471a:	e00b      	b.n	8004734 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800471c:	f7fd fd26 	bl	800216c <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	f241 3288 	movw	r2, #5000	; 0x1388
 800472c:	4293      	cmp	r3, r2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e2e4      	b.n	8004cfe <HAL_RCC_OscConfig+0x109a>
 8004734:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004738:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800473c:	2202      	movs	r2, #2
 800473e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004740:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004744:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	fa93 f2a3 	rbit	r2, r3
 800474e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004752:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800475c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004760:	2202      	movs	r2, #2
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004768:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	fa93 f2a3 	rbit	r2, r3
 8004772:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004776:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800477a:	601a      	str	r2, [r3, #0]
  return result;
 800477c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004780:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004784:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004786:	fab3 f383 	clz	r3, r3
 800478a:	b2db      	uxtb	r3, r3
 800478c:	095b      	lsrs	r3, r3, #5
 800478e:	b2db      	uxtb	r3, r3
 8004790:	f043 0302 	orr.w	r3, r3, #2
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d106      	bne.n	80047a8 <HAL_RCC_OscConfig+0xb44>
 800479a:	4b02      	ldr	r3, [pc, #8]	; (80047a4 <HAL_RCC_OscConfig+0xb40>)
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	e017      	b.n	80047d0 <HAL_RCC_OscConfig+0xb6c>
 80047a0:	40007000 	.word	0x40007000
 80047a4:	40021000 	.word	0x40021000
 80047a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047ac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80047b0:	2202      	movs	r2, #2
 80047b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047b8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	fa93 f2a3 	rbit	r2, r3
 80047c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047c6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	4bb3      	ldr	r3, [pc, #716]	; (8004a9c <HAL_RCC_OscConfig+0xe38>)
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80047d4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80047d8:	2102      	movs	r1, #2
 80047da:	6011      	str	r1, [r2, #0]
 80047dc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80047e0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80047e4:	6812      	ldr	r2, [r2, #0]
 80047e6:	fa92 f1a2 	rbit	r1, r2
 80047ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80047ee:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80047f2:	6011      	str	r1, [r2, #0]
  return result;
 80047f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80047f8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	fab2 f282 	clz	r2, r2
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	f002 021f 	and.w	r2, r2, #31
 800480e:	2101      	movs	r1, #1
 8004810:	fa01 f202 	lsl.w	r2, r1, r2
 8004814:	4013      	ands	r3, r2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d180      	bne.n	800471c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800481a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800481e:	2b01      	cmp	r3, #1
 8004820:	d105      	bne.n	800482e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004822:	4b9e      	ldr	r3, [pc, #632]	; (8004a9c <HAL_RCC_OscConfig+0xe38>)
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	4a9d      	ldr	r2, [pc, #628]	; (8004a9c <HAL_RCC_OscConfig+0xe38>)
 8004828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800482c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800482e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004832:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 825e 	beq.w	8004cfc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004840:	4b96      	ldr	r3, [pc, #600]	; (8004a9c <HAL_RCC_OscConfig+0xe38>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f003 030c 	and.w	r3, r3, #12
 8004848:	2b08      	cmp	r3, #8
 800484a:	f000 821f 	beq.w	8004c8c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800484e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004852:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	2b02      	cmp	r3, #2
 800485c:	f040 8170 	bne.w	8004b40 <HAL_RCC_OscConfig+0xedc>
 8004860:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004864:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004868:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800486c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004872:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	fa93 f2a3 	rbit	r2, r3
 800487c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004880:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004884:	601a      	str	r2, [r3, #0]
  return result;
 8004886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800488a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800488e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004890:	fab3 f383 	clz	r3, r3
 8004894:	b2db      	uxtb	r3, r3
 8004896:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800489a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	461a      	mov	r2, r3
 80048a2:	2300      	movs	r3, #0
 80048a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a6:	f7fd fc61 	bl	800216c <HAL_GetTick>
 80048aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048ae:	e009      	b.n	80048c4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b0:	f7fd fc5c 	bl	800216c <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e21c      	b.n	8004cfe <HAL_RCC_OscConfig+0x109a>
 80048c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80048cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048d6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	fa93 f2a3 	rbit	r2, r3
 80048e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048e4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80048e8:	601a      	str	r2, [r3, #0]
  return result;
 80048ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048ee:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80048f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048f4:	fab3 f383 	clz	r3, r3
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	f043 0301 	orr.w	r3, r3, #1
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b01      	cmp	r3, #1
 8004906:	d102      	bne.n	800490e <HAL_RCC_OscConfig+0xcaa>
 8004908:	4b64      	ldr	r3, [pc, #400]	; (8004a9c <HAL_RCC_OscConfig+0xe38>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	e027      	b.n	800495e <HAL_RCC_OscConfig+0xcfa>
 800490e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004912:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004916:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800491a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004920:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	fa93 f2a3 	rbit	r2, r3
 800492a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800492e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004938:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800493c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004946:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	fa93 f2a3 	rbit	r2, r3
 8004950:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004954:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	4b50      	ldr	r3, [pc, #320]	; (8004a9c <HAL_RCC_OscConfig+0xe38>)
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004962:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004966:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800496a:	6011      	str	r1, [r2, #0]
 800496c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004970:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004974:	6812      	ldr	r2, [r2, #0]
 8004976:	fa92 f1a2 	rbit	r1, r2
 800497a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800497e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004982:	6011      	str	r1, [r2, #0]
  return result;
 8004984:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004988:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800498c:	6812      	ldr	r2, [r2, #0]
 800498e:	fab2 f282 	clz	r2, r2
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	f042 0220 	orr.w	r2, r2, #32
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	f002 021f 	and.w	r2, r2, #31
 800499e:	2101      	movs	r1, #1
 80049a0:	fa01 f202 	lsl.w	r2, r1, r2
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d182      	bne.n	80048b0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049aa:	4b3c      	ldr	r3, [pc, #240]	; (8004a9c <HAL_RCC_OscConfig+0xe38>)
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	f023 020f 	bic.w	r2, r3, #15
 80049b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	4937      	ldr	r1, [pc, #220]	; (8004a9c <HAL_RCC_OscConfig+0xe38>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80049c4:	4b35      	ldr	r3, [pc, #212]	; (8004a9c <HAL_RCC_OscConfig+0xe38>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80049cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6a19      	ldr	r1, [r3, #32]
 80049d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	430b      	orrs	r3, r1
 80049e6:	492d      	ldr	r1, [pc, #180]	; (8004a9c <HAL_RCC_OscConfig+0xe38>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	604b      	str	r3, [r1, #4]
 80049ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049f0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80049f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049fe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	fa93 f2a3 	rbit	r2, r3
 8004a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a0c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004a10:	601a      	str	r2, [r3, #0]
  return result;
 8004a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a16:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004a1a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a1c:	fab3 f383 	clz	r3, r3
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	2301      	movs	r3, #1
 8004a30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a32:	f7fd fb9b 	bl	800216c <HAL_GetTick>
 8004a36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a3a:	e009      	b.n	8004a50 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a3c:	f7fd fb96 	bl	800216c <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e156      	b.n	8004cfe <HAL_RCC_OscConfig+0x109a>
 8004a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a54:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004a58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a62:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	fa93 f2a3 	rbit	r2, r3
 8004a6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a70:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004a74:	601a      	str	r2, [r3, #0]
  return result;
 8004a76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a7a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004a7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a80:	fab3 f383 	clz	r3, r3
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	095b      	lsrs	r3, r3, #5
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	f043 0301 	orr.w	r3, r3, #1
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d105      	bne.n	8004aa0 <HAL_RCC_OscConfig+0xe3c>
 8004a94:	4b01      	ldr	r3, [pc, #4]	; (8004a9c <HAL_RCC_OscConfig+0xe38>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	e02a      	b.n	8004af0 <HAL_RCC_OscConfig+0xe8c>
 8004a9a:	bf00      	nop
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004aa4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004aa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004aac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ab2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	fa93 f2a3 	rbit	r2, r3
 8004abc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ac0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004aca:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004ace:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ad8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	fa93 f2a3 	rbit	r2, r3
 8004ae2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ae6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	4b86      	ldr	r3, [pc, #536]	; (8004d08 <HAL_RCC_OscConfig+0x10a4>)
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004af4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004af8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004afc:	6011      	str	r1, [r2, #0]
 8004afe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b02:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004b06:	6812      	ldr	r2, [r2, #0]
 8004b08:	fa92 f1a2 	rbit	r1, r2
 8004b0c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b10:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004b14:	6011      	str	r1, [r2, #0]
  return result;
 8004b16:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b1a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004b1e:	6812      	ldr	r2, [r2, #0]
 8004b20:	fab2 f282 	clz	r2, r2
 8004b24:	b2d2      	uxtb	r2, r2
 8004b26:	f042 0220 	orr.w	r2, r2, #32
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	f002 021f 	and.w	r2, r2, #31
 8004b30:	2101      	movs	r1, #1
 8004b32:	fa01 f202 	lsl.w	r2, r1, r2
 8004b36:	4013      	ands	r3, r2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f43f af7f 	beq.w	8004a3c <HAL_RCC_OscConfig+0xdd8>
 8004b3e:	e0dd      	b.n	8004cfc <HAL_RCC_OscConfig+0x1098>
 8004b40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b44:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004b48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b52:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	fa93 f2a3 	rbit	r2, r3
 8004b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b60:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004b64:	601a      	str	r2, [r3, #0]
  return result;
 8004b66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b6a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004b6e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b70:	fab3 f383 	clz	r3, r3
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	461a      	mov	r2, r3
 8004b82:	2300      	movs	r3, #0
 8004b84:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b86:	f7fd faf1 	bl	800216c <HAL_GetTick>
 8004b8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b8e:	e009      	b.n	8004ba4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b90:	f7fd faec 	bl	800216c <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e0ac      	b.n	8004cfe <HAL_RCC_OscConfig+0x109a>
 8004ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ba8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004bac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bb6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	fa93 f2a3 	rbit	r2, r3
 8004bc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bc4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004bc8:	601a      	str	r2, [r3, #0]
  return result;
 8004bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bce:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004bd2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bd4:	fab3 f383 	clz	r3, r3
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d102      	bne.n	8004bee <HAL_RCC_OscConfig+0xf8a>
 8004be8:	4b47      	ldr	r3, [pc, #284]	; (8004d08 <HAL_RCC_OscConfig+0x10a4>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	e027      	b.n	8004c3e <HAL_RCC_OscConfig+0xfda>
 8004bee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bf2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c00:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	fa93 f2a3 	rbit	r2, r3
 8004c0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c0e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c18:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004c1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c26:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	fa93 f2a3 	rbit	r2, r3
 8004c30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c34:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	4b33      	ldr	r3, [pc, #204]	; (8004d08 <HAL_RCC_OscConfig+0x10a4>)
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c42:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004c46:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004c4a:	6011      	str	r1, [r2, #0]
 8004c4c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c50:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004c54:	6812      	ldr	r2, [r2, #0]
 8004c56:	fa92 f1a2 	rbit	r1, r2
 8004c5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c5e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004c62:	6011      	str	r1, [r2, #0]
  return result;
 8004c64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c68:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004c6c:	6812      	ldr	r2, [r2, #0]
 8004c6e:	fab2 f282 	clz	r2, r2
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	f042 0220 	orr.w	r2, r2, #32
 8004c78:	b2d2      	uxtb	r2, r2
 8004c7a:	f002 021f 	and.w	r2, r2, #31
 8004c7e:	2101      	movs	r1, #1
 8004c80:	fa01 f202 	lsl.w	r2, r1, r2
 8004c84:	4013      	ands	r3, r2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d182      	bne.n	8004b90 <HAL_RCC_OscConfig+0xf2c>
 8004c8a:	e037      	b.n	8004cfc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d101      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e02e      	b.n	8004cfe <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ca0:	4b19      	ldr	r3, [pc, #100]	; (8004d08 <HAL_RCC_OscConfig+0x10a4>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004ca8:	4b17      	ldr	r3, [pc, #92]	; (8004d08 <HAL_RCC_OscConfig+0x10a4>)
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004cb0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004cb4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004cb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cbc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d117      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004cc8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ccc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004cd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d10b      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004ce0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ce4:	f003 020f 	and.w	r2, r3, #15
 8004ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d001      	beq.n	8004cfc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e000      	b.n	8004cfe <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	40021000 	.word	0x40021000

08004d0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b09e      	sub	sp, #120	; 0x78
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e162      	b.n	8004fea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d24:	4b90      	ldr	r3, [pc, #576]	; (8004f68 <HAL_RCC_ClockConfig+0x25c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d910      	bls.n	8004d54 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d32:	4b8d      	ldr	r3, [pc, #564]	; (8004f68 <HAL_RCC_ClockConfig+0x25c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f023 0207 	bic.w	r2, r3, #7
 8004d3a:	498b      	ldr	r1, [pc, #556]	; (8004f68 <HAL_RCC_ClockConfig+0x25c>)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d42:	4b89      	ldr	r3, [pc, #548]	; (8004f68 <HAL_RCC_ClockConfig+0x25c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d001      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e14a      	b.n	8004fea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d60:	4b82      	ldr	r3, [pc, #520]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	497f      	ldr	r1, [pc, #508]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 80dc 	beq.w	8004f38 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d13c      	bne.n	8004e02 <HAL_RCC_ClockConfig+0xf6>
 8004d88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d8c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d90:	fa93 f3a3 	rbit	r3, r3
 8004d94:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d98:	fab3 f383 	clz	r3, r3
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	f043 0301 	orr.w	r3, r3, #1
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d102      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xa6>
 8004dac:	4b6f      	ldr	r3, [pc, #444]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	e00f      	b.n	8004dd2 <HAL_RCC_ClockConfig+0xc6>
 8004db2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004db6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dba:	fa93 f3a3 	rbit	r3, r3
 8004dbe:	667b      	str	r3, [r7, #100]	; 0x64
 8004dc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dc4:	663b      	str	r3, [r7, #96]	; 0x60
 8004dc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dc8:	fa93 f3a3 	rbit	r3, r3
 8004dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dce:	4b67      	ldr	r3, [pc, #412]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004dd6:	65ba      	str	r2, [r7, #88]	; 0x58
 8004dd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dda:	fa92 f2a2 	rbit	r2, r2
 8004dde:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004de0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004de2:	fab2 f282 	clz	r2, r2
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	f042 0220 	orr.w	r2, r2, #32
 8004dec:	b2d2      	uxtb	r2, r2
 8004dee:	f002 021f 	and.w	r2, r2, #31
 8004df2:	2101      	movs	r1, #1
 8004df4:	fa01 f202 	lsl.w	r2, r1, r2
 8004df8:	4013      	ands	r3, r2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d17b      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e0f3      	b.n	8004fea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d13c      	bne.n	8004e84 <HAL_RCC_ClockConfig+0x178>
 8004e0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e12:	fa93 f3a3 	rbit	r3, r3
 8004e16:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e1a:	fab3 f383 	clz	r3, r3
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	095b      	lsrs	r3, r3, #5
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	f043 0301 	orr.w	r3, r3, #1
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d102      	bne.n	8004e34 <HAL_RCC_ClockConfig+0x128>
 8004e2e:	4b4f      	ldr	r3, [pc, #316]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	e00f      	b.n	8004e54 <HAL_RCC_ClockConfig+0x148>
 8004e34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e38:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e3c:	fa93 f3a3 	rbit	r3, r3
 8004e40:	647b      	str	r3, [r7, #68]	; 0x44
 8004e42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e46:	643b      	str	r3, [r7, #64]	; 0x40
 8004e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e4a:	fa93 f3a3 	rbit	r3, r3
 8004e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e50:	4b46      	ldr	r3, [pc, #280]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e58:	63ba      	str	r2, [r7, #56]	; 0x38
 8004e5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e5c:	fa92 f2a2 	rbit	r2, r2
 8004e60:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004e62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e64:	fab2 f282 	clz	r2, r2
 8004e68:	b2d2      	uxtb	r2, r2
 8004e6a:	f042 0220 	orr.w	r2, r2, #32
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	f002 021f 	and.w	r2, r2, #31
 8004e74:	2101      	movs	r1, #1
 8004e76:	fa01 f202 	lsl.w	r2, r1, r2
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d13a      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e0b2      	b.n	8004fea <HAL_RCC_ClockConfig+0x2de>
 8004e84:	2302      	movs	r3, #2
 8004e86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8a:	fa93 f3a3 	rbit	r3, r3
 8004e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e92:	fab3 f383 	clz	r3, r3
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	095b      	lsrs	r3, r3, #5
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	f043 0301 	orr.w	r3, r3, #1
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d102      	bne.n	8004eac <HAL_RCC_ClockConfig+0x1a0>
 8004ea6:	4b31      	ldr	r3, [pc, #196]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	e00d      	b.n	8004ec8 <HAL_RCC_ClockConfig+0x1bc>
 8004eac:	2302      	movs	r3, #2
 8004eae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb2:	fa93 f3a3 	rbit	r3, r3
 8004eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb8:	2302      	movs	r3, #2
 8004eba:	623b      	str	r3, [r7, #32]
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	fa93 f3a3 	rbit	r3, r3
 8004ec2:	61fb      	str	r3, [r7, #28]
 8004ec4:	4b29      	ldr	r3, [pc, #164]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	2202      	movs	r2, #2
 8004eca:	61ba      	str	r2, [r7, #24]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	fa92 f2a2 	rbit	r2, r2
 8004ed2:	617a      	str	r2, [r7, #20]
  return result;
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	fab2 f282 	clz	r2, r2
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	f042 0220 	orr.w	r2, r2, #32
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	f002 021f 	and.w	r2, r2, #31
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8004eec:	4013      	ands	r3, r2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e079      	b.n	8004fea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ef6:	4b1d      	ldr	r3, [pc, #116]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f023 0203 	bic.w	r2, r3, #3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	491a      	ldr	r1, [pc, #104]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f08:	f7fd f930 	bl	800216c <HAL_GetTick>
 8004f0c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f0e:	e00a      	b.n	8004f26 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f10:	f7fd f92c 	bl	800216c <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e061      	b.n	8004fea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f26:	4b11      	ldr	r3, [pc, #68]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f003 020c 	and.w	r2, r3, #12
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d1eb      	bne.n	8004f10 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f38:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <HAL_RCC_ClockConfig+0x25c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d214      	bcs.n	8004f70 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f46:	4b08      	ldr	r3, [pc, #32]	; (8004f68 <HAL_RCC_ClockConfig+0x25c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f023 0207 	bic.w	r2, r3, #7
 8004f4e:	4906      	ldr	r1, [pc, #24]	; (8004f68 <HAL_RCC_ClockConfig+0x25c>)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f56:	4b04      	ldr	r3, [pc, #16]	; (8004f68 <HAL_RCC_ClockConfig+0x25c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0307 	and.w	r3, r3, #7
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d005      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e040      	b.n	8004fea <HAL_RCC_ClockConfig+0x2de>
 8004f68:	40022000 	.word	0x40022000
 8004f6c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d008      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f7c:	4b1d      	ldr	r3, [pc, #116]	; (8004ff4 <HAL_RCC_ClockConfig+0x2e8>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	491a      	ldr	r1, [pc, #104]	; (8004ff4 <HAL_RCC_ClockConfig+0x2e8>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0308 	and.w	r3, r3, #8
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d009      	beq.n	8004fae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f9a:	4b16      	ldr	r3, [pc, #88]	; (8004ff4 <HAL_RCC_ClockConfig+0x2e8>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	4912      	ldr	r1, [pc, #72]	; (8004ff4 <HAL_RCC_ClockConfig+0x2e8>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004fae:	f000 f829 	bl	8005004 <HAL_RCC_GetSysClockFreq>
 8004fb2:	4601      	mov	r1, r0
 8004fb4:	4b0f      	ldr	r3, [pc, #60]	; (8004ff4 <HAL_RCC_ClockConfig+0x2e8>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fbc:	22f0      	movs	r2, #240	; 0xf0
 8004fbe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	fa92 f2a2 	rbit	r2, r2
 8004fc6:	60fa      	str	r2, [r7, #12]
  return result;
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	fab2 f282 	clz	r2, r2
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	40d3      	lsrs	r3, r2
 8004fd2:	4a09      	ldr	r2, [pc, #36]	; (8004ff8 <HAL_RCC_ClockConfig+0x2ec>)
 8004fd4:	5cd3      	ldrb	r3, [r2, r3]
 8004fd6:	fa21 f303 	lsr.w	r3, r1, r3
 8004fda:	4a08      	ldr	r2, [pc, #32]	; (8004ffc <HAL_RCC_ClockConfig+0x2f0>)
 8004fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004fde:	4b08      	ldr	r3, [pc, #32]	; (8005000 <HAL_RCC_ClockConfig+0x2f4>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fd f87e 	bl	80020e4 <HAL_InitTick>
  
  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3778      	adds	r7, #120	; 0x78
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	08007a9c 	.word	0x08007a9c
 8004ffc:	20000000 	.word	0x20000000
 8005000:	20000004 	.word	0x20000004

08005004 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005004:	b480      	push	{r7}
 8005006:	b08b      	sub	sp, #44	; 0x2c
 8005008:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	61fb      	str	r3, [r7, #28]
 800500e:	2300      	movs	r3, #0
 8005010:	61bb      	str	r3, [r7, #24]
 8005012:	2300      	movs	r3, #0
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
 8005016:	2300      	movs	r3, #0
 8005018:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800501e:	4b2a      	ldr	r3, [pc, #168]	; (80050c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f003 030c 	and.w	r3, r3, #12
 800502a:	2b04      	cmp	r3, #4
 800502c:	d002      	beq.n	8005034 <HAL_RCC_GetSysClockFreq+0x30>
 800502e:	2b08      	cmp	r3, #8
 8005030:	d003      	beq.n	800503a <HAL_RCC_GetSysClockFreq+0x36>
 8005032:	e03f      	b.n	80050b4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005034:	4b25      	ldr	r3, [pc, #148]	; (80050cc <HAL_RCC_GetSysClockFreq+0xc8>)
 8005036:	623b      	str	r3, [r7, #32]
      break;
 8005038:	e03f      	b.n	80050ba <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005040:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005044:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	fa92 f2a2 	rbit	r2, r2
 800504c:	607a      	str	r2, [r7, #4]
  return result;
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	fab2 f282 	clz	r2, r2
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	40d3      	lsrs	r3, r2
 8005058:	4a1d      	ldr	r2, [pc, #116]	; (80050d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800505a:	5cd3      	ldrb	r3, [r2, r3]
 800505c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800505e:	4b1a      	ldr	r3, [pc, #104]	; (80050c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	220f      	movs	r2, #15
 8005068:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	fa92 f2a2 	rbit	r2, r2
 8005070:	60fa      	str	r2, [r7, #12]
  return result;
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	fab2 f282 	clz	r2, r2
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	40d3      	lsrs	r3, r2
 800507c:	4a15      	ldr	r2, [pc, #84]	; (80050d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800507e:	5cd3      	ldrb	r3, [r2, r3]
 8005080:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d008      	beq.n	800509e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800508c:	4a0f      	ldr	r2, [pc, #60]	; (80050cc <HAL_RCC_GetSysClockFreq+0xc8>)
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	fbb2 f2f3 	udiv	r2, r2, r3
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	fb02 f303 	mul.w	r3, r2, r3
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
 800509c:	e007      	b.n	80050ae <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800509e:	4a0b      	ldr	r2, [pc, #44]	; (80050cc <HAL_RCC_GetSysClockFreq+0xc8>)
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	fb02 f303 	mul.w	r3, r2, r3
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	623b      	str	r3, [r7, #32]
      break;
 80050b2:	e002      	b.n	80050ba <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050b4:	4b05      	ldr	r3, [pc, #20]	; (80050cc <HAL_RCC_GetSysClockFreq+0xc8>)
 80050b6:	623b      	str	r3, [r7, #32]
      break;
 80050b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050ba:	6a3b      	ldr	r3, [r7, #32]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	372c      	adds	r7, #44	; 0x2c
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	40021000 	.word	0x40021000
 80050cc:	007a1200 	.word	0x007a1200
 80050d0:	08007ab4 	.word	0x08007ab4
 80050d4:	08007ac4 	.word	0x08007ac4

080050d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050dc:	4b03      	ldr	r3, [pc, #12]	; (80050ec <HAL_RCC_GetHCLKFreq+0x14>)
 80050de:	681b      	ldr	r3, [r3, #0]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	20000000 	.word	0x20000000

080050f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80050f6:	f7ff ffef 	bl	80050d8 <HAL_RCC_GetHCLKFreq>
 80050fa:	4601      	mov	r1, r0
 80050fc:	4b0b      	ldr	r3, [pc, #44]	; (800512c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005104:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005108:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	fa92 f2a2 	rbit	r2, r2
 8005110:	603a      	str	r2, [r7, #0]
  return result;
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	fab2 f282 	clz	r2, r2
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	40d3      	lsrs	r3, r2
 800511c:	4a04      	ldr	r2, [pc, #16]	; (8005130 <HAL_RCC_GetPCLK1Freq+0x40>)
 800511e:	5cd3      	ldrb	r3, [r2, r3]
 8005120:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	40021000 	.word	0x40021000
 8005130:	08007aac 	.word	0x08007aac

08005134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800513a:	f7ff ffcd 	bl	80050d8 <HAL_RCC_GetHCLKFreq>
 800513e:	4601      	mov	r1, r0
 8005140:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005148:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800514c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	fa92 f2a2 	rbit	r2, r2
 8005154:	603a      	str	r2, [r7, #0]
  return result;
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	fab2 f282 	clz	r2, r2
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	40d3      	lsrs	r3, r2
 8005160:	4a04      	ldr	r2, [pc, #16]	; (8005174 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005162:	5cd3      	ldrb	r3, [r2, r3]
 8005164:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005168:	4618      	mov	r0, r3
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40021000 	.word	0x40021000
 8005174:	08007aac 	.word	0x08007aac

08005178 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b092      	sub	sp, #72	; 0x48
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005188:	2300      	movs	r3, #0
 800518a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 80d4 	beq.w	8005344 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800519c:	4b4e      	ldr	r3, [pc, #312]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10e      	bne.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051a8:	4b4b      	ldr	r3, [pc, #300]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	4a4a      	ldr	r2, [pc, #296]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b2:	61d3      	str	r3, [r2, #28]
 80051b4:	4b48      	ldr	r3, [pc, #288]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051bc:	60bb      	str	r3, [r7, #8]
 80051be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051c0:	2301      	movs	r3, #1
 80051c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c6:	4b45      	ldr	r3, [pc, #276]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d118      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051d2:	4b42      	ldr	r3, [pc, #264]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a41      	ldr	r2, [pc, #260]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051de:	f7fc ffc5 	bl	800216c <HAL_GetTick>
 80051e2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e4:	e008      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e6:	f7fc ffc1 	bl	800216c <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b64      	cmp	r3, #100	; 0x64
 80051f2:	d901      	bls.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e1d6      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f8:	4b38      	ldr	r3, [pc, #224]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0f0      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005204:	4b34      	ldr	r3, [pc, #208]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800520e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 8084 	beq.w	800531e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800521e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005220:	429a      	cmp	r2, r3
 8005222:	d07c      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005224:	4b2c      	ldr	r3, [pc, #176]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800522c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800522e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005232:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005236:	fa93 f3a3 	rbit	r3, r3
 800523a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800523c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800523e:	fab3 f383 	clz	r3, r3
 8005242:	b2db      	uxtb	r3, r3
 8005244:	461a      	mov	r2, r3
 8005246:	4b26      	ldr	r3, [pc, #152]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005248:	4413      	add	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	461a      	mov	r2, r3
 800524e:	2301      	movs	r3, #1
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005256:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525a:	fa93 f3a3 	rbit	r3, r3
 800525e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005262:	fab3 f383 	clz	r3, r3
 8005266:	b2db      	uxtb	r3, r3
 8005268:	461a      	mov	r2, r3
 800526a:	4b1d      	ldr	r3, [pc, #116]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800526c:	4413      	add	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	461a      	mov	r2, r3
 8005272:	2300      	movs	r3, #0
 8005274:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005276:	4a18      	ldr	r2, [pc, #96]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800527a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800527c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d04b      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005286:	f7fc ff71 	bl	800216c <HAL_GetTick>
 800528a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800528c:	e00a      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800528e:	f7fc ff6d 	bl	800216c <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	f241 3288 	movw	r2, #5000	; 0x1388
 800529c:	4293      	cmp	r3, r2
 800529e:	d901      	bls.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e180      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80052a4:	2302      	movs	r3, #2
 80052a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	fa93 f3a3 	rbit	r3, r3
 80052ae:	627b      	str	r3, [r7, #36]	; 0x24
 80052b0:	2302      	movs	r3, #2
 80052b2:	623b      	str	r3, [r7, #32]
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	fa93 f3a3 	rbit	r3, r3
 80052ba:	61fb      	str	r3, [r7, #28]
  return result;
 80052bc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052be:	fab3 f383 	clz	r3, r3
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	095b      	lsrs	r3, r3, #5
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	f043 0302 	orr.w	r3, r3, #2
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d108      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80052d2:	4b01      	ldr	r3, [pc, #4]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	e00d      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80052d8:	40021000 	.word	0x40021000
 80052dc:	40007000 	.word	0x40007000
 80052e0:	10908100 	.word	0x10908100
 80052e4:	2302      	movs	r3, #2
 80052e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	fa93 f3a3 	rbit	r3, r3
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	4b9a      	ldr	r3, [pc, #616]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	2202      	movs	r2, #2
 80052f6:	613a      	str	r2, [r7, #16]
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	fa92 f2a2 	rbit	r2, r2
 80052fe:	60fa      	str	r2, [r7, #12]
  return result;
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	fab2 f282 	clz	r2, r2
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	f002 021f 	and.w	r2, r2, #31
 8005312:	2101      	movs	r1, #1
 8005314:	fa01 f202 	lsl.w	r2, r1, r2
 8005318:	4013      	ands	r3, r2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0b7      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800531e:	4b8f      	ldr	r3, [pc, #572]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	498c      	ldr	r1, [pc, #560]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800532c:	4313      	orrs	r3, r2
 800532e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005330:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005334:	2b01      	cmp	r3, #1
 8005336:	d105      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005338:	4b88      	ldr	r3, [pc, #544]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	4a87      	ldr	r2, [pc, #540]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800533e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005342:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005350:	4b82      	ldr	r3, [pc, #520]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005354:	f023 0203 	bic.w	r2, r3, #3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	497f      	ldr	r1, [pc, #508]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800535e:	4313      	orrs	r3, r2
 8005360:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d008      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800536e:	4b7b      	ldr	r3, [pc, #492]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005372:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	4978      	ldr	r1, [pc, #480]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800537c:	4313      	orrs	r3, r2
 800537e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	d008      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800538c:	4b73      	ldr	r3, [pc, #460]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800538e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005390:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	4970      	ldr	r1, [pc, #448]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800539a:	4313      	orrs	r3, r2
 800539c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d008      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053aa:	4b6c      	ldr	r3, [pc, #432]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	f023 0210 	bic.w	r2, r3, #16
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	4969      	ldr	r1, [pc, #420]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d008      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80053c8:	4b64      	ldr	r3, [pc, #400]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d4:	4961      	ldr	r1, [pc, #388]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d008      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053e6:	4b5d      	ldr	r3, [pc, #372]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	f023 0220 	bic.w	r2, r3, #32
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	495a      	ldr	r1, [pc, #360]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d008      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005404:	4b55      	ldr	r3, [pc, #340]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005408:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	4952      	ldr	r1, [pc, #328]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005412:	4313      	orrs	r3, r2
 8005414:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0308 	and.w	r3, r3, #8
 800541e:	2b00      	cmp	r3, #0
 8005420:	d008      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005422:	4b4e      	ldr	r3, [pc, #312]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	494b      	ldr	r1, [pc, #300]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005430:	4313      	orrs	r3, r2
 8005432:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	2b00      	cmp	r3, #0
 800543e:	d008      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005440:	4b46      	ldr	r3, [pc, #280]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005444:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	4943      	ldr	r1, [pc, #268]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800544e:	4313      	orrs	r3, r2
 8005450:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800545a:	2b00      	cmp	r3, #0
 800545c:	d008      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800545e:	4b3f      	ldr	r3, [pc, #252]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	493c      	ldr	r1, [pc, #240]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800546c:	4313      	orrs	r3, r2
 800546e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005478:	2b00      	cmp	r3, #0
 800547a:	d008      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800547c:	4b37      	ldr	r3, [pc, #220]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005488:	4934      	ldr	r1, [pc, #208]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800548a:	4313      	orrs	r3, r2
 800548c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005496:	2b00      	cmp	r3, #0
 8005498:	d008      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800549a:	4b30      	ldr	r3, [pc, #192]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800549c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a6:	492d      	ldr	r1, [pc, #180]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d008      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80054b8:	4b28      	ldr	r3, [pc, #160]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c4:	4925      	ldr	r1, [pc, #148]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d008      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80054d6:	4b21      	ldr	r3, [pc, #132]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054da:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	491e      	ldr	r1, [pc, #120]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d008      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80054f4:	4b19      	ldr	r3, [pc, #100]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005500:	4916      	ldr	r1, [pc, #88]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005502:	4313      	orrs	r3, r2
 8005504:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d008      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005512:	4b12      	ldr	r3, [pc, #72]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005516:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551e:	490f      	ldr	r1, [pc, #60]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005520:	4313      	orrs	r3, r2
 8005522:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d008      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005530:	4b0a      	ldr	r3, [pc, #40]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005534:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553c:	4907      	ldr	r1, [pc, #28]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800553e:	4313      	orrs	r3, r2
 8005540:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00c      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800554e:	4b03      	ldr	r3, [pc, #12]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005552:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	e002      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800555a:	bf00      	nop
 800555c:	40021000 	.word	0x40021000
 8005560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005562:	4913      	ldr	r1, [pc, #76]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005564:	4313      	orrs	r3, r2
 8005566:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d008      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005574:	4b0e      	ldr	r3, [pc, #56]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005578:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005580:	490b      	ldr	r1, [pc, #44]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005582:	4313      	orrs	r3, r2
 8005584:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d008      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005592:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800559e:	4904      	ldr	r1, [pc, #16]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3748      	adds	r7, #72	; 0x48
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	40021000 	.word	0x40021000

080055b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e049      	b.n	800565a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d106      	bne.n	80055e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7fc f8e4 	bl	80017a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3304      	adds	r3, #4
 80055f0:	4619      	mov	r1, r3
 80055f2:	4610      	mov	r0, r2
 80055f4:	f000 ff8e 	bl	8006514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b082      	sub	sp, #8
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e049      	b.n	8005708 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d106      	bne.n	800568e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f7fc f963 	bl	8001954 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2202      	movs	r2, #2
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3304      	adds	r3, #4
 800569e:	4619      	mov	r1, r3
 80056a0:	4610      	mov	r0, r2
 80056a2:	f000 ff37 	bl	8006514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d109      	bne.n	8005734 <HAL_TIM_OC_Start+0x24>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b01      	cmp	r3, #1
 800572a:	bf14      	ite	ne
 800572c:	2301      	movne	r3, #1
 800572e:	2300      	moveq	r3, #0
 8005730:	b2db      	uxtb	r3, r3
 8005732:	e03c      	b.n	80057ae <HAL_TIM_OC_Start+0x9e>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b04      	cmp	r3, #4
 8005738:	d109      	bne.n	800574e <HAL_TIM_OC_Start+0x3e>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b01      	cmp	r3, #1
 8005744:	bf14      	ite	ne
 8005746:	2301      	movne	r3, #1
 8005748:	2300      	moveq	r3, #0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	e02f      	b.n	80057ae <HAL_TIM_OC_Start+0x9e>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b08      	cmp	r3, #8
 8005752:	d109      	bne.n	8005768 <HAL_TIM_OC_Start+0x58>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b01      	cmp	r3, #1
 800575e:	bf14      	ite	ne
 8005760:	2301      	movne	r3, #1
 8005762:	2300      	moveq	r3, #0
 8005764:	b2db      	uxtb	r3, r3
 8005766:	e022      	b.n	80057ae <HAL_TIM_OC_Start+0x9e>
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2b0c      	cmp	r3, #12
 800576c:	d109      	bne.n	8005782 <HAL_TIM_OC_Start+0x72>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b01      	cmp	r3, #1
 8005778:	bf14      	ite	ne
 800577a:	2301      	movne	r3, #1
 800577c:	2300      	moveq	r3, #0
 800577e:	b2db      	uxtb	r3, r3
 8005780:	e015      	b.n	80057ae <HAL_TIM_OC_Start+0x9e>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b10      	cmp	r3, #16
 8005786:	d109      	bne.n	800579c <HAL_TIM_OC_Start+0x8c>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b01      	cmp	r3, #1
 8005792:	bf14      	ite	ne
 8005794:	2301      	movne	r3, #1
 8005796:	2300      	moveq	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	e008      	b.n	80057ae <HAL_TIM_OC_Start+0x9e>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	bf14      	ite	ne
 80057a8:	2301      	movne	r3, #1
 80057aa:	2300      	moveq	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e0a1      	b.n	80058fa <HAL_TIM_OC_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d104      	bne.n	80057c6 <HAL_TIM_OC_Start+0xb6>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057c4:	e023      	b.n	800580e <HAL_TIM_OC_Start+0xfe>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d104      	bne.n	80057d6 <HAL_TIM_OC_Start+0xc6>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057d4:	e01b      	b.n	800580e <HAL_TIM_OC_Start+0xfe>
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d104      	bne.n	80057e6 <HAL_TIM_OC_Start+0xd6>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057e4:	e013      	b.n	800580e <HAL_TIM_OC_Start+0xfe>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b0c      	cmp	r3, #12
 80057ea:	d104      	bne.n	80057f6 <HAL_TIM_OC_Start+0xe6>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057f4:	e00b      	b.n	800580e <HAL_TIM_OC_Start+0xfe>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b10      	cmp	r3, #16
 80057fa:	d104      	bne.n	8005806 <HAL_TIM_OC_Start+0xf6>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005804:	e003      	b.n	800580e <HAL_TIM_OC_Start+0xfe>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2202      	movs	r2, #2
 800580a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2201      	movs	r2, #1
 8005814:	6839      	ldr	r1, [r7, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f001 fbde 	bl	8006fd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a38      	ldr	r2, [pc, #224]	; (8005904 <HAL_TIM_OC_Start+0x1f4>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d018      	beq.n	8005858 <HAL_TIM_OC_Start+0x148>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a37      	ldr	r2, [pc, #220]	; (8005908 <HAL_TIM_OC_Start+0x1f8>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d013      	beq.n	8005858 <HAL_TIM_OC_Start+0x148>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a35      	ldr	r2, [pc, #212]	; (800590c <HAL_TIM_OC_Start+0x1fc>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d00e      	beq.n	8005858 <HAL_TIM_OC_Start+0x148>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a34      	ldr	r2, [pc, #208]	; (8005910 <HAL_TIM_OC_Start+0x200>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d009      	beq.n	8005858 <HAL_TIM_OC_Start+0x148>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a32      	ldr	r2, [pc, #200]	; (8005914 <HAL_TIM_OC_Start+0x204>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d004      	beq.n	8005858 <HAL_TIM_OC_Start+0x148>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a31      	ldr	r2, [pc, #196]	; (8005918 <HAL_TIM_OC_Start+0x208>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d101      	bne.n	800585c <HAL_TIM_OC_Start+0x14c>
 8005858:	2301      	movs	r3, #1
 800585a:	e000      	b.n	800585e <HAL_TIM_OC_Start+0x14e>
 800585c:	2300      	movs	r3, #0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d007      	beq.n	8005872 <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005870:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a23      	ldr	r2, [pc, #140]	; (8005904 <HAL_TIM_OC_Start+0x1f4>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d01d      	beq.n	80058b8 <HAL_TIM_OC_Start+0x1a8>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005884:	d018      	beq.n	80058b8 <HAL_TIM_OC_Start+0x1a8>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a24      	ldr	r2, [pc, #144]	; (800591c <HAL_TIM_OC_Start+0x20c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d013      	beq.n	80058b8 <HAL_TIM_OC_Start+0x1a8>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a22      	ldr	r2, [pc, #136]	; (8005920 <HAL_TIM_OC_Start+0x210>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00e      	beq.n	80058b8 <HAL_TIM_OC_Start+0x1a8>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a1a      	ldr	r2, [pc, #104]	; (8005908 <HAL_TIM_OC_Start+0x1f8>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d009      	beq.n	80058b8 <HAL_TIM_OC_Start+0x1a8>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a18      	ldr	r2, [pc, #96]	; (800590c <HAL_TIM_OC_Start+0x1fc>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d004      	beq.n	80058b8 <HAL_TIM_OC_Start+0x1a8>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a19      	ldr	r2, [pc, #100]	; (8005918 <HAL_TIM_OC_Start+0x208>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d115      	bne.n	80058e4 <HAL_TIM_OC_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	4b19      	ldr	r3, [pc, #100]	; (8005924 <HAL_TIM_OC_Start+0x214>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b06      	cmp	r3, #6
 80058c8:	d015      	beq.n	80058f6 <HAL_TIM_OC_Start+0x1e6>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d0:	d011      	beq.n	80058f6 <HAL_TIM_OC_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f042 0201 	orr.w	r2, r2, #1
 80058e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e2:	e008      	b.n	80058f6 <HAL_TIM_OC_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0201 	orr.w	r2, r2, #1
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	e000      	b.n	80058f8 <HAL_TIM_OC_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	40012c00 	.word	0x40012c00
 8005908:	40013400 	.word	0x40013400
 800590c:	40014000 	.word	0x40014000
 8005910:	40014400 	.word	0x40014400
 8005914:	40014800 	.word	0x40014800
 8005918:	40015000 	.word	0x40015000
 800591c:	40000400 	.word	0x40000400
 8005920:	40000800 	.word	0x40000800
 8005924:	00010007 	.word	0x00010007

08005928 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e049      	b.n	80059ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d106      	bne.n	8005954 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7fb ff48 	bl	80017e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2202      	movs	r2, #2
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	3304      	adds	r3, #4
 8005964:	4619      	mov	r1, r3
 8005966:	4610      	mov	r0, r2
 8005968:	f000 fdd4 	bl	8006514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
	...

080059d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d109      	bne.n	80059fc <HAL_TIM_PWM_Start+0x24>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	bf14      	ite	ne
 80059f4:	2301      	movne	r3, #1
 80059f6:	2300      	moveq	r3, #0
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	e03c      	b.n	8005a76 <HAL_TIM_PWM_Start+0x9e>
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d109      	bne.n	8005a16 <HAL_TIM_PWM_Start+0x3e>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	bf14      	ite	ne
 8005a0e:	2301      	movne	r3, #1
 8005a10:	2300      	moveq	r3, #0
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	e02f      	b.n	8005a76 <HAL_TIM_PWM_Start+0x9e>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	d109      	bne.n	8005a30 <HAL_TIM_PWM_Start+0x58>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	bf14      	ite	ne
 8005a28:	2301      	movne	r3, #1
 8005a2a:	2300      	moveq	r3, #0
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	e022      	b.n	8005a76 <HAL_TIM_PWM_Start+0x9e>
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	2b0c      	cmp	r3, #12
 8005a34:	d109      	bne.n	8005a4a <HAL_TIM_PWM_Start+0x72>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	bf14      	ite	ne
 8005a42:	2301      	movne	r3, #1
 8005a44:	2300      	moveq	r3, #0
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	e015      	b.n	8005a76 <HAL_TIM_PWM_Start+0x9e>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b10      	cmp	r3, #16
 8005a4e:	d109      	bne.n	8005a64 <HAL_TIM_PWM_Start+0x8c>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	bf14      	ite	ne
 8005a5c:	2301      	movne	r3, #1
 8005a5e:	2300      	moveq	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	e008      	b.n	8005a76 <HAL_TIM_PWM_Start+0x9e>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	bf14      	ite	ne
 8005a70:	2301      	movne	r3, #1
 8005a72:	2300      	moveq	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e0a1      	b.n	8005bc2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d104      	bne.n	8005a8e <HAL_TIM_PWM_Start+0xb6>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a8c:	e023      	b.n	8005ad6 <HAL_TIM_PWM_Start+0xfe>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	d104      	bne.n	8005a9e <HAL_TIM_PWM_Start+0xc6>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a9c:	e01b      	b.n	8005ad6 <HAL_TIM_PWM_Start+0xfe>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d104      	bne.n	8005aae <HAL_TIM_PWM_Start+0xd6>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005aac:	e013      	b.n	8005ad6 <HAL_TIM_PWM_Start+0xfe>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b0c      	cmp	r3, #12
 8005ab2:	d104      	bne.n	8005abe <HAL_TIM_PWM_Start+0xe6>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005abc:	e00b      	b.n	8005ad6 <HAL_TIM_PWM_Start+0xfe>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b10      	cmp	r3, #16
 8005ac2:	d104      	bne.n	8005ace <HAL_TIM_PWM_Start+0xf6>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005acc:	e003      	b.n	8005ad6 <HAL_TIM_PWM_Start+0xfe>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2201      	movs	r2, #1
 8005adc:	6839      	ldr	r1, [r7, #0]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f001 fa7a 	bl	8006fd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a38      	ldr	r2, [pc, #224]	; (8005bcc <HAL_TIM_PWM_Start+0x1f4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d018      	beq.n	8005b20 <HAL_TIM_PWM_Start+0x148>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a37      	ldr	r2, [pc, #220]	; (8005bd0 <HAL_TIM_PWM_Start+0x1f8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d013      	beq.n	8005b20 <HAL_TIM_PWM_Start+0x148>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a35      	ldr	r2, [pc, #212]	; (8005bd4 <HAL_TIM_PWM_Start+0x1fc>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00e      	beq.n	8005b20 <HAL_TIM_PWM_Start+0x148>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a34      	ldr	r2, [pc, #208]	; (8005bd8 <HAL_TIM_PWM_Start+0x200>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d009      	beq.n	8005b20 <HAL_TIM_PWM_Start+0x148>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a32      	ldr	r2, [pc, #200]	; (8005bdc <HAL_TIM_PWM_Start+0x204>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d004      	beq.n	8005b20 <HAL_TIM_PWM_Start+0x148>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a31      	ldr	r2, [pc, #196]	; (8005be0 <HAL_TIM_PWM_Start+0x208>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d101      	bne.n	8005b24 <HAL_TIM_PWM_Start+0x14c>
 8005b20:	2301      	movs	r3, #1
 8005b22:	e000      	b.n	8005b26 <HAL_TIM_PWM_Start+0x14e>
 8005b24:	2300      	movs	r3, #0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d007      	beq.n	8005b3a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a23      	ldr	r2, [pc, #140]	; (8005bcc <HAL_TIM_PWM_Start+0x1f4>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d01d      	beq.n	8005b80 <HAL_TIM_PWM_Start+0x1a8>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4c:	d018      	beq.n	8005b80 <HAL_TIM_PWM_Start+0x1a8>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a24      	ldr	r2, [pc, #144]	; (8005be4 <HAL_TIM_PWM_Start+0x20c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d013      	beq.n	8005b80 <HAL_TIM_PWM_Start+0x1a8>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a22      	ldr	r2, [pc, #136]	; (8005be8 <HAL_TIM_PWM_Start+0x210>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00e      	beq.n	8005b80 <HAL_TIM_PWM_Start+0x1a8>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1a      	ldr	r2, [pc, #104]	; (8005bd0 <HAL_TIM_PWM_Start+0x1f8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d009      	beq.n	8005b80 <HAL_TIM_PWM_Start+0x1a8>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a18      	ldr	r2, [pc, #96]	; (8005bd4 <HAL_TIM_PWM_Start+0x1fc>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d004      	beq.n	8005b80 <HAL_TIM_PWM_Start+0x1a8>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a19      	ldr	r2, [pc, #100]	; (8005be0 <HAL_TIM_PWM_Start+0x208>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d115      	bne.n	8005bac <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	4b19      	ldr	r3, [pc, #100]	; (8005bec <HAL_TIM_PWM_Start+0x214>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b06      	cmp	r3, #6
 8005b90:	d015      	beq.n	8005bbe <HAL_TIM_PWM_Start+0x1e6>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b98:	d011      	beq.n	8005bbe <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f042 0201 	orr.w	r2, r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005baa:	e008      	b.n	8005bbe <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0201 	orr.w	r2, r2, #1
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	e000      	b.n	8005bc0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40012c00 	.word	0x40012c00
 8005bd0:	40013400 	.word	0x40013400
 8005bd4:	40014000 	.word	0x40014000
 8005bd8:	40014400 	.word	0x40014400
 8005bdc:	40014800 	.word	0x40014800
 8005be0:	40015000 	.word	0x40015000
 8005be4:	40000400 	.word	0x40000400
 8005be8:	40000800 	.word	0x40000800
 8005bec:	00010007 	.word	0x00010007

08005bf0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e049      	b.n	8005c96 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d106      	bne.n	8005c1c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7fb fe04 	bl	8001824 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4610      	mov	r0, r2
 8005c30:	f000 fc70 	bl	8006514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b082      	sub	sp, #8
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d122      	bne.n	8005cfa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d11b      	bne.n	8005cfa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f06f 0202 	mvn.w	r2, #2
 8005cca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7fb fa29 	bl	8001138 <HAL_TIM_IC_CaptureCallback>
 8005ce6:	e005      	b.n	8005cf4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fbf4 	bl	80064d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fbfb 	bl	80064ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d122      	bne.n	8005d4e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f003 0304 	and.w	r3, r3, #4
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	d11b      	bne.n	8005d4e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f06f 0204 	mvn.w	r2, #4
 8005d1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7fb f9ff 	bl	8001138 <HAL_TIM_IC_CaptureCallback>
 8005d3a:	e005      	b.n	8005d48 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fbca 	bl	80064d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fbd1 	bl	80064ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	f003 0308 	and.w	r3, r3, #8
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d122      	bne.n	8005da2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	f003 0308 	and.w	r3, r3, #8
 8005d66:	2b08      	cmp	r3, #8
 8005d68:	d11b      	bne.n	8005da2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f06f 0208 	mvn.w	r2, #8
 8005d72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2204      	movs	r2, #4
 8005d78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	f003 0303 	and.w	r3, r3, #3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d003      	beq.n	8005d90 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7fb f9d5 	bl	8001138 <HAL_TIM_IC_CaptureCallback>
 8005d8e:	e005      	b.n	8005d9c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fba0 	bl	80064d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fba7 	bl	80064ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	f003 0310 	and.w	r3, r3, #16
 8005dac:	2b10      	cmp	r3, #16
 8005dae:	d122      	bne.n	8005df6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f003 0310 	and.w	r3, r3, #16
 8005dba:	2b10      	cmp	r3, #16
 8005dbc:	d11b      	bne.n	8005df6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f06f 0210 	mvn.w	r2, #16
 8005dc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2208      	movs	r2, #8
 8005dcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7fb f9ab 	bl	8001138 <HAL_TIM_IC_CaptureCallback>
 8005de2:	e005      	b.n	8005df0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fb76 	bl	80064d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fb7d 	bl	80064ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d10e      	bne.n	8005e22 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d107      	bne.n	8005e22 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f06f 0201 	mvn.w	r2, #1
 8005e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 fb50 	bl	80064c2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e2c:	2b80      	cmp	r3, #128	; 0x80
 8005e2e:	d10e      	bne.n	8005e4e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3a:	2b80      	cmp	r3, #128	; 0x80
 8005e3c:	d107      	bne.n	8005e4e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f001 fa07 	bl	800725c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5c:	d10e      	bne.n	8005e7c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e68:	2b80      	cmp	r3, #128	; 0x80
 8005e6a:	d107      	bne.n	8005e7c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f001 f9fa 	bl	8007270 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e86:	2b40      	cmp	r3, #64	; 0x40
 8005e88:	d10e      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e94:	2b40      	cmp	r3, #64	; 0x40
 8005e96:	d107      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fb2b 	bl	80064fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	d10e      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f003 0320 	and.w	r3, r3, #32
 8005ec0:	2b20      	cmp	r3, #32
 8005ec2:	d107      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0220 	mvn.w	r2, #32
 8005ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f001 f9ba 	bl	8007248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ed4:	bf00      	nop
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d101      	bne.n	8005efa <HAL_TIM_OC_ConfigChannel+0x1e>
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	e066      	b.n	8005fc8 <HAL_TIM_OC_ConfigChannel+0xec>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b14      	cmp	r3, #20
 8005f06:	d857      	bhi.n	8005fb8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005f08:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0e:	bf00      	nop
 8005f10:	08005f65 	.word	0x08005f65
 8005f14:	08005fb9 	.word	0x08005fb9
 8005f18:	08005fb9 	.word	0x08005fb9
 8005f1c:	08005fb9 	.word	0x08005fb9
 8005f20:	08005f73 	.word	0x08005f73
 8005f24:	08005fb9 	.word	0x08005fb9
 8005f28:	08005fb9 	.word	0x08005fb9
 8005f2c:	08005fb9 	.word	0x08005fb9
 8005f30:	08005f81 	.word	0x08005f81
 8005f34:	08005fb9 	.word	0x08005fb9
 8005f38:	08005fb9 	.word	0x08005fb9
 8005f3c:	08005fb9 	.word	0x08005fb9
 8005f40:	08005f8f 	.word	0x08005f8f
 8005f44:	08005fb9 	.word	0x08005fb9
 8005f48:	08005fb9 	.word	0x08005fb9
 8005f4c:	08005fb9 	.word	0x08005fb9
 8005f50:	08005f9d 	.word	0x08005f9d
 8005f54:	08005fb9 	.word	0x08005fb9
 8005f58:	08005fb9 	.word	0x08005fb9
 8005f5c:	08005fb9 	.word	0x08005fb9
 8005f60:	08005fab 	.word	0x08005fab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68b9      	ldr	r1, [r7, #8]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 fb70 	bl	8006650 <TIM_OC1_SetConfig>
      break;
 8005f70:	e025      	b.n	8005fbe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 fc03 	bl	8006784 <TIM_OC2_SetConfig>
      break;
 8005f7e:	e01e      	b.n	8005fbe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68b9      	ldr	r1, [r7, #8]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fc90 	bl	80068ac <TIM_OC3_SetConfig>
      break;
 8005f8c:	e017      	b.n	8005fbe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 fd1b 	bl	80069d0 <TIM_OC4_SetConfig>
      break;
 8005f9a:	e010      	b.n	8005fbe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68b9      	ldr	r1, [r7, #8]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 fd84 	bl	8006ab0 <TIM_OC5_SetConfig>
      break;
 8005fa8:	e009      	b.n	8005fbe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68b9      	ldr	r1, [r7, #8]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 fde7 	bl	8006b84 <TIM_OC6_SetConfig>
      break;
 8005fb6:	e002      	b.n	8005fbe <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	75fb      	strb	r3, [r7, #23]
      break;
 8005fbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d101      	bne.n	8005fee <HAL_TIM_IC_ConfigChannel+0x1e>
 8005fea:	2302      	movs	r3, #2
 8005fec:	e088      	b.n	8006100 <HAL_TIM_IC_ConfigChannel+0x130>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d11b      	bne.n	8006034 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6818      	ldr	r0, [r3, #0]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	6819      	ldr	r1, [r3, #0]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f000 fe26 	bl	8006c5c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699a      	ldr	r2, [r3, #24]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 020c 	bic.w	r2, r2, #12
 800601e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6999      	ldr	r1, [r3, #24]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	689a      	ldr	r2, [r3, #8]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	619a      	str	r2, [r3, #24]
 8006032:	e060      	b.n	80060f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b04      	cmp	r3, #4
 8006038:	d11c      	bne.n	8006074 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	6819      	ldr	r1, [r3, #0]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f000 fea4 	bl	8006d96 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	699a      	ldr	r2, [r3, #24]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800605c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6999      	ldr	r1, [r3, #24]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	021a      	lsls	r2, r3, #8
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	619a      	str	r2, [r3, #24]
 8006072:	e040      	b.n	80060f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b08      	cmp	r3, #8
 8006078:	d11b      	bne.n	80060b2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	6819      	ldr	r1, [r3, #0]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f000 fef1 	bl	8006e70 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	69da      	ldr	r2, [r3, #28]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 020c 	bic.w	r2, r2, #12
 800609c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69d9      	ldr	r1, [r3, #28]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	61da      	str	r2, [r3, #28]
 80060b0:	e021      	b.n	80060f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b0c      	cmp	r3, #12
 80060b6:	d11c      	bne.n	80060f2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6818      	ldr	r0, [r3, #0]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	6819      	ldr	r1, [r3, #0]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f000 ff0e 	bl	8006ee8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	69da      	ldr	r2, [r3, #28]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80060da:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	69d9      	ldr	r1, [r3, #28]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	021a      	lsls	r2, r3, #8
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	61da      	str	r2, [r3, #28]
 80060f0:	e001      	b.n	80060f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800611e:	2b01      	cmp	r3, #1
 8006120:	d101      	bne.n	8006126 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006122:	2302      	movs	r3, #2
 8006124:	e0ff      	b.n	8006326 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b14      	cmp	r3, #20
 8006132:	f200 80f0 	bhi.w	8006316 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006136:	a201      	add	r2, pc, #4	; (adr r2, 800613c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613c:	08006191 	.word	0x08006191
 8006140:	08006317 	.word	0x08006317
 8006144:	08006317 	.word	0x08006317
 8006148:	08006317 	.word	0x08006317
 800614c:	080061d1 	.word	0x080061d1
 8006150:	08006317 	.word	0x08006317
 8006154:	08006317 	.word	0x08006317
 8006158:	08006317 	.word	0x08006317
 800615c:	08006213 	.word	0x08006213
 8006160:	08006317 	.word	0x08006317
 8006164:	08006317 	.word	0x08006317
 8006168:	08006317 	.word	0x08006317
 800616c:	08006253 	.word	0x08006253
 8006170:	08006317 	.word	0x08006317
 8006174:	08006317 	.word	0x08006317
 8006178:	08006317 	.word	0x08006317
 800617c:	08006295 	.word	0x08006295
 8006180:	08006317 	.word	0x08006317
 8006184:	08006317 	.word	0x08006317
 8006188:	08006317 	.word	0x08006317
 800618c:	080062d5 	.word	0x080062d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68b9      	ldr	r1, [r7, #8]
 8006196:	4618      	mov	r0, r3
 8006198:	f000 fa5a 	bl	8006650 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699a      	ldr	r2, [r3, #24]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0208 	orr.w	r2, r2, #8
 80061aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	699a      	ldr	r2, [r3, #24]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0204 	bic.w	r2, r2, #4
 80061ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6999      	ldr	r1, [r3, #24]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	691a      	ldr	r2, [r3, #16]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	619a      	str	r2, [r3, #24]
      break;
 80061ce:	e0a5      	b.n	800631c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fad4 	bl	8006784 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699a      	ldr	r2, [r3, #24]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699a      	ldr	r2, [r3, #24]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6999      	ldr	r1, [r3, #24]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	021a      	lsls	r2, r3, #8
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	619a      	str	r2, [r3, #24]
      break;
 8006210:	e084      	b.n	800631c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	4618      	mov	r0, r3
 800621a:	f000 fb47 	bl	80068ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	69da      	ldr	r2, [r3, #28]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f042 0208 	orr.w	r2, r2, #8
 800622c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	69da      	ldr	r2, [r3, #28]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0204 	bic.w	r2, r2, #4
 800623c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69d9      	ldr	r1, [r3, #28]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	691a      	ldr	r2, [r3, #16]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	61da      	str	r2, [r3, #28]
      break;
 8006250:	e064      	b.n	800631c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68b9      	ldr	r1, [r7, #8]
 8006258:	4618      	mov	r0, r3
 800625a:	f000 fbb9 	bl	80069d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69da      	ldr	r2, [r3, #28]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800626c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69da      	ldr	r2, [r3, #28]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800627c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69d9      	ldr	r1, [r3, #28]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	021a      	lsls	r2, r3, #8
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	61da      	str	r2, [r3, #28]
      break;
 8006292:	e043      	b.n	800631c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68b9      	ldr	r1, [r7, #8]
 800629a:	4618      	mov	r0, r3
 800629c:	f000 fc08 	bl	8006ab0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0208 	orr.w	r2, r2, #8
 80062ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 0204 	bic.w	r2, r2, #4
 80062be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	691a      	ldr	r2, [r3, #16]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80062d2:	e023      	b.n	800631c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68b9      	ldr	r1, [r7, #8]
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 fc52 	bl	8006b84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	021a      	lsls	r2, r3, #8
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006314:	e002      	b.n	800631c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	75fb      	strb	r3, [r7, #23]
      break;
 800631a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006324:	7dfb      	ldrb	r3, [r7, #23]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop

08006330 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <HAL_TIM_ConfigClockSource+0x1c>
 8006348:	2302      	movs	r3, #2
 800634a:	e0b6      	b.n	80064ba <HAL_TIM_ConfigClockSource+0x18a>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2202      	movs	r2, #2
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800636a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800636e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006376:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006388:	d03e      	beq.n	8006408 <HAL_TIM_ConfigClockSource+0xd8>
 800638a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800638e:	f200 8087 	bhi.w	80064a0 <HAL_TIM_ConfigClockSource+0x170>
 8006392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006396:	f000 8086 	beq.w	80064a6 <HAL_TIM_ConfigClockSource+0x176>
 800639a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800639e:	d87f      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x170>
 80063a0:	2b70      	cmp	r3, #112	; 0x70
 80063a2:	d01a      	beq.n	80063da <HAL_TIM_ConfigClockSource+0xaa>
 80063a4:	2b70      	cmp	r3, #112	; 0x70
 80063a6:	d87b      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x170>
 80063a8:	2b60      	cmp	r3, #96	; 0x60
 80063aa:	d050      	beq.n	800644e <HAL_TIM_ConfigClockSource+0x11e>
 80063ac:	2b60      	cmp	r3, #96	; 0x60
 80063ae:	d877      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x170>
 80063b0:	2b50      	cmp	r3, #80	; 0x50
 80063b2:	d03c      	beq.n	800642e <HAL_TIM_ConfigClockSource+0xfe>
 80063b4:	2b50      	cmp	r3, #80	; 0x50
 80063b6:	d873      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x170>
 80063b8:	2b40      	cmp	r3, #64	; 0x40
 80063ba:	d058      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x13e>
 80063bc:	2b40      	cmp	r3, #64	; 0x40
 80063be:	d86f      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x170>
 80063c0:	2b30      	cmp	r3, #48	; 0x30
 80063c2:	d064      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x15e>
 80063c4:	2b30      	cmp	r3, #48	; 0x30
 80063c6:	d86b      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x170>
 80063c8:	2b20      	cmp	r3, #32
 80063ca:	d060      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x15e>
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	d867      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x170>
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d05c      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x15e>
 80063d4:	2b10      	cmp	r3, #16
 80063d6:	d05a      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x15e>
 80063d8:	e062      	b.n	80064a0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	6899      	ldr	r1, [r3, #8]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f000 fdd5 	bl	8006f98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	609a      	str	r2, [r3, #8]
      break;
 8006406:	e04f      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6818      	ldr	r0, [r3, #0]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	6899      	ldr	r1, [r3, #8]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f000 fdbe 	bl	8006f98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800642a:	609a      	str	r2, [r3, #8]
      break;
 800642c:	e03c      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	6859      	ldr	r1, [r3, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	461a      	mov	r2, r3
 800643c:	f000 fc7c 	bl	8006d38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2150      	movs	r1, #80	; 0x50
 8006446:	4618      	mov	r0, r3
 8006448:	f000 fd8b 	bl	8006f62 <TIM_ITRx_SetConfig>
      break;
 800644c:	e02c      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6818      	ldr	r0, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	6859      	ldr	r1, [r3, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	461a      	mov	r2, r3
 800645c:	f000 fcd8 	bl	8006e10 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2160      	movs	r1, #96	; 0x60
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fd7b 	bl	8006f62 <TIM_ITRx_SetConfig>
      break;
 800646c:	e01c      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6818      	ldr	r0, [r3, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	6859      	ldr	r1, [r3, #4]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	461a      	mov	r2, r3
 800647c:	f000 fc5c 	bl	8006d38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2140      	movs	r1, #64	; 0x40
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fd6b 	bl	8006f62 <TIM_ITRx_SetConfig>
      break;
 800648c:	e00c      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4619      	mov	r1, r3
 8006498:	4610      	mov	r0, r2
 800649a:	f000 fd62 	bl	8006f62 <TIM_ITRx_SetConfig>
      break;
 800649e:	e003      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	73fb      	strb	r3, [r7, #15]
      break;
 80064a4:	e000      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80064a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b083      	sub	sp, #12
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80064ca:	bf00      	nop
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064de:	bf00      	nop
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064f2:	bf00      	nop
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
	...

08006514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a42      	ldr	r2, [pc, #264]	; (8006630 <TIM_Base_SetConfig+0x11c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d013      	beq.n	8006554 <TIM_Base_SetConfig+0x40>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006532:	d00f      	beq.n	8006554 <TIM_Base_SetConfig+0x40>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a3f      	ldr	r2, [pc, #252]	; (8006634 <TIM_Base_SetConfig+0x120>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d00b      	beq.n	8006554 <TIM_Base_SetConfig+0x40>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a3e      	ldr	r2, [pc, #248]	; (8006638 <TIM_Base_SetConfig+0x124>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d007      	beq.n	8006554 <TIM_Base_SetConfig+0x40>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a3d      	ldr	r2, [pc, #244]	; (800663c <TIM_Base_SetConfig+0x128>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d003      	beq.n	8006554 <TIM_Base_SetConfig+0x40>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a3c      	ldr	r2, [pc, #240]	; (8006640 <TIM_Base_SetConfig+0x12c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d108      	bne.n	8006566 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800655a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a31      	ldr	r2, [pc, #196]	; (8006630 <TIM_Base_SetConfig+0x11c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d01f      	beq.n	80065ae <TIM_Base_SetConfig+0x9a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006574:	d01b      	beq.n	80065ae <TIM_Base_SetConfig+0x9a>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a2e      	ldr	r2, [pc, #184]	; (8006634 <TIM_Base_SetConfig+0x120>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d017      	beq.n	80065ae <TIM_Base_SetConfig+0x9a>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a2d      	ldr	r2, [pc, #180]	; (8006638 <TIM_Base_SetConfig+0x124>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d013      	beq.n	80065ae <TIM_Base_SetConfig+0x9a>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a2c      	ldr	r2, [pc, #176]	; (800663c <TIM_Base_SetConfig+0x128>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d00f      	beq.n	80065ae <TIM_Base_SetConfig+0x9a>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a2c      	ldr	r2, [pc, #176]	; (8006644 <TIM_Base_SetConfig+0x130>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d00b      	beq.n	80065ae <TIM_Base_SetConfig+0x9a>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a2b      	ldr	r2, [pc, #172]	; (8006648 <TIM_Base_SetConfig+0x134>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d007      	beq.n	80065ae <TIM_Base_SetConfig+0x9a>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a2a      	ldr	r2, [pc, #168]	; (800664c <TIM_Base_SetConfig+0x138>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d003      	beq.n	80065ae <TIM_Base_SetConfig+0x9a>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a25      	ldr	r2, [pc, #148]	; (8006640 <TIM_Base_SetConfig+0x12c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d108      	bne.n	80065c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	4313      	orrs	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	689a      	ldr	r2, [r3, #8]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a12      	ldr	r2, [pc, #72]	; (8006630 <TIM_Base_SetConfig+0x11c>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d013      	beq.n	8006614 <TIM_Base_SetConfig+0x100>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a13      	ldr	r2, [pc, #76]	; (800663c <TIM_Base_SetConfig+0x128>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00f      	beq.n	8006614 <TIM_Base_SetConfig+0x100>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a13      	ldr	r2, [pc, #76]	; (8006644 <TIM_Base_SetConfig+0x130>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d00b      	beq.n	8006614 <TIM_Base_SetConfig+0x100>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a12      	ldr	r2, [pc, #72]	; (8006648 <TIM_Base_SetConfig+0x134>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d007      	beq.n	8006614 <TIM_Base_SetConfig+0x100>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a11      	ldr	r2, [pc, #68]	; (800664c <TIM_Base_SetConfig+0x138>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d003      	beq.n	8006614 <TIM_Base_SetConfig+0x100>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a0c      	ldr	r2, [pc, #48]	; (8006640 <TIM_Base_SetConfig+0x12c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d103      	bne.n	800661c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	691a      	ldr	r2, [r3, #16]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	615a      	str	r2, [r3, #20]
}
 8006622:	bf00      	nop
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	40012c00 	.word	0x40012c00
 8006634:	40000400 	.word	0x40000400
 8006638:	40000800 	.word	0x40000800
 800663c:	40013400 	.word	0x40013400
 8006640:	40015000 	.word	0x40015000
 8006644:	40014000 	.word	0x40014000
 8006648:	40014400 	.word	0x40014400
 800664c:	40014800 	.word	0x40014800

08006650 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	f023 0201 	bic.w	r2, r3, #1
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800667e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f023 0303 	bic.w	r3, r3, #3
 800668a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f023 0302 	bic.w	r3, r3, #2
 800669c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a30      	ldr	r2, [pc, #192]	; (800676c <TIM_OC1_SetConfig+0x11c>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d013      	beq.n	80066d8 <TIM_OC1_SetConfig+0x88>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a2f      	ldr	r2, [pc, #188]	; (8006770 <TIM_OC1_SetConfig+0x120>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d00f      	beq.n	80066d8 <TIM_OC1_SetConfig+0x88>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a2e      	ldr	r2, [pc, #184]	; (8006774 <TIM_OC1_SetConfig+0x124>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d00b      	beq.n	80066d8 <TIM_OC1_SetConfig+0x88>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a2d      	ldr	r2, [pc, #180]	; (8006778 <TIM_OC1_SetConfig+0x128>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d007      	beq.n	80066d8 <TIM_OC1_SetConfig+0x88>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a2c      	ldr	r2, [pc, #176]	; (800677c <TIM_OC1_SetConfig+0x12c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d003      	beq.n	80066d8 <TIM_OC1_SetConfig+0x88>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a2b      	ldr	r2, [pc, #172]	; (8006780 <TIM_OC1_SetConfig+0x130>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d10c      	bne.n	80066f2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f023 0308 	bic.w	r3, r3, #8
 80066de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f023 0304 	bic.w	r3, r3, #4
 80066f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a1d      	ldr	r2, [pc, #116]	; (800676c <TIM_OC1_SetConfig+0x11c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d013      	beq.n	8006722 <TIM_OC1_SetConfig+0xd2>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a1c      	ldr	r2, [pc, #112]	; (8006770 <TIM_OC1_SetConfig+0x120>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d00f      	beq.n	8006722 <TIM_OC1_SetConfig+0xd2>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a1b      	ldr	r2, [pc, #108]	; (8006774 <TIM_OC1_SetConfig+0x124>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d00b      	beq.n	8006722 <TIM_OC1_SetConfig+0xd2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a1a      	ldr	r2, [pc, #104]	; (8006778 <TIM_OC1_SetConfig+0x128>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d007      	beq.n	8006722 <TIM_OC1_SetConfig+0xd2>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a19      	ldr	r2, [pc, #100]	; (800677c <TIM_OC1_SetConfig+0x12c>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d003      	beq.n	8006722 <TIM_OC1_SetConfig+0xd2>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a18      	ldr	r2, [pc, #96]	; (8006780 <TIM_OC1_SetConfig+0x130>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d111      	bne.n	8006746 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	621a      	str	r2, [r3, #32]
}
 8006760:	bf00      	nop
 8006762:	371c      	adds	r7, #28
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	40012c00 	.word	0x40012c00
 8006770:	40013400 	.word	0x40013400
 8006774:	40014000 	.word	0x40014000
 8006778:	40014400 	.word	0x40014400
 800677c:	40014800 	.word	0x40014800
 8006780:	40015000 	.word	0x40015000

08006784 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	f023 0210 	bic.w	r2, r3, #16
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	021b      	lsls	r3, r3, #8
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	f023 0320 	bic.w	r3, r3, #32
 80067d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	4313      	orrs	r3, r2
 80067de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a2c      	ldr	r2, [pc, #176]	; (8006894 <TIM_OC2_SetConfig+0x110>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d007      	beq.n	80067f8 <TIM_OC2_SetConfig+0x74>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a2b      	ldr	r2, [pc, #172]	; (8006898 <TIM_OC2_SetConfig+0x114>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d003      	beq.n	80067f8 <TIM_OC2_SetConfig+0x74>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a2a      	ldr	r2, [pc, #168]	; (800689c <TIM_OC2_SetConfig+0x118>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d10d      	bne.n	8006814 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	011b      	lsls	r3, r3, #4
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	4313      	orrs	r3, r2
 800680a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006812:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a1f      	ldr	r2, [pc, #124]	; (8006894 <TIM_OC2_SetConfig+0x110>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d013      	beq.n	8006844 <TIM_OC2_SetConfig+0xc0>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a1e      	ldr	r2, [pc, #120]	; (8006898 <TIM_OC2_SetConfig+0x114>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d00f      	beq.n	8006844 <TIM_OC2_SetConfig+0xc0>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a1e      	ldr	r2, [pc, #120]	; (80068a0 <TIM_OC2_SetConfig+0x11c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d00b      	beq.n	8006844 <TIM_OC2_SetConfig+0xc0>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a1d      	ldr	r2, [pc, #116]	; (80068a4 <TIM_OC2_SetConfig+0x120>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d007      	beq.n	8006844 <TIM_OC2_SetConfig+0xc0>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a1c      	ldr	r2, [pc, #112]	; (80068a8 <TIM_OC2_SetConfig+0x124>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d003      	beq.n	8006844 <TIM_OC2_SetConfig+0xc0>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a17      	ldr	r2, [pc, #92]	; (800689c <TIM_OC2_SetConfig+0x118>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d113      	bne.n	800686c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800684a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006852:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	4313      	orrs	r3, r2
 800685e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	621a      	str	r2, [r3, #32]
}
 8006886:	bf00      	nop
 8006888:	371c      	adds	r7, #28
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	40012c00 	.word	0x40012c00
 8006898:	40013400 	.word	0x40013400
 800689c:	40015000 	.word	0x40015000
 80068a0:	40014000 	.word	0x40014000
 80068a4:	40014400 	.word	0x40014400
 80068a8:	40014800 	.word	0x40014800

080068ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f023 0303 	bic.w	r3, r3, #3
 80068e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	021b      	lsls	r3, r3, #8
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	4313      	orrs	r3, r2
 8006904:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a2b      	ldr	r2, [pc, #172]	; (80069b8 <TIM_OC3_SetConfig+0x10c>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d007      	beq.n	800691e <TIM_OC3_SetConfig+0x72>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a2a      	ldr	r2, [pc, #168]	; (80069bc <TIM_OC3_SetConfig+0x110>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d003      	beq.n	800691e <TIM_OC3_SetConfig+0x72>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a29      	ldr	r2, [pc, #164]	; (80069c0 <TIM_OC3_SetConfig+0x114>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d10d      	bne.n	800693a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006924:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	021b      	lsls	r3, r3, #8
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	4313      	orrs	r3, r2
 8006930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006938:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a1e      	ldr	r2, [pc, #120]	; (80069b8 <TIM_OC3_SetConfig+0x10c>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d013      	beq.n	800696a <TIM_OC3_SetConfig+0xbe>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a1d      	ldr	r2, [pc, #116]	; (80069bc <TIM_OC3_SetConfig+0x110>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d00f      	beq.n	800696a <TIM_OC3_SetConfig+0xbe>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a1d      	ldr	r2, [pc, #116]	; (80069c4 <TIM_OC3_SetConfig+0x118>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00b      	beq.n	800696a <TIM_OC3_SetConfig+0xbe>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a1c      	ldr	r2, [pc, #112]	; (80069c8 <TIM_OC3_SetConfig+0x11c>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d007      	beq.n	800696a <TIM_OC3_SetConfig+0xbe>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a1b      	ldr	r2, [pc, #108]	; (80069cc <TIM_OC3_SetConfig+0x120>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d003      	beq.n	800696a <TIM_OC3_SetConfig+0xbe>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a16      	ldr	r2, [pc, #88]	; (80069c0 <TIM_OC3_SetConfig+0x114>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d113      	bne.n	8006992 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	011b      	lsls	r3, r3, #4
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	4313      	orrs	r3, r2
 8006984:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	011b      	lsls	r3, r3, #4
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	4313      	orrs	r3, r2
 8006990:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	621a      	str	r2, [r3, #32]
}
 80069ac:	bf00      	nop
 80069ae:	371c      	adds	r7, #28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	40012c00 	.word	0x40012c00
 80069bc:	40013400 	.word	0x40013400
 80069c0:	40015000 	.word	0x40015000
 80069c4:	40014000 	.word	0x40014000
 80069c8:	40014400 	.word	0x40014400
 80069cc:	40014800 	.word	0x40014800

080069d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	021b      	lsls	r3, r3, #8
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	031b      	lsls	r3, r3, #12
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a1a      	ldr	r2, [pc, #104]	; (8006a98 <TIM_OC4_SetConfig+0xc8>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d013      	beq.n	8006a5c <TIM_OC4_SetConfig+0x8c>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a19      	ldr	r2, [pc, #100]	; (8006a9c <TIM_OC4_SetConfig+0xcc>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d00f      	beq.n	8006a5c <TIM_OC4_SetConfig+0x8c>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a18      	ldr	r2, [pc, #96]	; (8006aa0 <TIM_OC4_SetConfig+0xd0>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d00b      	beq.n	8006a5c <TIM_OC4_SetConfig+0x8c>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a17      	ldr	r2, [pc, #92]	; (8006aa4 <TIM_OC4_SetConfig+0xd4>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d007      	beq.n	8006a5c <TIM_OC4_SetConfig+0x8c>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a16      	ldr	r2, [pc, #88]	; (8006aa8 <TIM_OC4_SetConfig+0xd8>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d003      	beq.n	8006a5c <TIM_OC4_SetConfig+0x8c>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a15      	ldr	r2, [pc, #84]	; (8006aac <TIM_OC4_SetConfig+0xdc>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d109      	bne.n	8006a70 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	019b      	lsls	r3, r3, #6
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	621a      	str	r2, [r3, #32]
}
 8006a8a:	bf00      	nop
 8006a8c:	371c      	adds	r7, #28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	40012c00 	.word	0x40012c00
 8006a9c:	40013400 	.word	0x40013400
 8006aa0:	40014000 	.word	0x40014000
 8006aa4:	40014400 	.word	0x40014400
 8006aa8:	40014800 	.word	0x40014800
 8006aac:	40015000 	.word	0x40015000

08006ab0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006af4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	041b      	lsls	r3, r3, #16
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a19      	ldr	r2, [pc, #100]	; (8006b6c <TIM_OC5_SetConfig+0xbc>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d013      	beq.n	8006b32 <TIM_OC5_SetConfig+0x82>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a18      	ldr	r2, [pc, #96]	; (8006b70 <TIM_OC5_SetConfig+0xc0>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d00f      	beq.n	8006b32 <TIM_OC5_SetConfig+0x82>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a17      	ldr	r2, [pc, #92]	; (8006b74 <TIM_OC5_SetConfig+0xc4>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d00b      	beq.n	8006b32 <TIM_OC5_SetConfig+0x82>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a16      	ldr	r2, [pc, #88]	; (8006b78 <TIM_OC5_SetConfig+0xc8>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d007      	beq.n	8006b32 <TIM_OC5_SetConfig+0x82>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a15      	ldr	r2, [pc, #84]	; (8006b7c <TIM_OC5_SetConfig+0xcc>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d003      	beq.n	8006b32 <TIM_OC5_SetConfig+0x82>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a14      	ldr	r2, [pc, #80]	; (8006b80 <TIM_OC5_SetConfig+0xd0>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d109      	bne.n	8006b46 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	021b      	lsls	r3, r3, #8
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	621a      	str	r2, [r3, #32]
}
 8006b60:	bf00      	nop
 8006b62:	371c      	adds	r7, #28
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	40012c00 	.word	0x40012c00
 8006b70:	40013400 	.word	0x40013400
 8006b74:	40014000 	.word	0x40014000
 8006b78:	40014400 	.word	0x40014400
 8006b7c:	40014800 	.word	0x40014800
 8006b80:	40015000 	.word	0x40015000

08006b84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	021b      	lsls	r3, r3, #8
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	051b      	lsls	r3, r3, #20
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a1a      	ldr	r2, [pc, #104]	; (8006c44 <TIM_OC6_SetConfig+0xc0>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d013      	beq.n	8006c08 <TIM_OC6_SetConfig+0x84>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a19      	ldr	r2, [pc, #100]	; (8006c48 <TIM_OC6_SetConfig+0xc4>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d00f      	beq.n	8006c08 <TIM_OC6_SetConfig+0x84>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a18      	ldr	r2, [pc, #96]	; (8006c4c <TIM_OC6_SetConfig+0xc8>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d00b      	beq.n	8006c08 <TIM_OC6_SetConfig+0x84>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a17      	ldr	r2, [pc, #92]	; (8006c50 <TIM_OC6_SetConfig+0xcc>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d007      	beq.n	8006c08 <TIM_OC6_SetConfig+0x84>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a16      	ldr	r2, [pc, #88]	; (8006c54 <TIM_OC6_SetConfig+0xd0>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d003      	beq.n	8006c08 <TIM_OC6_SetConfig+0x84>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a15      	ldr	r2, [pc, #84]	; (8006c58 <TIM_OC6_SetConfig+0xd4>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d109      	bne.n	8006c1c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	029b      	lsls	r3, r3, #10
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	621a      	str	r2, [r3, #32]
}
 8006c36:	bf00      	nop
 8006c38:	371c      	adds	r7, #28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	40012c00 	.word	0x40012c00
 8006c48:	40013400 	.word	0x40013400
 8006c4c:	40014000 	.word	0x40014000
 8006c50:	40014400 	.word	0x40014400
 8006c54:	40014800 	.word	0x40014800
 8006c58:	40015000 	.word	0x40015000

08006c5c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
 8006c68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	f023 0201 	bic.w	r2, r3, #1
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
 8006c80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4a26      	ldr	r2, [pc, #152]	; (8006d20 <TIM_TI1_SetConfig+0xc4>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d017      	beq.n	8006cba <TIM_TI1_SetConfig+0x5e>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c90:	d013      	beq.n	8006cba <TIM_TI1_SetConfig+0x5e>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4a23      	ldr	r2, [pc, #140]	; (8006d24 <TIM_TI1_SetConfig+0xc8>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d00f      	beq.n	8006cba <TIM_TI1_SetConfig+0x5e>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	4a22      	ldr	r2, [pc, #136]	; (8006d28 <TIM_TI1_SetConfig+0xcc>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d00b      	beq.n	8006cba <TIM_TI1_SetConfig+0x5e>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4a21      	ldr	r2, [pc, #132]	; (8006d2c <TIM_TI1_SetConfig+0xd0>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d007      	beq.n	8006cba <TIM_TI1_SetConfig+0x5e>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	4a20      	ldr	r2, [pc, #128]	; (8006d30 <TIM_TI1_SetConfig+0xd4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d003      	beq.n	8006cba <TIM_TI1_SetConfig+0x5e>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	4a1f      	ldr	r2, [pc, #124]	; (8006d34 <TIM_TI1_SetConfig+0xd8>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d101      	bne.n	8006cbe <TIM_TI1_SetConfig+0x62>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e000      	b.n	8006cc0 <TIM_TI1_SetConfig+0x64>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d008      	beq.n	8006cd6 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f023 0303 	bic.w	r3, r3, #3
 8006cca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	617b      	str	r3, [r7, #20]
 8006cd4:	e003      	b.n	8006cde <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f043 0301 	orr.w	r3, r3, #1
 8006cdc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ce4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	011b      	lsls	r3, r3, #4
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	f023 030a 	bic.w	r3, r3, #10
 8006cf8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f003 030a 	and.w	r3, r3, #10
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	621a      	str	r2, [r3, #32]
}
 8006d12:	bf00      	nop
 8006d14:	371c      	adds	r7, #28
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	40012c00 	.word	0x40012c00
 8006d24:	40000400 	.word	0x40000400
 8006d28:	40000800 	.word	0x40000800
 8006d2c:	40013400 	.word	0x40013400
 8006d30:	40014000 	.word	0x40014000
 8006d34:	40015000 	.word	0x40015000

08006d38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	f023 0201 	bic.w	r2, r3, #1
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	011b      	lsls	r3, r3, #4
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f023 030a 	bic.w	r3, r3, #10
 8006d74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	621a      	str	r2, [r3, #32]
}
 8006d8a:	bf00      	nop
 8006d8c:	371c      	adds	r7, #28
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b087      	sub	sp, #28
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	60f8      	str	r0, [r7, #12]
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	607a      	str	r2, [r7, #4]
 8006da2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	f023 0210 	bic.w	r2, r3, #16
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	021b      	lsls	r3, r3, #8
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	031b      	lsls	r3, r3, #12
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006de8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	011b      	lsls	r3, r3, #4
 8006dee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	621a      	str	r2, [r3, #32]
}
 8006e04:	bf00      	nop
 8006e06:	371c      	adds	r7, #28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b087      	sub	sp, #28
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	f023 0210 	bic.w	r2, r3, #16
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	031b      	lsls	r3, r3, #12
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	011b      	lsls	r3, r3, #4
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	621a      	str	r2, [r3, #32]
}
 8006e64:	bf00      	nop
 8006e66:	371c      	adds	r7, #28
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
 8006e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f023 0303 	bic.w	r3, r3, #3
 8006e9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	011b      	lsls	r3, r3, #4
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006ec0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	021b      	lsls	r3, r3, #8
 8006ec6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	621a      	str	r2, [r3, #32]
}
 8006edc:	bf00      	nop
 8006ede:	371c      	adds	r7, #28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
 8006ef4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	021b      	lsls	r3, r3, #8
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f26:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	031b      	lsls	r3, r3, #12
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006f3a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	031b      	lsls	r3, r3, #12
 8006f40:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	621a      	str	r2, [r3, #32]
}
 8006f56:	bf00      	nop
 8006f58:	371c      	adds	r7, #28
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b085      	sub	sp, #20
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	f043 0307 	orr.w	r3, r3, #7
 8006f84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	609a      	str	r2, [r3, #8]
}
 8006f8c:	bf00      	nop
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
 8006fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	021a      	lsls	r2, r3, #8
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	609a      	str	r2, [r3, #8]
}
 8006fcc:	bf00      	nop
 8006fce:	371c      	adds	r7, #28
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f003 031f 	and.w	r3, r3, #31
 8006fea:	2201      	movs	r2, #1
 8006fec:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6a1a      	ldr	r2, [r3, #32]
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	43db      	mvns	r3, r3
 8006ffa:	401a      	ands	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6a1a      	ldr	r2, [r3, #32]
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	f003 031f 	and.w	r3, r3, #31
 800700a:	6879      	ldr	r1, [r7, #4]
 800700c:	fa01 f303 	lsl.w	r3, r1, r3
 8007010:	431a      	orrs	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	621a      	str	r2, [r3, #32]
}
 8007016:	bf00      	nop
 8007018:	371c      	adds	r7, #28
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
	...

08007024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007034:	2b01      	cmp	r3, #1
 8007036:	d101      	bne.n	800703c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007038:	2302      	movs	r3, #2
 800703a:	e06d      	b.n	8007118 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2202      	movs	r2, #2
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a30      	ldr	r2, [pc, #192]	; (8007124 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d009      	beq.n	800707a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a2f      	ldr	r2, [pc, #188]	; (8007128 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d004      	beq.n	800707a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a2d      	ldr	r2, [pc, #180]	; (800712c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d108      	bne.n	800708c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007080:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	4313      	orrs	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	4313      	orrs	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a1e      	ldr	r2, [pc, #120]	; (8007124 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d01d      	beq.n	80070ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b8:	d018      	beq.n	80070ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a1c      	ldr	r2, [pc, #112]	; (8007130 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d013      	beq.n	80070ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a1a      	ldr	r2, [pc, #104]	; (8007134 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d00e      	beq.n	80070ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a15      	ldr	r2, [pc, #84]	; (8007128 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d009      	beq.n	80070ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a16      	ldr	r2, [pc, #88]	; (8007138 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d004      	beq.n	80070ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a11      	ldr	r2, [pc, #68]	; (800712c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d10c      	bne.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	40012c00 	.word	0x40012c00
 8007128:	40013400 	.word	0x40013400
 800712c:	40015000 	.word	0x40015000
 8007130:	40000400 	.word	0x40000400
 8007134:	40000800 	.word	0x40000800
 8007138:	40014000 	.word	0x40014000

0800713c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007150:	2b01      	cmp	r3, #1
 8007152:	d101      	bne.n	8007158 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007154:	2302      	movs	r3, #2
 8007156:	e06a      	b.n	800722e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	4313      	orrs	r3, r2
 800716c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	4313      	orrs	r3, r2
 800717a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	4313      	orrs	r3, r2
 8007188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4313      	orrs	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	695b      	ldr	r3, [r3, #20]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071be:	4313      	orrs	r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	041b      	lsls	r3, r3, #16
 80071ce:	4313      	orrs	r3, r2
 80071d0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a19      	ldr	r2, [pc, #100]	; (800723c <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d009      	beq.n	80071f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a17      	ldr	r2, [pc, #92]	; (8007240 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d004      	beq.n	80071f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a16      	ldr	r2, [pc, #88]	; (8007244 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d115      	bne.n	800721c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fa:	051b      	lsls	r3, r3, #20
 80071fc:	4313      	orrs	r3, r2
 80071fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	4313      	orrs	r3, r2
 800720c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	4313      	orrs	r3, r2
 800721a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	40012c00 	.word	0x40012c00
 8007240:	40013400 	.word	0x40013400
 8007244:	40015000 	.word	0x40015000

08007248 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e040      	b.n	8007318 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800729a:	2b00      	cmp	r3, #0
 800729c:	d106      	bne.n	80072ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7fa fcfe 	bl	8001ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2224      	movs	r2, #36	; 0x24
 80072b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0201 	bic.w	r2, r2, #1
 80072c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f82c 	bl	8007320 <UART_SetConfig>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d101      	bne.n	80072d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e022      	b.n	8007318 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f9f6 	bl	80076cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689a      	ldr	r2, [r3, #8]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f042 0201 	orr.w	r2, r2, #1
 800730e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fa7d 	bl	8007810 <UART_CheckIdleState>
 8007316:	4603      	mov	r3, r0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	689a      	ldr	r2, [r3, #8]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	431a      	orrs	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	69db      	ldr	r3, [r3, #28]
 8007340:	4313      	orrs	r3, r2
 8007342:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	4b92      	ldr	r3, [pc, #584]	; (8007594 <UART_SetConfig+0x274>)
 800734c:	4013      	ands	r3, r2
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	6812      	ldr	r2, [r2, #0]
 8007352:	6979      	ldr	r1, [r7, #20]
 8007354:	430b      	orrs	r3, r1
 8007356:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68da      	ldr	r2, [r3, #12]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	4313      	orrs	r3, r2
 800737c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	430a      	orrs	r2, r1
 8007390:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a80      	ldr	r2, [pc, #512]	; (8007598 <UART_SetConfig+0x278>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d120      	bne.n	80073de <UART_SetConfig+0xbe>
 800739c:	4b7f      	ldr	r3, [pc, #508]	; (800759c <UART_SetConfig+0x27c>)
 800739e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a0:	f003 0303 	and.w	r3, r3, #3
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	d817      	bhi.n	80073d8 <UART_SetConfig+0xb8>
 80073a8:	a201      	add	r2, pc, #4	; (adr r2, 80073b0 <UART_SetConfig+0x90>)
 80073aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ae:	bf00      	nop
 80073b0:	080073c1 	.word	0x080073c1
 80073b4:	080073cd 	.word	0x080073cd
 80073b8:	080073d3 	.word	0x080073d3
 80073bc:	080073c7 	.word	0x080073c7
 80073c0:	2301      	movs	r3, #1
 80073c2:	77fb      	strb	r3, [r7, #31]
 80073c4:	e0b5      	b.n	8007532 <UART_SetConfig+0x212>
 80073c6:	2302      	movs	r3, #2
 80073c8:	77fb      	strb	r3, [r7, #31]
 80073ca:	e0b2      	b.n	8007532 <UART_SetConfig+0x212>
 80073cc:	2304      	movs	r3, #4
 80073ce:	77fb      	strb	r3, [r7, #31]
 80073d0:	e0af      	b.n	8007532 <UART_SetConfig+0x212>
 80073d2:	2308      	movs	r3, #8
 80073d4:	77fb      	strb	r3, [r7, #31]
 80073d6:	e0ac      	b.n	8007532 <UART_SetConfig+0x212>
 80073d8:	2310      	movs	r3, #16
 80073da:	77fb      	strb	r3, [r7, #31]
 80073dc:	e0a9      	b.n	8007532 <UART_SetConfig+0x212>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a6f      	ldr	r2, [pc, #444]	; (80075a0 <UART_SetConfig+0x280>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d124      	bne.n	8007432 <UART_SetConfig+0x112>
 80073e8:	4b6c      	ldr	r3, [pc, #432]	; (800759c <UART_SetConfig+0x27c>)
 80073ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80073f4:	d011      	beq.n	800741a <UART_SetConfig+0xfa>
 80073f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80073fa:	d817      	bhi.n	800742c <UART_SetConfig+0x10c>
 80073fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007400:	d011      	beq.n	8007426 <UART_SetConfig+0x106>
 8007402:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007406:	d811      	bhi.n	800742c <UART_SetConfig+0x10c>
 8007408:	2b00      	cmp	r3, #0
 800740a:	d003      	beq.n	8007414 <UART_SetConfig+0xf4>
 800740c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007410:	d006      	beq.n	8007420 <UART_SetConfig+0x100>
 8007412:	e00b      	b.n	800742c <UART_SetConfig+0x10c>
 8007414:	2300      	movs	r3, #0
 8007416:	77fb      	strb	r3, [r7, #31]
 8007418:	e08b      	b.n	8007532 <UART_SetConfig+0x212>
 800741a:	2302      	movs	r3, #2
 800741c:	77fb      	strb	r3, [r7, #31]
 800741e:	e088      	b.n	8007532 <UART_SetConfig+0x212>
 8007420:	2304      	movs	r3, #4
 8007422:	77fb      	strb	r3, [r7, #31]
 8007424:	e085      	b.n	8007532 <UART_SetConfig+0x212>
 8007426:	2308      	movs	r3, #8
 8007428:	77fb      	strb	r3, [r7, #31]
 800742a:	e082      	b.n	8007532 <UART_SetConfig+0x212>
 800742c:	2310      	movs	r3, #16
 800742e:	77fb      	strb	r3, [r7, #31]
 8007430:	e07f      	b.n	8007532 <UART_SetConfig+0x212>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a5b      	ldr	r2, [pc, #364]	; (80075a4 <UART_SetConfig+0x284>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d124      	bne.n	8007486 <UART_SetConfig+0x166>
 800743c:	4b57      	ldr	r3, [pc, #348]	; (800759c <UART_SetConfig+0x27c>)
 800743e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007440:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007444:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007448:	d011      	beq.n	800746e <UART_SetConfig+0x14e>
 800744a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800744e:	d817      	bhi.n	8007480 <UART_SetConfig+0x160>
 8007450:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007454:	d011      	beq.n	800747a <UART_SetConfig+0x15a>
 8007456:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800745a:	d811      	bhi.n	8007480 <UART_SetConfig+0x160>
 800745c:	2b00      	cmp	r3, #0
 800745e:	d003      	beq.n	8007468 <UART_SetConfig+0x148>
 8007460:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007464:	d006      	beq.n	8007474 <UART_SetConfig+0x154>
 8007466:	e00b      	b.n	8007480 <UART_SetConfig+0x160>
 8007468:	2300      	movs	r3, #0
 800746a:	77fb      	strb	r3, [r7, #31]
 800746c:	e061      	b.n	8007532 <UART_SetConfig+0x212>
 800746e:	2302      	movs	r3, #2
 8007470:	77fb      	strb	r3, [r7, #31]
 8007472:	e05e      	b.n	8007532 <UART_SetConfig+0x212>
 8007474:	2304      	movs	r3, #4
 8007476:	77fb      	strb	r3, [r7, #31]
 8007478:	e05b      	b.n	8007532 <UART_SetConfig+0x212>
 800747a:	2308      	movs	r3, #8
 800747c:	77fb      	strb	r3, [r7, #31]
 800747e:	e058      	b.n	8007532 <UART_SetConfig+0x212>
 8007480:	2310      	movs	r3, #16
 8007482:	77fb      	strb	r3, [r7, #31]
 8007484:	e055      	b.n	8007532 <UART_SetConfig+0x212>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a47      	ldr	r2, [pc, #284]	; (80075a8 <UART_SetConfig+0x288>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d124      	bne.n	80074da <UART_SetConfig+0x1ba>
 8007490:	4b42      	ldr	r3, [pc, #264]	; (800759c <UART_SetConfig+0x27c>)
 8007492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007494:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007498:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800749c:	d011      	beq.n	80074c2 <UART_SetConfig+0x1a2>
 800749e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074a2:	d817      	bhi.n	80074d4 <UART_SetConfig+0x1b4>
 80074a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074a8:	d011      	beq.n	80074ce <UART_SetConfig+0x1ae>
 80074aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074ae:	d811      	bhi.n	80074d4 <UART_SetConfig+0x1b4>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d003      	beq.n	80074bc <UART_SetConfig+0x19c>
 80074b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074b8:	d006      	beq.n	80074c8 <UART_SetConfig+0x1a8>
 80074ba:	e00b      	b.n	80074d4 <UART_SetConfig+0x1b4>
 80074bc:	2300      	movs	r3, #0
 80074be:	77fb      	strb	r3, [r7, #31]
 80074c0:	e037      	b.n	8007532 <UART_SetConfig+0x212>
 80074c2:	2302      	movs	r3, #2
 80074c4:	77fb      	strb	r3, [r7, #31]
 80074c6:	e034      	b.n	8007532 <UART_SetConfig+0x212>
 80074c8:	2304      	movs	r3, #4
 80074ca:	77fb      	strb	r3, [r7, #31]
 80074cc:	e031      	b.n	8007532 <UART_SetConfig+0x212>
 80074ce:	2308      	movs	r3, #8
 80074d0:	77fb      	strb	r3, [r7, #31]
 80074d2:	e02e      	b.n	8007532 <UART_SetConfig+0x212>
 80074d4:	2310      	movs	r3, #16
 80074d6:	77fb      	strb	r3, [r7, #31]
 80074d8:	e02b      	b.n	8007532 <UART_SetConfig+0x212>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a33      	ldr	r2, [pc, #204]	; (80075ac <UART_SetConfig+0x28c>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d124      	bne.n	800752e <UART_SetConfig+0x20e>
 80074e4:	4b2d      	ldr	r3, [pc, #180]	; (800759c <UART_SetConfig+0x27c>)
 80074e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80074ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80074f0:	d011      	beq.n	8007516 <UART_SetConfig+0x1f6>
 80074f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80074f6:	d817      	bhi.n	8007528 <UART_SetConfig+0x208>
 80074f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074fc:	d011      	beq.n	8007522 <UART_SetConfig+0x202>
 80074fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007502:	d811      	bhi.n	8007528 <UART_SetConfig+0x208>
 8007504:	2b00      	cmp	r3, #0
 8007506:	d003      	beq.n	8007510 <UART_SetConfig+0x1f0>
 8007508:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800750c:	d006      	beq.n	800751c <UART_SetConfig+0x1fc>
 800750e:	e00b      	b.n	8007528 <UART_SetConfig+0x208>
 8007510:	2300      	movs	r3, #0
 8007512:	77fb      	strb	r3, [r7, #31]
 8007514:	e00d      	b.n	8007532 <UART_SetConfig+0x212>
 8007516:	2302      	movs	r3, #2
 8007518:	77fb      	strb	r3, [r7, #31]
 800751a:	e00a      	b.n	8007532 <UART_SetConfig+0x212>
 800751c:	2304      	movs	r3, #4
 800751e:	77fb      	strb	r3, [r7, #31]
 8007520:	e007      	b.n	8007532 <UART_SetConfig+0x212>
 8007522:	2308      	movs	r3, #8
 8007524:	77fb      	strb	r3, [r7, #31]
 8007526:	e004      	b.n	8007532 <UART_SetConfig+0x212>
 8007528:	2310      	movs	r3, #16
 800752a:	77fb      	strb	r3, [r7, #31]
 800752c:	e001      	b.n	8007532 <UART_SetConfig+0x212>
 800752e:	2310      	movs	r3, #16
 8007530:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	69db      	ldr	r3, [r3, #28]
 8007536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800753a:	d16c      	bne.n	8007616 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 800753c:	7ffb      	ldrb	r3, [r7, #31]
 800753e:	2b08      	cmp	r3, #8
 8007540:	d838      	bhi.n	80075b4 <UART_SetConfig+0x294>
 8007542:	a201      	add	r2, pc, #4	; (adr r2, 8007548 <UART_SetConfig+0x228>)
 8007544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007548:	0800756d 	.word	0x0800756d
 800754c:	08007575 	.word	0x08007575
 8007550:	0800757d 	.word	0x0800757d
 8007554:	080075b5 	.word	0x080075b5
 8007558:	08007583 	.word	0x08007583
 800755c:	080075b5 	.word	0x080075b5
 8007560:	080075b5 	.word	0x080075b5
 8007564:	080075b5 	.word	0x080075b5
 8007568:	0800758b 	.word	0x0800758b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800756c:	f7fd fdc0 	bl	80050f0 <HAL_RCC_GetPCLK1Freq>
 8007570:	61b8      	str	r0, [r7, #24]
        break;
 8007572:	e024      	b.n	80075be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007574:	f7fd fdde 	bl	8005134 <HAL_RCC_GetPCLK2Freq>
 8007578:	61b8      	str	r0, [r7, #24]
        break;
 800757a:	e020      	b.n	80075be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800757c:	4b0c      	ldr	r3, [pc, #48]	; (80075b0 <UART_SetConfig+0x290>)
 800757e:	61bb      	str	r3, [r7, #24]
        break;
 8007580:	e01d      	b.n	80075be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007582:	f7fd fd3f 	bl	8005004 <HAL_RCC_GetSysClockFreq>
 8007586:	61b8      	str	r0, [r7, #24]
        break;
 8007588:	e019      	b.n	80075be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800758a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800758e:	61bb      	str	r3, [r7, #24]
        break;
 8007590:	e015      	b.n	80075be <UART_SetConfig+0x29e>
 8007592:	bf00      	nop
 8007594:	efff69f3 	.word	0xefff69f3
 8007598:	40013800 	.word	0x40013800
 800759c:	40021000 	.word	0x40021000
 80075a0:	40004400 	.word	0x40004400
 80075a4:	40004800 	.word	0x40004800
 80075a8:	40004c00 	.word	0x40004c00
 80075ac:	40005000 	.word	0x40005000
 80075b0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80075b4:	2300      	movs	r3, #0
 80075b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	77bb      	strb	r3, [r7, #30]
        break;
 80075bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d075      	beq.n	80076b0 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	005a      	lsls	r2, r3, #1
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	085b      	lsrs	r3, r3, #1
 80075ce:	441a      	add	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d8:	b29b      	uxth	r3, r3
 80075da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	2b0f      	cmp	r3, #15
 80075e0:	d916      	bls.n	8007610 <UART_SetConfig+0x2f0>
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075e8:	d212      	bcs.n	8007610 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	f023 030f 	bic.w	r3, r3, #15
 80075f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	085b      	lsrs	r3, r3, #1
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	f003 0307 	and.w	r3, r3, #7
 80075fe:	b29a      	uxth	r2, r3
 8007600:	89fb      	ldrh	r3, [r7, #14]
 8007602:	4313      	orrs	r3, r2
 8007604:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	89fa      	ldrh	r2, [r7, #14]
 800760c:	60da      	str	r2, [r3, #12]
 800760e:	e04f      	b.n	80076b0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	77bb      	strb	r3, [r7, #30]
 8007614:	e04c      	b.n	80076b0 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007616:	7ffb      	ldrb	r3, [r7, #31]
 8007618:	2b08      	cmp	r3, #8
 800761a:	d828      	bhi.n	800766e <UART_SetConfig+0x34e>
 800761c:	a201      	add	r2, pc, #4	; (adr r2, 8007624 <UART_SetConfig+0x304>)
 800761e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007622:	bf00      	nop
 8007624:	08007649 	.word	0x08007649
 8007628:	08007651 	.word	0x08007651
 800762c:	08007659 	.word	0x08007659
 8007630:	0800766f 	.word	0x0800766f
 8007634:	0800765f 	.word	0x0800765f
 8007638:	0800766f 	.word	0x0800766f
 800763c:	0800766f 	.word	0x0800766f
 8007640:	0800766f 	.word	0x0800766f
 8007644:	08007667 	.word	0x08007667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007648:	f7fd fd52 	bl	80050f0 <HAL_RCC_GetPCLK1Freq>
 800764c:	61b8      	str	r0, [r7, #24]
        break;
 800764e:	e013      	b.n	8007678 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007650:	f7fd fd70 	bl	8005134 <HAL_RCC_GetPCLK2Freq>
 8007654:	61b8      	str	r0, [r7, #24]
        break;
 8007656:	e00f      	b.n	8007678 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007658:	4b1b      	ldr	r3, [pc, #108]	; (80076c8 <UART_SetConfig+0x3a8>)
 800765a:	61bb      	str	r3, [r7, #24]
        break;
 800765c:	e00c      	b.n	8007678 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800765e:	f7fd fcd1 	bl	8005004 <HAL_RCC_GetSysClockFreq>
 8007662:	61b8      	str	r0, [r7, #24]
        break;
 8007664:	e008      	b.n	8007678 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800766a:	61bb      	str	r3, [r7, #24]
        break;
 800766c:	e004      	b.n	8007678 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800766e:	2300      	movs	r3, #0
 8007670:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	77bb      	strb	r3, [r7, #30]
        break;
 8007676:	bf00      	nop
    }

    if (pclk != 0U)
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d018      	beq.n	80076b0 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	085a      	lsrs	r2, r3, #1
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	441a      	add	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007690:	b29b      	uxth	r3, r3
 8007692:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	2b0f      	cmp	r3, #15
 8007698:	d908      	bls.n	80076ac <UART_SetConfig+0x38c>
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076a0:	d204      	bcs.n	80076ac <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	60da      	str	r2, [r3, #12]
 80076aa:	e001      	b.n	80076b0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80076bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3720      	adds	r7, #32
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	007a1200 	.word	0x007a1200

080076cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00a      	beq.n	80076f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	f003 0302 	and.w	r3, r3, #2
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00a      	beq.n	8007718 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	430a      	orrs	r2, r1
 8007716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771c:	f003 0304 	and.w	r3, r3, #4
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00a      	beq.n	800773a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	430a      	orrs	r2, r1
 8007738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773e:	f003 0308 	and.w	r3, r3, #8
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00a      	beq.n	800775c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	430a      	orrs	r2, r1
 800775a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007760:	f003 0310 	and.w	r3, r3, #16
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00a      	beq.n	800777e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	430a      	orrs	r2, r1
 800777c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007782:	f003 0320 	and.w	r3, r3, #32
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00a      	beq.n	80077a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	430a      	orrs	r2, r1
 800779e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d01a      	beq.n	80077e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	430a      	orrs	r2, r1
 80077c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077ca:	d10a      	bne.n	80077e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	430a      	orrs	r2, r1
 80077e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00a      	beq.n	8007804 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	430a      	orrs	r2, r1
 8007802:	605a      	str	r2, [r3, #4]
  }
}
 8007804:	bf00      	nop
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b086      	sub	sp, #24
 8007814:	af02      	add	r7, sp, #8
 8007816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007820:	f7fa fca4 	bl	800216c <HAL_GetTick>
 8007824:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 0308 	and.w	r3, r3, #8
 8007830:	2b08      	cmp	r3, #8
 8007832:	d10e      	bne.n	8007852 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007834:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f82d 	bl	80078a2 <UART_WaitOnFlagUntilTimeout>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	e023      	b.n	800789a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0304 	and.w	r3, r3, #4
 800785c:	2b04      	cmp	r3, #4
 800785e:	d10e      	bne.n	800787e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007860:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f817 	bl	80078a2 <UART_WaitOnFlagUntilTimeout>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d001      	beq.n	800787e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e00d      	b.n	800789a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2220      	movs	r2, #32
 8007882:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2220      	movs	r2, #32
 8007888:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b09c      	sub	sp, #112	; 0x70
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	60f8      	str	r0, [r7, #12]
 80078aa:	60b9      	str	r1, [r7, #8]
 80078ac:	603b      	str	r3, [r7, #0]
 80078ae:	4613      	mov	r3, r2
 80078b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078b2:	e0a5      	b.n	8007a00 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ba:	f000 80a1 	beq.w	8007a00 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078be:	f7fa fc55 	bl	800216c <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d302      	bcc.n	80078d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80078ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d13e      	bne.n	8007952 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078dc:	e853 3f00 	ldrex	r3, [r3]
 80078e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80078e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078e8:	667b      	str	r3, [r7, #100]	; 0x64
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	461a      	mov	r2, r3
 80078f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078fa:	e841 2300 	strex	r3, r2, [r1]
 80078fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1e6      	bne.n	80078d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3308      	adds	r3, #8
 800790c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007910:	e853 3f00 	ldrex	r3, [r3]
 8007914:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007918:	f023 0301 	bic.w	r3, r3, #1
 800791c:	663b      	str	r3, [r7, #96]	; 0x60
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3308      	adds	r3, #8
 8007924:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007926:	64ba      	str	r2, [r7, #72]	; 0x48
 8007928:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800792c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800792e:	e841 2300 	strex	r3, r2, [r1]
 8007932:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1e5      	bne.n	8007906 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2220      	movs	r2, #32
 800793e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2220      	movs	r2, #32
 8007944:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e067      	b.n	8007a22 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0304 	and.w	r3, r3, #4
 800795c:	2b00      	cmp	r3, #0
 800795e:	d04f      	beq.n	8007a00 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800796a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800796e:	d147      	bne.n	8007a00 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007978:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800798e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	461a      	mov	r2, r3
 8007996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007998:	637b      	str	r3, [r7, #52]	; 0x34
 800799a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800799e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80079a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e6      	bne.n	800797a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3308      	adds	r3, #8
 80079b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	e853 3f00 	ldrex	r3, [r3]
 80079ba:	613b      	str	r3, [r7, #16]
   return(result);
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	f023 0301 	bic.w	r3, r3, #1
 80079c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	3308      	adds	r3, #8
 80079ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079cc:	623a      	str	r2, [r7, #32]
 80079ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d0:	69f9      	ldr	r1, [r7, #28]
 80079d2:	6a3a      	ldr	r2, [r7, #32]
 80079d4:	e841 2300 	strex	r3, r2, [r1]
 80079d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1e5      	bne.n	80079ac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2220      	movs	r2, #32
 80079e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2220      	movs	r2, #32
 80079ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2220      	movs	r2, #32
 80079f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e010      	b.n	8007a22 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	69da      	ldr	r2, [r3, #28]
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	4013      	ands	r3, r2
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	bf0c      	ite	eq
 8007a10:	2301      	moveq	r3, #1
 8007a12:	2300      	movne	r3, #0
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	461a      	mov	r2, r3
 8007a18:	79fb      	ldrb	r3, [r7, #7]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	f43f af4a 	beq.w	80078b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3770      	adds	r7, #112	; 0x70
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
	...

08007a2c <__libc_init_array>:
 8007a2c:	b570      	push	{r4, r5, r6, lr}
 8007a2e:	4d0d      	ldr	r5, [pc, #52]	; (8007a64 <__libc_init_array+0x38>)
 8007a30:	4c0d      	ldr	r4, [pc, #52]	; (8007a68 <__libc_init_array+0x3c>)
 8007a32:	1b64      	subs	r4, r4, r5
 8007a34:	10a4      	asrs	r4, r4, #2
 8007a36:	2600      	movs	r6, #0
 8007a38:	42a6      	cmp	r6, r4
 8007a3a:	d109      	bne.n	8007a50 <__libc_init_array+0x24>
 8007a3c:	4d0b      	ldr	r5, [pc, #44]	; (8007a6c <__libc_init_array+0x40>)
 8007a3e:	4c0c      	ldr	r4, [pc, #48]	; (8007a70 <__libc_init_array+0x44>)
 8007a40:	f000 f820 	bl	8007a84 <_init>
 8007a44:	1b64      	subs	r4, r4, r5
 8007a46:	10a4      	asrs	r4, r4, #2
 8007a48:	2600      	movs	r6, #0
 8007a4a:	42a6      	cmp	r6, r4
 8007a4c:	d105      	bne.n	8007a5a <__libc_init_array+0x2e>
 8007a4e:	bd70      	pop	{r4, r5, r6, pc}
 8007a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a54:	4798      	blx	r3
 8007a56:	3601      	adds	r6, #1
 8007a58:	e7ee      	b.n	8007a38 <__libc_init_array+0xc>
 8007a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a5e:	4798      	blx	r3
 8007a60:	3601      	adds	r6, #1
 8007a62:	e7f2      	b.n	8007a4a <__libc_init_array+0x1e>
 8007a64:	08007ad4 	.word	0x08007ad4
 8007a68:	08007ad4 	.word	0x08007ad4
 8007a6c:	08007ad4 	.word	0x08007ad4
 8007a70:	08007ad8 	.word	0x08007ad8

08007a74 <memset>:
 8007a74:	4402      	add	r2, r0
 8007a76:	4603      	mov	r3, r0
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d100      	bne.n	8007a7e <memset+0xa>
 8007a7c:	4770      	bx	lr
 8007a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8007a82:	e7f9      	b.n	8007a78 <memset+0x4>

08007a84 <_init>:
 8007a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a86:	bf00      	nop
 8007a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a8a:	bc08      	pop	{r3}
 8007a8c:	469e      	mov	lr, r3
 8007a8e:	4770      	bx	lr

08007a90 <_fini>:
 8007a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a92:	bf00      	nop
 8007a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a96:	bc08      	pop	{r3}
 8007a98:	469e      	mov	lr, r3
 8007a9a:	4770      	bx	lr
