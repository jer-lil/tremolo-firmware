
Tremolo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a58  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003b14  08003b14  00013b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b4c  08003b4c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003b4c  08003b4c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b4c  08003b4c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b4c  08003b4c  00013b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b50  08003b50  00013b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000010  08003b64  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08003b64  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba90  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a2f  00000000  00000000  0002bac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd8  00000000  00000000  0002d4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cf0  00000000  00000000  0002e2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000dcdb  00000000  00000000  0002efc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a29d  00000000  00000000  0003cc9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00054343  00000000  00000000  00046f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009b27b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003248  00000000  00000000  0009b2f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003afc 	.word	0x08003afc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08003afc 	.word	0x08003afc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000222:	f000 ffe3 	bl	80011ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 f8d9 	bl	80003dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 fcb7 	bl	8000b9c <MX_GPIO_Init>
  MX_ADC_Init();
 800022e:	f000 f93d 	bl	80004ac <MX_ADC_Init>
  MX_SPI2_Init();
 8000232:	f000 fa33 	bl	800069c <MX_SPI2_Init>
  MX_TIM3_Init();
 8000236:	f000 fac5 	bl	80007c4 <MX_TIM3_Init>
  MX_TIM16_Init();
 800023a:	f000 fb77 	bl	800092c <MX_TIM16_Init>
  MX_USART1_UART_Init();
 800023e:	f000 fc7d 	bl	8000b3c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000242:	f000 fa69 	bl	8000718 <MX_TIM1_Init>
  MX_TIM17_Init();
 8000246:	f000 fbf5 	bl	8000a34 <MX_TIM17_Init>
  /* USER INITIALIZATION */

  /* GPIO INITIALIZATION */
  HAL_GPIO_WritePin(LED_RGB_Red_GPIO_Port, LED_RGB_Red_Pin, GPIO_PIN_SET);
 800024a:	2380      	movs	r3, #128	; 0x80
 800024c:	00db      	lsls	r3, r3, #3
 800024e:	485c      	ldr	r0, [pc, #368]	; (80003c0 <main+0x1a4>)
 8000250:	2201      	movs	r2, #1
 8000252:	0019      	movs	r1, r3
 8000254:	f001 fca5 	bl	8001ba2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RGB_Green_GPIO_Port, LED_RGB_Green_Pin, GPIO_PIN_SET);
 8000258:	2380      	movs	r3, #128	; 0x80
 800025a:	011b      	lsls	r3, r3, #4
 800025c:	4858      	ldr	r0, [pc, #352]	; (80003c0 <main+0x1a4>)
 800025e:	2201      	movs	r2, #1
 8000260:	0019      	movs	r1, r3
 8000262:	f001 fc9e 	bl	8001ba2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RGB_Blue_GPIO_Port, LED_RGB_Blue_Pin, GPIO_PIN_SET);
 8000266:	2380      	movs	r3, #128	; 0x80
 8000268:	015b      	lsls	r3, r3, #5
 800026a:	4855      	ldr	r0, [pc, #340]	; (80003c0 <main+0x1a4>)
 800026c:	2201      	movs	r2, #1
 800026e:	0019      	movs	r1, r3
 8000270:	f001 fc97 	bl	8001ba2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 8000274:	2380      	movs	r3, #128	; 0x80
 8000276:	01db      	lsls	r3, r3, #7
 8000278:	4851      	ldr	r0, [pc, #324]	; (80003c0 <main+0x1a4>)
 800027a:	2201      	movs	r2, #1
 800027c:	0019      	movs	r1, r3
 800027e:	f001 fc90 	bl	8001ba2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);
 8000282:	2380      	movs	r3, #128	; 0x80
 8000284:	019b      	lsls	r3, r3, #6
 8000286:	484e      	ldr	r0, [pc, #312]	; (80003c0 <main+0x1a4>)
 8000288:	2201      	movs	r2, #1
 800028a:	0019      	movs	r1, r3
 800028c:	f001 fc89 	bl	8001ba2 <HAL_GPIO_WritePin>
  {
	  static int d = 1;
	  static int i = 0x0000;


	  TIM_OC_InitTypeDef sConfigOC = {0};
 8000290:	003b      	movs	r3, r7
 8000292:	0018      	movs	r0, r3
 8000294:	231c      	movs	r3, #28
 8000296:	001a      	movs	r2, r3
 8000298:	2100      	movs	r1, #0
 800029a:	f003 fc27 	bl	8003aec <memset>
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800029e:	003b      	movs	r3, r7
 80002a0:	2260      	movs	r2, #96	; 0x60
 80002a2:	601a      	str	r2, [r3, #0]
	  sConfigOC.Pulse = i;
 80002a4:	4b47      	ldr	r3, [pc, #284]	; (80003c4 <main+0x1a8>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	001a      	movs	r2, r3
 80002aa:	003b      	movs	r3, r7
 80002ac:	605a      	str	r2, [r3, #4]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002ae:	003b      	movs	r3, r7
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80002b4:	003b      	movs	r3, r7
 80002b6:	2200      	movs	r2, #0
 80002b8:	611a      	str	r2, [r3, #16]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80002ba:	0039      	movs	r1, r7
 80002bc:	4b42      	ldr	r3, [pc, #264]	; (80003c8 <main+0x1ac>)
 80002be:	2200      	movs	r2, #0
 80002c0:	0018      	movs	r0, r3
 80002c2:	f002 fb11 	bl	80028e8 <HAL_TIM_PWM_ConfigChannel>
 80002c6:	1e03      	subs	r3, r0, #0
 80002c8:	d001      	beq.n	80002ce <main+0xb2>
	  {
		  Error_Handler();
 80002ca:	f000 fd05 	bl	8000cd8 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80002ce:	0039      	movs	r1, r7
 80002d0:	4b3d      	ldr	r3, [pc, #244]	; (80003c8 <main+0x1ac>)
 80002d2:	2208      	movs	r2, #8
 80002d4:	0018      	movs	r0, r3
 80002d6:	f002 fb07 	bl	80028e8 <HAL_TIM_PWM_ConfigChannel>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d001      	beq.n	80002e2 <main+0xc6>
	  {
		  Error_Handler();
 80002de:	f000 fcfb 	bl	8000cd8 <Error_Handler>
	  }
	  sConfigOC.Pulse = 0xFFFF - i;
 80002e2:	4b38      	ldr	r3, [pc, #224]	; (80003c4 <main+0x1a8>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a39      	ldr	r2, [pc, #228]	; (80003cc <main+0x1b0>)
 80002e8:	1ad3      	subs	r3, r2, r3
 80002ea:	001a      	movs	r2, r3
 80002ec:	003b      	movs	r3, r7
 80002ee:	605a      	str	r2, [r3, #4]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80002f0:	0039      	movs	r1, r7
 80002f2:	4b35      	ldr	r3, [pc, #212]	; (80003c8 <main+0x1ac>)
 80002f4:	2204      	movs	r2, #4
 80002f6:	0018      	movs	r0, r3
 80002f8:	f002 faf6 	bl	80028e8 <HAL_TIM_PWM_ConfigChannel>
 80002fc:	1e03      	subs	r3, r0, #0
 80002fe:	d001      	beq.n	8000304 <main+0xe8>
	  {
		  Error_Handler();
 8000300:	f000 fcea 	bl	8000cd8 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000304:	0039      	movs	r1, r7
 8000306:	4b30      	ldr	r3, [pc, #192]	; (80003c8 <main+0x1ac>)
 8000308:	220c      	movs	r2, #12
 800030a:	0018      	movs	r0, r3
 800030c:	f002 faec 	bl	80028e8 <HAL_TIM_PWM_ConfigChannel>
 8000310:	1e03      	subs	r3, r0, #0
 8000312:	d001      	beq.n	8000318 <main+0xfc>
	  {
		  Error_Handler();
 8000314:	f000 fce0 	bl	8000cd8 <Error_Handler>
	  }

	  if (i >= 0xFFFE) {d=0; i-=4;}
 8000318:	4b2a      	ldr	r3, [pc, #168]	; (80003c4 <main+0x1a8>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a2c      	ldr	r2, [pc, #176]	; (80003d0 <main+0x1b4>)
 800031e:	4293      	cmp	r3, r2
 8000320:	dd08      	ble.n	8000334 <main+0x118>
 8000322:	4b2c      	ldr	r3, [pc, #176]	; (80003d4 <main+0x1b8>)
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	4b26      	ldr	r3, [pc, #152]	; (80003c4 <main+0x1a8>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	1f1a      	subs	r2, r3, #4
 800032e:	4b25      	ldr	r3, [pc, #148]	; (80003c4 <main+0x1a8>)
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	e01f      	b.n	8000374 <main+0x158>
	  else if  (i <= 1)  {d=1; i+=4;}
 8000334:	4b23      	ldr	r3, [pc, #140]	; (80003c4 <main+0x1a8>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2b01      	cmp	r3, #1
 800033a:	dc08      	bgt.n	800034e <main+0x132>
 800033c:	4b25      	ldr	r3, [pc, #148]	; (80003d4 <main+0x1b8>)
 800033e:	2201      	movs	r2, #1
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	4b20      	ldr	r3, [pc, #128]	; (80003c4 <main+0x1a8>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	1d1a      	adds	r2, r3, #4
 8000348:	4b1e      	ldr	r3, [pc, #120]	; (80003c4 <main+0x1a8>)
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	e012      	b.n	8000374 <main+0x158>
	  else if (d == 1) {i+=4;}
 800034e:	4b21      	ldr	r3, [pc, #132]	; (80003d4 <main+0x1b8>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d105      	bne.n	8000362 <main+0x146>
 8000356:	4b1b      	ldr	r3, [pc, #108]	; (80003c4 <main+0x1a8>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	1d1a      	adds	r2, r3, #4
 800035c:	4b19      	ldr	r3, [pc, #100]	; (80003c4 <main+0x1a8>)
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	e008      	b.n	8000374 <main+0x158>
	  else if (d == 0) {i-=4;}
 8000362:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <main+0x1b8>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d104      	bne.n	8000374 <main+0x158>
 800036a:	4b16      	ldr	r3, [pc, #88]	; (80003c4 <main+0x1a8>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	1f1a      	subs	r2, r3, #4
 8000370:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <main+0x1a8>)
 8000372:	601a      	str	r2, [r3, #0]

	  //i = (i+10)%0xFFFF;

	  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000374:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <main+0x1ac>)
 8000376:	2100      	movs	r1, #0
 8000378:	0018      	movs	r0, r3
 800037a:	f002 fa69 	bl	8002850 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800037e:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <main+0x1ac>)
 8000380:	2104      	movs	r1, #4
 8000382:	0018      	movs	r0, r3
 8000384:	f002 fa64 	bl	8002850 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000388:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <main+0x1ac>)
 800038a:	2108      	movs	r1, #8
 800038c:	0018      	movs	r0, r3
 800038e:	f002 fa5f 	bl	8002850 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000392:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <main+0x1ac>)
 8000394:	210c      	movs	r1, #12
 8000396:	0018      	movs	r0, r3
 8000398:	f002 fa5a 	bl	8002850 <HAL_TIM_PWM_Start>

	  GPIO_PinState bypass_state = HAL_GPIO_ReadPin(BYPASS_GPIO_Port, BYPASS_Pin);
 800039c:	251f      	movs	r5, #31
 800039e:	197c      	adds	r4, r7, r5
 80003a0:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <main+0x1bc>)
 80003a2:	2101      	movs	r1, #1
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 fbdf 	bl	8001b68 <HAL_GPIO_ReadPin>
 80003aa:	0003      	movs	r3, r0
 80003ac:	7023      	strb	r3, [r4, #0]
	  HAL_GPIO_WritePin(LED_RGB_Red_GPIO_Port, LED_RGB_Red_Pin, bypass_state);
 80003ae:	197b      	adds	r3, r7, r5
 80003b0:	781a      	ldrb	r2, [r3, #0]
 80003b2:	2380      	movs	r3, #128	; 0x80
 80003b4:	00db      	lsls	r3, r3, #3
 80003b6:	4802      	ldr	r0, [pc, #8]	; (80003c0 <main+0x1a4>)
 80003b8:	0019      	movs	r1, r3
 80003ba:	f001 fbf2 	bl	8001ba2 <HAL_GPIO_WritePin>
  {
 80003be:	e767      	b.n	8000290 <main+0x74>
 80003c0:	48000800 	.word	0x48000800
 80003c4:	2000002c 	.word	0x2000002c
 80003c8:	200000d4 	.word	0x200000d4
 80003cc:	0000ffff 	.word	0x0000ffff
 80003d0:	0000fffd 	.word	0x0000fffd
 80003d4:	20000000 	.word	0x20000000
 80003d8:	48000400 	.word	0x48000400

080003dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003dc:	b590      	push	{r4, r7, lr}
 80003de:	b095      	sub	sp, #84	; 0x54
 80003e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e2:	2420      	movs	r4, #32
 80003e4:	193b      	adds	r3, r7, r4
 80003e6:	0018      	movs	r0, r3
 80003e8:	2330      	movs	r3, #48	; 0x30
 80003ea:	001a      	movs	r2, r3
 80003ec:	2100      	movs	r1, #0
 80003ee:	f003 fb7d 	bl	8003aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f2:	2310      	movs	r3, #16
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	0018      	movs	r0, r3
 80003f8:	2310      	movs	r3, #16
 80003fa:	001a      	movs	r2, r3
 80003fc:	2100      	movs	r1, #0
 80003fe:	f003 fb75 	bl	8003aec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000402:	003b      	movs	r3, r7
 8000404:	0018      	movs	r0, r3
 8000406:	2310      	movs	r3, #16
 8000408:	001a      	movs	r2, r3
 800040a:	2100      	movs	r1, #0
 800040c:	f003 fb6e 	bl	8003aec <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000410:	0021      	movs	r1, r4
 8000412:	187b      	adds	r3, r7, r1
 8000414:	2212      	movs	r2, #18
 8000416:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000418:	187b      	adds	r3, r7, r1
 800041a:	2201      	movs	r2, #1
 800041c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800041e:	187b      	adds	r3, r7, r1
 8000420:	2201      	movs	r2, #1
 8000422:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000424:	187b      	adds	r3, r7, r1
 8000426:	2210      	movs	r2, #16
 8000428:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800042a:	187b      	adds	r3, r7, r1
 800042c:	2210      	movs	r2, #16
 800042e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000430:	187b      	adds	r3, r7, r1
 8000432:	2202      	movs	r2, #2
 8000434:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000436:	187b      	adds	r3, r7, r1
 8000438:	2280      	movs	r2, #128	; 0x80
 800043a:	0212      	lsls	r2, r2, #8
 800043c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2280      	movs	r2, #128	; 0x80
 8000442:	0352      	lsls	r2, r2, #13
 8000444:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000446:	187b      	adds	r3, r7, r1
 8000448:	2200      	movs	r2, #0
 800044a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044c:	187b      	adds	r3, r7, r1
 800044e:	0018      	movs	r0, r3
 8000450:	f001 fbc4 	bl	8001bdc <HAL_RCC_OscConfig>
 8000454:	1e03      	subs	r3, r0, #0
 8000456:	d001      	beq.n	800045c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000458:	f000 fc3e 	bl	8000cd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800045c:	2110      	movs	r1, #16
 800045e:	187b      	adds	r3, r7, r1
 8000460:	2207      	movs	r2, #7
 8000462:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2202      	movs	r2, #2
 8000468:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2200      	movs	r2, #0
 8000474:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2101      	movs	r1, #1
 800047a:	0018      	movs	r0, r3
 800047c:	f001 fecc 	bl	8002218 <HAL_RCC_ClockConfig>
 8000480:	1e03      	subs	r3, r0, #0
 8000482:	d001      	beq.n	8000488 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000484:	f000 fc28 	bl	8000cd8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000488:	003b      	movs	r3, r7
 800048a:	2201      	movs	r2, #1
 800048c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800048e:	003b      	movs	r3, r7
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000494:	003b      	movs	r3, r7
 8000496:	0018      	movs	r0, r3
 8000498:	f002 f812 	bl	80024c0 <HAL_RCCEx_PeriphCLKConfig>
 800049c:	1e03      	subs	r3, r0, #0
 800049e:	d001      	beq.n	80004a4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80004a0:	f000 fc1a 	bl	8000cd8 <Error_Handler>
  }
}
 80004a4:	46c0      	nop			; (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b015      	add	sp, #84	; 0x54
 80004aa:	bd90      	pop	{r4, r7, pc}

080004ac <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	0018      	movs	r0, r3
 80004b6:	230c      	movs	r3, #12
 80004b8:	001a      	movs	r2, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	f003 fb16 	bl	8003aec <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 80004c0:	4b74      	ldr	r3, [pc, #464]	; (8000694 <MX_ADC_Init+0x1e8>)
 80004c2:	4a75      	ldr	r2, [pc, #468]	; (8000698 <MX_ADC_Init+0x1ec>)
 80004c4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004c6:	4b73      	ldr	r3, [pc, #460]	; (8000694 <MX_ADC_Init+0x1e8>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80004cc:	4b71      	ldr	r3, [pc, #452]	; (8000694 <MX_ADC_Init+0x1e8>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004d2:	4b70      	ldr	r3, [pc, #448]	; (8000694 <MX_ADC_Init+0x1e8>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80004d8:	4b6e      	ldr	r3, [pc, #440]	; (8000694 <MX_ADC_Init+0x1e8>)
 80004da:	2201      	movs	r2, #1
 80004dc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004de:	4b6d      	ldr	r3, [pc, #436]	; (8000694 <MX_ADC_Init+0x1e8>)
 80004e0:	2204      	movs	r2, #4
 80004e2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80004e4:	4b6b      	ldr	r3, [pc, #428]	; (8000694 <MX_ADC_Init+0x1e8>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80004ea:	4b6a      	ldr	r3, [pc, #424]	; (8000694 <MX_ADC_Init+0x1e8>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004f0:	4b68      	ldr	r3, [pc, #416]	; (8000694 <MX_ADC_Init+0x1e8>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004f6:	4b67      	ldr	r3, [pc, #412]	; (8000694 <MX_ADC_Init+0x1e8>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004fc:	4b65      	ldr	r3, [pc, #404]	; (8000694 <MX_ADC_Init+0x1e8>)
 80004fe:	22c2      	movs	r2, #194	; 0xc2
 8000500:	32ff      	adds	r2, #255	; 0xff
 8000502:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000504:	4b63      	ldr	r3, [pc, #396]	; (8000694 <MX_ADC_Init+0x1e8>)
 8000506:	2200      	movs	r2, #0
 8000508:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800050a:	4b62      	ldr	r3, [pc, #392]	; (8000694 <MX_ADC_Init+0x1e8>)
 800050c:	2224      	movs	r2, #36	; 0x24
 800050e:	2100      	movs	r1, #0
 8000510:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000512:	4b60      	ldr	r3, [pc, #384]	; (8000694 <MX_ADC_Init+0x1e8>)
 8000514:	2201      	movs	r2, #1
 8000516:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000518:	4b5e      	ldr	r3, [pc, #376]	; (8000694 <MX_ADC_Init+0x1e8>)
 800051a:	0018      	movs	r0, r3
 800051c:	f000 feca 	bl	80012b4 <HAL_ADC_Init>
 8000520:	1e03      	subs	r3, r0, #0
 8000522:	d001      	beq.n	8000528 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000524:	f000 fbd8 	bl	8000cd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2280      	movs	r2, #128	; 0x80
 8000532:	0152      	lsls	r2, r2, #5
 8000534:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2280      	movs	r2, #128	; 0x80
 800053a:	0552      	lsls	r2, r2, #21
 800053c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800053e:	1d3a      	adds	r2, r7, #4
 8000540:	4b54      	ldr	r3, [pc, #336]	; (8000694 <MX_ADC_Init+0x1e8>)
 8000542:	0011      	movs	r1, r2
 8000544:	0018      	movs	r0, r3
 8000546:	f000 fff5 	bl	8001534 <HAL_ADC_ConfigChannel>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d001      	beq.n	8000552 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800054e:	f000 fbc3 	bl	8000cd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2201      	movs	r2, #1
 8000556:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000558:	1d3a      	adds	r2, r7, #4
 800055a:	4b4e      	ldr	r3, [pc, #312]	; (8000694 <MX_ADC_Init+0x1e8>)
 800055c:	0011      	movs	r1, r2
 800055e:	0018      	movs	r0, r3
 8000560:	f000 ffe8 	bl	8001534 <HAL_ADC_ConfigChannel>
 8000564:	1e03      	subs	r3, r0, #0
 8000566:	d001      	beq.n	800056c <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000568:	f000 fbb6 	bl	8000cd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2202      	movs	r2, #2
 8000570:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000572:	1d3a      	adds	r2, r7, #4
 8000574:	4b47      	ldr	r3, [pc, #284]	; (8000694 <MX_ADC_Init+0x1e8>)
 8000576:	0011      	movs	r1, r2
 8000578:	0018      	movs	r0, r3
 800057a:	f000 ffdb 	bl	8001534 <HAL_ADC_ConfigChannel>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000582:	f000 fba9 	bl	8000cd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2203      	movs	r2, #3
 800058a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800058c:	1d3a      	adds	r2, r7, #4
 800058e:	4b41      	ldr	r3, [pc, #260]	; (8000694 <MX_ADC_Init+0x1e8>)
 8000590:	0011      	movs	r1, r2
 8000592:	0018      	movs	r0, r3
 8000594:	f000 ffce 	bl	8001534 <HAL_ADC_ConfigChannel>
 8000598:	1e03      	subs	r3, r0, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 800059c:	f000 fb9c 	bl	8000cd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2204      	movs	r2, #4
 80005a4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005a6:	1d3a      	adds	r2, r7, #4
 80005a8:	4b3a      	ldr	r3, [pc, #232]	; (8000694 <MX_ADC_Init+0x1e8>)
 80005aa:	0011      	movs	r1, r2
 80005ac:	0018      	movs	r0, r3
 80005ae:	f000 ffc1 	bl	8001534 <HAL_ADC_ConfigChannel>
 80005b2:	1e03      	subs	r3, r0, #0
 80005b4:	d001      	beq.n	80005ba <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 80005b6:	f000 fb8f 	bl	8000cd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2205      	movs	r2, #5
 80005be:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005c0:	1d3a      	adds	r2, r7, #4
 80005c2:	4b34      	ldr	r3, [pc, #208]	; (8000694 <MX_ADC_Init+0x1e8>)
 80005c4:	0011      	movs	r1, r2
 80005c6:	0018      	movs	r0, r3
 80005c8:	f000 ffb4 	bl	8001534 <HAL_ADC_ConfigChannel>
 80005cc:	1e03      	subs	r3, r0, #0
 80005ce:	d001      	beq.n	80005d4 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 80005d0:	f000 fb82 	bl	8000cd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2206      	movs	r2, #6
 80005d8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005da:	1d3a      	adds	r2, r7, #4
 80005dc:	4b2d      	ldr	r3, [pc, #180]	; (8000694 <MX_ADC_Init+0x1e8>)
 80005de:	0011      	movs	r1, r2
 80005e0:	0018      	movs	r0, r3
 80005e2:	f000 ffa7 	bl	8001534 <HAL_ADC_ConfigChannel>
 80005e6:	1e03      	subs	r3, r0, #0
 80005e8:	d001      	beq.n	80005ee <MX_ADC_Init+0x142>
  {
    Error_Handler();
 80005ea:	f000 fb75 	bl	8000cd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2207      	movs	r2, #7
 80005f2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005f4:	1d3a      	adds	r2, r7, #4
 80005f6:	4b27      	ldr	r3, [pc, #156]	; (8000694 <MX_ADC_Init+0x1e8>)
 80005f8:	0011      	movs	r1, r2
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 ff9a 	bl	8001534 <HAL_ADC_ConfigChannel>
 8000600:	1e03      	subs	r3, r0, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8000604:	f000 fb68 	bl	8000cd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	220a      	movs	r2, #10
 800060c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800060e:	1d3a      	adds	r2, r7, #4
 8000610:	4b20      	ldr	r3, [pc, #128]	; (8000694 <MX_ADC_Init+0x1e8>)
 8000612:	0011      	movs	r1, r2
 8000614:	0018      	movs	r0, r3
 8000616:	f000 ff8d 	bl	8001534 <HAL_ADC_ConfigChannel>
 800061a:	1e03      	subs	r3, r0, #0
 800061c:	d001      	beq.n	8000622 <MX_ADC_Init+0x176>
  {
    Error_Handler();
 800061e:	f000 fb5b 	bl	8000cd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	220b      	movs	r2, #11
 8000626:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000628:	1d3a      	adds	r2, r7, #4
 800062a:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_ADC_Init+0x1e8>)
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f000 ff80 	bl	8001534 <HAL_ADC_ConfigChannel>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8000638:	f000 fb4e 	bl	8000cd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	220c      	movs	r2, #12
 8000640:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000642:	1d3a      	adds	r2, r7, #4
 8000644:	4b13      	ldr	r3, [pc, #76]	; (8000694 <MX_ADC_Init+0x1e8>)
 8000646:	0011      	movs	r1, r2
 8000648:	0018      	movs	r0, r3
 800064a:	f000 ff73 	bl	8001534 <HAL_ADC_ConfigChannel>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8000652:	f000 fb41 	bl	8000cd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	220d      	movs	r2, #13
 800065a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800065c:	1d3a      	adds	r2, r7, #4
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_ADC_Init+0x1e8>)
 8000660:	0011      	movs	r1, r2
 8000662:	0018      	movs	r0, r3
 8000664:	f000 ff66 	bl	8001534 <HAL_ADC_ConfigChannel>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 800066c:	f000 fb34 	bl	8000cd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	220e      	movs	r2, #14
 8000674:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000676:	1d3a      	adds	r2, r7, #4
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_ADC_Init+0x1e8>)
 800067a:	0011      	movs	r1, r2
 800067c:	0018      	movs	r0, r3
 800067e:	f000 ff59 	bl	8001534 <HAL_ADC_ConfigChannel>
 8000682:	1e03      	subs	r3, r0, #0
 8000684:	d001      	beq.n	800068a <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8000686:	f000 fb27 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	b004      	add	sp, #16
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	200001d4 	.word	0x200001d4
 8000698:	40012400 	.word	0x40012400

0800069c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_SPI2_Init+0x74>)
 80006a2:	4a1c      	ldr	r2, [pc, #112]	; (8000714 <MX_SPI2_Init+0x78>)
 80006a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_SPI2_Init+0x74>)
 80006a8:	2282      	movs	r2, #130	; 0x82
 80006aa:	0052      	lsls	r2, r2, #1
 80006ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006ae:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_SPI2_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80006b4:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_SPI2_Init+0x74>)
 80006b6:	22c0      	movs	r2, #192	; 0xc0
 80006b8:	0092      	lsls	r2, r2, #2
 80006ba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_SPI2_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_SPI2_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_SPI2_Init+0x74>)
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	02d2      	lsls	r2, r2, #11
 80006ce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_SPI2_Init+0x74>)
 80006d2:	2210      	movs	r2, #16
 80006d4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_SPI2_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_SPI2_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_SPI2_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_SPI2_Init+0x74>)
 80006ea:	2207      	movs	r2, #7
 80006ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_SPI2_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_SPI2_Init+0x74>)
 80006f6:	2208      	movs	r2, #8
 80006f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <MX_SPI2_Init+0x74>)
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 ffad 	bl	800265c <HAL_SPI_Init>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000706:	f000 fae7 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000030 	.word	0x20000030
 8000714:	40003800 	.word	0x40003800

08000718 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071e:	2308      	movs	r3, #8
 8000720:	18fb      	adds	r3, r7, r3
 8000722:	0018      	movs	r0, r3
 8000724:	2310      	movs	r3, #16
 8000726:	001a      	movs	r2, r3
 8000728:	2100      	movs	r1, #0
 800072a:	f003 f9df 	bl	8003aec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072e:	003b      	movs	r3, r7
 8000730:	0018      	movs	r0, r3
 8000732:	2308      	movs	r3, #8
 8000734:	001a      	movs	r2, r3
 8000736:	2100      	movs	r1, #0
 8000738:	f003 f9d8 	bl	8003aec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800073c:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MX_TIM1_Init+0xa4>)
 800073e:	4a20      	ldr	r2, [pc, #128]	; (80007c0 <MX_TIM1_Init+0xa8>)
 8000740:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000742:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_TIM1_Init+0xa4>)
 8000744:	2200      	movs	r2, #0
 8000746:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000748:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_TIM1_Init+0xa4>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800074e:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_TIM1_Init+0xa4>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_TIM1_Init+0xa4>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_TIM1_Init+0xa4>)
 800075c:	2200      	movs	r2, #0
 800075e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_TIM1_Init+0xa4>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_TIM1_Init+0xa4>)
 8000768:	0018      	movs	r0, r3
 800076a:	f002 f811 	bl	8002790 <HAL_TIM_Base_Init>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000772:	f000 fab1 	bl	8000cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000776:	2108      	movs	r1, #8
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2280      	movs	r2, #128	; 0x80
 800077c:	0152      	lsls	r2, r2, #5
 800077e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000780:	187a      	adds	r2, r7, r1
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_TIM1_Init+0xa4>)
 8000784:	0011      	movs	r1, r2
 8000786:	0018      	movs	r0, r3
 8000788:	f002 f966 	bl	8002a58 <HAL_TIM_ConfigClockSource>
 800078c:	1e03      	subs	r3, r0, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000790:	f000 faa2 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000794:	003b      	movs	r3, r7
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079a:	003b      	movs	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007a0:	003a      	movs	r2, r7
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_TIM1_Init+0xa4>)
 80007a4:	0011      	movs	r1, r2
 80007a6:	0018      	movs	r0, r3
 80007a8:	f002 fd44 	bl	8003234 <HAL_TIMEx_MasterConfigSynchronization>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80007b0:	f000 fa92 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b006      	add	sp, #24
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000194 	.word	0x20000194
 80007c0:	40012c00 	.word	0x40012c00

080007c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08e      	sub	sp, #56	; 0x38
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ca:	2328      	movs	r3, #40	; 0x28
 80007cc:	18fb      	adds	r3, r7, r3
 80007ce:	0018      	movs	r0, r3
 80007d0:	2310      	movs	r3, #16
 80007d2:	001a      	movs	r2, r3
 80007d4:	2100      	movs	r1, #0
 80007d6:	f003 f989 	bl	8003aec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007da:	2320      	movs	r3, #32
 80007dc:	18fb      	adds	r3, r7, r3
 80007de:	0018      	movs	r0, r3
 80007e0:	2308      	movs	r3, #8
 80007e2:	001a      	movs	r2, r3
 80007e4:	2100      	movs	r1, #0
 80007e6:	f003 f981 	bl	8003aec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	0018      	movs	r0, r3
 80007ee:	231c      	movs	r3, #28
 80007f0:	001a      	movs	r2, r3
 80007f2:	2100      	movs	r1, #0
 80007f4:	f003 f97a 	bl	8003aec <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007f8:	4b49      	ldr	r3, [pc, #292]	; (8000920 <MX_TIM3_Init+0x15c>)
 80007fa:	4a4a      	ldr	r2, [pc, #296]	; (8000924 <MX_TIM3_Init+0x160>)
 80007fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007fe:	4b48      	ldr	r3, [pc, #288]	; (8000920 <MX_TIM3_Init+0x15c>)
 8000800:	2200      	movs	r2, #0
 8000802:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000804:	4b46      	ldr	r3, [pc, #280]	; (8000920 <MX_TIM3_Init+0x15c>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 800080a:	4b45      	ldr	r3, [pc, #276]	; (8000920 <MX_TIM3_Init+0x15c>)
 800080c:	4a46      	ldr	r2, [pc, #280]	; (8000928 <MX_TIM3_Init+0x164>)
 800080e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000810:	4b43      	ldr	r3, [pc, #268]	; (8000920 <MX_TIM3_Init+0x15c>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000816:	4b42      	ldr	r3, [pc, #264]	; (8000920 <MX_TIM3_Init+0x15c>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800081c:	4b40      	ldr	r3, [pc, #256]	; (8000920 <MX_TIM3_Init+0x15c>)
 800081e:	0018      	movs	r0, r3
 8000820:	f001 ffb6 	bl	8002790 <HAL_TIM_Base_Init>
 8000824:	1e03      	subs	r3, r0, #0
 8000826:	d001      	beq.n	800082c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000828:	f000 fa56 	bl	8000cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082c:	2128      	movs	r1, #40	; 0x28
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	0152      	lsls	r2, r2, #5
 8000834:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000836:	187a      	adds	r2, r7, r1
 8000838:	4b39      	ldr	r3, [pc, #228]	; (8000920 <MX_TIM3_Init+0x15c>)
 800083a:	0011      	movs	r1, r2
 800083c:	0018      	movs	r0, r3
 800083e:	f002 f90b 	bl	8002a58 <HAL_TIM_ConfigClockSource>
 8000842:	1e03      	subs	r3, r0, #0
 8000844:	d001      	beq.n	800084a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000846:	f000 fa47 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800084a:	4b35      	ldr	r3, [pc, #212]	; (8000920 <MX_TIM3_Init+0x15c>)
 800084c:	0018      	movs	r0, r3
 800084e:	f001 ffcb 	bl	80027e8 <HAL_TIM_PWM_Init>
 8000852:	1e03      	subs	r3, r0, #0
 8000854:	d001      	beq.n	800085a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000856:	f000 fa3f 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085a:	2120      	movs	r1, #32
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000868:	187a      	adds	r2, r7, r1
 800086a:	4b2d      	ldr	r3, [pc, #180]	; (8000920 <MX_TIM3_Init+0x15c>)
 800086c:	0011      	movs	r1, r2
 800086e:	0018      	movs	r0, r3
 8000870:	f002 fce0 	bl	8003234 <HAL_TIMEx_MasterConfigSynchronization>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d001      	beq.n	800087c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000878:	f000 fa2e 	bl	8000cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2260      	movs	r2, #96	; 0x60
 8000880:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0xF000;
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	22f0      	movs	r2, #240	; 0xf0
 8000886:	0212      	lsls	r2, r2, #8
 8000888:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000896:	1d39      	adds	r1, r7, #4
 8000898:	4b21      	ldr	r3, [pc, #132]	; (8000920 <MX_TIM3_Init+0x15c>)
 800089a:	2200      	movs	r2, #0
 800089c:	0018      	movs	r0, r3
 800089e:	f002 f823 	bl	80028e8 <HAL_TIM_PWM_ConfigChannel>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80008a6:	f000 fa17 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008aa:	1d39      	adds	r1, r7, #4
 80008ac:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <MX_TIM3_Init+0x15c>)
 80008ae:	2204      	movs	r2, #4
 80008b0:	0018      	movs	r0, r3
 80008b2:	f002 f819 	bl	80028e8 <HAL_TIM_PWM_ConfigChannel>
 80008b6:	1e03      	subs	r3, r0, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 80008ba:	f000 fa0d 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008be:	1d39      	adds	r1, r7, #4
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_TIM3_Init+0x15c>)
 80008c2:	2208      	movs	r2, #8
 80008c4:	0018      	movs	r0, r3
 80008c6:	f002 f80f 	bl	80028e8 <HAL_TIM_PWM_ConfigChannel>
 80008ca:	1e03      	subs	r3, r0, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 80008ce:	f000 fa03 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008d2:	1d39      	adds	r1, r7, #4
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_TIM3_Init+0x15c>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	0018      	movs	r0, r3
 80008da:	f002 f805 	bl	80028e8 <HAL_TIM_PWM_ConfigChannel>
 80008de:	1e03      	subs	r3, r0, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM3_Init+0x122>
  {
    Error_Handler();
 80008e2:	f000 f9f9 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_TIM3_Init+0x15c>)
 80008e8:	2100      	movs	r1, #0
 80008ea:	0018      	movs	r0, r3
 80008ec:	f001 ffb0 	bl	8002850 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80008f0:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_TIM3_Init+0x15c>)
 80008f2:	2104      	movs	r1, #4
 80008f4:	0018      	movs	r0, r3
 80008f6:	f001 ffab 	bl	8002850 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_TIM3_Init+0x15c>)
 80008fc:	2108      	movs	r1, #8
 80008fe:	0018      	movs	r0, r3
 8000900:	f001 ffa6 	bl	8002850 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_TIM3_Init+0x15c>)
 8000906:	210c      	movs	r1, #12
 8000908:	0018      	movs	r0, r3
 800090a:	f001 ffa1 	bl	8002850 <HAL_TIM_PWM_Start>


  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <MX_TIM3_Init+0x15c>)
 8000910:	0018      	movs	r0, r3
 8000912:	f000 fb39 	bl	8000f88 <HAL_TIM_MspPostInit>

}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	b00e      	add	sp, #56	; 0x38
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	200000d4 	.word	0x200000d4
 8000924:	40000400 	.word	0x40000400
 8000928:	0000ffff 	.word	0x0000ffff

0800092c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b090      	sub	sp, #64	; 0x40
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000932:	2324      	movs	r3, #36	; 0x24
 8000934:	18fb      	adds	r3, r7, r3
 8000936:	0018      	movs	r0, r3
 8000938:	231c      	movs	r3, #28
 800093a:	001a      	movs	r2, r3
 800093c:	2100      	movs	r1, #0
 800093e:	f003 f8d5 	bl	8003aec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	0018      	movs	r0, r3
 8000946:	2320      	movs	r3, #32
 8000948:	001a      	movs	r2, r3
 800094a:	2100      	movs	r1, #0
 800094c:	f003 f8ce 	bl	8003aec <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000950:	4b36      	ldr	r3, [pc, #216]	; (8000a2c <MX_TIM16_Init+0x100>)
 8000952:	4a37      	ldr	r2, [pc, #220]	; (8000a30 <MX_TIM16_Init+0x104>)
 8000954:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000956:	4b35      	ldr	r3, [pc, #212]	; (8000a2c <MX_TIM16_Init+0x100>)
 8000958:	2200      	movs	r2, #0
 800095a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095c:	4b33      	ldr	r3, [pc, #204]	; (8000a2c <MX_TIM16_Init+0x100>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0;
 8000962:	4b32      	ldr	r3, [pc, #200]	; (8000a2c <MX_TIM16_Init+0x100>)
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000968:	4b30      	ldr	r3, [pc, #192]	; (8000a2c <MX_TIM16_Init+0x100>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800096e:	4b2f      	ldr	r3, [pc, #188]	; (8000a2c <MX_TIM16_Init+0x100>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000974:	4b2d      	ldr	r3, [pc, #180]	; (8000a2c <MX_TIM16_Init+0x100>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800097a:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <MX_TIM16_Init+0x100>)
 800097c:	0018      	movs	r0, r3
 800097e:	f001 ff07 	bl	8002790 <HAL_TIM_Base_Init>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d001      	beq.n	800098a <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000986:	f000 f9a7 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800098a:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <MX_TIM16_Init+0x100>)
 800098c:	0018      	movs	r0, r3
 800098e:	f001 ff2b 	bl	80027e8 <HAL_TIM_PWM_Init>
 8000992:	1e03      	subs	r3, r0, #0
 8000994:	d001      	beq.n	800099a <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8000996:	f000 f99f 	bl	8000cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800099a:	2124      	movs	r1, #36	; 0x24
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2260      	movs	r2, #96	; 0x60
 80009a0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2200      	movs	r2, #0
 80009a6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009c6:	1879      	adds	r1, r7, r1
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MX_TIM16_Init+0x100>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	0018      	movs	r0, r3
 80009ce:	f001 ff8b 	bl	80028e8 <HAL_TIM_PWM_ConfigChannel>
 80009d2:	1e03      	subs	r3, r0, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 80009d6:	f000 f97f 	bl	8000cd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2200      	movs	r2, #0
 80009e4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	2280      	movs	r2, #128	; 0x80
 80009fc:	0192      	lsls	r2, r2, #6
 80009fe:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000a06:	1d3a      	adds	r2, r7, #4
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_TIM16_Init+0x100>)
 8000a0a:	0011      	movs	r1, r2
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f002 fc69 	bl	80032e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a12:	1e03      	subs	r3, r0, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 8000a16:	f000 f95f 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <MX_TIM16_Init+0x100>)
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f000 fab3 	bl	8000f88 <HAL_TIM_MspPostInit>

}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b010      	add	sp, #64	; 0x40
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	20000214 	.word	0x20000214
 8000a30:	40014400 	.word	0x40014400

08000a34 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b090      	sub	sp, #64	; 0x40
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a3a:	2324      	movs	r3, #36	; 0x24
 8000a3c:	18fb      	adds	r3, r7, r3
 8000a3e:	0018      	movs	r0, r3
 8000a40:	231c      	movs	r3, #28
 8000a42:	001a      	movs	r2, r3
 8000a44:	2100      	movs	r1, #0
 8000a46:	f003 f851 	bl	8003aec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	2320      	movs	r3, #32
 8000a50:	001a      	movs	r2, r3
 8000a52:	2100      	movs	r1, #0
 8000a54:	f003 f84a 	bl	8003aec <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000a58:	4b36      	ldr	r3, [pc, #216]	; (8000b34 <MX_TIM17_Init+0x100>)
 8000a5a:	4a37      	ldr	r2, [pc, #220]	; (8000b38 <MX_TIM17_Init+0x104>)
 8000a5c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000a5e:	4b35      	ldr	r3, [pc, #212]	; (8000b34 <MX_TIM17_Init+0x100>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a64:	4b33      	ldr	r3, [pc, #204]	; (8000b34 <MX_TIM17_Init+0x100>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 0;
 8000a6a:	4b32      	ldr	r3, [pc, #200]	; (8000b34 <MX_TIM17_Init+0x100>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a70:	4b30      	ldr	r3, [pc, #192]	; (8000b34 <MX_TIM17_Init+0x100>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a76:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <MX_TIM17_Init+0x100>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7c:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <MX_TIM17_Init+0x100>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a82:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <MX_TIM17_Init+0x100>)
 8000a84:	0018      	movs	r0, r3
 8000a86:	f001 fe83 	bl	8002790 <HAL_TIM_Base_Init>
 8000a8a:	1e03      	subs	r3, r0, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8000a8e:	f000 f923 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000a92:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <MX_TIM17_Init+0x100>)
 8000a94:	0018      	movs	r0, r3
 8000a96:	f001 fea7 	bl	80027e8 <HAL_TIM_PWM_Init>
 8000a9a:	1e03      	subs	r3, r0, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8000a9e:	f000 f91b 	bl	8000cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa2:	2124      	movs	r1, #36	; 0x24
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2260      	movs	r2, #96	; 0x60
 8000aa8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2200      	movs	r2, #0
 8000aae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2200      	movs	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ace:	1879      	adds	r1, r7, r1
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_TIM17_Init+0x100>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f001 ff07 	bl	80028e8 <HAL_TIM_PWM_ConfigChannel>
 8000ada:	1e03      	subs	r3, r0, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8000ade:	f000 f8fb 	bl	8000cd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2200      	movs	r2, #0
 8000aec:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2280      	movs	r2, #128	; 0x80
 8000b04:	0192      	lsls	r2, r2, #6
 8000b06:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000b0e:	1d3a      	adds	r2, r7, #4
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <MX_TIM17_Init+0x100>)
 8000b12:	0011      	movs	r1, r2
 8000b14:	0018      	movs	r0, r3
 8000b16:	f002 fbe5 	bl	80032e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b1a:	1e03      	subs	r3, r0, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM17_Init+0xee>
  {
    Error_Handler();
 8000b1e:	f000 f8db 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000b22:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <MX_TIM17_Init+0x100>)
 8000b24:	0018      	movs	r0, r3
 8000b26:	f000 fa2f 	bl	8000f88 <HAL_TIM_MspPostInit>

}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b010      	add	sp, #64	; 0x40
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	20000094 	.word	0x20000094
 8000b38:	40014800 	.word	0x40014800

08000b3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_USART1_UART_Init+0x58>)
 8000b42:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <MX_USART1_UART_Init+0x5c>)
 8000b44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <MX_USART1_UART_Init+0x58>)
 8000b48:	22e1      	movs	r2, #225	; 0xe1
 8000b4a:	0252      	lsls	r2, r2, #9
 8000b4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_USART1_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_USART1_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_USART1_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_USART1_UART_Init+0x58>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <MX_USART1_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_USART1_UART_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <MX_USART1_UART_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_USART1_UART_Init+0x58>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <MX_USART1_UART_Init+0x58>)
 8000b80:	0018      	movs	r0, r3
 8000b82:	f002 fc0d 	bl	80033a0 <HAL_UART_Init>
 8000b86:	1e03      	subs	r3, r0, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b8a:	f000 f8a5 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000114 	.word	0x20000114
 8000b98:	40013800 	.word	0x40013800

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b089      	sub	sp, #36	; 0x24
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	240c      	movs	r4, #12
 8000ba4:	193b      	adds	r3, r7, r4
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	2314      	movs	r3, #20
 8000baa:	001a      	movs	r2, r3
 8000bac:	2100      	movs	r1, #0
 8000bae:	f002 ff9d 	bl	8003aec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	4b45      	ldr	r3, [pc, #276]	; (8000cc8 <MX_GPIO_Init+0x12c>)
 8000bb4:	695a      	ldr	r2, [r3, #20]
 8000bb6:	4b44      	ldr	r3, [pc, #272]	; (8000cc8 <MX_GPIO_Init+0x12c>)
 8000bb8:	2180      	movs	r1, #128	; 0x80
 8000bba:	0309      	lsls	r1, r1, #12
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	615a      	str	r2, [r3, #20]
 8000bc0:	4b41      	ldr	r3, [pc, #260]	; (8000cc8 <MX_GPIO_Init+0x12c>)
 8000bc2:	695a      	ldr	r2, [r3, #20]
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	031b      	lsls	r3, r3, #12
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b3e      	ldr	r3, [pc, #248]	; (8000cc8 <MX_GPIO_Init+0x12c>)
 8000bd0:	695a      	ldr	r2, [r3, #20]
 8000bd2:	4b3d      	ldr	r3, [pc, #244]	; (8000cc8 <MX_GPIO_Init+0x12c>)
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	0289      	lsls	r1, r1, #10
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	615a      	str	r2, [r3, #20]
 8000bdc:	4b3a      	ldr	r3, [pc, #232]	; (8000cc8 <MX_GPIO_Init+0x12c>)
 8000bde:	695a      	ldr	r2, [r3, #20]
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	029b      	lsls	r3, r3, #10
 8000be4:	4013      	ands	r3, r2
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	4b37      	ldr	r3, [pc, #220]	; (8000cc8 <MX_GPIO_Init+0x12c>)
 8000bec:	695a      	ldr	r2, [r3, #20]
 8000bee:	4b36      	ldr	r3, [pc, #216]	; (8000cc8 <MX_GPIO_Init+0x12c>)
 8000bf0:	2180      	movs	r1, #128	; 0x80
 8000bf2:	02c9      	lsls	r1, r1, #11
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	615a      	str	r2, [r3, #20]
 8000bf8:	4b33      	ldr	r3, [pc, #204]	; (8000cc8 <MX_GPIO_Init+0x12c>)
 8000bfa:	695a      	ldr	r2, [r3, #20]
 8000bfc:	2380      	movs	r3, #128	; 0x80
 8000bfe:	02db      	lsls	r3, r3, #11
 8000c00:	4013      	ands	r3, r2
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Green_Pin|LED_Red_Pin|LED_RGB_Red_Pin|LED_RGB_Green_Pin 
 8000c06:	23f8      	movs	r3, #248	; 0xf8
 8000c08:	01db      	lsls	r3, r3, #7
 8000c0a:	4830      	ldr	r0, [pc, #192]	; (8000ccc <MX_GPIO_Init+0x130>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	0019      	movs	r1, r3
 8000c10:	f000 ffc7 	bl	8001ba2 <HAL_GPIO_WritePin>
                          |LED_RGB_Blue_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Green_Pin LED_Red_Pin LED_RGB_Red_Pin LED_RGB_Green_Pin 
                           LED_RGB_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Red_Pin|LED_RGB_Red_Pin|LED_RGB_Green_Pin 
 8000c14:	193b      	adds	r3, r7, r4
 8000c16:	22f8      	movs	r2, #248	; 0xf8
 8000c18:	01d2      	lsls	r2, r2, #7
 8000c1a:	601a      	str	r2, [r3, #0]
                          |LED_RGB_Blue_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	193b      	adds	r3, r7, r4
 8000c1e:	2201      	movs	r2, #1
 8000c20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	193b      	adds	r3, r7, r4
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	193b      	adds	r3, r7, r4
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2e:	193b      	adds	r3, r7, r4
 8000c30:	4a26      	ldr	r2, [pc, #152]	; (8000ccc <MX_GPIO_Init+0x130>)
 8000c32:	0019      	movs	r1, r3
 8000c34:	0010      	movs	r0, r2
 8000c36:	f000 fe27 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXP_SW_Pin */
  GPIO_InitStruct.Pin = EXP_SW_Pin;
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	2220      	movs	r2, #32
 8000c3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c40:	193b      	adds	r3, r7, r4
 8000c42:	2200      	movs	r2, #0
 8000c44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	193b      	adds	r3, r7, r4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(EXP_SW_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	193b      	adds	r3, r7, r4
 8000c4e:	4a1f      	ldr	r2, [pc, #124]	; (8000ccc <MX_GPIO_Init+0x130>)
 8000c50:	0019      	movs	r1, r3
 8000c52:	0010      	movs	r0, r2
 8000c54:	f000 fe18 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pins : BYPASS_Pin TAP_Pin HARM_SW_Pin GPIO_1_Pin 
                           GPIO_2_Pin PAN_SW_Pin GP_SW_1_Pin GP_SW_2_Pin 
                           GP_SW_3_Pin GP_SW_4_Pin */
  GPIO_InitStruct.Pin = BYPASS_Pin|TAP_Pin|HARM_SW_Pin|GPIO_1_Pin 
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	4a1d      	ldr	r2, [pc, #116]	; (8000cd0 <MX_GPIO_Init+0x134>)
 8000c5c:	601a      	str	r2, [r3, #0]
                          |GPIO_2_Pin|PAN_SW_Pin|GP_SW_1_Pin|GP_SW_2_Pin 
                          |GP_SW_3_Pin|GP_SW_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5e:	193b      	adds	r3, r7, r4
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c64:	193b      	adds	r3, r7, r4
 8000c66:	2201      	movs	r2, #1
 8000c68:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	4a19      	ldr	r2, [pc, #100]	; (8000cd4 <MX_GPIO_Init+0x138>)
 8000c6e:	0019      	movs	r1, r3
 8000c70:	0010      	movs	r0, r2
 8000c72:	f000 fe09 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_3_Pin GPIO_4_Pin GPIO_5_Pin GPIO_6_Pin */
  GPIO_InitStruct.Pin = GPIO_3_Pin|GPIO_4_Pin|GPIO_5_Pin|GPIO_6_Pin;
 8000c76:	193b      	adds	r3, r7, r4
 8000c78:	2299      	movs	r2, #153	; 0x99
 8000c7a:	0212      	lsls	r2, r2, #8
 8000c7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	2201      	movs	r2, #1
 8000c88:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	193a      	adds	r2, r7, r4
 8000c8c:	2390      	movs	r3, #144	; 0x90
 8000c8e:	05db      	lsls	r3, r3, #23
 8000c90:	0011      	movs	r1, r2
 8000c92:	0018      	movs	r0, r3
 8000c94:	f000 fdf8 	bl	8001888 <HAL_GPIO_Init>

  	GPIO_InitStruct.Pin = PWM1_Pin | PWM2_Pin | PWM3_Pin | PWM4_Pin;
 8000c98:	0021      	movs	r1, r4
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	22f0      	movs	r2, #240	; 0xf0
 8000c9e:	0092      	lsls	r2, r2, #2
 8000ca0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <MX_GPIO_Init+0x130>)
 8000cb8:	0019      	movs	r1, r3
 8000cba:	0010      	movs	r0, r2
 8000cbc:	f000 fde4 	bl	8001888 <HAL_GPIO_Init>

}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b009      	add	sp, #36	; 0x24
 8000cc6:	bd90      	pop	{r4, r7, pc}
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	48000800 	.word	0x48000800
 8000cd0:	00000cff 	.word	0x00000cff
 8000cd4:	48000400 	.word	0x48000400

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <HAL_MspInit+0x44>)
 8000cec:	699a      	ldr	r2, [r3, #24]
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_MspInit+0x44>)
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	619a      	str	r2, [r3, #24]
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <HAL_MspInit+0x44>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <HAL_MspInit+0x44>)
 8000d04:	69da      	ldr	r2, [r3, #28]
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_MspInit+0x44>)
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	0549      	lsls	r1, r1, #21
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	61da      	str	r2, [r3, #28]
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <HAL_MspInit+0x44>)
 8000d12:	69da      	ldr	r2, [r3, #28]
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	055b      	lsls	r3, r3, #21
 8000d18:	4013      	ands	r3, r2
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b002      	add	sp, #8
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	40021000 	.word	0x40021000

08000d2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b08b      	sub	sp, #44	; 0x2c
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	2314      	movs	r3, #20
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	0018      	movs	r0, r3
 8000d3a:	2314      	movs	r3, #20
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	2100      	movs	r1, #0
 8000d40:	f002 fed4 	bl	8003aec <memset>
  if(hadc->Instance==ADC1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a29      	ldr	r2, [pc, #164]	; (8000df0 <HAL_ADC_MspInit+0xc4>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d14b      	bne.n	8000de6 <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d4e:	4b29      	ldr	r3, [pc, #164]	; (8000df4 <HAL_ADC_MspInit+0xc8>)
 8000d50:	699a      	ldr	r2, [r3, #24]
 8000d52:	4b28      	ldr	r3, [pc, #160]	; (8000df4 <HAL_ADC_MspInit+0xc8>)
 8000d54:	2180      	movs	r1, #128	; 0x80
 8000d56:	0089      	lsls	r1, r1, #2
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	619a      	str	r2, [r3, #24]
 8000d5c:	4b25      	ldr	r3, [pc, #148]	; (8000df4 <HAL_ADC_MspInit+0xc8>)
 8000d5e:	699a      	ldr	r2, [r3, #24]
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	4b22      	ldr	r3, [pc, #136]	; (8000df4 <HAL_ADC_MspInit+0xc8>)
 8000d6c:	695a      	ldr	r2, [r3, #20]
 8000d6e:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <HAL_ADC_MspInit+0xc8>)
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	0309      	lsls	r1, r1, #12
 8000d74:	430a      	orrs	r2, r1
 8000d76:	615a      	str	r2, [r3, #20]
 8000d78:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <HAL_ADC_MspInit+0xc8>)
 8000d7a:	695a      	ldr	r2, [r3, #20]
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	031b      	lsls	r3, r3, #12
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <HAL_ADC_MspInit+0xc8>)
 8000d88:	695a      	ldr	r2, [r3, #20]
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <HAL_ADC_MspInit+0xc8>)
 8000d8c:	2180      	movs	r1, #128	; 0x80
 8000d8e:	0289      	lsls	r1, r1, #10
 8000d90:	430a      	orrs	r2, r1
 8000d92:	615a      	str	r2, [r3, #20]
 8000d94:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <HAL_ADC_MspInit+0xc8>)
 8000d96:	695a      	ldr	r2, [r3, #20]
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	029b      	lsls	r3, r3, #10
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PC4     ------> ADC_IN14 
    */
    GPIO_InitStruct.Pin = LDRV_1_Pin|LDRV_2_Pin|LDRV_3_Pin|LDRV_4_Pin 
 8000da2:	2114      	movs	r1, #20
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	221f      	movs	r2, #31
 8000da8:	601a      	str	r2, [r3, #0]
                          |EXP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2203      	movs	r2, #3
 8000dae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db6:	000c      	movs	r4, r1
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	4a0f      	ldr	r2, [pc, #60]	; (8000df8 <HAL_ADC_MspInit+0xcc>)
 8000dbc:	0019      	movs	r1, r3
 8000dbe:	0010      	movs	r0, r2
 8000dc0:	f000 fd62 	bl	8001888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RATE_Pin|DEPTH_Pin|SHAPE_Pin|OFFSET_Pin 
 8000dc4:	0021      	movs	r1, r4
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	22ff      	movs	r2, #255	; 0xff
 8000dca:	601a      	str	r2, [r3, #0]
                          |SUBDIV_Pin|TRIM_Pin|GP_AIN1_Pin|GP_AIN2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	187a      	adds	r2, r7, r1
 8000dda:	2390      	movs	r3, #144	; 0x90
 8000ddc:	05db      	lsls	r3, r3, #23
 8000dde:	0011      	movs	r1, r2
 8000de0:	0018      	movs	r0, r3
 8000de2:	f000 fd51 	bl	8001888 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b00b      	add	sp, #44	; 0x2c
 8000dec:	bd90      	pop	{r4, r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	40012400 	.word	0x40012400
 8000df4:	40021000 	.word	0x40021000
 8000df8:	48000800 	.word	0x48000800

08000dfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b08b      	sub	sp, #44	; 0x2c
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	2314      	movs	r3, #20
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	0018      	movs	r0, r3
 8000e0a:	2314      	movs	r3, #20
 8000e0c:	001a      	movs	r2, r3
 8000e0e:	2100      	movs	r1, #0
 8000e10:	f002 fe6c 	bl	8003aec <memset>
  if(hspi->Instance==SPI2)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a28      	ldr	r2, [pc, #160]	; (8000ebc <HAL_SPI_MspInit+0xc0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d14a      	bne.n	8000eb4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e1e:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <HAL_SPI_MspInit+0xc4>)
 8000e20:	69da      	ldr	r2, [r3, #28]
 8000e22:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <HAL_SPI_MspInit+0xc4>)
 8000e24:	2180      	movs	r1, #128	; 0x80
 8000e26:	01c9      	lsls	r1, r1, #7
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	61da      	str	r2, [r3, #28]
 8000e2c:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <HAL_SPI_MspInit+0xc4>)
 8000e2e:	69da      	ldr	r2, [r3, #28]
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	01db      	lsls	r3, r3, #7
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <HAL_SPI_MspInit+0xc4>)
 8000e3c:	695a      	ldr	r2, [r3, #20]
 8000e3e:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <HAL_SPI_MspInit+0xc4>)
 8000e40:	2180      	movs	r1, #128	; 0x80
 8000e42:	02c9      	lsls	r1, r1, #11
 8000e44:	430a      	orrs	r2, r1
 8000e46:	615a      	str	r2, [r3, #20]
 8000e48:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <HAL_SPI_MspInit+0xc4>)
 8000e4a:	695a      	ldr	r2, [r3, #20]
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	02db      	lsls	r3, r3, #11
 8000e50:	4013      	ands	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e56:	2114      	movs	r1, #20
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	0152      	lsls	r2, r2, #5
 8000e5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	2202      	movs	r2, #2
 8000e64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2201      	movs	r2, #1
 8000e6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	000c      	movs	r4, r1
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	4a11      	ldr	r2, [pc, #68]	; (8000ec4 <HAL_SPI_MspInit+0xc8>)
 8000e7e:	0019      	movs	r1, r3
 8000e80:	0010      	movs	r0, r2
 8000e82:	f000 fd01 	bl	8001888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e86:	0021      	movs	r1, r4
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	22e0      	movs	r2, #224	; 0xe0
 8000e8c:	0212      	lsls	r2, r2, #8
 8000e8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	2202      	movs	r2, #2
 8000e94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	187b      	adds	r3, r7, r1
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <HAL_SPI_MspInit+0xc8>)
 8000eac:	0019      	movs	r1, r3
 8000eae:	0010      	movs	r0, r2
 8000eb0:	f000 fcea 	bl	8001888 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b00b      	add	sp, #44	; 0x2c
 8000eba:	bd90      	pop	{r4, r7, pc}
 8000ebc:	40003800 	.word	0x40003800
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	48000400 	.word	0x48000400

08000ec8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a27      	ldr	r2, [pc, #156]	; (8000f74 <HAL_TIM_Base_MspInit+0xac>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d10e      	bne.n	8000ef8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eda:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <HAL_TIM_Base_MspInit+0xb0>)
 8000edc:	699a      	ldr	r2, [r3, #24]
 8000ede:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <HAL_TIM_Base_MspInit+0xb0>)
 8000ee0:	2180      	movs	r1, #128	; 0x80
 8000ee2:	0109      	lsls	r1, r1, #4
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	619a      	str	r2, [r3, #24]
 8000ee8:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <HAL_TIM_Base_MspInit+0xb0>)
 8000eea:	699a      	ldr	r2, [r3, #24]
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000ef6:	e038      	b.n	8000f6a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a1f      	ldr	r2, [pc, #124]	; (8000f7c <HAL_TIM_Base_MspInit+0xb4>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d10c      	bne.n	8000f1c <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f02:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <HAL_TIM_Base_MspInit+0xb0>)
 8000f04:	69da      	ldr	r2, [r3, #28]
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <HAL_TIM_Base_MspInit+0xb0>)
 8000f08:	2102      	movs	r1, #2
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	61da      	str	r2, [r3, #28]
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <HAL_TIM_Base_MspInit+0xb0>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	2202      	movs	r2, #2
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
}
 8000f1a:	e026      	b.n	8000f6a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <HAL_TIM_Base_MspInit+0xb8>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d10e      	bne.n	8000f44 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <HAL_TIM_Base_MspInit+0xb0>)
 8000f28:	699a      	ldr	r2, [r3, #24]
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <HAL_TIM_Base_MspInit+0xb0>)
 8000f2c:	2180      	movs	r1, #128	; 0x80
 8000f2e:	0289      	lsls	r1, r1, #10
 8000f30:	430a      	orrs	r2, r1
 8000f32:	619a      	str	r2, [r3, #24]
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <HAL_TIM_Base_MspInit+0xb0>)
 8000f36:	699a      	ldr	r2, [r3, #24]
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	029b      	lsls	r3, r3, #10
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
}
 8000f42:	e012      	b.n	8000f6a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM17)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <HAL_TIM_Base_MspInit+0xbc>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d10d      	bne.n	8000f6a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_TIM_Base_MspInit+0xb0>)
 8000f50:	699a      	ldr	r2, [r3, #24]
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_TIM_Base_MspInit+0xb0>)
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	02c9      	lsls	r1, r1, #11
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	619a      	str	r2, [r3, #24]
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_TIM_Base_MspInit+0xb0>)
 8000f5e:	699a      	ldr	r2, [r3, #24]
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	02db      	lsls	r3, r3, #11
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b006      	add	sp, #24
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	40012c00 	.word	0x40012c00
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40000400 	.word	0x40000400
 8000f80:	40014400 	.word	0x40014400
 8000f84:	40014800 	.word	0x40014800

08000f88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	2314      	movs	r3, #20
 8000f92:	18fb      	adds	r3, r7, r3
 8000f94:	0018      	movs	r0, r3
 8000f96:	2314      	movs	r3, #20
 8000f98:	001a      	movs	r2, r3
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	f002 fda6 	bl	8003aec <memset>
  if(htim->Instance==TIM3)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a40      	ldr	r2, [pc, #256]	; (80010a8 <HAL_TIM_MspPostInit+0x120>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d125      	bne.n	8000ff6 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	4b40      	ldr	r3, [pc, #256]	; (80010ac <HAL_TIM_MspPostInit+0x124>)
 8000fac:	695a      	ldr	r2, [r3, #20]
 8000fae:	4b3f      	ldr	r3, [pc, #252]	; (80010ac <HAL_TIM_MspPostInit+0x124>)
 8000fb0:	2180      	movs	r1, #128	; 0x80
 8000fb2:	0309      	lsls	r1, r1, #12
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	615a      	str	r2, [r3, #20]
 8000fb8:	4b3c      	ldr	r3, [pc, #240]	; (80010ac <HAL_TIM_MspPostInit+0x124>)
 8000fba:	695a      	ldr	r2, [r3, #20]
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	031b      	lsls	r3, r3, #12
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin|GPIO_PIN_8|PWM4_Pin;
 8000fc6:	2114      	movs	r1, #20
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	22f0      	movs	r2, #240	; 0xf0
 8000fcc:	0092      	lsls	r2, r2, #2
 8000fce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8000fe2:	187b      	adds	r3, r7, r1
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe8:	187b      	adds	r3, r7, r1
 8000fea:	4a31      	ldr	r2, [pc, #196]	; (80010b0 <HAL_TIM_MspPostInit+0x128>)
 8000fec:	0019      	movs	r1, r3
 8000fee:	0010      	movs	r0, r2
 8000ff0:	f000 fc4a 	bl	8001888 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000ff4:	e054      	b.n	80010a0 <HAL_TIM_MspPostInit+0x118>
  else if(htim->Instance==TIM16)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a2e      	ldr	r2, [pc, #184]	; (80010b4 <HAL_TIM_MspPostInit+0x12c>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d125      	bne.n	800104c <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001000:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <HAL_TIM_MspPostInit+0x124>)
 8001002:	695a      	ldr	r2, [r3, #20]
 8001004:	4b29      	ldr	r3, [pc, #164]	; (80010ac <HAL_TIM_MspPostInit+0x124>)
 8001006:	2180      	movs	r1, #128	; 0x80
 8001008:	02c9      	lsls	r1, r1, #11
 800100a:	430a      	orrs	r2, r1
 800100c:	615a      	str	r2, [r3, #20]
 800100e:	4b27      	ldr	r3, [pc, #156]	; (80010ac <HAL_TIM_MspPostInit+0x124>)
 8001010:	695a      	ldr	r2, [r3, #20]
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	02db      	lsls	r3, r3, #11
 8001016:	4013      	ands	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GP_PWM_1_Pin;
 800101c:	2114      	movs	r1, #20
 800101e:	187b      	adds	r3, r7, r1
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	0052      	lsls	r2, r2, #1
 8001024:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	187b      	adds	r3, r7, r1
 8001028:	2202      	movs	r2, #2
 800102a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	187b      	adds	r3, r7, r1
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	187b      	adds	r3, r7, r1
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8001038:	187b      	adds	r3, r7, r1
 800103a:	2202      	movs	r2, #2
 800103c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GP_PWM_1_GPIO_Port, &GPIO_InitStruct);
 800103e:	187b      	adds	r3, r7, r1
 8001040:	4a1d      	ldr	r2, [pc, #116]	; (80010b8 <HAL_TIM_MspPostInit+0x130>)
 8001042:	0019      	movs	r1, r3
 8001044:	0010      	movs	r0, r2
 8001046:	f000 fc1f 	bl	8001888 <HAL_GPIO_Init>
}
 800104a:	e029      	b.n	80010a0 <HAL_TIM_MspPostInit+0x118>
  else if(htim->Instance==TIM17)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a1a      	ldr	r2, [pc, #104]	; (80010bc <HAL_TIM_MspPostInit+0x134>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d124      	bne.n	80010a0 <HAL_TIM_MspPostInit+0x118>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <HAL_TIM_MspPostInit+0x124>)
 8001058:	695a      	ldr	r2, [r3, #20]
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <HAL_TIM_MspPostInit+0x124>)
 800105c:	2180      	movs	r1, #128	; 0x80
 800105e:	02c9      	lsls	r1, r1, #11
 8001060:	430a      	orrs	r2, r1
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <HAL_TIM_MspPostInit+0x124>)
 8001066:	695a      	ldr	r2, [r3, #20]
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	02db      	lsls	r3, r3, #11
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GP_PWM_2_Pin;
 8001072:	2114      	movs	r1, #20
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	0092      	lsls	r2, r2, #2
 800107a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	187b      	adds	r3, r7, r1
 800107e:	2202      	movs	r2, #2
 8001080:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	187b      	adds	r3, r7, r1
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	187b      	adds	r3, r7, r1
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 800108e:	187b      	adds	r3, r7, r1
 8001090:	2202      	movs	r2, #2
 8001092:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GP_PWM_2_GPIO_Port, &GPIO_InitStruct);
 8001094:	187b      	adds	r3, r7, r1
 8001096:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <HAL_TIM_MspPostInit+0x130>)
 8001098:	0019      	movs	r1, r3
 800109a:	0010      	movs	r0, r2
 800109c:	f000 fbf4 	bl	8001888 <HAL_GPIO_Init>
}
 80010a0:	46c0      	nop			; (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b00a      	add	sp, #40	; 0x28
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40000400 	.word	0x40000400
 80010ac:	40021000 	.word	0x40021000
 80010b0:	48000800 	.word	0x48000800
 80010b4:	40014400 	.word	0x40014400
 80010b8:	48000400 	.word	0x48000400
 80010bc:	40014800 	.word	0x40014800

080010c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	2314      	movs	r3, #20
 80010ca:	18fb      	adds	r3, r7, r3
 80010cc:	0018      	movs	r0, r3
 80010ce:	2314      	movs	r3, #20
 80010d0:	001a      	movs	r2, r3
 80010d2:	2100      	movs	r1, #0
 80010d4:	f002 fd0a 	bl	8003aec <memset>
  if(huart->Instance==USART1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a1d      	ldr	r2, [pc, #116]	; (8001154 <HAL_UART_MspInit+0x94>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d133      	bne.n	800114a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010e2:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <HAL_UART_MspInit+0x98>)
 80010e4:	699a      	ldr	r2, [r3, #24]
 80010e6:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <HAL_UART_MspInit+0x98>)
 80010e8:	2180      	movs	r1, #128	; 0x80
 80010ea:	01c9      	lsls	r1, r1, #7
 80010ec:	430a      	orrs	r2, r1
 80010ee:	619a      	str	r2, [r3, #24]
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <HAL_UART_MspInit+0x98>)
 80010f2:	699a      	ldr	r2, [r3, #24]
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	01db      	lsls	r3, r3, #7
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <HAL_UART_MspInit+0x98>)
 8001100:	695a      	ldr	r2, [r3, #20]
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_UART_MspInit+0x98>)
 8001104:	2180      	movs	r1, #128	; 0x80
 8001106:	0289      	lsls	r1, r1, #10
 8001108:	430a      	orrs	r2, r1
 800110a:	615a      	str	r2, [r3, #20]
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_UART_MspInit+0x98>)
 800110e:	695a      	ldr	r2, [r3, #20]
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	029b      	lsls	r3, r3, #10
 8001114:	4013      	ands	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800111a:	2114      	movs	r1, #20
 800111c:	187b      	adds	r3, r7, r1
 800111e:	22c0      	movs	r2, #192	; 0xc0
 8001120:	00d2      	lsls	r2, r2, #3
 8001122:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	187b      	adds	r3, r7, r1
 8001126:	2202      	movs	r2, #2
 8001128:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	187b      	adds	r3, r7, r1
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001130:	187b      	adds	r3, r7, r1
 8001132:	2203      	movs	r2, #3
 8001134:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001136:	187b      	adds	r3, r7, r1
 8001138:	2201      	movs	r2, #1
 800113a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	187a      	adds	r2, r7, r1
 800113e:	2390      	movs	r3, #144	; 0x90
 8001140:	05db      	lsls	r3, r3, #23
 8001142:	0011      	movs	r1, r2
 8001144:	0018      	movs	r0, r3
 8001146:	f000 fb9f 	bl	8001888 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	46bd      	mov	sp, r7
 800114e:	b00a      	add	sp, #40	; 0x28
 8001150:	bd80      	pop	{r7, pc}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	40013800 	.word	0x40013800
 8001158:	40021000 	.word	0x40021000

0800115c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001160:	46c0      	nop			; (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <HardFault_Handler+0x4>

0800116c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001184:	f000 f87a 	bl	800127c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001198:	480d      	ldr	r0, [pc, #52]	; (80011d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800119a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800119c:	480d      	ldr	r0, [pc, #52]	; (80011d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800119e:	490e      	ldr	r1, [pc, #56]	; (80011d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011a0:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <LoopForever+0xe>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011b4:	4c0b      	ldr	r4, [pc, #44]	; (80011e4 <LoopForever+0x16>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80011c2:	f7ff ffe4 	bl	800118e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80011c6:	f002 fc6d 	bl	8003aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ca:	f7ff f827 	bl	800021c <main>

080011ce <LoopForever>:

LoopForever:
    b LoopForever
 80011ce:	e7fe      	b.n	80011ce <LoopForever>
  ldr   r0, =_estack
 80011d0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80011d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80011dc:	08003b54 	.word	0x08003b54
  ldr r2, =_sbss
 80011e0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80011e4:	20000258 	.word	0x20000258

080011e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC1_IRQHandler>
	...

080011ec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <HAL_Init+0x24>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_Init+0x24>)
 80011f6:	2110      	movs	r1, #16
 80011f8:	430a      	orrs	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80011fc:	2000      	movs	r0, #0
 80011fe:	f000 f809 	bl	8001214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001202:	f7ff fd6f 	bl	8000ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	0018      	movs	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	40022000 	.word	0x40022000

08001214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b590      	push	{r4, r7, lr}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <HAL_InitTick+0x5c>)
 800121e:	681c      	ldr	r4, [r3, #0]
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <HAL_InitTick+0x60>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	0019      	movs	r1, r3
 8001226:	23fa      	movs	r3, #250	; 0xfa
 8001228:	0098      	lsls	r0, r3, #2
 800122a:	f7fe ff6b 	bl	8000104 <__udivsi3>
 800122e:	0003      	movs	r3, r0
 8001230:	0019      	movs	r1, r3
 8001232:	0020      	movs	r0, r4
 8001234:	f7fe ff66 	bl	8000104 <__udivsi3>
 8001238:	0003      	movs	r3, r0
 800123a:	0018      	movs	r0, r3
 800123c:	f000 fb17 	bl	800186e <HAL_SYSTICK_Config>
 8001240:	1e03      	subs	r3, r0, #0
 8001242:	d001      	beq.n	8001248 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e00f      	b.n	8001268 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d80b      	bhi.n	8001266 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	2301      	movs	r3, #1
 8001252:	425b      	negs	r3, r3
 8001254:	2200      	movs	r2, #0
 8001256:	0018      	movs	r0, r3
 8001258:	f000 faf4 	bl	8001844 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_InitTick+0x64>)
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	e000      	b.n	8001268 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
}
 8001268:	0018      	movs	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	b003      	add	sp, #12
 800126e:	bd90      	pop	{r4, r7, pc}
 8001270:	20000004 	.word	0x20000004
 8001274:	2000000c 	.word	0x2000000c
 8001278:	20000008 	.word	0x20000008

0800127c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_IncTick+0x1c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	001a      	movs	r2, r3
 8001286:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_IncTick+0x20>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	18d2      	adds	r2, r2, r3
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <HAL_IncTick+0x20>)
 800128e:	601a      	str	r2, [r3, #0]
}
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	2000000c 	.word	0x2000000c
 800129c:	20000254 	.word	0x20000254

080012a0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b02      	ldr	r3, [pc, #8]	; (80012b0 <HAL_GetTick+0x10>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	0018      	movs	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	20000254 	.word	0x20000254

080012b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012bc:	230f      	movs	r3, #15
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e125      	b.n	800151e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10a      	bne.n	80012f0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2234      	movs	r2, #52	; 0x34
 80012e4:	2100      	movs	r1, #0
 80012e6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	0018      	movs	r0, r3
 80012ec:	f7ff fd1e 	bl	8000d2c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f4:	2210      	movs	r2, #16
 80012f6:	4013      	ands	r3, r2
 80012f8:	d000      	beq.n	80012fc <HAL_ADC_Init+0x48>
 80012fa:	e103      	b.n	8001504 <HAL_ADC_Init+0x250>
 80012fc:	230f      	movs	r3, #15
 80012fe:	18fb      	adds	r3, r7, r3
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d000      	beq.n	8001308 <HAL_ADC_Init+0x54>
 8001306:	e0fd      	b.n	8001504 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2204      	movs	r2, #4
 8001310:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001312:	d000      	beq.n	8001316 <HAL_ADC_Init+0x62>
 8001314:	e0f6      	b.n	8001504 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800131a:	4a83      	ldr	r2, [pc, #524]	; (8001528 <HAL_ADC_Init+0x274>)
 800131c:	4013      	ands	r3, r2
 800131e:	2202      	movs	r2, #2
 8001320:	431a      	orrs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2203      	movs	r2, #3
 800132e:	4013      	ands	r3, r2
 8001330:	2b01      	cmp	r3, #1
 8001332:	d112      	bne.n	800135a <HAL_ADC_Init+0xa6>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2201      	movs	r2, #1
 800133c:	4013      	ands	r3, r2
 800133e:	2b01      	cmp	r3, #1
 8001340:	d009      	beq.n	8001356 <HAL_ADC_Init+0xa2>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	401a      	ands	r2, r3
 800134e:	2380      	movs	r3, #128	; 0x80
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	429a      	cmp	r2, r3
 8001354:	d101      	bne.n	800135a <HAL_ADC_Init+0xa6>
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <HAL_ADC_Init+0xa8>
 800135a:	2300      	movs	r3, #0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d116      	bne.n	800138e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2218      	movs	r2, #24
 8001368:	4393      	bics	r3, r2
 800136a:	0019      	movs	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	0899      	lsrs	r1, r3, #2
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4964      	ldr	r1, [pc, #400]	; (800152c <HAL_ADC_Init+0x278>)
 800139a:	400a      	ands	r2, r1
 800139c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	7e1b      	ldrb	r3, [r3, #24]
 80013a2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7e5b      	ldrb	r3, [r3, #25]
 80013a8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013aa:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7e9b      	ldrb	r3, [r3, #26]
 80013b0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80013b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d002      	beq.n	80013c2 <HAL_ADC_Init+0x10e>
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	015b      	lsls	r3, r3, #5
 80013c0:	e000      	b.n	80013c4 <HAL_ADC_Init+0x110>
 80013c2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80013c4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80013ca:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d101      	bne.n	80013d8 <HAL_ADC_Init+0x124>
 80013d4:	2304      	movs	r3, #4
 80013d6:	e000      	b.n	80013da <HAL_ADC_Init+0x126>
 80013d8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80013da:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2124      	movs	r1, #36	; 0x24
 80013e0:	5c5b      	ldrb	r3, [r3, r1]
 80013e2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80013e4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7edb      	ldrb	r3, [r3, #27]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d115      	bne.n	8001420 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7e9b      	ldrb	r3, [r3, #26]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d105      	bne.n	8001408 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	0252      	lsls	r2, r2, #9
 8001402:	4313      	orrs	r3, r2
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	e00b      	b.n	8001420 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140c:	2220      	movs	r2, #32
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001418:	2201      	movs	r2, #1
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69da      	ldr	r2, [r3, #28]
 8001424:	23c2      	movs	r3, #194	; 0xc2
 8001426:	33ff      	adds	r3, #255	; 0xff
 8001428:	429a      	cmp	r2, r3
 800142a:	d007      	beq.n	800143c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001434:	4313      	orrs	r3, r2
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	4313      	orrs	r3, r2
 800143a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68d9      	ldr	r1, [r3, #12]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	430a      	orrs	r2, r1
 800144a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	055b      	lsls	r3, r3, #21
 8001454:	429a      	cmp	r2, r3
 8001456:	d01b      	beq.n	8001490 <HAL_ADC_Init+0x1dc>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145c:	2b01      	cmp	r3, #1
 800145e:	d017      	beq.n	8001490 <HAL_ADC_Init+0x1dc>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001464:	2b02      	cmp	r3, #2
 8001466:	d013      	beq.n	8001490 <HAL_ADC_Init+0x1dc>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146c:	2b03      	cmp	r3, #3
 800146e:	d00f      	beq.n	8001490 <HAL_ADC_Init+0x1dc>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001474:	2b04      	cmp	r3, #4
 8001476:	d00b      	beq.n	8001490 <HAL_ADC_Init+0x1dc>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	2b05      	cmp	r3, #5
 800147e:	d007      	beq.n	8001490 <HAL_ADC_Init+0x1dc>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	2b06      	cmp	r3, #6
 8001486:	d003      	beq.n	8001490 <HAL_ADC_Init+0x1dc>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148c:	2b07      	cmp	r3, #7
 800148e:	d112      	bne.n	80014b6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2107      	movs	r1, #7
 800149c:	438a      	bics	r2, r1
 800149e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6959      	ldr	r1, [r3, #20]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014aa:	2207      	movs	r2, #7
 80014ac:	401a      	ands	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <HAL_ADC_Init+0x27c>)
 80014be:	4013      	ands	r3, r2
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d10b      	bne.n	80014de <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d0:	2203      	movs	r2, #3
 80014d2:	4393      	bics	r3, r2
 80014d4:	2201      	movs	r2, #1
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80014dc:	e01c      	b.n	8001518 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e2:	2212      	movs	r2, #18
 80014e4:	4393      	bics	r3, r2
 80014e6:	2210      	movs	r2, #16
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f2:	2201      	movs	r2, #1
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80014fa:	230f      	movs	r3, #15
 80014fc:	18fb      	adds	r3, r7, r3
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001502:	e009      	b.n	8001518 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001508:	2210      	movs	r2, #16
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001510:	230f      	movs	r3, #15
 8001512:	18fb      	adds	r3, r7, r3
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001518:	230f      	movs	r3, #15
 800151a:	18fb      	adds	r3, r7, r3
 800151c:	781b      	ldrb	r3, [r3, #0]
}
 800151e:	0018      	movs	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	b004      	add	sp, #16
 8001524:	bd80      	pop	{r7, pc}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	fffffefd 	.word	0xfffffefd
 800152c:	fffe0219 	.word	0xfffe0219
 8001530:	833fffe7 	.word	0x833fffe7

08001534 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800153e:	230f      	movs	r3, #15
 8001540:	18fb      	adds	r3, r7, r3
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	055b      	lsls	r3, r3, #21
 8001552:	429a      	cmp	r2, r3
 8001554:	d011      	beq.n	800157a <HAL_ADC_ConfigChannel+0x46>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155a:	2b01      	cmp	r3, #1
 800155c:	d00d      	beq.n	800157a <HAL_ADC_ConfigChannel+0x46>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001562:	2b02      	cmp	r3, #2
 8001564:	d009      	beq.n	800157a <HAL_ADC_ConfigChannel+0x46>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156a:	2b03      	cmp	r3, #3
 800156c:	d005      	beq.n	800157a <HAL_ADC_ConfigChannel+0x46>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	2b04      	cmp	r3, #4
 8001574:	d001      	beq.n	800157a <HAL_ADC_ConfigChannel+0x46>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2234      	movs	r2, #52	; 0x34
 800157e:	5c9b      	ldrb	r3, [r3, r2]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d101      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x54>
 8001584:	2302      	movs	r3, #2
 8001586:	e0bb      	b.n	8001700 <HAL_ADC_ConfigChannel+0x1cc>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2234      	movs	r2, #52	; 0x34
 800158c:	2101      	movs	r1, #1
 800158e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2204      	movs	r2, #4
 8001598:	4013      	ands	r3, r2
 800159a:	d000      	beq.n	800159e <HAL_ADC_ConfigChannel+0x6a>
 800159c:	e09f      	b.n	80016de <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	4a59      	ldr	r2, [pc, #356]	; (8001708 <HAL_ADC_ConfigChannel+0x1d4>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d100      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x76>
 80015a8:	e077      	b.n	800169a <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2201      	movs	r2, #1
 80015b6:	409a      	lsls	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	055b      	lsls	r3, r3, #21
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d037      	beq.n	800163c <HAL_ADC_ConfigChannel+0x108>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d033      	beq.n	800163c <HAL_ADC_ConfigChannel+0x108>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d02f      	beq.n	800163c <HAL_ADC_ConfigChannel+0x108>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d02b      	beq.n	800163c <HAL_ADC_ConfigChannel+0x108>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d027      	beq.n	800163c <HAL_ADC_ConfigChannel+0x108>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f0:	2b05      	cmp	r3, #5
 80015f2:	d023      	beq.n	800163c <HAL_ADC_ConfigChannel+0x108>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f8:	2b06      	cmp	r3, #6
 80015fa:	d01f      	beq.n	800163c <HAL_ADC_ConfigChannel+0x108>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	2b07      	cmp	r3, #7
 8001602:	d01b      	beq.n	800163c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	2107      	movs	r1, #7
 8001610:	400b      	ands	r3, r1
 8001612:	429a      	cmp	r2, r3
 8001614:	d012      	beq.n	800163c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	695a      	ldr	r2, [r3, #20]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2107      	movs	r1, #7
 8001622:	438a      	bics	r2, r1
 8001624:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6959      	ldr	r1, [r3, #20]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2207      	movs	r2, #7
 8001632:	401a      	ands	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b10      	cmp	r3, #16
 8001642:	d003      	beq.n	800164c <HAL_ADC_ConfigChannel+0x118>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b11      	cmp	r3, #17
 800164a:	d152      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800164c:	4b2f      	ldr	r3, [pc, #188]	; (800170c <HAL_ADC_ConfigChannel+0x1d8>)
 800164e:	6819      	ldr	r1, [r3, #0]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b10      	cmp	r3, #16
 8001656:	d102      	bne.n	800165e <HAL_ADC_ConfigChannel+0x12a>
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	041b      	lsls	r3, r3, #16
 800165c:	e001      	b.n	8001662 <HAL_ADC_ConfigChannel+0x12e>
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	03db      	lsls	r3, r3, #15
 8001662:	4a2a      	ldr	r2, [pc, #168]	; (800170c <HAL_ADC_ConfigChannel+0x1d8>)
 8001664:	430b      	orrs	r3, r1
 8001666:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b10      	cmp	r3, #16
 800166e:	d140      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001670:	4b27      	ldr	r3, [pc, #156]	; (8001710 <HAL_ADC_ConfigChannel+0x1dc>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4927      	ldr	r1, [pc, #156]	; (8001714 <HAL_ADC_ConfigChannel+0x1e0>)
 8001676:	0018      	movs	r0, r3
 8001678:	f7fe fd44 	bl	8000104 <__udivsi3>
 800167c:	0003      	movs	r3, r0
 800167e:	001a      	movs	r2, r3
 8001680:	0013      	movs	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	189b      	adds	r3, r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800168a:	e002      	b.n	8001692 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	3b01      	subs	r3, #1
 8001690:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f9      	bne.n	800168c <HAL_ADC_ConfigChannel+0x158>
 8001698:	e02b      	b.n	80016f2 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2101      	movs	r1, #1
 80016a6:	4099      	lsls	r1, r3
 80016a8:	000b      	movs	r3, r1
 80016aa:	43d9      	mvns	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	400a      	ands	r2, r1
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b10      	cmp	r3, #16
 80016ba:	d003      	beq.n	80016c4 <HAL_ADC_ConfigChannel+0x190>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b11      	cmp	r3, #17
 80016c2:	d116      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_ADC_ConfigChannel+0x1d8>)
 80016c6:	6819      	ldr	r1, [r3, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b10      	cmp	r3, #16
 80016ce:	d101      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x1a0>
 80016d0:	4a11      	ldr	r2, [pc, #68]	; (8001718 <HAL_ADC_ConfigChannel+0x1e4>)
 80016d2:	e000      	b.n	80016d6 <HAL_ADC_ConfigChannel+0x1a2>
 80016d4:	4a11      	ldr	r2, [pc, #68]	; (800171c <HAL_ADC_ConfigChannel+0x1e8>)
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <HAL_ADC_ConfigChannel+0x1d8>)
 80016d8:	400a      	ands	r2, r1
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	e009      	b.n	80016f2 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e2:	2220      	movs	r2, #32
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80016ea:	230f      	movs	r3, #15
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	2201      	movs	r2, #1
 80016f0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2234      	movs	r2, #52	; 0x34
 80016f6:	2100      	movs	r1, #0
 80016f8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80016fa:	230f      	movs	r3, #15
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	781b      	ldrb	r3, [r3, #0]
}
 8001700:	0018      	movs	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	b004      	add	sp, #16
 8001706:	bd80      	pop	{r7, pc}
 8001708:	00001001 	.word	0x00001001
 800170c:	40012708 	.word	0x40012708
 8001710:	20000004 	.word	0x20000004
 8001714:	000f4240 	.word	0x000f4240
 8001718:	ff7fffff 	.word	0xff7fffff
 800171c:	ffbfffff 	.word	0xffbfffff

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	0002      	movs	r2, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	1dfb      	adds	r3, r7, #7
 800172c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800172e:	1dfb      	adds	r3, r7, #7
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b7f      	cmp	r3, #127	; 0x7f
 8001734:	d828      	bhi.n	8001788 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001736:	4a2f      	ldr	r2, [pc, #188]	; (80017f4 <__NVIC_SetPriority+0xd4>)
 8001738:	1dfb      	adds	r3, r7, #7
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b25b      	sxtb	r3, r3
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	33c0      	adds	r3, #192	; 0xc0
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	589b      	ldr	r3, [r3, r2]
 8001746:	1dfa      	adds	r2, r7, #7
 8001748:	7812      	ldrb	r2, [r2, #0]
 800174a:	0011      	movs	r1, r2
 800174c:	2203      	movs	r2, #3
 800174e:	400a      	ands	r2, r1
 8001750:	00d2      	lsls	r2, r2, #3
 8001752:	21ff      	movs	r1, #255	; 0xff
 8001754:	4091      	lsls	r1, r2
 8001756:	000a      	movs	r2, r1
 8001758:	43d2      	mvns	r2, r2
 800175a:	401a      	ands	r2, r3
 800175c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	019b      	lsls	r3, r3, #6
 8001762:	22ff      	movs	r2, #255	; 0xff
 8001764:	401a      	ands	r2, r3
 8001766:	1dfb      	adds	r3, r7, #7
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	0018      	movs	r0, r3
 800176c:	2303      	movs	r3, #3
 800176e:	4003      	ands	r3, r0
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001774:	481f      	ldr	r0, [pc, #124]	; (80017f4 <__NVIC_SetPriority+0xd4>)
 8001776:	1dfb      	adds	r3, r7, #7
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b25b      	sxtb	r3, r3
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	430a      	orrs	r2, r1
 8001780:	33c0      	adds	r3, #192	; 0xc0
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001786:	e031      	b.n	80017ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001788:	4a1b      	ldr	r2, [pc, #108]	; (80017f8 <__NVIC_SetPriority+0xd8>)
 800178a:	1dfb      	adds	r3, r7, #7
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	0019      	movs	r1, r3
 8001790:	230f      	movs	r3, #15
 8001792:	400b      	ands	r3, r1
 8001794:	3b08      	subs	r3, #8
 8001796:	089b      	lsrs	r3, r3, #2
 8001798:	3306      	adds	r3, #6
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	18d3      	adds	r3, r2, r3
 800179e:	3304      	adds	r3, #4
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	1dfa      	adds	r2, r7, #7
 80017a4:	7812      	ldrb	r2, [r2, #0]
 80017a6:	0011      	movs	r1, r2
 80017a8:	2203      	movs	r2, #3
 80017aa:	400a      	ands	r2, r1
 80017ac:	00d2      	lsls	r2, r2, #3
 80017ae:	21ff      	movs	r1, #255	; 0xff
 80017b0:	4091      	lsls	r1, r2
 80017b2:	000a      	movs	r2, r1
 80017b4:	43d2      	mvns	r2, r2
 80017b6:	401a      	ands	r2, r3
 80017b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	019b      	lsls	r3, r3, #6
 80017be:	22ff      	movs	r2, #255	; 0xff
 80017c0:	401a      	ands	r2, r3
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	0018      	movs	r0, r3
 80017c8:	2303      	movs	r3, #3
 80017ca:	4003      	ands	r3, r0
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017d0:	4809      	ldr	r0, [pc, #36]	; (80017f8 <__NVIC_SetPriority+0xd8>)
 80017d2:	1dfb      	adds	r3, r7, #7
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	001c      	movs	r4, r3
 80017d8:	230f      	movs	r3, #15
 80017da:	4023      	ands	r3, r4
 80017dc:	3b08      	subs	r3, #8
 80017de:	089b      	lsrs	r3, r3, #2
 80017e0:	430a      	orrs	r2, r1
 80017e2:	3306      	adds	r3, #6
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	18c3      	adds	r3, r0, r3
 80017e8:	3304      	adds	r3, #4
 80017ea:	601a      	str	r2, [r3, #0]
}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b003      	add	sp, #12
 80017f2:	bd90      	pop	{r4, r7, pc}
 80017f4:	e000e100 	.word	0xe000e100
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	4a0c      	ldr	r2, [pc, #48]	; (800183c <SysTick_Config+0x40>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d901      	bls.n	8001812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180e:	2301      	movs	r3, #1
 8001810:	e010      	b.n	8001834 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <SysTick_Config+0x44>)
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	3a01      	subs	r2, #1
 8001818:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181a:	2301      	movs	r3, #1
 800181c:	425b      	negs	r3, r3
 800181e:	2103      	movs	r1, #3
 8001820:	0018      	movs	r0, r3
 8001822:	f7ff ff7d 	bl	8001720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <SysTick_Config+0x44>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <SysTick_Config+0x44>)
 800182e:	2207      	movs	r2, #7
 8001830:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001832:	2300      	movs	r3, #0
}
 8001834:	0018      	movs	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	b002      	add	sp, #8
 800183a:	bd80      	pop	{r7, pc}
 800183c:	00ffffff 	.word	0x00ffffff
 8001840:	e000e010 	.word	0xe000e010

08001844 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	210f      	movs	r1, #15
 8001850:	187b      	adds	r3, r7, r1
 8001852:	1c02      	adds	r2, r0, #0
 8001854:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	187b      	adds	r3, r7, r1
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b25b      	sxtb	r3, r3
 800185e:	0011      	movs	r1, r2
 8001860:	0018      	movs	r0, r3
 8001862:	f7ff ff5d 	bl	8001720 <__NVIC_SetPriority>
}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	46bd      	mov	sp, r7
 800186a:	b004      	add	sp, #16
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	0018      	movs	r0, r3
 800187a:	f7ff ffbf 	bl	80017fc <SysTick_Config>
 800187e:	0003      	movs	r3, r0
}
 8001880:	0018      	movs	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	b002      	add	sp, #8
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001896:	e14f      	b.n	8001b38 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2101      	movs	r1, #1
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	4091      	lsls	r1, r2
 80018a2:	000a      	movs	r2, r1
 80018a4:	4013      	ands	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d100      	bne.n	80018b0 <HAL_GPIO_Init+0x28>
 80018ae:	e140      	b.n	8001b32 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d003      	beq.n	80018c0 <HAL_GPIO_Init+0x38>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b12      	cmp	r3, #18
 80018be:	d123      	bne.n	8001908 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	08da      	lsrs	r2, r3, #3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3208      	adds	r2, #8
 80018c8:	0092      	lsls	r2, r2, #2
 80018ca:	58d3      	ldr	r3, [r2, r3]
 80018cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	2207      	movs	r2, #7
 80018d2:	4013      	ands	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	220f      	movs	r2, #15
 80018d8:	409a      	lsls	r2, r3
 80018da:	0013      	movs	r3, r2
 80018dc:	43da      	mvns	r2, r3
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	691a      	ldr	r2, [r3, #16]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2107      	movs	r1, #7
 80018ec:	400b      	ands	r3, r1
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	409a      	lsls	r2, r3
 80018f2:	0013      	movs	r3, r2
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	08da      	lsrs	r2, r3, #3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3208      	adds	r2, #8
 8001902:	0092      	lsls	r2, r2, #2
 8001904:	6939      	ldr	r1, [r7, #16]
 8001906:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	2203      	movs	r2, #3
 8001914:	409a      	lsls	r2, r3
 8001916:	0013      	movs	r3, r2
 8001918:	43da      	mvns	r2, r3
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2203      	movs	r2, #3
 8001926:	401a      	ands	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	409a      	lsls	r2, r3
 800192e:	0013      	movs	r3, r2
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d00b      	beq.n	800195c <HAL_GPIO_Init+0xd4>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b02      	cmp	r3, #2
 800194a:	d007      	beq.n	800195c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001950:	2b11      	cmp	r3, #17
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b12      	cmp	r3, #18
 800195a:	d130      	bne.n	80019be <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	2203      	movs	r2, #3
 8001968:	409a      	lsls	r2, r3
 800196a:	0013      	movs	r3, r2
 800196c:	43da      	mvns	r2, r3
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	409a      	lsls	r2, r3
 800197e:	0013      	movs	r3, r2
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001992:	2201      	movs	r2, #1
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	409a      	lsls	r2, r3
 8001998:	0013      	movs	r3, r2
 800199a:	43da      	mvns	r2, r3
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	091b      	lsrs	r3, r3, #4
 80019a8:	2201      	movs	r2, #1
 80019aa:	401a      	ands	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	409a      	lsls	r2, r3
 80019b0:	0013      	movs	r3, r2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	2203      	movs	r2, #3
 80019ca:	409a      	lsls	r2, r3
 80019cc:	0013      	movs	r3, r2
 80019ce:	43da      	mvns	r2, r3
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	409a      	lsls	r2, r3
 80019e0:	0013      	movs	r3, r2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	055b      	lsls	r3, r3, #21
 80019f6:	4013      	ands	r3, r2
 80019f8:	d100      	bne.n	80019fc <HAL_GPIO_Init+0x174>
 80019fa:	e09a      	b.n	8001b32 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fc:	4b54      	ldr	r3, [pc, #336]	; (8001b50 <HAL_GPIO_Init+0x2c8>)
 80019fe:	699a      	ldr	r2, [r3, #24]
 8001a00:	4b53      	ldr	r3, [pc, #332]	; (8001b50 <HAL_GPIO_Init+0x2c8>)
 8001a02:	2101      	movs	r1, #1
 8001a04:	430a      	orrs	r2, r1
 8001a06:	619a      	str	r2, [r3, #24]
 8001a08:	4b51      	ldr	r3, [pc, #324]	; (8001b50 <HAL_GPIO_Init+0x2c8>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	4013      	ands	r3, r2
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a14:	4a4f      	ldr	r2, [pc, #316]	; (8001b54 <HAL_GPIO_Init+0x2cc>)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	089b      	lsrs	r3, r3, #2
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	589b      	ldr	r3, [r3, r2]
 8001a20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	2203      	movs	r2, #3
 8001a26:	4013      	ands	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	220f      	movs	r2, #15
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	0013      	movs	r3, r2
 8001a30:	43da      	mvns	r2, r3
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	2390      	movs	r3, #144	; 0x90
 8001a3c:	05db      	lsls	r3, r3, #23
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d013      	beq.n	8001a6a <HAL_GPIO_Init+0x1e2>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a44      	ldr	r2, [pc, #272]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d00d      	beq.n	8001a66 <HAL_GPIO_Init+0x1de>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a43      	ldr	r2, [pc, #268]	; (8001b5c <HAL_GPIO_Init+0x2d4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d007      	beq.n	8001a62 <HAL_GPIO_Init+0x1da>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a42      	ldr	r2, [pc, #264]	; (8001b60 <HAL_GPIO_Init+0x2d8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d101      	bne.n	8001a5e <HAL_GPIO_Init+0x1d6>
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e006      	b.n	8001a6c <HAL_GPIO_Init+0x1e4>
 8001a5e:	2305      	movs	r3, #5
 8001a60:	e004      	b.n	8001a6c <HAL_GPIO_Init+0x1e4>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e002      	b.n	8001a6c <HAL_GPIO_Init+0x1e4>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <HAL_GPIO_Init+0x1e4>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	2103      	movs	r1, #3
 8001a70:	400a      	ands	r2, r1
 8001a72:	0092      	lsls	r2, r2, #2
 8001a74:	4093      	lsls	r3, r2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a7c:	4935      	ldr	r1, [pc, #212]	; (8001b54 <HAL_GPIO_Init+0x2cc>)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	089b      	lsrs	r3, r3, #2
 8001a82:	3302      	adds	r3, #2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a8a:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <HAL_GPIO_Init+0x2dc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	43da      	mvns	r2, r3
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	025b      	lsls	r3, r3, #9
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001aae:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <HAL_GPIO_Init+0x2dc>)
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <HAL_GPIO_Init+0x2dc>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	43da      	mvns	r2, r3
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	029b      	lsls	r3, r3, #10
 8001acc:	4013      	ands	r3, r2
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ad8:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <HAL_GPIO_Init+0x2dc>)
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ade:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <HAL_GPIO_Init+0x2dc>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	035b      	lsls	r3, r3, #13
 8001af6:	4013      	ands	r3, r2
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b02:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <HAL_GPIO_Init+0x2dc>)
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b08:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <HAL_GPIO_Init+0x2dc>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	43da      	mvns	r2, r3
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	039b      	lsls	r3, r3, #14
 8001b20:	4013      	ands	r3, r2
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b2c:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <HAL_GPIO_Init+0x2dc>)
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	40da      	lsrs	r2, r3
 8001b40:	1e13      	subs	r3, r2, #0
 8001b42:	d000      	beq.n	8001b46 <HAL_GPIO_Init+0x2be>
 8001b44:	e6a8      	b.n	8001898 <HAL_GPIO_Init+0x10>
  } 
}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b006      	add	sp, #24
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40010000 	.word	0x40010000
 8001b58:	48000400 	.word	0x48000400
 8001b5c:	48000800 	.word	0x48000800
 8001b60:	48000c00 	.word	0x48000c00
 8001b64:	40010400 	.word	0x40010400

08001b68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	000a      	movs	r2, r1
 8001b72:	1cbb      	adds	r3, r7, #2
 8001b74:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	1cba      	adds	r2, r7, #2
 8001b7c:	8812      	ldrh	r2, [r2, #0]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d004      	beq.n	8001b8c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b82:	230f      	movs	r3, #15
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]
 8001b8a:	e003      	b.n	8001b94 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b8c:	230f      	movs	r3, #15
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001b94:	230f      	movs	r3, #15
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	781b      	ldrb	r3, [r3, #0]
  }
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	b004      	add	sp, #16
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	0008      	movs	r0, r1
 8001bac:	0011      	movs	r1, r2
 8001bae:	1cbb      	adds	r3, r7, #2
 8001bb0:	1c02      	adds	r2, r0, #0
 8001bb2:	801a      	strh	r2, [r3, #0]
 8001bb4:	1c7b      	adds	r3, r7, #1
 8001bb6:	1c0a      	adds	r2, r1, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bba:	1c7b      	adds	r3, r7, #1
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d004      	beq.n	8001bcc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bc2:	1cbb      	adds	r3, r7, #2
 8001bc4:	881a      	ldrh	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bca:	e003      	b.n	8001bd4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bcc:	1cbb      	adds	r3, r7, #2
 8001bce:	881a      	ldrh	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bd4:	46c0      	nop			; (mov r8, r8)
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b002      	add	sp, #8
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e305      	b.n	80021fa <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d100      	bne.n	8001bfa <HAL_RCC_OscConfig+0x1e>
 8001bf8:	e08d      	b.n	8001d16 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bfa:	4bc5      	ldr	r3, [pc, #788]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	220c      	movs	r2, #12
 8001c00:	4013      	ands	r3, r2
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d00e      	beq.n	8001c24 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c06:	4bc2      	ldr	r3, [pc, #776]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d116      	bne.n	8001c40 <HAL_RCC_OscConfig+0x64>
 8001c12:	4bbf      	ldr	r3, [pc, #764]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	23c0      	movs	r3, #192	; 0xc0
 8001c18:	025b      	lsls	r3, r3, #9
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	025b      	lsls	r3, r3, #9
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d10d      	bne.n	8001c40 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c24:	4bba      	ldr	r3, [pc, #744]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	029b      	lsls	r3, r3, #10
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d100      	bne.n	8001c32 <HAL_RCC_OscConfig+0x56>
 8001c30:	e070      	b.n	8001d14 <HAL_RCC_OscConfig+0x138>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d000      	beq.n	8001c3c <HAL_RCC_OscConfig+0x60>
 8001c3a:	e06b      	b.n	8001d14 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e2dc      	b.n	80021fa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d107      	bne.n	8001c58 <HAL_RCC_OscConfig+0x7c>
 8001c48:	4bb1      	ldr	r3, [pc, #708]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4bb0      	ldr	r3, [pc, #704]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001c4e:	2180      	movs	r1, #128	; 0x80
 8001c50:	0249      	lsls	r1, r1, #9
 8001c52:	430a      	orrs	r2, r1
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	e02f      	b.n	8001cb8 <HAL_RCC_OscConfig+0xdc>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10c      	bne.n	8001c7a <HAL_RCC_OscConfig+0x9e>
 8001c60:	4bab      	ldr	r3, [pc, #684]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4baa      	ldr	r3, [pc, #680]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001c66:	49ab      	ldr	r1, [pc, #684]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001c68:	400a      	ands	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	4ba8      	ldr	r3, [pc, #672]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4ba7      	ldr	r3, [pc, #668]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001c72:	49a9      	ldr	r1, [pc, #676]	; (8001f18 <HAL_RCC_OscConfig+0x33c>)
 8001c74:	400a      	ands	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	e01e      	b.n	8001cb8 <HAL_RCC_OscConfig+0xdc>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d10e      	bne.n	8001ca0 <HAL_RCC_OscConfig+0xc4>
 8001c82:	4ba3      	ldr	r3, [pc, #652]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	4ba2      	ldr	r3, [pc, #648]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001c88:	2180      	movs	r1, #128	; 0x80
 8001c8a:	02c9      	lsls	r1, r1, #11
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	4b9f      	ldr	r3, [pc, #636]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b9e      	ldr	r3, [pc, #632]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001c96:	2180      	movs	r1, #128	; 0x80
 8001c98:	0249      	lsls	r1, r1, #9
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	e00b      	b.n	8001cb8 <HAL_RCC_OscConfig+0xdc>
 8001ca0:	4b9b      	ldr	r3, [pc, #620]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b9a      	ldr	r3, [pc, #616]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001ca6:	499b      	ldr	r1, [pc, #620]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001ca8:	400a      	ands	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	4b98      	ldr	r3, [pc, #608]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b97      	ldr	r3, [pc, #604]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001cb2:	4999      	ldr	r1, [pc, #612]	; (8001f18 <HAL_RCC_OscConfig+0x33c>)
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d014      	beq.n	8001cea <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff faee 	bl	80012a0 <HAL_GetTick>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cca:	f7ff fae9 	bl	80012a0 <HAL_GetTick>
 8001cce:	0002      	movs	r2, r0
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b64      	cmp	r3, #100	; 0x64
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e28e      	b.n	80021fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cdc:	4b8c      	ldr	r3, [pc, #560]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	029b      	lsls	r3, r3, #10
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0xee>
 8001ce8:	e015      	b.n	8001d16 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cea:	f7ff fad9 	bl	80012a0 <HAL_GetTick>
 8001cee:	0003      	movs	r3, r0
 8001cf0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cf4:	f7ff fad4 	bl	80012a0 <HAL_GetTick>
 8001cf8:	0002      	movs	r2, r0
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	; 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e279      	b.n	80021fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d06:	4b82      	ldr	r3, [pc, #520]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	2380      	movs	r3, #128	; 0x80
 8001d0c:	029b      	lsls	r3, r3, #10
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x118>
 8001d12:	e000      	b.n	8001d16 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d14:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d100      	bne.n	8001d22 <HAL_RCC_OscConfig+0x146>
 8001d20:	e06c      	b.n	8001dfc <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d22:	4b7b      	ldr	r3, [pc, #492]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	220c      	movs	r2, #12
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d00e      	beq.n	8001d4a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d2c:	4b78      	ldr	r3, [pc, #480]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	220c      	movs	r2, #12
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d11f      	bne.n	8001d78 <HAL_RCC_OscConfig+0x19c>
 8001d38:	4b75      	ldr	r3, [pc, #468]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	23c0      	movs	r3, #192	; 0xc0
 8001d3e:	025b      	lsls	r3, r3, #9
 8001d40:	401a      	ands	r2, r3
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d116      	bne.n	8001d78 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4a:	4b71      	ldr	r3, [pc, #452]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	4013      	ands	r3, r2
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_OscConfig+0x184>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d001      	beq.n	8001d60 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e24c      	b.n	80021fa <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d60:	4b6b      	ldr	r3, [pc, #428]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	22f8      	movs	r2, #248	; 0xf8
 8001d66:	4393      	bics	r3, r2
 8001d68:	0019      	movs	r1, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	00da      	lsls	r2, r3, #3
 8001d70:	4b67      	ldr	r3, [pc, #412]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001d72:	430a      	orrs	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d76:	e041      	b.n	8001dfc <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d024      	beq.n	8001dca <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d80:	4b63      	ldr	r3, [pc, #396]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b62      	ldr	r3, [pc, #392]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001d86:	2101      	movs	r1, #1
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fa88 	bl	80012a0 <HAL_GetTick>
 8001d90:	0003      	movs	r3, r0
 8001d92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d96:	f7ff fa83 	bl	80012a0 <HAL_GetTick>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e228      	b.n	80021fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da8:	4b59      	ldr	r3, [pc, #356]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2202      	movs	r2, #2
 8001dae:	4013      	ands	r3, r2
 8001db0:	d0f1      	beq.n	8001d96 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db2:	4b57      	ldr	r3, [pc, #348]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	22f8      	movs	r2, #248	; 0xf8
 8001db8:	4393      	bics	r3, r2
 8001dba:	0019      	movs	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	00da      	lsls	r2, r3, #3
 8001dc2:	4b53      	ldr	r3, [pc, #332]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	e018      	b.n	8001dfc <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dca:	4b51      	ldr	r3, [pc, #324]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	4b50      	ldr	r3, [pc, #320]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	438a      	bics	r2, r1
 8001dd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd6:	f7ff fa63 	bl	80012a0 <HAL_GetTick>
 8001dda:	0003      	movs	r3, r0
 8001ddc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001de0:	f7ff fa5e 	bl	80012a0 <HAL_GetTick>
 8001de4:	0002      	movs	r2, r0
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e203      	b.n	80021fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df2:	4b47      	ldr	r3, [pc, #284]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2202      	movs	r2, #2
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d1f1      	bne.n	8001de0 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2208      	movs	r2, #8
 8001e02:	4013      	ands	r3, r2
 8001e04:	d036      	beq.n	8001e74 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d019      	beq.n	8001e42 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e0e:	4b40      	ldr	r3, [pc, #256]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e12:	4b3f      	ldr	r3, [pc, #252]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001e14:	2101      	movs	r1, #1
 8001e16:	430a      	orrs	r2, r1
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1a:	f7ff fa41 	bl	80012a0 <HAL_GetTick>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e24:	f7ff fa3c 	bl	80012a0 <HAL_GetTick>
 8001e28:	0002      	movs	r2, r0
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e1e1      	b.n	80021fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e36:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d0f1      	beq.n	8001e24 <HAL_RCC_OscConfig+0x248>
 8001e40:	e018      	b.n	8001e74 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e42:	4b33      	ldr	r3, [pc, #204]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e46:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001e48:	2101      	movs	r1, #1
 8001e4a:	438a      	bics	r2, r1
 8001e4c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4e:	f7ff fa27 	bl	80012a0 <HAL_GetTick>
 8001e52:	0003      	movs	r3, r0
 8001e54:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e58:	f7ff fa22 	bl	80012a0 <HAL_GetTick>
 8001e5c:	0002      	movs	r2, r0
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e1c7      	b.n	80021fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e6a:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6e:	2202      	movs	r2, #2
 8001e70:	4013      	ands	r3, r2
 8001e72:	d1f1      	bne.n	8001e58 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2204      	movs	r2, #4
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d100      	bne.n	8001e80 <HAL_RCC_OscConfig+0x2a4>
 8001e7e:	e0b5      	b.n	8001fec <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e80:	231f      	movs	r3, #31
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e88:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001e8a:	69da      	ldr	r2, [r3, #28]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	055b      	lsls	r3, r3, #21
 8001e90:	4013      	ands	r3, r2
 8001e92:	d111      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e94:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001e96:	69da      	ldr	r2, [r3, #28]
 8001e98:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001e9a:	2180      	movs	r1, #128	; 0x80
 8001e9c:	0549      	lsls	r1, r1, #21
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	61da      	str	r2, [r3, #28]
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001ea4:	69da      	ldr	r2, [r3, #28]
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	055b      	lsls	r3, r3, #21
 8001eaa:	4013      	ands	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001eb0:	231f      	movs	r3, #31
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <HAL_RCC_OscConfig+0x340>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d11a      	bne.n	8001efa <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec4:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <HAL_RCC_OscConfig+0x340>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <HAL_RCC_OscConfig+0x340>)
 8001eca:	2180      	movs	r1, #128	; 0x80
 8001ecc:	0049      	lsls	r1, r1, #1
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed2:	f7ff f9e5 	bl	80012a0 <HAL_GetTick>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001edc:	f7ff f9e0 	bl	80012a0 <HAL_GetTick>
 8001ee0:	0002      	movs	r2, r0
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	; 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e185      	b.n	80021fa <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_RCC_OscConfig+0x340>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d10e      	bne.n	8001f20 <HAL_RCC_OscConfig+0x344>
 8001f02:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001f04:	6a1a      	ldr	r2, [r3, #32]
 8001f06:	4b02      	ldr	r3, [pc, #8]	; (8001f10 <HAL_RCC_OscConfig+0x334>)
 8001f08:	2101      	movs	r1, #1
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	621a      	str	r2, [r3, #32]
 8001f0e:	e035      	b.n	8001f7c <HAL_RCC_OscConfig+0x3a0>
 8001f10:	40021000 	.word	0x40021000
 8001f14:	fffeffff 	.word	0xfffeffff
 8001f18:	fffbffff 	.word	0xfffbffff
 8001f1c:	40007000 	.word	0x40007000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10c      	bne.n	8001f42 <HAL_RCC_OscConfig+0x366>
 8001f28:	4bb6      	ldr	r3, [pc, #728]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8001f2a:	6a1a      	ldr	r2, [r3, #32]
 8001f2c:	4bb5      	ldr	r3, [pc, #724]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8001f2e:	2101      	movs	r1, #1
 8001f30:	438a      	bics	r2, r1
 8001f32:	621a      	str	r2, [r3, #32]
 8001f34:	4bb3      	ldr	r3, [pc, #716]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8001f36:	6a1a      	ldr	r2, [r3, #32]
 8001f38:	4bb2      	ldr	r3, [pc, #712]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8001f3a:	2104      	movs	r1, #4
 8001f3c:	438a      	bics	r2, r1
 8001f3e:	621a      	str	r2, [r3, #32]
 8001f40:	e01c      	b.n	8001f7c <HAL_RCC_OscConfig+0x3a0>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b05      	cmp	r3, #5
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCC_OscConfig+0x388>
 8001f4a:	4bae      	ldr	r3, [pc, #696]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8001f4c:	6a1a      	ldr	r2, [r3, #32]
 8001f4e:	4bad      	ldr	r3, [pc, #692]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8001f50:	2104      	movs	r1, #4
 8001f52:	430a      	orrs	r2, r1
 8001f54:	621a      	str	r2, [r3, #32]
 8001f56:	4bab      	ldr	r3, [pc, #684]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8001f58:	6a1a      	ldr	r2, [r3, #32]
 8001f5a:	4baa      	ldr	r3, [pc, #680]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	621a      	str	r2, [r3, #32]
 8001f62:	e00b      	b.n	8001f7c <HAL_RCC_OscConfig+0x3a0>
 8001f64:	4ba7      	ldr	r3, [pc, #668]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8001f66:	6a1a      	ldr	r2, [r3, #32]
 8001f68:	4ba6      	ldr	r3, [pc, #664]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	438a      	bics	r2, r1
 8001f6e:	621a      	str	r2, [r3, #32]
 8001f70:	4ba4      	ldr	r3, [pc, #656]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8001f72:	6a1a      	ldr	r2, [r3, #32]
 8001f74:	4ba3      	ldr	r3, [pc, #652]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8001f76:	2104      	movs	r1, #4
 8001f78:	438a      	bics	r2, r1
 8001f7a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d014      	beq.n	8001fae <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f84:	f7ff f98c 	bl	80012a0 <HAL_GetTick>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8c:	e009      	b.n	8001fa2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7ff f987 	bl	80012a0 <HAL_GetTick>
 8001f92:	0002      	movs	r2, r0
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	4a9b      	ldr	r2, [pc, #620]	; (8002208 <HAL_RCC_OscConfig+0x62c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e12b      	b.n	80021fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa2:	4b98      	ldr	r3, [pc, #608]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x3b2>
 8001fac:	e013      	b.n	8001fd6 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fae:	f7ff f977 	bl	80012a0 <HAL_GetTick>
 8001fb2:	0003      	movs	r3, r0
 8001fb4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb6:	e009      	b.n	8001fcc <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb8:	f7ff f972 	bl	80012a0 <HAL_GetTick>
 8001fbc:	0002      	movs	r2, r0
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	4a91      	ldr	r2, [pc, #580]	; (8002208 <HAL_RCC_OscConfig+0x62c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e116      	b.n	80021fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fcc:	4b8d      	ldr	r3, [pc, #564]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fd6:	231f      	movs	r3, #31
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d105      	bne.n	8001fec <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe0:	4b88      	ldr	r3, [pc, #544]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8001fe2:	69da      	ldr	r2, [r3, #28]
 8001fe4:	4b87      	ldr	r3, [pc, #540]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8001fe6:	4989      	ldr	r1, [pc, #548]	; (800220c <HAL_RCC_OscConfig+0x630>)
 8001fe8:	400a      	ands	r2, r1
 8001fea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2210      	movs	r2, #16
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d063      	beq.n	80020be <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d12a      	bne.n	8002054 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ffe:	4b81      	ldr	r3, [pc, #516]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8002000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002002:	4b80      	ldr	r3, [pc, #512]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8002004:	2104      	movs	r1, #4
 8002006:	430a      	orrs	r2, r1
 8002008:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800200a:	4b7e      	ldr	r3, [pc, #504]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 800200c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800200e:	4b7d      	ldr	r3, [pc, #500]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8002010:	2101      	movs	r1, #1
 8002012:	430a      	orrs	r2, r1
 8002014:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002016:	f7ff f943 	bl	80012a0 <HAL_GetTick>
 800201a:	0003      	movs	r3, r0
 800201c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002020:	f7ff f93e 	bl	80012a0 <HAL_GetTick>
 8002024:	0002      	movs	r2, r0
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e0e3      	b.n	80021fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002032:	4b74      	ldr	r3, [pc, #464]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8002034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002036:	2202      	movs	r2, #2
 8002038:	4013      	ands	r3, r2
 800203a:	d0f1      	beq.n	8002020 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800203c:	4b71      	ldr	r3, [pc, #452]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 800203e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002040:	22f8      	movs	r2, #248	; 0xf8
 8002042:	4393      	bics	r3, r2
 8002044:	0019      	movs	r1, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	00da      	lsls	r2, r3, #3
 800204c:	4b6d      	ldr	r3, [pc, #436]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 800204e:	430a      	orrs	r2, r1
 8002050:	635a      	str	r2, [r3, #52]	; 0x34
 8002052:	e034      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	3305      	adds	r3, #5
 800205a:	d111      	bne.n	8002080 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800205c:	4b69      	ldr	r3, [pc, #420]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 800205e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002060:	4b68      	ldr	r3, [pc, #416]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8002062:	2104      	movs	r1, #4
 8002064:	438a      	bics	r2, r1
 8002066:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002068:	4b66      	ldr	r3, [pc, #408]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 800206a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206c:	22f8      	movs	r2, #248	; 0xf8
 800206e:	4393      	bics	r3, r2
 8002070:	0019      	movs	r1, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	00da      	lsls	r2, r3, #3
 8002078:	4b62      	ldr	r3, [pc, #392]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 800207a:	430a      	orrs	r2, r1
 800207c:	635a      	str	r2, [r3, #52]	; 0x34
 800207e:	e01e      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002080:	4b60      	ldr	r3, [pc, #384]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8002082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002084:	4b5f      	ldr	r3, [pc, #380]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8002086:	2104      	movs	r1, #4
 8002088:	430a      	orrs	r2, r1
 800208a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800208c:	4b5d      	ldr	r3, [pc, #372]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 800208e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002090:	4b5c      	ldr	r3, [pc, #368]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8002092:	2101      	movs	r1, #1
 8002094:	438a      	bics	r2, r1
 8002096:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002098:	f7ff f902 	bl	80012a0 <HAL_GetTick>
 800209c:	0003      	movs	r3, r0
 800209e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020a2:	f7ff f8fd 	bl	80012a0 <HAL_GetTick>
 80020a6:	0002      	movs	r2, r0
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e0a2      	b.n	80021fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020b4:	4b53      	ldr	r3, [pc, #332]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 80020b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b8:	2202      	movs	r2, #2
 80020ba:	4013      	ands	r3, r2
 80020bc:	d1f1      	bne.n	80020a2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d100      	bne.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
 80020c6:	e097      	b.n	80021f8 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020c8:	4b4e      	ldr	r3, [pc, #312]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	220c      	movs	r2, #12
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d100      	bne.n	80020d6 <HAL_RCC_OscConfig+0x4fa>
 80020d4:	e06b      	b.n	80021ae <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d14c      	bne.n	8002178 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020de:	4b49      	ldr	r3, [pc, #292]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4b48      	ldr	r3, [pc, #288]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 80020e4:	494a      	ldr	r1, [pc, #296]	; (8002210 <HAL_RCC_OscConfig+0x634>)
 80020e6:	400a      	ands	r2, r1
 80020e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ea:	f7ff f8d9 	bl	80012a0 <HAL_GetTick>
 80020ee:	0003      	movs	r3, r0
 80020f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f4:	f7ff f8d4 	bl	80012a0 <HAL_GetTick>
 80020f8:	0002      	movs	r2, r0
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e079      	b.n	80021fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002106:	4b3f      	ldr	r3, [pc, #252]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	049b      	lsls	r3, r3, #18
 800210e:	4013      	ands	r3, r2
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002112:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8002114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002116:	220f      	movs	r2, #15
 8002118:	4393      	bics	r3, r2
 800211a:	0019      	movs	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002120:	4b38      	ldr	r3, [pc, #224]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8002122:	430a      	orrs	r2, r1
 8002124:	62da      	str	r2, [r3, #44]	; 0x2c
 8002126:	4b37      	ldr	r3, [pc, #220]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4a3a      	ldr	r2, [pc, #232]	; (8002214 <HAL_RCC_OscConfig+0x638>)
 800212c:	4013      	ands	r3, r2
 800212e:	0019      	movs	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	431a      	orrs	r2, r3
 800213a:	4b32      	ldr	r3, [pc, #200]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 800213c:	430a      	orrs	r2, r1
 800213e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002140:	4b30      	ldr	r3, [pc, #192]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 8002146:	2180      	movs	r1, #128	; 0x80
 8002148:	0449      	lsls	r1, r1, #17
 800214a:	430a      	orrs	r2, r1
 800214c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214e:	f7ff f8a7 	bl	80012a0 <HAL_GetTick>
 8002152:	0003      	movs	r3, r0
 8002154:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002158:	f7ff f8a2 	bl	80012a0 <HAL_GetTick>
 800215c:	0002      	movs	r2, r0
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e047      	b.n	80021fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800216a:	4b26      	ldr	r3, [pc, #152]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	049b      	lsls	r3, r3, #18
 8002172:	4013      	ands	r3, r2
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x57c>
 8002176:	e03f      	b.n	80021f8 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002178:	4b22      	ldr	r3, [pc, #136]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b21      	ldr	r3, [pc, #132]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 800217e:	4924      	ldr	r1, [pc, #144]	; (8002210 <HAL_RCC_OscConfig+0x634>)
 8002180:	400a      	ands	r2, r1
 8002182:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff f88c 	bl	80012a0 <HAL_GetTick>
 8002188:	0003      	movs	r3, r0
 800218a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218e:	f7ff f887 	bl	80012a0 <HAL_GetTick>
 8002192:	0002      	movs	r2, r0
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e02c      	b.n	80021fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a0:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	049b      	lsls	r3, r3, #18
 80021a8:	4013      	ands	r3, r2
 80021aa:	d1f0      	bne.n	800218e <HAL_RCC_OscConfig+0x5b2>
 80021ac:	e024      	b.n	80021f8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d101      	bne.n	80021ba <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e01f      	b.n	80021fa <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80021ba:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80021c0:	4b10      	ldr	r3, [pc, #64]	; (8002204 <HAL_RCC_OscConfig+0x628>)
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	23c0      	movs	r3, #192	; 0xc0
 80021ca:	025b      	lsls	r3, r3, #9
 80021cc:	401a      	ands	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d10e      	bne.n	80021f4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	220f      	movs	r2, #15
 80021da:	401a      	ands	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d107      	bne.n	80021f4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	23f0      	movs	r3, #240	; 0xf0
 80021e8:	039b      	lsls	r3, r3, #14
 80021ea:	401a      	ands	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d001      	beq.n	80021f8 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	0018      	movs	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	b008      	add	sp, #32
 8002200:	bd80      	pop	{r7, pc}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	40021000 	.word	0x40021000
 8002208:	00001388 	.word	0x00001388
 800220c:	efffffff 	.word	0xefffffff
 8002210:	feffffff 	.word	0xfeffffff
 8002214:	ffc27fff 	.word	0xffc27fff

08002218 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0b3      	b.n	8002394 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800222c:	4b5b      	ldr	r3, [pc, #364]	; (800239c <HAL_RCC_ClockConfig+0x184>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2201      	movs	r2, #1
 8002232:	4013      	ands	r3, r2
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d911      	bls.n	800225e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b58      	ldr	r3, [pc, #352]	; (800239c <HAL_RCC_ClockConfig+0x184>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2201      	movs	r2, #1
 8002240:	4393      	bics	r3, r2
 8002242:	0019      	movs	r1, r3
 8002244:	4b55      	ldr	r3, [pc, #340]	; (800239c <HAL_RCC_ClockConfig+0x184>)
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800224c:	4b53      	ldr	r3, [pc, #332]	; (800239c <HAL_RCC_ClockConfig+0x184>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2201      	movs	r2, #1
 8002252:	4013      	ands	r3, r2
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d001      	beq.n	800225e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e09a      	b.n	8002394 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2202      	movs	r2, #2
 8002264:	4013      	ands	r3, r2
 8002266:	d015      	beq.n	8002294 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2204      	movs	r2, #4
 800226e:	4013      	ands	r3, r2
 8002270:	d006      	beq.n	8002280 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002272:	4b4b      	ldr	r3, [pc, #300]	; (80023a0 <HAL_RCC_ClockConfig+0x188>)
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	4b4a      	ldr	r3, [pc, #296]	; (80023a0 <HAL_RCC_ClockConfig+0x188>)
 8002278:	21e0      	movs	r1, #224	; 0xe0
 800227a:	00c9      	lsls	r1, r1, #3
 800227c:	430a      	orrs	r2, r1
 800227e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002280:	4b47      	ldr	r3, [pc, #284]	; (80023a0 <HAL_RCC_ClockConfig+0x188>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	22f0      	movs	r2, #240	; 0xf0
 8002286:	4393      	bics	r3, r2
 8002288:	0019      	movs	r1, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	4b44      	ldr	r3, [pc, #272]	; (80023a0 <HAL_RCC_ClockConfig+0x188>)
 8002290:	430a      	orrs	r2, r1
 8002292:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2201      	movs	r2, #1
 800229a:	4013      	ands	r3, r2
 800229c:	d040      	beq.n	8002320 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a6:	4b3e      	ldr	r3, [pc, #248]	; (80023a0 <HAL_RCC_ClockConfig+0x188>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	029b      	lsls	r3, r3, #10
 80022ae:	4013      	ands	r3, r2
 80022b0:	d114      	bne.n	80022dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e06e      	b.n	8002394 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d107      	bne.n	80022ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022be:	4b38      	ldr	r3, [pc, #224]	; (80023a0 <HAL_RCC_ClockConfig+0x188>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	049b      	lsls	r3, r3, #18
 80022c6:	4013      	ands	r3, r2
 80022c8:	d108      	bne.n	80022dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e062      	b.n	8002394 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ce:	4b34      	ldr	r3, [pc, #208]	; (80023a0 <HAL_RCC_ClockConfig+0x188>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2202      	movs	r2, #2
 80022d4:	4013      	ands	r3, r2
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e05b      	b.n	8002394 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022dc:	4b30      	ldr	r3, [pc, #192]	; (80023a0 <HAL_RCC_ClockConfig+0x188>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2203      	movs	r2, #3
 80022e2:	4393      	bics	r3, r2
 80022e4:	0019      	movs	r1, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <HAL_RCC_ClockConfig+0x188>)
 80022ec:	430a      	orrs	r2, r1
 80022ee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022f0:	f7fe ffd6 	bl	80012a0 <HAL_GetTick>
 80022f4:	0003      	movs	r3, r0
 80022f6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f8:	e009      	b.n	800230e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fa:	f7fe ffd1 	bl	80012a0 <HAL_GetTick>
 80022fe:	0002      	movs	r2, r0
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	4a27      	ldr	r2, [pc, #156]	; (80023a4 <HAL_RCC_ClockConfig+0x18c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e042      	b.n	8002394 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230e:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <HAL_RCC_ClockConfig+0x188>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	220c      	movs	r2, #12
 8002314:	401a      	ands	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	429a      	cmp	r2, r3
 800231e:	d1ec      	bne.n	80022fa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002320:	4b1e      	ldr	r3, [pc, #120]	; (800239c <HAL_RCC_ClockConfig+0x184>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2201      	movs	r2, #1
 8002326:	4013      	ands	r3, r2
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d211      	bcs.n	8002352 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232e:	4b1b      	ldr	r3, [pc, #108]	; (800239c <HAL_RCC_ClockConfig+0x184>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2201      	movs	r2, #1
 8002334:	4393      	bics	r3, r2
 8002336:	0019      	movs	r1, r3
 8002338:	4b18      	ldr	r3, [pc, #96]	; (800239c <HAL_RCC_ClockConfig+0x184>)
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002340:	4b16      	ldr	r3, [pc, #88]	; (800239c <HAL_RCC_ClockConfig+0x184>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2201      	movs	r2, #1
 8002346:	4013      	ands	r3, r2
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d001      	beq.n	8002352 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e020      	b.n	8002394 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2204      	movs	r2, #4
 8002358:	4013      	ands	r3, r2
 800235a:	d009      	beq.n	8002370 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800235c:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <HAL_RCC_ClockConfig+0x188>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4a11      	ldr	r2, [pc, #68]	; (80023a8 <HAL_RCC_ClockConfig+0x190>)
 8002362:	4013      	ands	r3, r2
 8002364:	0019      	movs	r1, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <HAL_RCC_ClockConfig+0x188>)
 800236c:	430a      	orrs	r2, r1
 800236e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002370:	f000 f820 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8002374:	0001      	movs	r1, r0
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <HAL_RCC_ClockConfig+0x188>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	091b      	lsrs	r3, r3, #4
 800237c:	220f      	movs	r2, #15
 800237e:	4013      	ands	r3, r2
 8002380:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <HAL_RCC_ClockConfig+0x194>)
 8002382:	5cd3      	ldrb	r3, [r2, r3]
 8002384:	000a      	movs	r2, r1
 8002386:	40da      	lsrs	r2, r3
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <HAL_RCC_ClockConfig+0x198>)
 800238a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800238c:	2000      	movs	r0, #0
 800238e:	f7fe ff41 	bl	8001214 <HAL_InitTick>
  
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	0018      	movs	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	b004      	add	sp, #16
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40022000 	.word	0x40022000
 80023a0:	40021000 	.word	0x40021000
 80023a4:	00001388 	.word	0x00001388
 80023a8:	fffff8ff 	.word	0xfffff8ff
 80023ac:	08003b34 	.word	0x08003b34
 80023b0:	20000004 	.word	0x20000004

080023b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b4:	b590      	push	{r4, r7, lr}
 80023b6:	b08f      	sub	sp, #60	; 0x3c
 80023b8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80023ba:	2314      	movs	r3, #20
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	4a2c      	ldr	r2, [pc, #176]	; (8002470 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80023c2:	c313      	stmia	r3!, {r0, r1, r4}
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	4a2a      	ldr	r2, [pc, #168]	; (8002474 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80023ce:	c313      	stmia	r3!, {r0, r1, r4}
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023d8:	2300      	movs	r3, #0
 80023da:	62bb      	str	r3, [r7, #40]	; 0x28
 80023dc:	2300      	movs	r3, #0
 80023de:	637b      	str	r3, [r7, #52]	; 0x34
 80023e0:	2300      	movs	r3, #0
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80023e8:	4b23      	ldr	r3, [pc, #140]	; (8002478 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f0:	220c      	movs	r2, #12
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d002      	beq.n	80023fe <HAL_RCC_GetSysClockFreq+0x4a>
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d003      	beq.n	8002404 <HAL_RCC_GetSysClockFreq+0x50>
 80023fc:	e02f      	b.n	800245e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023fe:	4b1f      	ldr	r3, [pc, #124]	; (800247c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002400:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002402:	e02f      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002406:	0c9b      	lsrs	r3, r3, #18
 8002408:	220f      	movs	r2, #15
 800240a:	4013      	ands	r3, r2
 800240c:	2214      	movs	r2, #20
 800240e:	18ba      	adds	r2, r7, r2
 8002410:	5cd3      	ldrb	r3, [r2, r3]
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002414:	4b18      	ldr	r3, [pc, #96]	; (8002478 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	220f      	movs	r2, #15
 800241a:	4013      	ands	r3, r2
 800241c:	1d3a      	adds	r2, r7, #4
 800241e:	5cd3      	ldrb	r3, [r2, r3]
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002422:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002424:	23c0      	movs	r3, #192	; 0xc0
 8002426:	025b      	lsls	r3, r3, #9
 8002428:	401a      	ands	r2, r3
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	025b      	lsls	r3, r3, #9
 800242e:	429a      	cmp	r2, r3
 8002430:	d109      	bne.n	8002446 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002434:	4811      	ldr	r0, [pc, #68]	; (800247c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002436:	f7fd fe65 	bl	8000104 <__udivsi3>
 800243a:	0003      	movs	r3, r0
 800243c:	001a      	movs	r2, r3
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	4353      	muls	r3, r2
 8002442:	637b      	str	r3, [r7, #52]	; 0x34
 8002444:	e008      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002448:	480c      	ldr	r0, [pc, #48]	; (800247c <HAL_RCC_GetSysClockFreq+0xc8>)
 800244a:	f7fd fe5b 	bl	8000104 <__udivsi3>
 800244e:	0003      	movs	r3, r0
 8002450:	001a      	movs	r2, r3
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	4353      	muls	r3, r2
 8002456:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800245c:	e002      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800245e:	4b07      	ldr	r3, [pc, #28]	; (800247c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002460:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002462:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002466:	0018      	movs	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	b00f      	add	sp, #60	; 0x3c
 800246c:	bd90      	pop	{r4, r7, pc}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	08003b14 	.word	0x08003b14
 8002474:	08003b24 	.word	0x08003b24
 8002478:	40021000 	.word	0x40021000
 800247c:	007a1200 	.word	0x007a1200

08002480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002484:	4b02      	ldr	r3, [pc, #8]	; (8002490 <HAL_RCC_GetHCLKFreq+0x10>)
 8002486:	681b      	ldr	r3, [r3, #0]
}
 8002488:	0018      	movs	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	20000004 	.word	0x20000004

08002494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002498:	f7ff fff2 	bl	8002480 <HAL_RCC_GetHCLKFreq>
 800249c:	0001      	movs	r1, r0
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	0a1b      	lsrs	r3, r3, #8
 80024a4:	2207      	movs	r2, #7
 80024a6:	4013      	ands	r3, r2
 80024a8:	4a04      	ldr	r2, [pc, #16]	; (80024bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	40d9      	lsrs	r1, r3
 80024ae:	000b      	movs	r3, r1
}    
 80024b0:	0018      	movs	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	40021000 	.word	0x40021000
 80024bc:	08003b44 	.word	0x08003b44

080024c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2380      	movs	r3, #128	; 0x80
 80024d6:	025b      	lsls	r3, r3, #9
 80024d8:	4013      	ands	r3, r2
 80024da:	d100      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80024dc:	e08f      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80024de:	2317      	movs	r3, #23
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024e6:	4b57      	ldr	r3, [pc, #348]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024e8:	69da      	ldr	r2, [r3, #28]
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	055b      	lsls	r3, r3, #21
 80024ee:	4013      	ands	r3, r2
 80024f0:	d111      	bne.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024f2:	4b54      	ldr	r3, [pc, #336]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024f4:	69da      	ldr	r2, [r3, #28]
 80024f6:	4b53      	ldr	r3, [pc, #332]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024f8:	2180      	movs	r1, #128	; 0x80
 80024fa:	0549      	lsls	r1, r1, #21
 80024fc:	430a      	orrs	r2, r1
 80024fe:	61da      	str	r2, [r3, #28]
 8002500:	4b50      	ldr	r3, [pc, #320]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002502:	69da      	ldr	r2, [r3, #28]
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	055b      	lsls	r3, r3, #21
 8002508:	4013      	ands	r3, r2
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800250e:	2317      	movs	r3, #23
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002516:	4b4c      	ldr	r3, [pc, #304]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	2380      	movs	r3, #128	; 0x80
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4013      	ands	r3, r2
 8002520:	d11a      	bne.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002522:	4b49      	ldr	r3, [pc, #292]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	4b48      	ldr	r3, [pc, #288]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002528:	2180      	movs	r1, #128	; 0x80
 800252a:	0049      	lsls	r1, r1, #1
 800252c:	430a      	orrs	r2, r1
 800252e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002530:	f7fe feb6 	bl	80012a0 <HAL_GetTick>
 8002534:	0003      	movs	r3, r0
 8002536:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002538:	e008      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253a:	f7fe feb1 	bl	80012a0 <HAL_GetTick>
 800253e:	0002      	movs	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b64      	cmp	r3, #100	; 0x64
 8002546:	d901      	bls.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e077      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254c:	4b3e      	ldr	r3, [pc, #248]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4013      	ands	r3, r2
 8002556:	d0f0      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002558:	4b3a      	ldr	r3, [pc, #232]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800255a:	6a1a      	ldr	r2, [r3, #32]
 800255c:	23c0      	movs	r3, #192	; 0xc0
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4013      	ands	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d034      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	23c0      	movs	r3, #192	; 0xc0
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4013      	ands	r3, r2
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	429a      	cmp	r2, r3
 8002578:	d02c      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800257a:	4b32      	ldr	r3, [pc, #200]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	4a33      	ldr	r2, [pc, #204]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002580:	4013      	ands	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002584:	4b2f      	ldr	r3, [pc, #188]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002586:	6a1a      	ldr	r2, [r3, #32]
 8002588:	4b2e      	ldr	r3, [pc, #184]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800258a:	2180      	movs	r1, #128	; 0x80
 800258c:	0249      	lsls	r1, r1, #9
 800258e:	430a      	orrs	r2, r1
 8002590:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002592:	4b2c      	ldr	r3, [pc, #176]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002594:	6a1a      	ldr	r2, [r3, #32]
 8002596:	4b2b      	ldr	r3, [pc, #172]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002598:	492d      	ldr	r1, [pc, #180]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800259a:	400a      	ands	r2, r1
 800259c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800259e:	4b29      	ldr	r3, [pc, #164]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2201      	movs	r2, #1
 80025a8:	4013      	ands	r3, r2
 80025aa:	d013      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7fe fe78 	bl	80012a0 <HAL_GetTick>
 80025b0:	0003      	movs	r3, r0
 80025b2:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b4:	e009      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b6:	f7fe fe73 	bl	80012a0 <HAL_GetTick>
 80025ba:	0002      	movs	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	4a24      	ldr	r2, [pc, #144]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d901      	bls.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e038      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ca:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	2202      	movs	r2, #2
 80025d0:	4013      	ands	r3, r2
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	4a1c      	ldr	r2, [pc, #112]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80025da:	4013      	ands	r3, r2
 80025dc:	0019      	movs	r1, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	4b18      	ldr	r3, [pc, #96]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025e4:	430a      	orrs	r2, r1
 80025e6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025e8:	2317      	movs	r3, #23
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d105      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f2:	4b14      	ldr	r3, [pc, #80]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025f4:	69da      	ldr	r2, [r3, #28]
 80025f6:	4b13      	ldr	r3, [pc, #76]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025f8:	4917      	ldr	r1, [pc, #92]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80025fa:	400a      	ands	r2, r1
 80025fc:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2201      	movs	r2, #1
 8002604:	4013      	ands	r3, r2
 8002606:	d009      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002608:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	2203      	movs	r2, #3
 800260e:	4393      	bics	r3, r2
 8002610:	0019      	movs	r1, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002618:	430a      	orrs	r2, r1
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2220      	movs	r2, #32
 8002622:	4013      	ands	r3, r2
 8002624:	d009      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002626:	4b07      	ldr	r3, [pc, #28]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	2210      	movs	r2, #16
 800262c:	4393      	bics	r3, r2
 800262e:	0019      	movs	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002636:	430a      	orrs	r2, r1
 8002638:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	0018      	movs	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	b006      	add	sp, #24
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40021000 	.word	0x40021000
 8002648:	40007000 	.word	0x40007000
 800264c:	fffffcff 	.word	0xfffffcff
 8002650:	fffeffff 	.word	0xfffeffff
 8002654:	00001388 	.word	0x00001388
 8002658:	efffffff 	.word	0xefffffff

0800265c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e08a      	b.n	8002784 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	225d      	movs	r2, #93	; 0x5d
 8002678:	5c9b      	ldrb	r3, [r3, r2]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d107      	bne.n	8002690 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	225c      	movs	r2, #92	; 0x5c
 8002684:	2100      	movs	r1, #0
 8002686:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	0018      	movs	r0, r3
 800268c:	f7fe fbb6 	bl	8000dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	225d      	movs	r2, #93	; 0x5d
 8002694:	2102      	movs	r1, #2
 8002696:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2140      	movs	r1, #64	; 0x40
 80026a4:	438a      	bics	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	23e0      	movs	r3, #224	; 0xe0
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d902      	bls.n	80026ba <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	e002      	b.n	80026c0 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	015b      	lsls	r3, r3, #5
 80026be:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	23f0      	movs	r3, #240	; 0xf0
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d008      	beq.n	80026de <HAL_SPI_Init+0x82>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	23e0      	movs	r3, #224	; 0xe0
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d002      	beq.n	80026de <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10c      	bne.n	8002700 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	23e0      	movs	r3, #224	; 0xe0
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d903      	bls.n	80026fa <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2202      	movs	r2, #2
 80026f6:	631a      	str	r2, [r3, #48]	; 0x30
 80026f8:	e002      	b.n	8002700 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6999      	ldr	r1, [r3, #24]
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	400b      	ands	r3, r1
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	431a      	orrs	r2, r3
 800272e:	0011      	movs	r1, r2
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	0c1b      	lsrs	r3, r3, #16
 8002742:	2204      	movs	r2, #4
 8002744:	401a      	ands	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	431a      	orrs	r2, r3
 8002758:	0011      	movs	r1, r2
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	430a      	orrs	r2, r1
 8002762:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	69da      	ldr	r2, [r3, #28]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4907      	ldr	r1, [pc, #28]	; (800278c <HAL_SPI_Init+0x130>)
 8002770:	400a      	ands	r2, r1
 8002772:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	225d      	movs	r2, #93	; 0x5d
 800277e:	2101      	movs	r1, #1
 8002780:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	0018      	movs	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	b004      	add	sp, #16
 800278a:	bd80      	pop	{r7, pc}
 800278c:	fffff7ff 	.word	0xfffff7ff

08002790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e01e      	b.n	80027e0 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	223d      	movs	r2, #61	; 0x3d
 80027a6:	5c9b      	ldrb	r3, [r3, r2]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d107      	bne.n	80027be <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	223c      	movs	r2, #60	; 0x3c
 80027b2:	2100      	movs	r1, #0
 80027b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	0018      	movs	r0, r3
 80027ba:	f7fe fb85 	bl	8000ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	223d      	movs	r2, #61	; 0x3d
 80027c2:	2102      	movs	r1, #2
 80027c4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3304      	adds	r3, #4
 80027ce:	0019      	movs	r1, r3
 80027d0:	0010      	movs	r0, r2
 80027d2:	f000 f9ff 	bl	8002bd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	223d      	movs	r2, #61	; 0x3d
 80027da:	2101      	movs	r1, #1
 80027dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	0018      	movs	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b002      	add	sp, #8
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e01e      	b.n	8002838 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	223d      	movs	r2, #61	; 0x3d
 80027fe:	5c9b      	ldrb	r3, [r3, r2]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d107      	bne.n	8002816 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	223c      	movs	r2, #60	; 0x3c
 800280a:	2100      	movs	r1, #0
 800280c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	0018      	movs	r0, r3
 8002812:	f000 f815 	bl	8002840 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	223d      	movs	r2, #61	; 0x3d
 800281a:	2102      	movs	r1, #2
 800281c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3304      	adds	r3, #4
 8002826:	0019      	movs	r1, r3
 8002828:	0010      	movs	r0, r2
 800282a:	f000 f9d3 	bl	8002bd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	223d      	movs	r2, #61	; 0x3d
 8002832:	2101      	movs	r1, #1
 8002834:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	0018      	movs	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	b002      	add	sp, #8
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	b002      	add	sp, #8
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6839      	ldr	r1, [r7, #0]
 8002860:	2201      	movs	r2, #1
 8002862:	0018      	movs	r0, r3
 8002864:	f000 fcc2 	bl	80031ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1a      	ldr	r2, [pc, #104]	; (80028d8 <HAL_TIM_PWM_Start+0x88>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00e      	beq.n	8002890 <HAL_TIM_PWM_Start+0x40>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a19      	ldr	r2, [pc, #100]	; (80028dc <HAL_TIM_PWM_Start+0x8c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d009      	beq.n	8002890 <HAL_TIM_PWM_Start+0x40>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a17      	ldr	r2, [pc, #92]	; (80028e0 <HAL_TIM_PWM_Start+0x90>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d004      	beq.n	8002890 <HAL_TIM_PWM_Start+0x40>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a16      	ldr	r2, [pc, #88]	; (80028e4 <HAL_TIM_PWM_Start+0x94>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d101      	bne.n	8002894 <HAL_TIM_PWM_Start+0x44>
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <HAL_TIM_PWM_Start+0x46>
 8002894:	2300      	movs	r3, #0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d008      	beq.n	80028ac <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2180      	movs	r1, #128	; 0x80
 80028a6:	0209      	lsls	r1, r1, #8
 80028a8:	430a      	orrs	r2, r1
 80028aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2207      	movs	r2, #7
 80028b4:	4013      	ands	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d007      	beq.n	80028ce <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2101      	movs	r1, #1
 80028ca:	430a      	orrs	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	0018      	movs	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b004      	add	sp, #16
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40014000 	.word	0x40014000
 80028e0:	40014400 	.word	0x40014400
 80028e4:	40014800 	.word	0x40014800

080028e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	223c      	movs	r2, #60	; 0x3c
 80028f8:	5c9b      	ldrb	r3, [r3, r2]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80028fe:	2302      	movs	r3, #2
 8002900:	e0a4      	b.n	8002a4c <HAL_TIM_PWM_ConfigChannel+0x164>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	223c      	movs	r2, #60	; 0x3c
 8002906:	2101      	movs	r1, #1
 8002908:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	223d      	movs	r2, #61	; 0x3d
 800290e:	2102      	movs	r1, #2
 8002910:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b04      	cmp	r3, #4
 8002916:	d029      	beq.n	800296c <HAL_TIM_PWM_ConfigChannel+0x84>
 8002918:	d802      	bhi.n	8002920 <HAL_TIM_PWM_ConfigChannel+0x38>
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800291e:	e08c      	b.n	8002a3a <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8002920:	2b08      	cmp	r3, #8
 8002922:	d046      	beq.n	80029b2 <HAL_TIM_PWM_ConfigChannel+0xca>
 8002924:	2b0c      	cmp	r3, #12
 8002926:	d065      	beq.n	80029f4 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002928:	e087      	b.n	8002a3a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	0011      	movs	r1, r2
 8002932:	0018      	movs	r0, r3
 8002934:	f000 f9c4 	bl	8002cc0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699a      	ldr	r2, [r3, #24]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2108      	movs	r1, #8
 8002944:	430a      	orrs	r2, r1
 8002946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699a      	ldr	r2, [r3, #24]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2104      	movs	r1, #4
 8002954:	438a      	bics	r2, r1
 8002956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6999      	ldr	r1, [r3, #24]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	619a      	str	r2, [r3, #24]
      break;
 800296a:	e066      	b.n	8002a3a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	0011      	movs	r1, r2
 8002974:	0018      	movs	r0, r3
 8002976:	f000 fa2b 	bl	8002dd0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699a      	ldr	r2, [r3, #24]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2180      	movs	r1, #128	; 0x80
 8002986:	0109      	lsls	r1, r1, #4
 8002988:	430a      	orrs	r2, r1
 800298a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699a      	ldr	r2, [r3, #24]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	492f      	ldr	r1, [pc, #188]	; (8002a54 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002998:	400a      	ands	r2, r1
 800299a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6999      	ldr	r1, [r3, #24]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	021a      	lsls	r2, r3, #8
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	619a      	str	r2, [r3, #24]
      break;
 80029b0:	e043      	b.n	8002a3a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	0011      	movs	r1, r2
 80029ba:	0018      	movs	r0, r3
 80029bc:	f000 fa8c 	bl	8002ed8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	69da      	ldr	r2, [r3, #28]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2108      	movs	r1, #8
 80029cc:	430a      	orrs	r2, r1
 80029ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	69da      	ldr	r2, [r3, #28]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2104      	movs	r1, #4
 80029dc:	438a      	bics	r2, r1
 80029de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	69d9      	ldr	r1, [r3, #28]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	61da      	str	r2, [r3, #28]
      break;
 80029f2:	e022      	b.n	8002a3a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	0011      	movs	r1, r2
 80029fc:	0018      	movs	r0, r3
 80029fe:	f000 faf1 	bl	8002fe4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	69da      	ldr	r2, [r3, #28]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2180      	movs	r1, #128	; 0x80
 8002a0e:	0109      	lsls	r1, r1, #4
 8002a10:	430a      	orrs	r2, r1
 8002a12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69da      	ldr	r2, [r3, #28]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	490d      	ldr	r1, [pc, #52]	; (8002a54 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002a20:	400a      	ands	r2, r1
 8002a22:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	69d9      	ldr	r1, [r3, #28]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	021a      	lsls	r2, r3, #8
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	61da      	str	r2, [r3, #28]
      break;
 8002a38:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	223d      	movs	r2, #61	; 0x3d
 8002a3e:	2101      	movs	r1, #1
 8002a40:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	223c      	movs	r2, #60	; 0x3c
 8002a46:	2100      	movs	r1, #0
 8002a48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b004      	add	sp, #16
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	fffffbff 	.word	0xfffffbff

08002a58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	223c      	movs	r2, #60	; 0x3c
 8002a66:	5c9b      	ldrb	r3, [r3, r2]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_TIM_ConfigClockSource+0x18>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e0ab      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x170>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	223c      	movs	r2, #60	; 0x3c
 8002a74:	2101      	movs	r1, #1
 8002a76:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	223d      	movs	r2, #61	; 0x3d
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2277      	movs	r2, #119	; 0x77
 8002a8c:	4393      	bics	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4a4f      	ldr	r2, [pc, #316]	; (8002bd0 <HAL_TIM_ConfigClockSource+0x178>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b40      	cmp	r3, #64	; 0x40
 8002aa6:	d100      	bne.n	8002aaa <HAL_TIM_ConfigClockSource+0x52>
 8002aa8:	e06b      	b.n	8002b82 <HAL_TIM_ConfigClockSource+0x12a>
 8002aaa:	d80e      	bhi.n	8002aca <HAL_TIM_ConfigClockSource+0x72>
 8002aac:	2b10      	cmp	r3, #16
 8002aae:	d100      	bne.n	8002ab2 <HAL_TIM_ConfigClockSource+0x5a>
 8002ab0:	e077      	b.n	8002ba2 <HAL_TIM_ConfigClockSource+0x14a>
 8002ab2:	d803      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x64>
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d100      	bne.n	8002aba <HAL_TIM_ConfigClockSource+0x62>
 8002ab8:	e073      	b.n	8002ba2 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002aba:	e07c      	b.n	8002bb6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002abc:	2b20      	cmp	r3, #32
 8002abe:	d100      	bne.n	8002ac2 <HAL_TIM_ConfigClockSource+0x6a>
 8002ac0:	e06f      	b.n	8002ba2 <HAL_TIM_ConfigClockSource+0x14a>
 8002ac2:	2b30      	cmp	r3, #48	; 0x30
 8002ac4:	d100      	bne.n	8002ac8 <HAL_TIM_ConfigClockSource+0x70>
 8002ac6:	e06c      	b.n	8002ba2 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8002ac8:	e075      	b.n	8002bb6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002aca:	2b70      	cmp	r3, #112	; 0x70
 8002acc:	d00e      	beq.n	8002aec <HAL_TIM_ConfigClockSource+0x94>
 8002ace:	d804      	bhi.n	8002ada <HAL_TIM_ConfigClockSource+0x82>
 8002ad0:	2b50      	cmp	r3, #80	; 0x50
 8002ad2:	d036      	beq.n	8002b42 <HAL_TIM_ConfigClockSource+0xea>
 8002ad4:	2b60      	cmp	r3, #96	; 0x60
 8002ad6:	d044      	beq.n	8002b62 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002ad8:	e06d      	b.n	8002bb6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002ada:	2280      	movs	r2, #128	; 0x80
 8002adc:	0152      	lsls	r2, r2, #5
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d068      	beq.n	8002bb4 <HAL_TIM_ConfigClockSource+0x15c>
 8002ae2:	2280      	movs	r2, #128	; 0x80
 8002ae4:	0192      	lsls	r2, r2, #6
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d017      	beq.n	8002b1a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8002aea:	e064      	b.n	8002bb6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6818      	ldr	r0, [r3, #0]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	6899      	ldr	r1, [r3, #8]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f000 fb56 	bl	80031ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2277      	movs	r2, #119	; 0x77
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	609a      	str	r2, [r3, #8]
      break;
 8002b18:	e04d      	b.n	8002bb6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	6899      	ldr	r1, [r3, #8]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f000 fb3f 	bl	80031ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2180      	movs	r1, #128	; 0x80
 8002b3a:	01c9      	lsls	r1, r1, #7
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	609a      	str	r2, [r3, #8]
      break;
 8002b40:	e039      	b.n	8002bb6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	6859      	ldr	r1, [r3, #4]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	001a      	movs	r2, r3
 8002b50:	f000 fab2 	bl	80030b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2150      	movs	r1, #80	; 0x50
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f000 fb0c 	bl	8003178 <TIM_ITRx_SetConfig>
      break;
 8002b60:	e029      	b.n	8002bb6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	6859      	ldr	r1, [r3, #4]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	001a      	movs	r2, r3
 8002b70:	f000 fad0 	bl	8003114 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2160      	movs	r1, #96	; 0x60
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f000 fafc 	bl	8003178 <TIM_ITRx_SetConfig>
      break;
 8002b80:	e019      	b.n	8002bb6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	6859      	ldr	r1, [r3, #4]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	001a      	movs	r2, r3
 8002b90:	f000 fa92 	bl	80030b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2140      	movs	r1, #64	; 0x40
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f000 faec 	bl	8003178 <TIM_ITRx_SetConfig>
      break;
 8002ba0:	e009      	b.n	8002bb6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	0019      	movs	r1, r3
 8002bac:	0010      	movs	r0, r2
 8002bae:	f000 fae3 	bl	8003178 <TIM_ITRx_SetConfig>
      break;
 8002bb2:	e000      	b.n	8002bb6 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002bb4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	223d      	movs	r2, #61	; 0x3d
 8002bba:	2101      	movs	r1, #1
 8002bbc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	223c      	movs	r2, #60	; 0x3c
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	0018      	movs	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b004      	add	sp, #16
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	ffff00ff 	.word	0xffff00ff

08002bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a2f      	ldr	r2, [pc, #188]	; (8002ca4 <TIM_Base_SetConfig+0xd0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d003      	beq.n	8002bf4 <TIM_Base_SetConfig+0x20>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a2e      	ldr	r2, [pc, #184]	; (8002ca8 <TIM_Base_SetConfig+0xd4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d108      	bne.n	8002c06 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2270      	movs	r2, #112	; 0x70
 8002bf8:	4393      	bics	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a26      	ldr	r2, [pc, #152]	; (8002ca4 <TIM_Base_SetConfig+0xd0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <TIM_Base_SetConfig+0x62>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a25      	ldr	r2, [pc, #148]	; (8002ca8 <TIM_Base_SetConfig+0xd4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00f      	beq.n	8002c36 <TIM_Base_SetConfig+0x62>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a24      	ldr	r2, [pc, #144]	; (8002cac <TIM_Base_SetConfig+0xd8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00b      	beq.n	8002c36 <TIM_Base_SetConfig+0x62>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a23      	ldr	r2, [pc, #140]	; (8002cb0 <TIM_Base_SetConfig+0xdc>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d007      	beq.n	8002c36 <TIM_Base_SetConfig+0x62>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a22      	ldr	r2, [pc, #136]	; (8002cb4 <TIM_Base_SetConfig+0xe0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d003      	beq.n	8002c36 <TIM_Base_SetConfig+0x62>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a21      	ldr	r2, [pc, #132]	; (8002cb8 <TIM_Base_SetConfig+0xe4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d108      	bne.n	8002c48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4a20      	ldr	r2, [pc, #128]	; (8002cbc <TIM_Base_SetConfig+0xe8>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2280      	movs	r2, #128	; 0x80
 8002c4c:	4393      	bics	r3, r2
 8002c4e:	001a      	movs	r2, r3
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a0c      	ldr	r2, [pc, #48]	; (8002ca4 <TIM_Base_SetConfig+0xd0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d00b      	beq.n	8002c8e <TIM_Base_SetConfig+0xba>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a0d      	ldr	r2, [pc, #52]	; (8002cb0 <TIM_Base_SetConfig+0xdc>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d007      	beq.n	8002c8e <TIM_Base_SetConfig+0xba>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a0c      	ldr	r2, [pc, #48]	; (8002cb4 <TIM_Base_SetConfig+0xe0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d003      	beq.n	8002c8e <TIM_Base_SetConfig+0xba>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a0b      	ldr	r2, [pc, #44]	; (8002cb8 <TIM_Base_SetConfig+0xe4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d103      	bne.n	8002c96 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	615a      	str	r2, [r3, #20]
}
 8002c9c:	46c0      	nop			; (mov r8, r8)
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b004      	add	sp, #16
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40012c00 	.word	0x40012c00
 8002ca8:	40000400 	.word	0x40000400
 8002cac:	40002000 	.word	0x40002000
 8002cb0:	40014000 	.word	0x40014000
 8002cb4:	40014400 	.word	0x40014400
 8002cb8:	40014800 	.word	0x40014800
 8002cbc:	fffffcff 	.word	0xfffffcff

08002cc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	4393      	bics	r3, r2
 8002cd2:	001a      	movs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2270      	movs	r2, #112	; 0x70
 8002cee:	4393      	bics	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	4393      	bics	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2202      	movs	r2, #2
 8002d08:	4393      	bics	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a27      	ldr	r2, [pc, #156]	; (8002db8 <TIM_OC1_SetConfig+0xf8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00b      	beq.n	8002d36 <TIM_OC1_SetConfig+0x76>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a26      	ldr	r2, [pc, #152]	; (8002dbc <TIM_OC1_SetConfig+0xfc>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d007      	beq.n	8002d36 <TIM_OC1_SetConfig+0x76>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a25      	ldr	r2, [pc, #148]	; (8002dc0 <TIM_OC1_SetConfig+0x100>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d003      	beq.n	8002d36 <TIM_OC1_SetConfig+0x76>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a24      	ldr	r2, [pc, #144]	; (8002dc4 <TIM_OC1_SetConfig+0x104>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d10c      	bne.n	8002d50 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2208      	movs	r2, #8
 8002d3a:	4393      	bics	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	4393      	bics	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a19      	ldr	r2, [pc, #100]	; (8002db8 <TIM_OC1_SetConfig+0xf8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d00b      	beq.n	8002d70 <TIM_OC1_SetConfig+0xb0>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a18      	ldr	r2, [pc, #96]	; (8002dbc <TIM_OC1_SetConfig+0xfc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d007      	beq.n	8002d70 <TIM_OC1_SetConfig+0xb0>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a17      	ldr	r2, [pc, #92]	; (8002dc0 <TIM_OC1_SetConfig+0x100>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d003      	beq.n	8002d70 <TIM_OC1_SetConfig+0xb0>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a16      	ldr	r2, [pc, #88]	; (8002dc4 <TIM_OC1_SetConfig+0x104>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d111      	bne.n	8002d94 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4a15      	ldr	r2, [pc, #84]	; (8002dc8 <TIM_OC1_SetConfig+0x108>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4a14      	ldr	r2, [pc, #80]	; (8002dcc <TIM_OC1_SetConfig+0x10c>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	621a      	str	r2, [r3, #32]
}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b006      	add	sp, #24
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	40012c00 	.word	0x40012c00
 8002dbc:	40014000 	.word	0x40014000
 8002dc0:	40014400 	.word	0x40014400
 8002dc4:	40014800 	.word	0x40014800
 8002dc8:	fffffeff 	.word	0xfffffeff
 8002dcc:	fffffdff 	.word	0xfffffdff

08002dd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	2210      	movs	r2, #16
 8002de0:	4393      	bics	r3, r2
 8002de2:	001a      	movs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4a2e      	ldr	r2, [pc, #184]	; (8002eb8 <TIM_OC2_SetConfig+0xe8>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4a2d      	ldr	r2, [pc, #180]	; (8002ebc <TIM_OC2_SetConfig+0xec>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	4393      	bics	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a24      	ldr	r2, [pc, #144]	; (8002ec0 <TIM_OC2_SetConfig+0xf0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d10d      	bne.n	8002e4e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2280      	movs	r2, #128	; 0x80
 8002e36:	4393      	bics	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2240      	movs	r2, #64	; 0x40
 8002e4a:	4393      	bics	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a1b      	ldr	r2, [pc, #108]	; (8002ec0 <TIM_OC2_SetConfig+0xf0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00b      	beq.n	8002e6e <TIM_OC2_SetConfig+0x9e>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a1a      	ldr	r2, [pc, #104]	; (8002ec4 <TIM_OC2_SetConfig+0xf4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d007      	beq.n	8002e6e <TIM_OC2_SetConfig+0x9e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a19      	ldr	r2, [pc, #100]	; (8002ec8 <TIM_OC2_SetConfig+0xf8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d003      	beq.n	8002e6e <TIM_OC2_SetConfig+0x9e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a18      	ldr	r2, [pc, #96]	; (8002ecc <TIM_OC2_SetConfig+0xfc>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d113      	bne.n	8002e96 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4a17      	ldr	r2, [pc, #92]	; (8002ed0 <TIM_OC2_SetConfig+0x100>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4a16      	ldr	r2, [pc, #88]	; (8002ed4 <TIM_OC2_SetConfig+0x104>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	621a      	str	r2, [r3, #32]
}
 8002eb0:	46c0      	nop			; (mov r8, r8)
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b006      	add	sp, #24
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	ffff8fff 	.word	0xffff8fff
 8002ebc:	fffffcff 	.word	0xfffffcff
 8002ec0:	40012c00 	.word	0x40012c00
 8002ec4:	40014000 	.word	0x40014000
 8002ec8:	40014400 	.word	0x40014400
 8002ecc:	40014800 	.word	0x40014800
 8002ed0:	fffffbff 	.word	0xfffffbff
 8002ed4:	fffff7ff 	.word	0xfffff7ff

08002ed8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	4a35      	ldr	r2, [pc, #212]	; (8002fbc <TIM_OC3_SetConfig+0xe4>)
 8002ee8:	401a      	ands	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2270      	movs	r2, #112	; 0x70
 8002f04:	4393      	bics	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	4393      	bics	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	4a28      	ldr	r2, [pc, #160]	; (8002fc0 <TIM_OC3_SetConfig+0xe8>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	021b      	lsls	r3, r3, #8
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a24      	ldr	r2, [pc, #144]	; (8002fc4 <TIM_OC3_SetConfig+0xec>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d10d      	bne.n	8002f52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	4a23      	ldr	r2, [pc, #140]	; (8002fc8 <TIM_OC3_SetConfig+0xf0>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	4a1f      	ldr	r2, [pc, #124]	; (8002fcc <TIM_OC3_SetConfig+0xf4>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a1b      	ldr	r2, [pc, #108]	; (8002fc4 <TIM_OC3_SetConfig+0xec>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00b      	beq.n	8002f72 <TIM_OC3_SetConfig+0x9a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a1c      	ldr	r2, [pc, #112]	; (8002fd0 <TIM_OC3_SetConfig+0xf8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d007      	beq.n	8002f72 <TIM_OC3_SetConfig+0x9a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a1b      	ldr	r2, [pc, #108]	; (8002fd4 <TIM_OC3_SetConfig+0xfc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d003      	beq.n	8002f72 <TIM_OC3_SetConfig+0x9a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a1a      	ldr	r2, [pc, #104]	; (8002fd8 <TIM_OC3_SetConfig+0x100>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d113      	bne.n	8002f9a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4a19      	ldr	r2, [pc, #100]	; (8002fdc <TIM_OC3_SetConfig+0x104>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4a18      	ldr	r2, [pc, #96]	; (8002fe0 <TIM_OC3_SetConfig+0x108>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	621a      	str	r2, [r3, #32]
}
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b006      	add	sp, #24
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	fffffeff 	.word	0xfffffeff
 8002fc0:	fffffdff 	.word	0xfffffdff
 8002fc4:	40012c00 	.word	0x40012c00
 8002fc8:	fffff7ff 	.word	0xfffff7ff
 8002fcc:	fffffbff 	.word	0xfffffbff
 8002fd0:	40014000 	.word	0x40014000
 8002fd4:	40014400 	.word	0x40014400
 8002fd8:	40014800 	.word	0x40014800
 8002fdc:	ffffefff 	.word	0xffffefff
 8002fe0:	ffffdfff 	.word	0xffffdfff

08002fe4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	4a28      	ldr	r2, [pc, #160]	; (8003094 <TIM_OC4_SetConfig+0xb0>)
 8002ff4:	401a      	ands	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a22      	ldr	r2, [pc, #136]	; (8003098 <TIM_OC4_SetConfig+0xb4>)
 8003010:	4013      	ands	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a21      	ldr	r2, [pc, #132]	; (800309c <TIM_OC4_SetConfig+0xb8>)
 8003018:	4013      	ands	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4313      	orrs	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <TIM_OC4_SetConfig+0xbc>)
 800302c:	4013      	ands	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	031b      	lsls	r3, r3, #12
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a19      	ldr	r2, [pc, #100]	; (80030a4 <TIM_OC4_SetConfig+0xc0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d00b      	beq.n	800305c <TIM_OC4_SetConfig+0x78>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a18      	ldr	r2, [pc, #96]	; (80030a8 <TIM_OC4_SetConfig+0xc4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d007      	beq.n	800305c <TIM_OC4_SetConfig+0x78>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a17      	ldr	r2, [pc, #92]	; (80030ac <TIM_OC4_SetConfig+0xc8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d003      	beq.n	800305c <TIM_OC4_SetConfig+0x78>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a16      	ldr	r2, [pc, #88]	; (80030b0 <TIM_OC4_SetConfig+0xcc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d109      	bne.n	8003070 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	4a15      	ldr	r2, [pc, #84]	; (80030b4 <TIM_OC4_SetConfig+0xd0>)
 8003060:	4013      	ands	r3, r2
 8003062:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	019b      	lsls	r3, r3, #6
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	621a      	str	r2, [r3, #32]
}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	46bd      	mov	sp, r7
 800308e:	b006      	add	sp, #24
 8003090:	bd80      	pop	{r7, pc}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	ffffefff 	.word	0xffffefff
 8003098:	ffff8fff 	.word	0xffff8fff
 800309c:	fffffcff 	.word	0xfffffcff
 80030a0:	ffffdfff 	.word	0xffffdfff
 80030a4:	40012c00 	.word	0x40012c00
 80030a8:	40014000 	.word	0x40014000
 80030ac:	40014400 	.word	0x40014400
 80030b0:	40014800 	.word	0x40014800
 80030b4:	ffffbfff 	.word	0xffffbfff

080030b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	2201      	movs	r2, #1
 80030d0:	4393      	bics	r3, r2
 80030d2:	001a      	movs	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	22f0      	movs	r2, #240	; 0xf0
 80030e2:	4393      	bics	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	220a      	movs	r2, #10
 80030f4:	4393      	bics	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	621a      	str	r2, [r3, #32]
}
 800310c:	46c0      	nop			; (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	b006      	add	sp, #24
 8003112:	bd80      	pop	{r7, pc}

08003114 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	2210      	movs	r2, #16
 8003126:	4393      	bics	r3, r2
 8003128:	001a      	movs	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	4a0d      	ldr	r2, [pc, #52]	; (8003174 <TIM_TI2_ConfigInputStage+0x60>)
 800313e:	4013      	ands	r3, r2
 8003140:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	031b      	lsls	r3, r3, #12
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4313      	orrs	r3, r2
 800314a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	22a0      	movs	r2, #160	; 0xa0
 8003150:	4393      	bics	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	621a      	str	r2, [r3, #32]
}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	46bd      	mov	sp, r7
 800316e:	b006      	add	sp, #24
 8003170:	bd80      	pop	{r7, pc}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	ffff0fff 	.word	0xffff0fff

08003178 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2270      	movs	r2, #112	; 0x70
 800318c:	4393      	bics	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4313      	orrs	r3, r2
 8003196:	2207      	movs	r2, #7
 8003198:	4313      	orrs	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	609a      	str	r2, [r3, #8]
}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	46bd      	mov	sp, r7
 80031a6:	b004      	add	sp, #16
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	4a09      	ldr	r2, [pc, #36]	; (80031e8 <TIM_ETR_SetConfig+0x3c>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	021a      	lsls	r2, r3, #8
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	609a      	str	r2, [r3, #8]
}
 80031e0:	46c0      	nop			; (mov r8, r8)
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b006      	add	sp, #24
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	ffff00ff 	.word	0xffff00ff

080031ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	221f      	movs	r2, #31
 80031fc:	4013      	ands	r3, r2
 80031fe:	2201      	movs	r2, #1
 8003200:	409a      	lsls	r2, r3
 8003202:	0013      	movs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	43d2      	mvns	r2, r2
 800320e:	401a      	ands	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a1a      	ldr	r2, [r3, #32]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	211f      	movs	r1, #31
 800321c:	400b      	ands	r3, r1
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4099      	lsls	r1, r3
 8003222:	000b      	movs	r3, r1
 8003224:	431a      	orrs	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	621a      	str	r2, [r3, #32]
}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	46bd      	mov	sp, r7
 800322e:	b006      	add	sp, #24
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	223c      	movs	r2, #60	; 0x3c
 8003242:	5c9b      	ldrb	r3, [r3, r2]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003248:	2302      	movs	r3, #2
 800324a:	e041      	b.n	80032d0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	223c      	movs	r2, #60	; 0x3c
 8003250:	2101      	movs	r1, #1
 8003252:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	223d      	movs	r2, #61	; 0x3d
 8003258:	2102      	movs	r1, #2
 800325a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2270      	movs	r2, #112	; 0x70
 8003270:	4393      	bics	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a13      	ldr	r2, [pc, #76]	; (80032d8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d009      	beq.n	80032a4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a11      	ldr	r2, [pc, #68]	; (80032dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d004      	beq.n	80032a4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a10      	ldr	r2, [pc, #64]	; (80032e0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d10c      	bne.n	80032be <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2280      	movs	r2, #128	; 0x80
 80032a8:	4393      	bics	r3, r2
 80032aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	223d      	movs	r2, #61	; 0x3d
 80032c2:	2101      	movs	r1, #1
 80032c4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	223c      	movs	r2, #60	; 0x3c
 80032ca:	2100      	movs	r1, #0
 80032cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	0018      	movs	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b004      	add	sp, #16
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40012c00 	.word	0x40012c00
 80032dc:	40000400 	.word	0x40000400
 80032e0:	40014000 	.word	0x40014000

080032e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	223c      	movs	r2, #60	; 0x3c
 80032f6:	5c9b      	ldrb	r3, [r3, r2]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e03e      	b.n	800337e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	223c      	movs	r2, #60	; 0x3c
 8003304:	2101      	movs	r1, #1
 8003306:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	22ff      	movs	r2, #255	; 0xff
 800330c:	4393      	bics	r3, r2
 800330e:	001a      	movs	r2, r3
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4a1b      	ldr	r2, [pc, #108]	; (8003388 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800331c:	401a      	ands	r2, r3
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4a18      	ldr	r2, [pc, #96]	; (800338c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800332a:	401a      	ands	r2, r3
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	4313      	orrs	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4a16      	ldr	r2, [pc, #88]	; (8003390 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003338:	401a      	ands	r2, r3
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4313      	orrs	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4a13      	ldr	r2, [pc, #76]	; (8003394 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003346:	401a      	ands	r2, r3
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4a11      	ldr	r2, [pc, #68]	; (8003398 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003354:	401a      	ands	r2, r3
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	4313      	orrs	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4a0e      	ldr	r2, [pc, #56]	; (800339c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003362:	401a      	ands	r2, r3
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	223c      	movs	r2, #60	; 0x3c
 8003378:	2100      	movs	r1, #0
 800337a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	0018      	movs	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	b004      	add	sp, #16
 8003384:	bd80      	pop	{r7, pc}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	fffffcff 	.word	0xfffffcff
 800338c:	fffffbff 	.word	0xfffffbff
 8003390:	fffff7ff 	.word	0xfffff7ff
 8003394:	ffffefff 	.word	0xffffefff
 8003398:	ffffdfff 	.word	0xffffdfff
 800339c:	ffffbfff 	.word	0xffffbfff

080033a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e044      	b.n	800343c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d107      	bne.n	80033ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2270      	movs	r2, #112	; 0x70
 80033be:	2100      	movs	r1, #0
 80033c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	0018      	movs	r0, r3
 80033c6:	f7fd fe7b 	bl	80010c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2224      	movs	r2, #36	; 0x24
 80033ce:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2101      	movs	r1, #1
 80033dc:	438a      	bics	r2, r1
 80033de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	0018      	movs	r0, r3
 80033e4:	f000 f830 	bl	8003448 <UART_SetConfig>
 80033e8:	0003      	movs	r3, r0
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e024      	b.n	800343c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	0018      	movs	r0, r3
 80033fe:	f000 f9d9 	bl	80037b4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	490d      	ldr	r1, [pc, #52]	; (8003444 <HAL_UART_Init+0xa4>)
 800340e:	400a      	ands	r2, r1
 8003410:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2108      	movs	r1, #8
 800341e:	438a      	bics	r2, r1
 8003420:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2101      	movs	r1, #1
 800342e:	430a      	orrs	r2, r1
 8003430:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	0018      	movs	r0, r3
 8003436:	f000 fa71 	bl	800391c <UART_CheckIdleState>
 800343a:	0003      	movs	r3, r0
}
 800343c:	0018      	movs	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	b002      	add	sp, #8
 8003442:	bd80      	pop	{r7, pc}
 8003444:	fffff7ff 	.word	0xfffff7ff

08003448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003450:	2300      	movs	r3, #0
 8003452:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003454:	2317      	movs	r3, #23
 8003456:	18fb      	adds	r3, r7, r3
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	4313      	orrs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4ac1      	ldr	r2, [pc, #772]	; (8003780 <UART_SetConfig+0x338>)
 800347c:	4013      	ands	r3, r2
 800347e:	0019      	movs	r1, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	430a      	orrs	r2, r1
 8003488:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	4abc      	ldr	r2, [pc, #752]	; (8003784 <UART_SetConfig+0x33c>)
 8003492:	4013      	ands	r3, r2
 8003494:	0019      	movs	r1, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4ab3      	ldr	r2, [pc, #716]	; (8003788 <UART_SetConfig+0x340>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	0019      	movs	r1, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4aaf      	ldr	r2, [pc, #700]	; (800378c <UART_SetConfig+0x344>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d125      	bne.n	800351e <UART_SetConfig+0xd6>
 80034d2:	4baf      	ldr	r3, [pc, #700]	; (8003790 <UART_SetConfig+0x348>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	2203      	movs	r2, #3
 80034d8:	4013      	ands	r3, r2
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d00f      	beq.n	80034fe <UART_SetConfig+0xb6>
 80034de:	d304      	bcc.n	80034ea <UART_SetConfig+0xa2>
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d011      	beq.n	8003508 <UART_SetConfig+0xc0>
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d005      	beq.n	80034f4 <UART_SetConfig+0xac>
 80034e8:	e013      	b.n	8003512 <UART_SetConfig+0xca>
 80034ea:	231f      	movs	r3, #31
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	2200      	movs	r2, #0
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	e04a      	b.n	800358a <UART_SetConfig+0x142>
 80034f4:	231f      	movs	r3, #31
 80034f6:	18fb      	adds	r3, r7, r3
 80034f8:	2202      	movs	r2, #2
 80034fa:	701a      	strb	r2, [r3, #0]
 80034fc:	e045      	b.n	800358a <UART_SetConfig+0x142>
 80034fe:	231f      	movs	r3, #31
 8003500:	18fb      	adds	r3, r7, r3
 8003502:	2204      	movs	r2, #4
 8003504:	701a      	strb	r2, [r3, #0]
 8003506:	e040      	b.n	800358a <UART_SetConfig+0x142>
 8003508:	231f      	movs	r3, #31
 800350a:	18fb      	adds	r3, r7, r3
 800350c:	2208      	movs	r2, #8
 800350e:	701a      	strb	r2, [r3, #0]
 8003510:	e03b      	b.n	800358a <UART_SetConfig+0x142>
 8003512:	231f      	movs	r3, #31
 8003514:	18fb      	adds	r3, r7, r3
 8003516:	2210      	movs	r2, #16
 8003518:	701a      	strb	r2, [r3, #0]
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	e035      	b.n	800358a <UART_SetConfig+0x142>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a9c      	ldr	r2, [pc, #624]	; (8003794 <UART_SetConfig+0x34c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d104      	bne.n	8003532 <UART_SetConfig+0xea>
 8003528:	231f      	movs	r3, #31
 800352a:	18fb      	adds	r3, r7, r3
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]
 8003530:	e02b      	b.n	800358a <UART_SetConfig+0x142>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a98      	ldr	r2, [pc, #608]	; (8003798 <UART_SetConfig+0x350>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d104      	bne.n	8003546 <UART_SetConfig+0xfe>
 800353c:	231f      	movs	r3, #31
 800353e:	18fb      	adds	r3, r7, r3
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]
 8003544:	e021      	b.n	800358a <UART_SetConfig+0x142>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a94      	ldr	r2, [pc, #592]	; (800379c <UART_SetConfig+0x354>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d104      	bne.n	800355a <UART_SetConfig+0x112>
 8003550:	231f      	movs	r3, #31
 8003552:	18fb      	adds	r3, r7, r3
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
 8003558:	e017      	b.n	800358a <UART_SetConfig+0x142>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a90      	ldr	r2, [pc, #576]	; (80037a0 <UART_SetConfig+0x358>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d104      	bne.n	800356e <UART_SetConfig+0x126>
 8003564:	231f      	movs	r3, #31
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	2200      	movs	r2, #0
 800356a:	701a      	strb	r2, [r3, #0]
 800356c:	e00d      	b.n	800358a <UART_SetConfig+0x142>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a8c      	ldr	r2, [pc, #560]	; (80037a4 <UART_SetConfig+0x35c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d104      	bne.n	8003582 <UART_SetConfig+0x13a>
 8003578:	231f      	movs	r3, #31
 800357a:	18fb      	adds	r3, r7, r3
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
 8003580:	e003      	b.n	800358a <UART_SetConfig+0x142>
 8003582:	231f      	movs	r3, #31
 8003584:	18fb      	adds	r3, r7, r3
 8003586:	2210      	movs	r2, #16
 8003588:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69da      	ldr	r2, [r3, #28]
 800358e:	2380      	movs	r3, #128	; 0x80
 8003590:	021b      	lsls	r3, r3, #8
 8003592:	429a      	cmp	r2, r3
 8003594:	d000      	beq.n	8003598 <UART_SetConfig+0x150>
 8003596:	e07d      	b.n	8003694 <UART_SetConfig+0x24c>
  {
    switch (clocksource)
 8003598:	231f      	movs	r3, #31
 800359a:	18fb      	adds	r3, r7, r3
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d01c      	beq.n	80035dc <UART_SetConfig+0x194>
 80035a2:	dc02      	bgt.n	80035aa <UART_SetConfig+0x162>
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d005      	beq.n	80035b4 <UART_SetConfig+0x16c>
 80035a8:	e04b      	b.n	8003642 <UART_SetConfig+0x1fa>
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d025      	beq.n	80035fa <UART_SetConfig+0x1b2>
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d037      	beq.n	8003622 <UART_SetConfig+0x1da>
 80035b2:	e046      	b.n	8003642 <UART_SetConfig+0x1fa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035b4:	f7fe ff6e 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 80035b8:	0003      	movs	r3, r0
 80035ba:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	005a      	lsls	r2, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	085b      	lsrs	r3, r3, #1
 80035c6:	18d2      	adds	r2, r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	0019      	movs	r1, r3
 80035ce:	0010      	movs	r0, r2
 80035d0:	f7fc fd98 	bl	8000104 <__udivsi3>
 80035d4:	0003      	movs	r3, r0
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	61bb      	str	r3, [r7, #24]
        break;
 80035da:	e037      	b.n	800364c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	085b      	lsrs	r3, r3, #1
 80035e2:	4a71      	ldr	r2, [pc, #452]	; (80037a8 <UART_SetConfig+0x360>)
 80035e4:	189a      	adds	r2, r3, r2
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	0019      	movs	r1, r3
 80035ec:	0010      	movs	r0, r2
 80035ee:	f7fc fd89 	bl	8000104 <__udivsi3>
 80035f2:	0003      	movs	r3, r0
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	61bb      	str	r3, [r7, #24]
        break;
 80035f8:	e028      	b.n	800364c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035fa:	f7fe fedb 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 80035fe:	0003      	movs	r3, r0
 8003600:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	005a      	lsls	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	085b      	lsrs	r3, r3, #1
 800360c:	18d2      	adds	r2, r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	0019      	movs	r1, r3
 8003614:	0010      	movs	r0, r2
 8003616:	f7fc fd75 	bl	8000104 <__udivsi3>
 800361a:	0003      	movs	r3, r0
 800361c:	b29b      	uxth	r3, r3
 800361e:	61bb      	str	r3, [r7, #24]
        break;
 8003620:	e014      	b.n	800364c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	085b      	lsrs	r3, r3, #1
 8003628:	2280      	movs	r2, #128	; 0x80
 800362a:	0252      	lsls	r2, r2, #9
 800362c:	189a      	adds	r2, r3, r2
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	0019      	movs	r1, r3
 8003634:	0010      	movs	r0, r2
 8003636:	f7fc fd65 	bl	8000104 <__udivsi3>
 800363a:	0003      	movs	r3, r0
 800363c:	b29b      	uxth	r3, r3
 800363e:	61bb      	str	r3, [r7, #24]
        break;
 8003640:	e004      	b.n	800364c <UART_SetConfig+0x204>
      default:
        ret = HAL_ERROR;
 8003642:	2317      	movs	r3, #23
 8003644:	18fb      	adds	r3, r7, r3
 8003646:	2201      	movs	r2, #1
 8003648:	701a      	strb	r2, [r3, #0]
        break;
 800364a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	2b0f      	cmp	r3, #15
 8003650:	d91b      	bls.n	800368a <UART_SetConfig+0x242>
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	4a55      	ldr	r2, [pc, #340]	; (80037ac <UART_SetConfig+0x364>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d817      	bhi.n	800368a <UART_SetConfig+0x242>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	b29a      	uxth	r2, r3
 800365e:	200a      	movs	r0, #10
 8003660:	183b      	adds	r3, r7, r0
 8003662:	210f      	movs	r1, #15
 8003664:	438a      	bics	r2, r1
 8003666:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	085b      	lsrs	r3, r3, #1
 800366c:	b29b      	uxth	r3, r3
 800366e:	2207      	movs	r2, #7
 8003670:	4013      	ands	r3, r2
 8003672:	b299      	uxth	r1, r3
 8003674:	183b      	adds	r3, r7, r0
 8003676:	183a      	adds	r2, r7, r0
 8003678:	8812      	ldrh	r2, [r2, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	183a      	adds	r2, r7, r0
 8003684:	8812      	ldrh	r2, [r2, #0]
 8003686:	60da      	str	r2, [r3, #12]
 8003688:	e06c      	b.n	8003764 <UART_SetConfig+0x31c>
    }
    else
    {
      ret = HAL_ERROR;
 800368a:	2317      	movs	r3, #23
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	2201      	movs	r2, #1
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	e067      	b.n	8003764 <UART_SetConfig+0x31c>
    }
  }
  else
  {
    switch (clocksource)
 8003694:	231f      	movs	r3, #31
 8003696:	18fb      	adds	r3, r7, r3
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d01b      	beq.n	80036d6 <UART_SetConfig+0x28e>
 800369e:	dc02      	bgt.n	80036a6 <UART_SetConfig+0x25e>
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <UART_SetConfig+0x268>
 80036a4:	e049      	b.n	800373a <UART_SetConfig+0x2f2>
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d024      	beq.n	80036f4 <UART_SetConfig+0x2ac>
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d035      	beq.n	800371a <UART_SetConfig+0x2d2>
 80036ae:	e044      	b.n	800373a <UART_SetConfig+0x2f2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036b0:	f7fe fef0 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 80036b4:	0003      	movs	r3, r0
 80036b6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	085a      	lsrs	r2, r3, #1
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	18d2      	adds	r2, r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	0019      	movs	r1, r3
 80036c8:	0010      	movs	r0, r2
 80036ca:	f7fc fd1b 	bl	8000104 <__udivsi3>
 80036ce:	0003      	movs	r3, r0
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	61bb      	str	r3, [r7, #24]
        break;
 80036d4:	e036      	b.n	8003744 <UART_SetConfig+0x2fc>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	085b      	lsrs	r3, r3, #1
 80036dc:	4a34      	ldr	r2, [pc, #208]	; (80037b0 <UART_SetConfig+0x368>)
 80036de:	189a      	adds	r2, r3, r2
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	0019      	movs	r1, r3
 80036e6:	0010      	movs	r0, r2
 80036e8:	f7fc fd0c 	bl	8000104 <__udivsi3>
 80036ec:	0003      	movs	r3, r0
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	61bb      	str	r3, [r7, #24]
        break;
 80036f2:	e027      	b.n	8003744 <UART_SetConfig+0x2fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036f4:	f7fe fe5e 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 80036f8:	0003      	movs	r3, r0
 80036fa:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	085a      	lsrs	r2, r3, #1
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	18d2      	adds	r2, r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	0019      	movs	r1, r3
 800370c:	0010      	movs	r0, r2
 800370e:	f7fc fcf9 	bl	8000104 <__udivsi3>
 8003712:	0003      	movs	r3, r0
 8003714:	b29b      	uxth	r3, r3
 8003716:	61bb      	str	r3, [r7, #24]
        break;
 8003718:	e014      	b.n	8003744 <UART_SetConfig+0x2fc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	085b      	lsrs	r3, r3, #1
 8003720:	2280      	movs	r2, #128	; 0x80
 8003722:	0212      	lsls	r2, r2, #8
 8003724:	189a      	adds	r2, r3, r2
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	0019      	movs	r1, r3
 800372c:	0010      	movs	r0, r2
 800372e:	f7fc fce9 	bl	8000104 <__udivsi3>
 8003732:	0003      	movs	r3, r0
 8003734:	b29b      	uxth	r3, r3
 8003736:	61bb      	str	r3, [r7, #24]
        break;
 8003738:	e004      	b.n	8003744 <UART_SetConfig+0x2fc>
      default:
        ret = HAL_ERROR;
 800373a:	2317      	movs	r3, #23
 800373c:	18fb      	adds	r3, r7, r3
 800373e:	2201      	movs	r2, #1
 8003740:	701a      	strb	r2, [r3, #0]
        break;
 8003742:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	2b0f      	cmp	r3, #15
 8003748:	d908      	bls.n	800375c <UART_SetConfig+0x314>
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	4a17      	ldr	r2, [pc, #92]	; (80037ac <UART_SetConfig+0x364>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d804      	bhi.n	800375c <UART_SetConfig+0x314>
    {
      huart->Instance->BRR = usartdiv;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	60da      	str	r2, [r3, #12]
 800375a:	e003      	b.n	8003764 <UART_SetConfig+0x31c>
    }
    else
    {
      ret = HAL_ERROR;
 800375c:	2317      	movs	r3, #23
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2201      	movs	r2, #1
 8003762:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003770:	2317      	movs	r3, #23
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	781b      	ldrb	r3, [r3, #0]
}
 8003776:	0018      	movs	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	b008      	add	sp, #32
 800377c:	bd80      	pop	{r7, pc}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	efff69f3 	.word	0xefff69f3
 8003784:	ffffcfff 	.word	0xffffcfff
 8003788:	fffff4ff 	.word	0xfffff4ff
 800378c:	40013800 	.word	0x40013800
 8003790:	40021000 	.word	0x40021000
 8003794:	40004400 	.word	0x40004400
 8003798:	40004800 	.word	0x40004800
 800379c:	40004c00 	.word	0x40004c00
 80037a0:	40005000 	.word	0x40005000
 80037a4:	40011400 	.word	0x40011400
 80037a8:	00f42400 	.word	0x00f42400
 80037ac:	0000ffff 	.word	0x0000ffff
 80037b0:	007a1200 	.word	0x007a1200

080037b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	2201      	movs	r2, #1
 80037c2:	4013      	ands	r3, r2
 80037c4:	d00b      	beq.n	80037de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4a4a      	ldr	r2, [pc, #296]	; (80038f8 <UART_AdvFeatureConfig+0x144>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	0019      	movs	r1, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	2202      	movs	r2, #2
 80037e4:	4013      	ands	r3, r2
 80037e6:	d00b      	beq.n	8003800 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4a43      	ldr	r2, [pc, #268]	; (80038fc <UART_AdvFeatureConfig+0x148>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	0019      	movs	r1, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	2204      	movs	r2, #4
 8003806:	4013      	ands	r3, r2
 8003808:	d00b      	beq.n	8003822 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	4a3b      	ldr	r2, [pc, #236]	; (8003900 <UART_AdvFeatureConfig+0x14c>)
 8003812:	4013      	ands	r3, r2
 8003814:	0019      	movs	r1, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	2208      	movs	r2, #8
 8003828:	4013      	ands	r3, r2
 800382a:	d00b      	beq.n	8003844 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	4a34      	ldr	r2, [pc, #208]	; (8003904 <UART_AdvFeatureConfig+0x150>)
 8003834:	4013      	ands	r3, r2
 8003836:	0019      	movs	r1, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	2210      	movs	r2, #16
 800384a:	4013      	ands	r3, r2
 800384c:	d00b      	beq.n	8003866 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	4a2c      	ldr	r2, [pc, #176]	; (8003908 <UART_AdvFeatureConfig+0x154>)
 8003856:	4013      	ands	r3, r2
 8003858:	0019      	movs	r1, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	2220      	movs	r2, #32
 800386c:	4013      	ands	r3, r2
 800386e:	d00b      	beq.n	8003888 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	4a25      	ldr	r2, [pc, #148]	; (800390c <UART_AdvFeatureConfig+0x158>)
 8003878:	4013      	ands	r3, r2
 800387a:	0019      	movs	r1, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	2240      	movs	r2, #64	; 0x40
 800388e:	4013      	ands	r3, r2
 8003890:	d01d      	beq.n	80038ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4a1d      	ldr	r2, [pc, #116]	; (8003910 <UART_AdvFeatureConfig+0x15c>)
 800389a:	4013      	ands	r3, r2
 800389c:	0019      	movs	r1, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038ae:	2380      	movs	r3, #128	; 0x80
 80038b0:	035b      	lsls	r3, r3, #13
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d10b      	bne.n	80038ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	4a15      	ldr	r2, [pc, #84]	; (8003914 <UART_AdvFeatureConfig+0x160>)
 80038be:	4013      	ands	r3, r2
 80038c0:	0019      	movs	r1, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	2280      	movs	r2, #128	; 0x80
 80038d4:	4013      	ands	r3, r2
 80038d6:	d00b      	beq.n	80038f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	4a0e      	ldr	r2, [pc, #56]	; (8003918 <UART_AdvFeatureConfig+0x164>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	0019      	movs	r1, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	605a      	str	r2, [r3, #4]
  }
}
 80038f0:	46c0      	nop			; (mov r8, r8)
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b002      	add	sp, #8
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	fffdffff 	.word	0xfffdffff
 80038fc:	fffeffff 	.word	0xfffeffff
 8003900:	fffbffff 	.word	0xfffbffff
 8003904:	ffff7fff 	.word	0xffff7fff
 8003908:	ffffefff 	.word	0xffffefff
 800390c:	ffffdfff 	.word	0xffffdfff
 8003910:	ffefffff 	.word	0xffefffff
 8003914:	ff9fffff 	.word	0xff9fffff
 8003918:	fff7ffff 	.word	0xfff7ffff

0800391c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af02      	add	r7, sp, #8
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800392a:	f7fd fcb9 	bl	80012a0 <HAL_GetTick>
 800392e:	0003      	movs	r3, r0
 8003930:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2208      	movs	r2, #8
 800393a:	4013      	ands	r3, r2
 800393c:	2b08      	cmp	r3, #8
 800393e:	d10d      	bne.n	800395c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	2380      	movs	r3, #128	; 0x80
 8003944:	0399      	lsls	r1, r3, #14
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <UART_CheckIdleState+0x88>)
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	0013      	movs	r3, r2
 800394e:	2200      	movs	r2, #0
 8003950:	f000 f82a 	bl	80039a8 <UART_WaitOnFlagUntilTimeout>
 8003954:	1e03      	subs	r3, r0, #0
 8003956:	d001      	beq.n	800395c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e01f      	b.n	800399c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2204      	movs	r2, #4
 8003964:	4013      	ands	r3, r2
 8003966:	2b04      	cmp	r3, #4
 8003968:	d10d      	bne.n	8003986 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	03d9      	lsls	r1, r3, #15
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <UART_CheckIdleState+0x88>)
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	0013      	movs	r3, r2
 8003978:	2200      	movs	r2, #0
 800397a:	f000 f815 	bl	80039a8 <UART_WaitOnFlagUntilTimeout>
 800397e:	1e03      	subs	r3, r0, #0
 8003980:	d001      	beq.n	8003986 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e00a      	b.n	800399c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2220      	movs	r2, #32
 800398a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2270      	movs	r2, #112	; 0x70
 8003996:	2100      	movs	r1, #0
 8003998:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	0018      	movs	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	b004      	add	sp, #16
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	01ffffff 	.word	0x01ffffff

080039a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	1dfb      	adds	r3, r7, #7
 80039b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b8:	e05d      	b.n	8003a76 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	3301      	adds	r3, #1
 80039be:	d05a      	beq.n	8003a76 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c0:	f7fd fc6e 	bl	80012a0 <HAL_GetTick>
 80039c4:	0002      	movs	r2, r0
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d302      	bcc.n	80039d6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d11b      	bne.n	8003a0e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	492f      	ldr	r1, [pc, #188]	; (8003aa0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80039e2:	400a      	ands	r2, r1
 80039e4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2101      	movs	r1, #1
 80039f2:	438a      	bics	r2, r1
 80039f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2220      	movs	r2, #32
 80039fa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2220      	movs	r2, #32
 8003a00:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2270      	movs	r2, #112	; 0x70
 8003a06:	2100      	movs	r1, #0
 8003a08:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e043      	b.n	8003a96 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2204      	movs	r2, #4
 8003a16:	4013      	ands	r3, r2
 8003a18:	d02d      	beq.n	8003a76 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69da      	ldr	r2, [r3, #28]
 8003a20:	2380      	movs	r3, #128	; 0x80
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	401a      	ands	r2, r3
 8003a26:	2380      	movs	r3, #128	; 0x80
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d123      	bne.n	8003a76 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2280      	movs	r2, #128	; 0x80
 8003a34:	0112      	lsls	r2, r2, #4
 8003a36:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4917      	ldr	r1, [pc, #92]	; (8003aa0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003a44:	400a      	ands	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2101      	movs	r1, #1
 8003a54:	438a      	bics	r2, r1
 8003a56:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2220      	movs	r2, #32
 8003a62:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2270      	movs	r2, #112	; 0x70
 8003a6e:	2100      	movs	r1, #0
 8003a70:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e00f      	b.n	8003a96 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	425a      	negs	r2, r3
 8003a86:	4153      	adcs	r3, r2
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	001a      	movs	r2, r3
 8003a8c:	1dfb      	adds	r3, r7, #7
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d092      	beq.n	80039ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	0018      	movs	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b004      	add	sp, #16
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	fffffe5f 	.word	0xfffffe5f

08003aa4 <__libc_init_array>:
 8003aa4:	b570      	push	{r4, r5, r6, lr}
 8003aa6:	2600      	movs	r6, #0
 8003aa8:	4d0c      	ldr	r5, [pc, #48]	; (8003adc <__libc_init_array+0x38>)
 8003aaa:	4c0d      	ldr	r4, [pc, #52]	; (8003ae0 <__libc_init_array+0x3c>)
 8003aac:	1b64      	subs	r4, r4, r5
 8003aae:	10a4      	asrs	r4, r4, #2
 8003ab0:	42a6      	cmp	r6, r4
 8003ab2:	d109      	bne.n	8003ac8 <__libc_init_array+0x24>
 8003ab4:	2600      	movs	r6, #0
 8003ab6:	f000 f821 	bl	8003afc <_init>
 8003aba:	4d0a      	ldr	r5, [pc, #40]	; (8003ae4 <__libc_init_array+0x40>)
 8003abc:	4c0a      	ldr	r4, [pc, #40]	; (8003ae8 <__libc_init_array+0x44>)
 8003abe:	1b64      	subs	r4, r4, r5
 8003ac0:	10a4      	asrs	r4, r4, #2
 8003ac2:	42a6      	cmp	r6, r4
 8003ac4:	d105      	bne.n	8003ad2 <__libc_init_array+0x2e>
 8003ac6:	bd70      	pop	{r4, r5, r6, pc}
 8003ac8:	00b3      	lsls	r3, r6, #2
 8003aca:	58eb      	ldr	r3, [r5, r3]
 8003acc:	4798      	blx	r3
 8003ace:	3601      	adds	r6, #1
 8003ad0:	e7ee      	b.n	8003ab0 <__libc_init_array+0xc>
 8003ad2:	00b3      	lsls	r3, r6, #2
 8003ad4:	58eb      	ldr	r3, [r5, r3]
 8003ad6:	4798      	blx	r3
 8003ad8:	3601      	adds	r6, #1
 8003ada:	e7f2      	b.n	8003ac2 <__libc_init_array+0x1e>
 8003adc:	08003b4c 	.word	0x08003b4c
 8003ae0:	08003b4c 	.word	0x08003b4c
 8003ae4:	08003b4c 	.word	0x08003b4c
 8003ae8:	08003b50 	.word	0x08003b50

08003aec <memset>:
 8003aec:	0003      	movs	r3, r0
 8003aee:	1812      	adds	r2, r2, r0
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d100      	bne.n	8003af6 <memset+0xa>
 8003af4:	4770      	bx	lr
 8003af6:	7019      	strb	r1, [r3, #0]
 8003af8:	3301      	adds	r3, #1
 8003afa:	e7f9      	b.n	8003af0 <memset+0x4>

08003afc <_init>:
 8003afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b02:	bc08      	pop	{r3}
 8003b04:	469e      	mov	lr, r3
 8003b06:	4770      	bx	lr

08003b08 <_fini>:
 8003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0e:	bc08      	pop	{r3}
 8003b10:	469e      	mov	lr, r3
 8003b12:	4770      	bx	lr
