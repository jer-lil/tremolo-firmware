
tremolo_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007864  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080079f8  080079f8  000179f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a30  08007a30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007a30  08007a30  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a30  08007a30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a30  08007a30  00017a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a34  08007a34  00017a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000013ec  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200013f8  200013f8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001398b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029db  00000000  00000000  000339c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  000363a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ef8  00000000  00000000  000373c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e95  00000000  00000000  000382c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000164ef  00000000  00000000  0005a155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d026c  00000000  00000000  00070644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001408b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042c0  00000000  00000000  00140900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080079e0 	.word	0x080079e0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080079e0 	.word	0x080079e0

080001d4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08a      	sub	sp, #40	; 0x28
 80001d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80001da:	f107 031c 	add.w	r3, r7, #28
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	2200      	movs	r2, #0
 80001ea:	601a      	str	r2, [r3, #0]
 80001ec:	605a      	str	r2, [r3, #4]
 80001ee:	609a      	str	r2, [r3, #8]
 80001f0:	60da      	str	r2, [r3, #12]
 80001f2:	611a      	str	r2, [r3, #16]
 80001f4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001f6:	4b66      	ldr	r3, [pc, #408]	; (8000390 <MX_ADC1_Init+0x1bc>)
 80001f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80001fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001fe:	4b64      	ldr	r3, [pc, #400]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000200:	2200      	movs	r2, #0
 8000202:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000204:	4b62      	ldr	r3, [pc, #392]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000206:	2208      	movs	r2, #8
 8000208:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800020a:	4b61      	ldr	r3, [pc, #388]	; (8000390 <MX_ADC1_Init+0x1bc>)
 800020c:	2201      	movs	r2, #1
 800020e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000210:	4b5f      	ldr	r3, [pc, #380]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000212:	2201      	movs	r2, #1
 8000214:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000216:	4b5e      	ldr	r3, [pc, #376]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000218:	2200      	movs	r2, #0
 800021a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800021e:	4b5c      	ldr	r3, [pc, #368]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000220:	2200      	movs	r2, #0
 8000222:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000224:	4b5a      	ldr	r3, [pc, #360]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000226:	2201      	movs	r2, #1
 8000228:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800022a:	4b59      	ldr	r3, [pc, #356]	; (8000390 <MX_ADC1_Init+0x1bc>)
 800022c:	2200      	movs	r2, #0
 800022e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 8000230:	4b57      	ldr	r3, [pc, #348]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000232:	2209      	movs	r2, #9
 8000234:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000236:	4b56      	ldr	r3, [pc, #344]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000238:	2201      	movs	r2, #1
 800023a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800023e:	4b54      	ldr	r3, [pc, #336]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000240:	2208      	movs	r2, #8
 8000242:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000244:	4b52      	ldr	r3, [pc, #328]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000246:	2200      	movs	r2, #0
 8000248:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800024a:	4b51      	ldr	r3, [pc, #324]	; (8000390 <MX_ADC1_Init+0x1bc>)
 800024c:	2200      	movs	r2, #0
 800024e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000250:	484f      	ldr	r0, [pc, #316]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000252:	f001 ff7d 	bl	8002150 <HAL_ADC_Init>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800025c:	f000 ff5e 	bl	800111c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000260:	2300      	movs	r3, #0
 8000262:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000264:	f107 031c 	add.w	r3, r7, #28
 8000268:	4619      	mov	r1, r3
 800026a:	4849      	ldr	r0, [pc, #292]	; (8000390 <MX_ADC1_Init+0x1bc>)
 800026c:	f002 fd72 	bl	8002d54 <HAL_ADCEx_MultiModeConfigChannel>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000276:	f000 ff51 	bl	800111c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800027a:	2301      	movs	r3, #1
 800027c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800027e:	2301      	movs	r3, #1
 8000280:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000282:	2300      	movs	r3, #0
 8000284:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000286:	2300      	movs	r3, #0
 8000288:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800028e:	2300      	movs	r3, #0
 8000290:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	4619      	mov	r1, r3
 8000296:	483e      	ldr	r0, [pc, #248]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000298:	f002 fa70 	bl	800277c <HAL_ADC_ConfigChannel>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80002a2:	f000 ff3b 	bl	800111c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80002a6:	2302      	movs	r3, #2
 80002a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002aa:	2302      	movs	r3, #2
 80002ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	4619      	mov	r1, r3
 80002b2:	4837      	ldr	r0, [pc, #220]	; (8000390 <MX_ADC1_Init+0x1bc>)
 80002b4:	f002 fa62 	bl	800277c <HAL_ADC_ConfigChannel>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80002be:	f000 ff2d 	bl	800111c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002c2:	2303      	movs	r3, #3
 80002c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002c6:	2303      	movs	r3, #3
 80002c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4619      	mov	r1, r3
 80002ce:	4830      	ldr	r0, [pc, #192]	; (8000390 <MX_ADC1_Init+0x1bc>)
 80002d0:	f002 fa54 	bl	800277c <HAL_ADC_ConfigChannel>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 80002da:	f000 ff1f 	bl	800111c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80002de:	2304      	movs	r3, #4
 80002e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80002e2:	2304      	movs	r3, #4
 80002e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4619      	mov	r1, r3
 80002ea:	4829      	ldr	r0, [pc, #164]	; (8000390 <MX_ADC1_Init+0x1bc>)
 80002ec:	f002 fa46 	bl	800277c <HAL_ADC_ConfigChannel>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80002f6:	f000 ff11 	bl	800111c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80002fa:	2306      	movs	r3, #6
 80002fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80002fe:	2305      	movs	r3, #5
 8000300:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	4619      	mov	r1, r3
 8000306:	4822      	ldr	r0, [pc, #136]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000308:	f002 fa38 	bl	800277c <HAL_ADC_ConfigChannel>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 8000312:	f000 ff03 	bl	800111c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000316:	2307      	movs	r3, #7
 8000318:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800031a:	2306      	movs	r3, #6
 800031c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	4619      	mov	r1, r3
 8000322:	481b      	ldr	r0, [pc, #108]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000324:	f002 fa2a 	bl	800277c <HAL_ADC_ConfigChannel>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 800032e:	f000 fef5 	bl	800111c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000332:	2308      	movs	r3, #8
 8000334:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000336:	2307      	movs	r3, #7
 8000338:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	4619      	mov	r1, r3
 800033e:	4814      	ldr	r0, [pc, #80]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000340:	f002 fa1c 	bl	800277c <HAL_ADC_ConfigChannel>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 800034a:	f000 fee7 	bl	800111c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800034e:	2309      	movs	r3, #9
 8000350:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000352:	2308      	movs	r3, #8
 8000354:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4619      	mov	r1, r3
 800035a:	480d      	ldr	r0, [pc, #52]	; (8000390 <MX_ADC1_Init+0x1bc>)
 800035c:	f002 fa0e 	bl	800277c <HAL_ADC_ConfigChannel>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 8000366:	f000 fed9 	bl	800111c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800036a:	230e      	movs	r3, #14
 800036c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800036e:	2309      	movs	r3, #9
 8000370:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	4619      	mov	r1, r3
 8000376:	4806      	ldr	r0, [pc, #24]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000378:	f002 fa00 	bl	800277c <HAL_ADC_ConfigChannel>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_ADC1_Init+0x1b2>
  {
    Error_Handler();
 8000382:	f000 fecb 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000386:	bf00      	nop
 8000388:	3728      	adds	r7, #40	; 0x28
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000028 	.word	0x20000028

08000394 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b08c      	sub	sp, #48	; 0x30
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039c:	f107 031c 	add.w	r3, r7, #28
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
 80003aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80003b4:	d17e      	bne.n	80004b4 <HAL_ADC_MspInit+0x120>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80003b6:	4b41      	ldr	r3, [pc, #260]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a40      	ldr	r2, [pc, #256]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c0:	6153      	str	r3, [r2, #20]
 80003c2:	4b3e      	ldr	r3, [pc, #248]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ca:	61bb      	str	r3, [r7, #24]
 80003cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ce:	4b3b      	ldr	r3, [pc, #236]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	4a3a      	ldr	r2, [pc, #232]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003d8:	6153      	str	r3, [r2, #20]
 80003da:	4b38      	ldr	r3, [pc, #224]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003e2:	617b      	str	r3, [r7, #20]
 80003e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e6:	4b35      	ldr	r3, [pc, #212]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a34      	ldr	r2, [pc, #208]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003f0:	6153      	str	r3, [r2, #20]
 80003f2:	4b32      	ldr	r3, [pc, #200]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003fa:	613b      	str	r3, [r7, #16]
 80003fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fe:	4b2f      	ldr	r3, [pc, #188]	; (80004bc <HAL_ADC_MspInit+0x128>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a2e      	ldr	r2, [pc, #184]	; (80004bc <HAL_ADC_MspInit+0x128>)
 8000404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000408:	6153      	str	r3, [r2, #20]
 800040a:	4b2c      	ldr	r3, [pc, #176]	; (80004bc <HAL_ADC_MspInit+0x128>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB11     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = pAIN_SUBDIV_Pin|pAIN_EXP_Pin|pAIN_TRIM_1_Pin|pAIN_TRIM_2_Pin;
 8000416:	230f      	movs	r3, #15
 8000418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800041a:	2303      	movs	r3, #3
 800041c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041e:	2300      	movs	r3, #0
 8000420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000422:	f107 031c 	add.w	r3, r7, #28
 8000426:	4619      	mov	r1, r3
 8000428:	4825      	ldr	r0, [pc, #148]	; (80004c0 <HAL_ADC_MspInit+0x12c>)
 800042a:	f003 f9f5 	bl	8003818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = pAIN_RATE_Pin|pAIN_DEPTH_Pin|pAIN_SHAPE_Pin|pAIN_OFFSET_Pin;
 800042e:	230f      	movs	r3, #15
 8000430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000432:	2303      	movs	r3, #3
 8000434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000436:	2300      	movs	r3, #0
 8000438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043a:	f107 031c 	add.w	r3, r7, #28
 800043e:	4619      	mov	r1, r3
 8000440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000444:	f003 f9e8 	bl	8003818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = pAIN_VOL_Pin;
 8000448:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800044c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800044e:	2303      	movs	r3, #3
 8000450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000452:	2300      	movs	r3, #0
 8000454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(pAIN_VOL_GPIO_Port, &GPIO_InitStruct);
 8000456:	f107 031c 	add.w	r3, r7, #28
 800045a:	4619      	mov	r1, r3
 800045c:	4819      	ldr	r0, [pc, #100]	; (80004c4 <HAL_ADC_MspInit+0x130>)
 800045e:	f003 f9db 	bl	8003818 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000462:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 8000464:	4a19      	ldr	r2, [pc, #100]	; (80004cc <HAL_ADC_MspInit+0x138>)
 8000466:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000468:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 800046a:	2200      	movs	r2, #0
 800046c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800046e:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000474:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 8000476:	2280      	movs	r2, #128	; 0x80
 8000478:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800047a:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 800047c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000480:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000482:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 8000484:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000488:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 800048c:	2220      	movs	r2, #32
 800048e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000490:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 8000492:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000496:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000498:	480b      	ldr	r0, [pc, #44]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 800049a:	f002 ff8e 	bl	80033ba <HAL_DMA_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 80004a4:	f000 fe3a 	bl	800111c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a07      	ldr	r2, [pc, #28]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 80004ac:	639a      	str	r2, [r3, #56]	; 0x38
 80004ae:	4a06      	ldr	r2, [pc, #24]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80004b4:	bf00      	nop
 80004b6:	3730      	adds	r7, #48	; 0x30
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40021000 	.word	0x40021000
 80004c0:	48000800 	.word	0x48000800
 80004c4:	48000400 	.word	0x48000400
 80004c8:	20000078 	.word	0x20000078
 80004cc:	40020008 	.word	0x40020008

080004d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d6:	4b26      	ldr	r3, [pc, #152]	; (8000570 <MX_DMA_Init+0xa0>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a25      	ldr	r2, [pc, #148]	; (8000570 <MX_DMA_Init+0xa0>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	4b23      	ldr	r3, [pc, #140]	; (8000570 <MX_DMA_Init+0xa0>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004ee:	4b20      	ldr	r3, [pc, #128]	; (8000570 <MX_DMA_Init+0xa0>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a1f      	ldr	r2, [pc, #124]	; (8000570 <MX_DMA_Init+0xa0>)
 80004f4:	f043 0302 	orr.w	r3, r3, #2
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <MX_DMA_Init+0xa0>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f003 0302 	and.w	r3, r3, #2
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 4, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2104      	movs	r1, #4
 800050a:	200b      	movs	r0, #11
 800050c:	f002 ff1f 	bl	800334e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000510:	200b      	movs	r0, #11
 8000512:	f002 ff38 	bl	8003386 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 4, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	2104      	movs	r1, #4
 800051a:	200e      	movs	r0, #14
 800051c:	f002 ff17 	bl	800334e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000520:	200e      	movs	r0, #14
 8000522:	f002 ff30 	bl	8003386 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2100      	movs	r1, #0
 800052a:	2038      	movs	r0, #56	; 0x38
 800052c:	f002 ff0f 	bl	800334e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000530:	2038      	movs	r0, #56	; 0x38
 8000532:	f002 ff28 	bl	8003386 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2100      	movs	r1, #0
 800053a:	2039      	movs	r0, #57	; 0x39
 800053c:	f002 ff07 	bl	800334e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000540:	2039      	movs	r0, #57	; 0x39
 8000542:	f002 ff20 	bl	8003386 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	203a      	movs	r0, #58	; 0x3a
 800054c:	f002 feff 	bl	800334e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000550:	203a      	movs	r0, #58	; 0x3a
 8000552:	f002 ff18 	bl	8003386 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2100      	movs	r1, #0
 800055a:	203c      	movs	r0, #60	; 0x3c
 800055c:	f002 fef7 	bl	800334e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000560:	203c      	movs	r0, #60	; 0x3c
 8000562:	f002 ff10 	bl	8003386 <HAL_NVIC_EnableIRQ>

}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000

08000574 <MX_GPIO_Init>:
        * EXTI
     PC0   ------> ADCx_IN6
     PC1   ------> ADCx_IN7
*/
void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058a:	4b66      	ldr	r3, [pc, #408]	; (8000724 <MX_GPIO_Init+0x1b0>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	4a65      	ldr	r2, [pc, #404]	; (8000724 <MX_GPIO_Init+0x1b0>)
 8000590:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000594:	6153      	str	r3, [r2, #20]
 8000596:	4b63      	ldr	r3, [pc, #396]	; (8000724 <MX_GPIO_Init+0x1b0>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005a2:	4b60      	ldr	r3, [pc, #384]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	4a5f      	ldr	r2, [pc, #380]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005ac:	6153      	str	r3, [r2, #20]
 80005ae:	4b5d      	ldr	r3, [pc, #372]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b5a      	ldr	r3, [pc, #360]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a59      	ldr	r2, [pc, #356]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c4:	6153      	str	r3, [r2, #20]
 80005c6:	4b57      	ldr	r3, [pc, #348]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	4b54      	ldr	r3, [pc, #336]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4a53      	ldr	r2, [pc, #332]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005dc:	6153      	str	r3, [r2, #20]
 80005de:	4b51      	ldr	r3, [pc, #324]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ea:	4b4e      	ldr	r3, [pc, #312]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a4d      	ldr	r2, [pc, #308]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f4:	6153      	str	r3, [r2, #20]
 80005f6:	4b4b      	ldr	r3, [pc, #300]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, pDOUT_MUTE_1_Pin|pDOUT_MUTE_2_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000608:	4847      	ldr	r0, [pc, #284]	; (8000728 <MX_GPIO_Init+0x1b4>)
 800060a:	f003 faa7 	bl	8003b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pDOUT_RLY_SET_GPIO_Port, pDOUT_RLY_SET_Pin, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000618:	f003 faa0 	bl	8003b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pDOUT_LED1_B_GPIO_Port, pDOUT_LED1_B_Pin, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000622:	4841      	ldr	r0, [pc, #260]	; (8000728 <MX_GPIO_Init+0x1b4>)
 8000624:	f003 fa9a 	bl	8003b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pDOUT_LED1_G_GPIO_Port, pDOUT_LED1_G_Pin, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2104      	movs	r1, #4
 800062c:	483f      	ldr	r0, [pc, #252]	; (800072c <MX_GPIO_Init+0x1b8>)
 800062e:	f003 fa95 	bl	8003b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, pDOUT_LED1_R_Pin|pDOUT_LED2_B_Pin|pDOUT_LED2_G_Pin|pDOUT_LED2_R_Pin, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	21f0      	movs	r1, #240	; 0xf0
 8000636:	483e      	ldr	r0, [pc, #248]	; (8000730 <MX_GPIO_Init+0x1bc>)
 8000638:	f003 fa90 	bl	8003b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = pDOUT_MUTE_1_Pin|pDOUT_MUTE_2_Pin|pDOUT_LED1_B_Pin;
 800063c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	4834      	ldr	r0, [pc, #208]	; (8000728 <MX_GPIO_Init+0x1b4>)
 8000656:	f003 f8df 	bl	8003818 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = pAIN_SUBDIV_Pin|pAIN_EXP_Pin;
 800065a:	2303      	movs	r3, #3
 800065c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800065e:	2303      	movs	r3, #3
 8000660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	482e      	ldr	r0, [pc, #184]	; (8000728 <MX_GPIO_Init+0x1b4>)
 800066e:	f003 f8d3 	bl	8003818 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = pDIN_PAN_MODE_1_Pin|pDIN_EXP_Pin|pDIN_DIP_4_Pin;
 8000672:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800067c:	2301      	movs	r3, #1
 800067e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4619      	mov	r1, r3
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f003 f8c5 	bl	8003818 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = pDIN_DIP_1_Pin|pDIN_DIP_2_Pin|pDIN_DIP_3_Pin|pDIN_HARM_MODE_2_Pin
 800068e:	f247 6307 	movw	r3, #30215	; 0x7607
 8000692:	617b      	str	r3, [r7, #20]
                          |pDIN_PAN_MODE_2_Pin|pDIN_ENV_MODE_1_Pin|pDIN_ENV_MODE_2_Pin|pDIN_HARM_MODE_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000698:	2301      	movs	r3, #1
 800069a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	4823      	ldr	r0, [pc, #140]	; (8000730 <MX_GPIO_Init+0x1bc>)
 80006a4:	f003 f8b8 	bl	8003818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = pDOUT_RLY_SET_Pin;
 80006a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(pDOUT_RLY_SET_GPIO_Port, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f003 f8a8 	bl	8003818 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = pDIN_JACK_SW_1_Pin|pDIN_JACK_SW_2_Pin;
 80006c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d2:	2301      	movs	r3, #1
 80006d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	4812      	ldr	r0, [pc, #72]	; (8000728 <MX_GPIO_Init+0x1b4>)
 80006de:	f003 f89b 	bl	8003818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = pDOUT_LED1_G_Pin;
 80006e2:	2304      	movs	r3, #4
 80006e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	2300      	movs	r3, #0
 80006f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(pDOUT_LED1_G_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <MX_GPIO_Init+0x1b8>)
 80006fa:	f003 f88d 	bl	8003818 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = pDOUT_LED1_R_Pin|pDOUT_LED2_B_Pin|pDOUT_LED2_G_Pin|pDOUT_LED2_R_Pin;
 80006fe:	23f0      	movs	r3, #240	; 0xf0
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	2301      	movs	r3, #1
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2300      	movs	r3, #0
 800070c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4619      	mov	r1, r3
 8000714:	4806      	ldr	r0, [pc, #24]	; (8000730 <MX_GPIO_Init+0x1bc>)
 8000716:	f003 f87f 	bl	8003818 <HAL_GPIO_Init>

}
 800071a:	bf00      	nop
 800071c:	3728      	adds	r7, #40	; 0x28
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000
 8000728:	48000800 	.word	0x48000800
 800072c:	48000c00 	.word	0x48000c00
 8000730:	48000400 	.word	0x48000400

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b08d      	sub	sp, #52	; 0x34
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073a:	f001 fc6b 	bl	8002014 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* Iniitalize state machines */
  StateBypassSw state_bypass_sw = STATE_IDLE;
 800073e:	2300      	movs	r3, #0
 8000740:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  StateEffect state_effect = STATE_BYPASS;
 8000744:	2301      	movs	r3, #1
 8000746:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  StateRelayMute state_relay_mute = STATE_BYPASS_UNMUTE;
 800074a:	2302      	movs	r3, #2
 800074c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  StatePhase state_phase = STATE_STD;
 8000750:	2300      	movs	r3, #0
 8000752:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  Adc adc_raw;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000756:	f000 f915 	bl	8000984 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  // Needs to be done first to fix bug in autogenerated code X_X
  MX_DMA_Init();
 800075a:	f7ff feb9 	bl	80004d0 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075e:	f7ff ff09 	bl	8000574 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000762:	f7ff fd37 	bl	80001d4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000766:	f000 fded 	bl	8001344 <MX_TIM2_Init>
  MX_TIM3_Init();
 800076a:	f000 fe6d 	bl	8001448 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800076e:	f001 fa55 	bl	8001c1c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000772:	f000 fee5 	bl	8001540 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000776:	f000 ff4f 	bl	8001618 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  // Map named Adc members to DMA buffer array
  init_adc_channels(&adc_raw, adc_array);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4971      	ldr	r1, [pc, #452]	; (8000944 <main+0x210>)
 800077e:	4618      	mov	r0, r3
 8000780:	f000 f96c 	bl	8000a5c <init_adc_channels>

  // TODO clean up and move to function
  if (HAL_ADC_Start_DMA(&hadc1, adc_array,
 8000784:	2209      	movs	r2, #9
 8000786:	496f      	ldr	r1, [pc, #444]	; (8000944 <main+0x210>)
 8000788:	486f      	ldr	r0, [pc, #444]	; (8000948 <main+0x214>)
 800078a:	f001 fedb 	bl	8002544 <HAL_ADC_Start_DMA>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <main+0x64>
		  ADC_DMA_BUF_LENGTH) != HAL_OK)
  {
	  Error_Handler();
 8000794:	f000 fcc2 	bl	800111c <Error_Handler>
  }

  // Start PWM for Volume outputs
  if ((HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) |
 8000798:	2100      	movs	r1, #0
 800079a:	486c      	ldr	r0, [pc, #432]	; (800094c <main+0x218>)
 800079c:	f005 f8ca 	bl	8005934 <HAL_TIM_PWM_Start>
 80007a0:	4603      	mov	r3, r0
 80007a2:	461c      	mov	r4, r3
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2)) != HAL_OK)
 80007a4:	2104      	movs	r1, #4
 80007a6:	4869      	ldr	r0, [pc, #420]	; (800094c <main+0x218>)
 80007a8:	f005 f8c4 	bl	8005934 <HAL_TIM_PWM_Start>
 80007ac:	4603      	mov	r3, r0
 80007ae:	4323      	orrs	r3, r4
 80007b0:	b2db      	uxtb	r3, r3
  if ((HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) |
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <main+0x86>
  {
	  Error_Handler();
 80007b6:	f000 fcb1 	bl	800111c <Error_Handler>
  }

  // Start output compare for waveform timers (to update the wavetables)
  if ((HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_1) |
 80007ba:	2100      	movs	r1, #0
 80007bc:	4864      	ldr	r0, [pc, #400]	; (8000950 <main+0x21c>)
 80007be:	f004 ff55 	bl	800566c <HAL_TIM_OC_Start>
 80007c2:	4603      	mov	r3, r0
 80007c4:	461c      	mov	r4, r3
	  HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_2) |
 80007c6:	2104      	movs	r1, #4
 80007c8:	4861      	ldr	r0, [pc, #388]	; (8000950 <main+0x21c>)
 80007ca:	f004 ff4f 	bl	800566c <HAL_TIM_OC_Start>
 80007ce:	4603      	mov	r3, r0
	  HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_3) |
	  HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_4)) != HAL_OK)
 80007d0:	4323      	orrs	r3, r4
 80007d2:	b2dc      	uxtb	r4, r3
	  HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_3) |
 80007d4:	2108      	movs	r1, #8
 80007d6:	485e      	ldr	r0, [pc, #376]	; (8000950 <main+0x21c>)
 80007d8:	f004 ff48 	bl	800566c <HAL_TIM_OC_Start>
 80007dc:	4603      	mov	r3, r0
	  HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_4)) != HAL_OK)
 80007de:	4323      	orrs	r3, r4
 80007e0:	b2dc      	uxtb	r4, r3
 80007e2:	210c      	movs	r1, #12
 80007e4:	485a      	ldr	r0, [pc, #360]	; (8000950 <main+0x21c>)
 80007e6:	f004 ff41 	bl	800566c <HAL_TIM_OC_Start>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4323      	orrs	r3, r4
 80007ee:	b2db      	uxtb	r3, r3
  if ((HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_1) |
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <main+0xc4>
  {
	  Error_Handler();
 80007f4:	f000 fc92 	bl	800111c <Error_Handler>
  }

  // Start PWM output for PWM timers (the ones that actually output the LFOs)
  if ((HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) |
 80007f8:	2100      	movs	r1, #0
 80007fa:	4856      	ldr	r0, [pc, #344]	; (8000954 <main+0x220>)
 80007fc:	f005 f89a 	bl	8005934 <HAL_TIM_PWM_Start>
 8000800:	4603      	mov	r3, r0
 8000802:	461c      	mov	r4, r3
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) |
 8000804:	2104      	movs	r1, #4
 8000806:	4853      	ldr	r0, [pc, #332]	; (8000954 <main+0x220>)
 8000808:	f005 f894 	bl	8005934 <HAL_TIM_PWM_Start>
 800080c:	4603      	mov	r3, r0
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) |
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4)) != HAL_OK)
 800080e:	4323      	orrs	r3, r4
 8000810:	b2dc      	uxtb	r4, r3
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) |
 8000812:	2108      	movs	r1, #8
 8000814:	484f      	ldr	r0, [pc, #316]	; (8000954 <main+0x220>)
 8000816:	f005 f88d 	bl	8005934 <HAL_TIM_PWM_Start>
 800081a:	4603      	mov	r3, r0
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4)) != HAL_OK)
 800081c:	4323      	orrs	r3, r4
 800081e:	b2dc      	uxtb	r4, r3
 8000820:	210c      	movs	r1, #12
 8000822:	484c      	ldr	r0, [pc, #304]	; (8000954 <main+0x220>)
 8000824:	f005 f886 	bl	8005934 <HAL_TIM_PWM_Start>
 8000828:	4603      	mov	r3, r0
 800082a:	4323      	orrs	r3, r4
 800082c:	b2db      	uxtb	r3, r3
  if ((HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) |
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <main+0x102>
  {
	  Error_Handler();
 8000832:	f000 fc73 	bl	800111c <Error_Handler>
  }

  // First just setting all 4 channels synced to same wavetable
  // TODO figure out best way to have different phases per channel
  HAL_DMA_Start_IT(&hdma_tim8_ch1, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR1), WAVETABLE_WIDTH);
 8000836:	4948      	ldr	r1, [pc, #288]	; (8000958 <main+0x224>)
 8000838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800083c:	4a47      	ldr	r2, [pc, #284]	; (800095c <main+0x228>)
 800083e:	4848      	ldr	r0, [pc, #288]	; (8000960 <main+0x22c>)
 8000840:	f002 fe44 	bl	80034cc <HAL_DMA_Start_IT>
  HAL_DMA_Start_IT(&hdma_tim8_ch2, (uint32_t)dma_wavetable_b, (uint32_t)&(TIM3->CCR2), WAVETABLE_WIDTH);
 8000844:	4947      	ldr	r1, [pc, #284]	; (8000964 <main+0x230>)
 8000846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084a:	4a47      	ldr	r2, [pc, #284]	; (8000968 <main+0x234>)
 800084c:	4847      	ldr	r0, [pc, #284]	; (800096c <main+0x238>)
 800084e:	f002 fe3d 	bl	80034cc <HAL_DMA_Start_IT>
  HAL_DMA_Start_IT(&hdma_tim8_ch3_up, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR3), WAVETABLE_WIDTH);
 8000852:	4941      	ldr	r1, [pc, #260]	; (8000958 <main+0x224>)
 8000854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000858:	4a45      	ldr	r2, [pc, #276]	; (8000970 <main+0x23c>)
 800085a:	4846      	ldr	r0, [pc, #280]	; (8000974 <main+0x240>)
 800085c:	f002 fe36 	bl	80034cc <HAL_DMA_Start_IT>
  HAL_DMA_Start_IT(&hdma_tim8_ch4_trig_com, (uint32_t)dma_wavetable_b, (uint32_t)&(TIM3->CCR4), WAVETABLE_WIDTH);
 8000860:	4940      	ldr	r1, [pc, #256]	; (8000964 <main+0x230>)
 8000862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000866:	4a44      	ldr	r2, [pc, #272]	; (8000978 <main+0x244>)
 8000868:	4844      	ldr	r0, [pc, #272]	; (800097c <main+0x248>)
 800086a:	f002 fe2f 	bl	80034cc <HAL_DMA_Start_IT>
  __HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 800086e:	4b38      	ldr	r3, [pc, #224]	; (8000950 <main+0x21c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	68da      	ldr	r2, [r3, #12]
 8000874:	4b36      	ldr	r3, [pc, #216]	; (8000950 <main+0x21c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800087c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 800087e:	4b34      	ldr	r3, [pc, #208]	; (8000950 <main+0x21c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	68da      	ldr	r2, [r3, #12]
 8000884:	4b32      	ldr	r3, [pc, #200]	; (8000950 <main+0x21c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800088c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 800088e:	4b30      	ldr	r3, [pc, #192]	; (8000950 <main+0x21c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	68da      	ldr	r2, [r3, #12]
 8000894:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <main+0x21c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800089c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC4);
 800089e:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <main+0x21c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	68da      	ldr	r2, [r3, #12]
 80008a4:	4b2a      	ldr	r3, [pc, #168]	; (8000950 <main+0x21c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80008ac:	60da      	str	r2, [r3, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Toggle heartbeat LED
	  led_toggle_tick(HEARTBEAT_MS, pDOUT_LED1_R_GPIO_Port, pDOUT_LED1_R_Pin);
 80008ae:	2210      	movs	r2, #16
 80008b0:	4933      	ldr	r1, [pc, #204]	; (8000980 <main+0x24c>)
 80008b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008b6:	f000 fb4d 	bl	8000f54 <led_toggle_tick>

	  // Check for bypass switch state and run state machine
	  EventBypassSw event_bypass_sw = EVENT_RELEASED;
 80008ba:	2301      	movs	r3, #1
 80008bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  if (!HAL_GPIO_ReadPin(pDIN_BYP_GPIO_Port, pDIN_BYP_Pin)){
 80008c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c8:	f003 f930 	bl	8003b2c <HAL_GPIO_ReadPin>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d102      	bne.n	80008d8 <main+0x1a4>
		  event_bypass_sw = EVENT_PRESSED;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  }
	  sm_bypass_sw(&state_bypass_sw, event_bypass_sw, &state_effect);
 80008d8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80008dc:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80008e0:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 fa0d 	bl	8001d04 <sm_bypass_sw>

	  EventRelayMute event_relay_mute = EVENT_BYPASS;
 80008ea:	2301      	movs	r3, #1
 80008ec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  if (state_effect == STATE_EFFECT){
 80008f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d102      	bne.n	80008fe <main+0x1ca>
		  event_relay_mute = EVENT_EFFECT;
 80008f8:	2300      	movs	r3, #0
 80008fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  }

	  sm_relay_mute(&state_relay_mute, event_relay_mute);
 80008fe:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8000902:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8000906:	4611      	mov	r1, r2
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fa83 	bl	8001e14 <sm_relay_mute>

	  // Generate new triangle wave based on latest depth input
	  generate_triangle_wave_floatingpoint(*adc_raw.Depth, *adc_raw.Offset);
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4619      	mov	r1, r3
 8000918:	4610      	mov	r0, r2
 800091a:	f000 fb3b 	bl	8000f94 <generate_triangle_wave_floatingpoint>

	  // Set parameters based on control inputs
	  set_rate(*adc_raw.Rate);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	b29b      	uxth	r3, r3
 8000924:	4618      	mov	r0, r3
 8000926:	f000 fae3 	bl	8000ef0 <set_rate>
	  set_volume(*adc_raw.Vol);
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	b29b      	uxth	r3, r3
 8000930:	4618      	mov	r0, r3
 8000932:	f000 faa1 	bl	8000e78 <set_volume>
	  set_phase(&state_phase);
 8000936:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f8c4 	bl	8000ac8 <set_phase>
  {
 8000940:	e7b5      	b.n	80008ae <main+0x17a>
 8000942:	bf00      	nop
 8000944:	200000bc 	.word	0x200000bc
 8000948:	20000028 	.word	0x20000028
 800094c:	200010e4 	.word	0x200010e4
 8000950:	200011c8 	.word	0x200011c8
 8000954:	20001130 	.word	0x20001130
 8000958:	200000e0 	.word	0x200000e0
 800095c:	40000434 	.word	0x40000434
 8000960:	20001258 	.word	0x20001258
 8000964:	200008e0 	.word	0x200008e0
 8000968:	40000438 	.word	0x40000438
 800096c:	2000129c 	.word	0x2000129c
 8000970:	4000043c 	.word	0x4000043c
 8000974:	200012e0 	.word	0x200012e0
 8000978:	40000440 	.word	0x40000440
 800097c:	20001324 	.word	0x20001324
 8000980:	48000400 	.word	0x48000400

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b0a6      	sub	sp, #152	; 0x98
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800098e:	2228      	movs	r2, #40	; 0x28
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f007 f81c 	bl	80079d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2258      	movs	r2, #88	; 0x58
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f007 f80e 	bl	80079d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b4:	2301      	movs	r3, #1
 80009b6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009bc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009be:	2301      	movs	r3, #1
 80009c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c2:	2302      	movs	r3, #2
 80009c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80009d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80009d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80009e2:	4618      	mov	r0, r3
 80009e4:	f003 f8ec 	bl	8003bc0 <HAL_RCC_OscConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009ee:	f000 fb95 	bl	800111c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f2:	230f      	movs	r3, #15
 80009f4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f6:	2302      	movs	r3, #2
 80009f8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a06:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f004 f92b 	bl	8004c68 <HAL_RCC_ClockConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a18:	f000 fb80 	bl	800111c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM8
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <SystemClock_Config+0xd4>)
 8000a1e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV8;
 8000a24:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_PLLCLK;
 8000a2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a2e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_PLLCLK;
 8000a30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a34:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_PLLCLK;
 8000a36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a3a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f004 fb48 	bl	80050d4 <HAL_RCCEx_PeriphCLKConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a4a:	f000 fb67 	bl	800111c <Error_Handler>
  }
}
 8000a4e:	bf00      	nop
 8000a50:	3798      	adds	r7, #152	; 0x98
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	00302081 	.word	0x00302081

08000a5c <init_adc_channels>:

/* USER CODE BEGIN 4 */

// This maps named Adc struct members to the DMA buffer for convenience
void init_adc_channels(Adc *adc, uint32_t adc_buffer[]){
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
	adc->Rate = &adc_buffer[0];
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	683a      	ldr	r2, [r7, #0]
 8000a6a:	601a      	str	r2, [r3, #0]
	adc->Depth = &adc_buffer[1];
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	1d1a      	adds	r2, r3, #4
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	605a      	str	r2, [r3, #4]
	adc->Shape = &adc_buffer[2];
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	f103 0208 	add.w	r2, r3, #8
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
	adc->Offset = &adc_buffer[3];
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	f103 020c 	add.w	r2, r3, #12
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	60da      	str	r2, [r3, #12]
	adc->Subdiv = &adc_buffer[4];
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	f103 0210 	add.w	r2, r3, #16
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	611a      	str	r2, [r3, #16]
	adc->Exp = &adc_buffer[5];
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	f103 0214 	add.w	r2, r3, #20
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	615a      	str	r2, [r3, #20]
	adc->Trim1 = &adc_buffer[6];
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	f103 0218 	add.w	r2, r3, #24
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	619a      	str	r2, [r3, #24]
	adc->Trim2 = &adc_buffer[7];
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	f103 021c 	add.w	r2, r3, #28
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	61da      	str	r2, [r3, #28]
	adc->Vol = &adc_buffer[8];
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	f103 0220 	add.w	r2, r3, #32
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	621a      	str	r2, [r3, #32]
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <set_phase>:

void set_phase(StatePhase* state){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	  uint32_t ph_left = HAL_GPIO_ReadPin(pDIN_HARM_MODE_1_GPIO_Port,
 8000ad0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad4:	4811      	ldr	r0, [pc, #68]	; (8000b1c <set_phase+0x54>)
 8000ad6:	f003 f829 	bl	8003b2c <HAL_GPIO_ReadPin>
 8000ada:	4603      	mov	r3, r0
 8000adc:	60fb      	str	r3, [r7, #12]
			  pDIN_HARM_MODE_1_Pin);
	  uint32_t ph_right = HAL_GPIO_ReadPin(pDIN_HARM_MODE_2_GPIO_Port,
 8000ade:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae2:	480e      	ldr	r0, [pc, #56]	; (8000b1c <set_phase+0x54>)
 8000ae4:	f003 f822 	bl	8003b2c <HAL_GPIO_ReadPin>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	60bb      	str	r3, [r7, #8]
			  pDIN_HARM_MODE_2_Pin);
	  if (!ph_left){sm_phase(state, EVENT_PAN);}
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d104      	bne.n	8000afc <set_phase+0x34>
 8000af2:	2102      	movs	r1, #2
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f000 f813 	bl	8000b20 <sm_phase>
	  else if (!ph_right){sm_phase(state, EVENT_HARM);}
	  else {sm_phase(state, EVENT_STD);}
}
 8000afa:	e00b      	b.n	8000b14 <set_phase+0x4c>
	  else if (!ph_right){sm_phase(state, EVENT_HARM);}
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d104      	bne.n	8000b0c <set_phase+0x44>
 8000b02:	2101      	movs	r1, #1
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f000 f80b 	bl	8000b20 <sm_phase>
}
 8000b0a:	e003      	b.n	8000b14 <set_phase+0x4c>
	  else {sm_phase(state, EVENT_STD);}
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f000 f806 	bl	8000b20 <sm_phase>
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	48000400 	.word	0x48000400

08000b20 <sm_phase>:

void sm_phase(StatePhase* state, EventPhase event){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	70fb      	strb	r3, [r7, #3]
	switch (*state) {
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	f000 8102 	beq.w	8000d3a <sm_phase+0x21a>
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	f300 8192 	bgt.w	8000e60 <sm_phase+0x340>
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d002      	beq.n	8000b46 <sm_phase+0x26>
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d07d      	beq.n	8000c40 <sm_phase+0x120>
			}
			break;

		default:

			break;
 8000b44:	e18c      	b.n	8000e60 <sm_phase+0x340>
			if (event == EVENT_HARM){
 8000b46:	78fb      	ldrb	r3, [r7, #3]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d13a      	bne.n	8000bc2 <sm_phase+0xa2>
				*state = STATE_HARM;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2201      	movs	r2, #1
 8000b50:	701a      	strb	r2, [r3, #0]
				HAL_DMA_Abort(&hdma_tim8_ch1);
 8000b52:	48b8      	ldr	r0, [pc, #736]	; (8000e34 <sm_phase+0x314>)
 8000b54:	f002 fd19 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch1, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR1), WAVETABLE_WIDTH);
 8000b58:	49b7      	ldr	r1, [pc, #732]	; (8000e38 <sm_phase+0x318>)
 8000b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b5e:	4ab7      	ldr	r2, [pc, #732]	; (8000e3c <sm_phase+0x31c>)
 8000b60:	48b4      	ldr	r0, [pc, #720]	; (8000e34 <sm_phase+0x314>)
 8000b62:	f002 fcb3 	bl	80034cc <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch2);
 8000b66:	48b6      	ldr	r0, [pc, #728]	; (8000e40 <sm_phase+0x320>)
 8000b68:	f002 fd0f 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch2, (uint32_t)dma_wavetable_b, (uint32_t)&(TIM3->CCR2), WAVETABLE_WIDTH);
 8000b6c:	49b5      	ldr	r1, [pc, #724]	; (8000e44 <sm_phase+0x324>)
 8000b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b72:	4ab5      	ldr	r2, [pc, #724]	; (8000e48 <sm_phase+0x328>)
 8000b74:	48b2      	ldr	r0, [pc, #712]	; (8000e40 <sm_phase+0x320>)
 8000b76:	f002 fca9 	bl	80034cc <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch3_up);
 8000b7a:	48b4      	ldr	r0, [pc, #720]	; (8000e4c <sm_phase+0x32c>)
 8000b7c:	f002 fd05 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch3_up, (uint32_t)dma_wavetable_b, (uint32_t)&(TIM3->CCR3), WAVETABLE_WIDTH);
 8000b80:	49b0      	ldr	r1, [pc, #704]	; (8000e44 <sm_phase+0x324>)
 8000b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b86:	4ab2      	ldr	r2, [pc, #712]	; (8000e50 <sm_phase+0x330>)
 8000b88:	48b0      	ldr	r0, [pc, #704]	; (8000e4c <sm_phase+0x32c>)
 8000b8a:	f002 fc9f 	bl	80034cc <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
 8000b8e:	48b1      	ldr	r0, [pc, #708]	; (8000e54 <sm_phase+0x334>)
 8000b90:	f002 fcfb 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch4_trig_com, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR4), WAVETABLE_WIDTH);
 8000b94:	49a8      	ldr	r1, [pc, #672]	; (8000e38 <sm_phase+0x318>)
 8000b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b9a:	4aaf      	ldr	r2, [pc, #700]	; (8000e58 <sm_phase+0x338>)
 8000b9c:	48ad      	ldr	r0, [pc, #692]	; (8000e54 <sm_phase+0x334>)
 8000b9e:	f002 fc95 	bl	80034cc <HAL_DMA_Start_IT>
				HAL_GPIO_WritePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin, LED_PIN_RESET);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2180      	movs	r1, #128	; 0x80
 8000ba6:	48ad      	ldr	r0, [pc, #692]	; (8000e5c <sm_phase+0x33c>)
 8000ba8:	f002 ffd8 	bl	8003b5c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pDOUT_LED2_G_GPIO_Port, pDOUT_LED2_G_Pin, LED_PIN_SET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2140      	movs	r1, #64	; 0x40
 8000bb0:	48aa      	ldr	r0, [pc, #680]	; (8000e5c <sm_phase+0x33c>)
 8000bb2:	f002 ffd3 	bl	8003b5c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pDOUT_LED2_B_GPIO_Port, pDOUT_LED2_B_Pin, LED_PIN_RESET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2120      	movs	r1, #32
 8000bba:	48a8      	ldr	r0, [pc, #672]	; (8000e5c <sm_phase+0x33c>)
 8000bbc:	f002 ffce 	bl	8003b5c <HAL_GPIO_WritePin>
			break;
 8000bc0:	e150      	b.n	8000e64 <sm_phase+0x344>
			else if (event == EVENT_PAN){
 8000bc2:	78fb      	ldrb	r3, [r7, #3]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	f040 814d 	bne.w	8000e64 <sm_phase+0x344>
				*state = STATE_PAN;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2202      	movs	r2, #2
 8000bce:	701a      	strb	r2, [r3, #0]
				HAL_DMA_Abort(&hdma_tim8_ch1);
 8000bd0:	4898      	ldr	r0, [pc, #608]	; (8000e34 <sm_phase+0x314>)
 8000bd2:	f002 fcda 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start(&hdma_tim8_ch1, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR1), WAVETABLE_WIDTH);
 8000bd6:	4998      	ldr	r1, [pc, #608]	; (8000e38 <sm_phase+0x318>)
 8000bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bdc:	4a97      	ldr	r2, [pc, #604]	; (8000e3c <sm_phase+0x31c>)
 8000bde:	4895      	ldr	r0, [pc, #596]	; (8000e34 <sm_phase+0x314>)
 8000be0:	f002 fc32 	bl	8003448 <HAL_DMA_Start>
				HAL_DMA_Abort(&hdma_tim8_ch2);
 8000be4:	4896      	ldr	r0, [pc, #600]	; (8000e40 <sm_phase+0x320>)
 8000be6:	f002 fcd0 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start(&hdma_tim8_ch2, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR2), WAVETABLE_WIDTH);
 8000bea:	4993      	ldr	r1, [pc, #588]	; (8000e38 <sm_phase+0x318>)
 8000bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf0:	4a95      	ldr	r2, [pc, #596]	; (8000e48 <sm_phase+0x328>)
 8000bf2:	4893      	ldr	r0, [pc, #588]	; (8000e40 <sm_phase+0x320>)
 8000bf4:	f002 fc28 	bl	8003448 <HAL_DMA_Start>
				HAL_DMA_Abort(&hdma_tim8_ch3_up);
 8000bf8:	4894      	ldr	r0, [pc, #592]	; (8000e4c <sm_phase+0x32c>)
 8000bfa:	f002 fcc6 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start(&hdma_tim8_ch3_up, (uint32_t)dma_wavetable_b, (uint32_t)&(TIM3->CCR3), WAVETABLE_WIDTH);
 8000bfe:	4991      	ldr	r1, [pc, #580]	; (8000e44 <sm_phase+0x324>)
 8000c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c04:	4a92      	ldr	r2, [pc, #584]	; (8000e50 <sm_phase+0x330>)
 8000c06:	4891      	ldr	r0, [pc, #580]	; (8000e4c <sm_phase+0x32c>)
 8000c08:	f002 fc1e 	bl	8003448 <HAL_DMA_Start>
				HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
 8000c0c:	4891      	ldr	r0, [pc, #580]	; (8000e54 <sm_phase+0x334>)
 8000c0e:	f002 fcbc 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start(&hdma_tim8_ch4_trig_com, (uint32_t)dma_wavetable_b, (uint32_t)&(TIM3->CCR4), WAVETABLE_WIDTH);
 8000c12:	498c      	ldr	r1, [pc, #560]	; (8000e44 <sm_phase+0x324>)
 8000c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c18:	4a8f      	ldr	r2, [pc, #572]	; (8000e58 <sm_phase+0x338>)
 8000c1a:	488e      	ldr	r0, [pc, #568]	; (8000e54 <sm_phase+0x334>)
 8000c1c:	f002 fc14 	bl	8003448 <HAL_DMA_Start>
				HAL_GPIO_WritePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin, LED_PIN_RESET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2180      	movs	r1, #128	; 0x80
 8000c24:	488d      	ldr	r0, [pc, #564]	; (8000e5c <sm_phase+0x33c>)
 8000c26:	f002 ff99 	bl	8003b5c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pDOUT_LED2_G_GPIO_Port, pDOUT_LED2_G_Pin, LED_PIN_RESET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2140      	movs	r1, #64	; 0x40
 8000c2e:	488b      	ldr	r0, [pc, #556]	; (8000e5c <sm_phase+0x33c>)
 8000c30:	f002 ff94 	bl	8003b5c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pDOUT_LED2_B_GPIO_Port, pDOUT_LED2_B_Pin, LED_PIN_SET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2120      	movs	r1, #32
 8000c38:	4888      	ldr	r0, [pc, #544]	; (8000e5c <sm_phase+0x33c>)
 8000c3a:	f002 ff8f 	bl	8003b5c <HAL_GPIO_WritePin>
			break;
 8000c3e:	e111      	b.n	8000e64 <sm_phase+0x344>
			if (event == EVENT_STD){
 8000c40:	78fb      	ldrb	r3, [r7, #3]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d13a      	bne.n	8000cbc <sm_phase+0x19c>
				*state = STATE_STD;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
				HAL_DMA_Abort(&hdma_tim8_ch1);
 8000c4c:	4879      	ldr	r0, [pc, #484]	; (8000e34 <sm_phase+0x314>)
 8000c4e:	f002 fc9c 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch1, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR1), WAVETABLE_WIDTH);
 8000c52:	4979      	ldr	r1, [pc, #484]	; (8000e38 <sm_phase+0x318>)
 8000c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c58:	4a78      	ldr	r2, [pc, #480]	; (8000e3c <sm_phase+0x31c>)
 8000c5a:	4876      	ldr	r0, [pc, #472]	; (8000e34 <sm_phase+0x314>)
 8000c5c:	f002 fc36 	bl	80034cc <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch2);
 8000c60:	4877      	ldr	r0, [pc, #476]	; (8000e40 <sm_phase+0x320>)
 8000c62:	f002 fc92 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch2, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR2), WAVETABLE_WIDTH);
 8000c66:	4974      	ldr	r1, [pc, #464]	; (8000e38 <sm_phase+0x318>)
 8000c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6c:	4a76      	ldr	r2, [pc, #472]	; (8000e48 <sm_phase+0x328>)
 8000c6e:	4874      	ldr	r0, [pc, #464]	; (8000e40 <sm_phase+0x320>)
 8000c70:	f002 fc2c 	bl	80034cc <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch3_up);
 8000c74:	4875      	ldr	r0, [pc, #468]	; (8000e4c <sm_phase+0x32c>)
 8000c76:	f002 fc88 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch3_up, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR3), WAVETABLE_WIDTH);
 8000c7a:	496f      	ldr	r1, [pc, #444]	; (8000e38 <sm_phase+0x318>)
 8000c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c80:	4a73      	ldr	r2, [pc, #460]	; (8000e50 <sm_phase+0x330>)
 8000c82:	4872      	ldr	r0, [pc, #456]	; (8000e4c <sm_phase+0x32c>)
 8000c84:	f002 fc22 	bl	80034cc <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
 8000c88:	4872      	ldr	r0, [pc, #456]	; (8000e54 <sm_phase+0x334>)
 8000c8a:	f002 fc7e 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch4_trig_com, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR4), WAVETABLE_WIDTH);
 8000c8e:	496a      	ldr	r1, [pc, #424]	; (8000e38 <sm_phase+0x318>)
 8000c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c94:	4a70      	ldr	r2, [pc, #448]	; (8000e58 <sm_phase+0x338>)
 8000c96:	486f      	ldr	r0, [pc, #444]	; (8000e54 <sm_phase+0x334>)
 8000c98:	f002 fc18 	bl	80034cc <HAL_DMA_Start_IT>
				HAL_GPIO_WritePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin, LED_PIN_SET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2180      	movs	r1, #128	; 0x80
 8000ca0:	486e      	ldr	r0, [pc, #440]	; (8000e5c <sm_phase+0x33c>)
 8000ca2:	f002 ff5b 	bl	8003b5c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pDOUT_LED2_G_GPIO_Port, pDOUT_LED2_G_Pin, LED_PIN_RESET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2140      	movs	r1, #64	; 0x40
 8000caa:	486c      	ldr	r0, [pc, #432]	; (8000e5c <sm_phase+0x33c>)
 8000cac:	f002 ff56 	bl	8003b5c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pDOUT_LED2_B_GPIO_Port, pDOUT_LED2_B_Pin, LED_PIN_RESET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	4869      	ldr	r0, [pc, #420]	; (8000e5c <sm_phase+0x33c>)
 8000cb6:	f002 ff51 	bl	8003b5c <HAL_GPIO_WritePin>
			break;
 8000cba:	e0d5      	b.n	8000e68 <sm_phase+0x348>
			else if (event == EVENT_PAN){
 8000cbc:	78fb      	ldrb	r3, [r7, #3]
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	f040 80d2 	bne.w	8000e68 <sm_phase+0x348>
				*state = STATE_PAN;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	701a      	strb	r2, [r3, #0]
				HAL_DMA_Abort(&hdma_tim8_ch1);
 8000cca:	485a      	ldr	r0, [pc, #360]	; (8000e34 <sm_phase+0x314>)
 8000ccc:	f002 fc5d 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start(&hdma_tim8_ch1, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR1), WAVETABLE_WIDTH);
 8000cd0:	4959      	ldr	r1, [pc, #356]	; (8000e38 <sm_phase+0x318>)
 8000cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd6:	4a59      	ldr	r2, [pc, #356]	; (8000e3c <sm_phase+0x31c>)
 8000cd8:	4856      	ldr	r0, [pc, #344]	; (8000e34 <sm_phase+0x314>)
 8000cda:	f002 fbb5 	bl	8003448 <HAL_DMA_Start>
				HAL_DMA_Abort(&hdma_tim8_ch2);
 8000cde:	4858      	ldr	r0, [pc, #352]	; (8000e40 <sm_phase+0x320>)
 8000ce0:	f002 fc53 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start(&hdma_tim8_ch2, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR2), WAVETABLE_WIDTH);
 8000ce4:	4954      	ldr	r1, [pc, #336]	; (8000e38 <sm_phase+0x318>)
 8000ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cea:	4a57      	ldr	r2, [pc, #348]	; (8000e48 <sm_phase+0x328>)
 8000cec:	4854      	ldr	r0, [pc, #336]	; (8000e40 <sm_phase+0x320>)
 8000cee:	f002 fbab 	bl	8003448 <HAL_DMA_Start>
				HAL_DMA_Abort(&hdma_tim8_ch3_up);
 8000cf2:	4856      	ldr	r0, [pc, #344]	; (8000e4c <sm_phase+0x32c>)
 8000cf4:	f002 fc49 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start(&hdma_tim8_ch3_up, (uint32_t)dma_wavetable_b, (uint32_t)&(TIM3->CCR3), WAVETABLE_WIDTH);
 8000cf8:	4952      	ldr	r1, [pc, #328]	; (8000e44 <sm_phase+0x324>)
 8000cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfe:	4a54      	ldr	r2, [pc, #336]	; (8000e50 <sm_phase+0x330>)
 8000d00:	4852      	ldr	r0, [pc, #328]	; (8000e4c <sm_phase+0x32c>)
 8000d02:	f002 fba1 	bl	8003448 <HAL_DMA_Start>
				HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
 8000d06:	4853      	ldr	r0, [pc, #332]	; (8000e54 <sm_phase+0x334>)
 8000d08:	f002 fc3f 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start(&hdma_tim8_ch4_trig_com, (uint32_t)dma_wavetable_b, (uint32_t)&(TIM3->CCR4), WAVETABLE_WIDTH);
 8000d0c:	494d      	ldr	r1, [pc, #308]	; (8000e44 <sm_phase+0x324>)
 8000d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d12:	4a51      	ldr	r2, [pc, #324]	; (8000e58 <sm_phase+0x338>)
 8000d14:	484f      	ldr	r0, [pc, #316]	; (8000e54 <sm_phase+0x334>)
 8000d16:	f002 fb97 	bl	8003448 <HAL_DMA_Start>
				HAL_GPIO_WritePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin, LED_PIN_RESET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2180      	movs	r1, #128	; 0x80
 8000d1e:	484f      	ldr	r0, [pc, #316]	; (8000e5c <sm_phase+0x33c>)
 8000d20:	f002 ff1c 	bl	8003b5c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pDOUT_LED2_G_GPIO_Port, pDOUT_LED2_G_Pin, LED_PIN_RESET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2140      	movs	r1, #64	; 0x40
 8000d28:	484c      	ldr	r0, [pc, #304]	; (8000e5c <sm_phase+0x33c>)
 8000d2a:	f002 ff17 	bl	8003b5c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pDOUT_LED2_B_GPIO_Port, pDOUT_LED2_B_Pin, LED_PIN_SET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2120      	movs	r1, #32
 8000d32:	484a      	ldr	r0, [pc, #296]	; (8000e5c <sm_phase+0x33c>)
 8000d34:	f002 ff12 	bl	8003b5c <HAL_GPIO_WritePin>
			break;
 8000d38:	e096      	b.n	8000e68 <sm_phase+0x348>
			if (event == EVENT_STD){
 8000d3a:	78fb      	ldrb	r3, [r7, #3]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d13a      	bne.n	8000db6 <sm_phase+0x296>
				*state = STATE_STD;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
				HAL_DMA_Abort(&hdma_tim8_ch1);
 8000d46:	483b      	ldr	r0, [pc, #236]	; (8000e34 <sm_phase+0x314>)
 8000d48:	f002 fc1f 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch1, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR1), WAVETABLE_WIDTH);
 8000d4c:	493a      	ldr	r1, [pc, #232]	; (8000e38 <sm_phase+0x318>)
 8000d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d52:	4a3a      	ldr	r2, [pc, #232]	; (8000e3c <sm_phase+0x31c>)
 8000d54:	4837      	ldr	r0, [pc, #220]	; (8000e34 <sm_phase+0x314>)
 8000d56:	f002 fbb9 	bl	80034cc <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch2);
 8000d5a:	4839      	ldr	r0, [pc, #228]	; (8000e40 <sm_phase+0x320>)
 8000d5c:	f002 fc15 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch2, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR2), WAVETABLE_WIDTH);
 8000d60:	4935      	ldr	r1, [pc, #212]	; (8000e38 <sm_phase+0x318>)
 8000d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d66:	4a38      	ldr	r2, [pc, #224]	; (8000e48 <sm_phase+0x328>)
 8000d68:	4835      	ldr	r0, [pc, #212]	; (8000e40 <sm_phase+0x320>)
 8000d6a:	f002 fbaf 	bl	80034cc <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch3_up);
 8000d6e:	4837      	ldr	r0, [pc, #220]	; (8000e4c <sm_phase+0x32c>)
 8000d70:	f002 fc0b 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch3_up, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR3), WAVETABLE_WIDTH);
 8000d74:	4930      	ldr	r1, [pc, #192]	; (8000e38 <sm_phase+0x318>)
 8000d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d7a:	4a35      	ldr	r2, [pc, #212]	; (8000e50 <sm_phase+0x330>)
 8000d7c:	4833      	ldr	r0, [pc, #204]	; (8000e4c <sm_phase+0x32c>)
 8000d7e:	f002 fba5 	bl	80034cc <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
 8000d82:	4834      	ldr	r0, [pc, #208]	; (8000e54 <sm_phase+0x334>)
 8000d84:	f002 fc01 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch4_trig_com, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR4), WAVETABLE_WIDTH);
 8000d88:	492b      	ldr	r1, [pc, #172]	; (8000e38 <sm_phase+0x318>)
 8000d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d8e:	4a32      	ldr	r2, [pc, #200]	; (8000e58 <sm_phase+0x338>)
 8000d90:	4830      	ldr	r0, [pc, #192]	; (8000e54 <sm_phase+0x334>)
 8000d92:	f002 fb9b 	bl	80034cc <HAL_DMA_Start_IT>
				HAL_GPIO_WritePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin, LED_PIN_SET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	4830      	ldr	r0, [pc, #192]	; (8000e5c <sm_phase+0x33c>)
 8000d9c:	f002 fede 	bl	8003b5c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pDOUT_LED2_G_GPIO_Port, pDOUT_LED2_G_Pin, LED_PIN_RESET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2140      	movs	r1, #64	; 0x40
 8000da4:	482d      	ldr	r0, [pc, #180]	; (8000e5c <sm_phase+0x33c>)
 8000da6:	f002 fed9 	bl	8003b5c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pDOUT_LED2_B_GPIO_Port, pDOUT_LED2_B_Pin, LED_PIN_RESET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	2120      	movs	r1, #32
 8000dae:	482b      	ldr	r0, [pc, #172]	; (8000e5c <sm_phase+0x33c>)
 8000db0:	f002 fed4 	bl	8003b5c <HAL_GPIO_WritePin>
			break;
 8000db4:	e05a      	b.n	8000e6c <sm_phase+0x34c>
			else if (event == EVENT_HARM){
 8000db6:	78fb      	ldrb	r3, [r7, #3]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d157      	bne.n	8000e6c <sm_phase+0x34c>
				*state = STATE_HARM;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]
				HAL_DMA_Abort(&hdma_tim8_ch1);
 8000dc2:	481c      	ldr	r0, [pc, #112]	; (8000e34 <sm_phase+0x314>)
 8000dc4:	f002 fbe1 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch1, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR1), WAVETABLE_WIDTH);
 8000dc8:	491b      	ldr	r1, [pc, #108]	; (8000e38 <sm_phase+0x318>)
 8000dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dce:	4a1b      	ldr	r2, [pc, #108]	; (8000e3c <sm_phase+0x31c>)
 8000dd0:	4818      	ldr	r0, [pc, #96]	; (8000e34 <sm_phase+0x314>)
 8000dd2:	f002 fb7b 	bl	80034cc <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch2);
 8000dd6:	481a      	ldr	r0, [pc, #104]	; (8000e40 <sm_phase+0x320>)
 8000dd8:	f002 fbd7 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch2, (uint32_t)dma_wavetable_b, (uint32_t)&(TIM3->CCR2), WAVETABLE_WIDTH);
 8000ddc:	4919      	ldr	r1, [pc, #100]	; (8000e44 <sm_phase+0x324>)
 8000dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000de2:	4a19      	ldr	r2, [pc, #100]	; (8000e48 <sm_phase+0x328>)
 8000de4:	4816      	ldr	r0, [pc, #88]	; (8000e40 <sm_phase+0x320>)
 8000de6:	f002 fb71 	bl	80034cc <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch3_up);
 8000dea:	4818      	ldr	r0, [pc, #96]	; (8000e4c <sm_phase+0x32c>)
 8000dec:	f002 fbcd 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch3_up, (uint32_t)dma_wavetable_b, (uint32_t)&(TIM3->CCR3), WAVETABLE_WIDTH);
 8000df0:	4914      	ldr	r1, [pc, #80]	; (8000e44 <sm_phase+0x324>)
 8000df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df6:	4a16      	ldr	r2, [pc, #88]	; (8000e50 <sm_phase+0x330>)
 8000df8:	4814      	ldr	r0, [pc, #80]	; (8000e4c <sm_phase+0x32c>)
 8000dfa:	f002 fb67 	bl	80034cc <HAL_DMA_Start_IT>
				HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
 8000dfe:	4815      	ldr	r0, [pc, #84]	; (8000e54 <sm_phase+0x334>)
 8000e00:	f002 fbc3 	bl	800358a <HAL_DMA_Abort>
				HAL_DMA_Start_IT(&hdma_tim8_ch4_trig_com, (uint32_t)dma_wavetable_a, (uint32_t)&(TIM3->CCR4), WAVETABLE_WIDTH);
 8000e04:	490c      	ldr	r1, [pc, #48]	; (8000e38 <sm_phase+0x318>)
 8000e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e0a:	4a13      	ldr	r2, [pc, #76]	; (8000e58 <sm_phase+0x338>)
 8000e0c:	4811      	ldr	r0, [pc, #68]	; (8000e54 <sm_phase+0x334>)
 8000e0e:	f002 fb5d 	bl	80034cc <HAL_DMA_Start_IT>
				HAL_GPIO_WritePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin, LED_PIN_RESET);
 8000e12:	2201      	movs	r2, #1
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	4811      	ldr	r0, [pc, #68]	; (8000e5c <sm_phase+0x33c>)
 8000e18:	f002 fea0 	bl	8003b5c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pDOUT_LED2_G_GPIO_Port, pDOUT_LED2_G_Pin, LED_PIN_SET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2140      	movs	r1, #64	; 0x40
 8000e20:	480e      	ldr	r0, [pc, #56]	; (8000e5c <sm_phase+0x33c>)
 8000e22:	f002 fe9b 	bl	8003b5c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pDOUT_LED2_B_GPIO_Port, pDOUT_LED2_B_Pin, LED_PIN_RESET);
 8000e26:	2201      	movs	r2, #1
 8000e28:	2120      	movs	r1, #32
 8000e2a:	480c      	ldr	r0, [pc, #48]	; (8000e5c <sm_phase+0x33c>)
 8000e2c:	f002 fe96 	bl	8003b5c <HAL_GPIO_WritePin>
			break;
 8000e30:	e01c      	b.n	8000e6c <sm_phase+0x34c>
 8000e32:	bf00      	nop
 8000e34:	20001258 	.word	0x20001258
 8000e38:	200000e0 	.word	0x200000e0
 8000e3c:	40000434 	.word	0x40000434
 8000e40:	2000129c 	.word	0x2000129c
 8000e44:	200008e0 	.word	0x200008e0
 8000e48:	40000438 	.word	0x40000438
 8000e4c:	200012e0 	.word	0x200012e0
 8000e50:	4000043c 	.word	0x4000043c
 8000e54:	20001324 	.word	0x20001324
 8000e58:	40000440 	.word	0x40000440
 8000e5c:	48000400 	.word	0x48000400
			break;
 8000e60:	bf00      	nop
 8000e62:	e004      	b.n	8000e6e <sm_phase+0x34e>
			break;
 8000e64:	bf00      	nop
 8000e66:	e002      	b.n	8000e6e <sm_phase+0x34e>
			break;
 8000e68:	bf00      	nop
 8000e6a:	e000      	b.n	8000e6e <sm_phase+0x34e>
			break;
 8000e6c:	bf00      	nop
	}
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop

08000e78 <set_volume>:


void set_volume(uint16_t vol){
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
	float fl_vol = (float)(ADC_RESOLUTION - vol);
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8000e88:	3303      	adds	r3, #3
 8000e8a:	ee07 3a90 	vmov	s15, r3
 8000e8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e92:	edc7 7a03 	vstr	s15, [r7, #12]
	float fl_vol_map = fl_vol * (VOL_MAP_MAX - VOL_MAP_MIN) / ADC_RESOLUTION;
 8000e96:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e9a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000ee4 <set_volume+0x6c>
 8000e9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ea2:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000ee8 <set_volume+0x70>
 8000ea6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eaa:	edc7 7a02 	vstr	s15, [r7, #8]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, (uint16_t)fl_vol_map);
 8000eae:	edd7 7a02 	vldr	s15, [r7, #8]
 8000eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eb6:	ee17 3a90 	vmov	r3, s15
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <set_volume+0x74>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (uint16_t)fl_vol_map);
 8000ec2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eca:	ee17 3a90 	vmov	r3, s15
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <set_volume+0x74>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ed6:	bf00      	nop
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	4466c000 	.word	0x4466c000
 8000ee8:	447fc000 	.word	0x447fc000
 8000eec:	200010e4 	.word	0x200010e4

08000ef0 <set_rate>:

// TODO implement with tap and external sync
// TODO add subdivision
void set_rate(uint16_t rate_knob){
 8000ef0:	b480      	push	{r7}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	80fb      	strh	r3, [r7, #6]
	float fl_rate = (float)(ADC_RESOLUTION - rate_knob);
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8000f00:	3303      	adds	r3, #3
 8000f02:	ee07 3a90 	vmov	s15, r3
 8000f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f0a:	edc7 7a05 	vstr	s15, [r7, #20]
	float fl_rate_arr = fl_rate * (RATE_ARR_MAX - RATE_ARR_MIN) / ADC_RESOLUTION;
 8000f0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f12:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000f48 <set_rate+0x58>
 8000f16:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f1a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000f4c <set_rate+0x5c>
 8000f1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f22:	edc7 7a04 	vstr	s15, [r7, #16]
	uint16_t rate_arr = (uint16_t)fl_rate_arr;
 8000f26:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f2e:	ee17 3a90 	vmov	r3, s15
 8000f32:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_PRESCALER(&htim8, rate_arr);
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <set_rate+0x60>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	89fa      	ldrh	r2, [r7, #14]
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f3c:	bf00      	nop
 8000f3e:	371c      	adds	r7, #28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	42c80000 	.word	0x42c80000
 8000f4c:	447fc000 	.word	0x447fc000
 8000f50:	200011c8 	.word	0x200011c8

08000f54 <led_toggle_tick>:

/* Toggles LED if it's been longer than timout_ms since last toggle*/
void led_toggle_tick(uint32_t timeout_ms, GPIO_TypeDef* LED_Port, uint16_t LED_Pin){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	80fb      	strh	r3, [r7, #6]
	static uint32_t last_toggle_ms = 0;
	uint32_t tick = HAL_GetTick();
 8000f62:	f001 f8b1 	bl	80020c8 <HAL_GetTick>
 8000f66:	6178      	str	r0, [r7, #20]

	if (tick - last_toggle_ms >= timeout_ms){
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <led_toggle_tick+0x3c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d808      	bhi.n	8000f88 <led_toggle_tick+0x34>
		last_toggle_ms = tick;
 8000f76:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <led_toggle_tick+0x3c>)
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LED_Port, LED_Pin);
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	68b8      	ldr	r0, [r7, #8]
 8000f82:	f002 fe03 	bl	8003b8c <HAL_GPIO_TogglePin>

	}
	return;
 8000f86:	bf00      	nop
 8000f88:	bf00      	nop
}
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200010e0 	.word	0x200010e0

08000f94 <generate_triangle_wave_floatingpoint>:
	}
	return;
}
*/

void generate_triangle_wave_floatingpoint(uint32_t depth, uint32_t offset){
 8000f94:	b480      	push	{r7}
 8000f96:	b08d      	sub	sp, #52	; 0x34
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]

	float fl_depth = (float)depth;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fa8:	edc7 7a07 	vstr	s15, [r7, #28]
	float fl_offset = (float) offset;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	ee07 3a90 	vmov	s15, r3
 8000fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fb6:	edc7 7a06 	vstr	s15, [r7, #24]
	float fl_max = WAVETABLE_DEPTH;
 8000fba:	4b49      	ldr	r3, [pc, #292]	; (80010e0 <generate_triangle_wave_floatingpoint+0x14c>)
 8000fbc:	617b      	str	r3, [r7, #20]
	float fl_min = WAVETABLE_DEPTH - fl_depth;
 8000fbe:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80010e4 <generate_triangle_wave_floatingpoint+0x150>
 8000fc2:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fca:	edc7 7a04 	vstr	s15, [r7, #16]
	// Step up is initialized later only if offset != 0
	float fl_step_up;
	float fl_step_down = fl_depth / (WAVETABLE_WIDTH-fl_offset);
 8000fce:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80010e8 <generate_triangle_wave_floatingpoint+0x154>
 8000fd2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fda:	edd7 6a07 	vldr	s13, [r7, #28]
 8000fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fe2:	edc7 7a03 	vstr	s15, [r7, #12]
	float fl_val = fl_min;
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint16_t j = WAVETABLE_WIDTH>>1;
 8000fea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fee:	857b      	strh	r3, [r7, #42]	; 0x2a

	if (offset > 0){
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d039      	beq.n	800106a <generate_triangle_wave_floatingpoint+0xd6>
		fl_step_up = fl_depth / fl_offset;
 8000ff6:	edd7 6a07 	vldr	s13, [r7, #28]
 8000ffa:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001002:	edc7 7a02 	vstr	s15, [r7, #8]
		for (int i=0; i<offset; i++){
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
 800100a:	e02a      	b.n	8001062 <generate_triangle_wave_floatingpoint+0xce>
			dma_wavetable_a[i] = (uint16_t)fl_val;
 800100c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001014:	ee17 3a90 	vmov	r3, s15
 8001018:	b299      	uxth	r1, r3
 800101a:	4a34      	ldr	r2, [pc, #208]	; (80010ec <generate_triangle_wave_floatingpoint+0x158>)
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			j = (j + 1) % (WAVETABLE_WIDTH);
 8001022:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001024:	3301      	adds	r3, #1
 8001026:	425a      	negs	r2, r3
 8001028:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800102c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001030:	bf58      	it	pl
 8001032:	4253      	negpl	r3, r2
 8001034:	857b      	strh	r3, [r7, #42]	; 0x2a
			dma_wavetable_b[j] = (uint16_t)fl_val;
 8001036:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001038:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800103c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001040:	ee17 2a90 	vmov	r2, s15
 8001044:	b291      	uxth	r1, r2
 8001046:	4a2a      	ldr	r2, [pc, #168]	; (80010f0 <generate_triangle_wave_floatingpoint+0x15c>)
 8001048:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			fl_val = fl_val+fl_step_up;
 800104c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001050:	edd7 7a02 	vldr	s15, [r7, #8]
 8001054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001058:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		for (int i=0; i<offset; i++){
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	3301      	adds	r3, #1
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
 8001062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	429a      	cmp	r2, r3
 8001068:	d8d0      	bhi.n	800100c <generate_triangle_wave_floatingpoint+0x78>
		}
	}

	// Always want value at offset index to be max value
	fl_val = fl_max;
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i=offset; i<WAVETABLE_WIDTH; i++){
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	623b      	str	r3, [r7, #32]
 8001072:	e02a      	b.n	80010ca <generate_triangle_wave_floatingpoint+0x136>
		dma_wavetable_a[i] = (uint16_t)fl_val;
 8001074:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800107c:	ee17 3a90 	vmov	r3, s15
 8001080:	b299      	uxth	r1, r3
 8001082:	4a1a      	ldr	r2, [pc, #104]	; (80010ec <generate_triangle_wave_floatingpoint+0x158>)
 8001084:	6a3b      	ldr	r3, [r7, #32]
 8001086:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		j = (j + 1) % (WAVETABLE_WIDTH);
 800108a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800108c:	3301      	adds	r3, #1
 800108e:	425a      	negs	r2, r3
 8001090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001094:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001098:	bf58      	it	pl
 800109a:	4253      	negpl	r3, r2
 800109c:	857b      	strh	r3, [r7, #42]	; 0x2a
		dma_wavetable_b[j] = (uint16_t)fl_val;
 800109e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80010a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010a8:	ee17 2a90 	vmov	r2, s15
 80010ac:	b291      	uxth	r1, r2
 80010ae:	4a10      	ldr	r2, [pc, #64]	; (80010f0 <generate_triangle_wave_floatingpoint+0x15c>)
 80010b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		fl_val = fl_val-fl_step_down;
 80010b4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80010b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80010bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for (int i=offset; i<WAVETABLE_WIDTH; i++){
 80010c4:	6a3b      	ldr	r3, [r7, #32]
 80010c6:	3301      	adds	r3, #1
 80010c8:	623b      	str	r3, [r7, #32]
 80010ca:	6a3b      	ldr	r3, [r7, #32]
 80010cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010d0:	dbd0      	blt.n	8001074 <generate_triangle_wave_floatingpoint+0xe0>
	}
	return;
 80010d2:	bf00      	nop
}
 80010d4:	3734      	adds	r7, #52	; 0x34
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	447fc000 	.word	0x447fc000
 80010e4:	447fc000 	.word	0x447fc000
 80010e8:	44800000 	.word	0x44800000
 80010ec:	200000e0 	.word	0x200000e0
 80010f0:	200008e0 	.word	0x200008e0

080010f4 <HAL_TIM_IC_CaptureCallback>:
		Error_Handler();
	}
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001120:	b672      	cpsid	i
}
 8001122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  HAL_GPIO_WritePin(pDOUT_LED2_B_GPIO_Port, pDOUT_LED2_B_Pin, LED_PIN_SET);
 8001124:	2200      	movs	r2, #0
 8001126:	2120      	movs	r1, #32
 8001128:	481c      	ldr	r0, [pc, #112]	; (800119c <Error_Handler+0x80>)
 800112a:	f002 fd17 	bl	8003b5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin, LED_PIN_SET);
 800112e:	2200      	movs	r2, #0
 8001130:	2180      	movs	r1, #128	; 0x80
 8001132:	481a      	ldr	r0, [pc, #104]	; (800119c <Error_Handler+0x80>)
 8001134:	f002 fd12 	bl	8003b5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(pDOUT_LED2_G_GPIO_Port, pDOUT_LED2_G_Pin, LED_PIN_SET);
 8001138:	2200      	movs	r2, #0
 800113a:	2140      	movs	r1, #64	; 0x40
 800113c:	4817      	ldr	r0, [pc, #92]	; (800119c <Error_Handler+0x80>)
 800113e:	f002 fd0d 	bl	8003b5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(pDOUT_LED1_B_GPIO_Port, pDOUT_LED1_B_Pin, LED_PIN_SET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001148:	4815      	ldr	r0, [pc, #84]	; (80011a0 <Error_Handler+0x84>)
 800114a:	f002 fd07 	bl	8003b5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(pDOUT_LED1_R_GPIO_Port, pDOUT_LED1_R_Pin, LED_PIN_SET);
 800114e:	2200      	movs	r2, #0
 8001150:	2110      	movs	r1, #16
 8001152:	4812      	ldr	r0, [pc, #72]	; (800119c <Error_Handler+0x80>)
 8001154:	f002 fd02 	bl	8003b5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(pDOUT_LED1_G_GPIO_Port, pDOUT_LED1_G_Pin, LED_PIN_SET);
 8001158:	2200      	movs	r2, #0
 800115a:	2104      	movs	r1, #4
 800115c:	4811      	ldr	r0, [pc, #68]	; (80011a4 <Error_Handler+0x88>)
 800115e:	f002 fcfd 	bl	8003b5c <HAL_GPIO_WritePin>

  while (1)
  {
	  HAL_Delay(250);
 8001162:	20fa      	movs	r0, #250	; 0xfa
 8001164:	f000 ffbc 	bl	80020e0 <HAL_Delay>

	  HAL_GPIO_TogglePin(pDOUT_LED2_B_GPIO_Port, pDOUT_LED2_B_Pin);
 8001168:	2120      	movs	r1, #32
 800116a:	480c      	ldr	r0, [pc, #48]	; (800119c <Error_Handler+0x80>)
 800116c:	f002 fd0e 	bl	8003b8c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin);
 8001170:	2180      	movs	r1, #128	; 0x80
 8001172:	480a      	ldr	r0, [pc, #40]	; (800119c <Error_Handler+0x80>)
 8001174:	f002 fd0a 	bl	8003b8c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(pDOUT_LED2_G_GPIO_Port, pDOUT_LED2_G_Pin);
 8001178:	2140      	movs	r1, #64	; 0x40
 800117a:	4808      	ldr	r0, [pc, #32]	; (800119c <Error_Handler+0x80>)
 800117c:	f002 fd06 	bl	8003b8c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(pDOUT_LED1_B_GPIO_Port, pDOUT_LED1_B_Pin);
 8001180:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001184:	4806      	ldr	r0, [pc, #24]	; (80011a0 <Error_Handler+0x84>)
 8001186:	f002 fd01 	bl	8003b8c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(pDOUT_LED1_R_GPIO_Port, pDOUT_LED1_R_Pin);
 800118a:	2110      	movs	r1, #16
 800118c:	4803      	ldr	r0, [pc, #12]	; (800119c <Error_Handler+0x80>)
 800118e:	f002 fcfd 	bl	8003b8c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(pDOUT_LED1_G_GPIO_Port, pDOUT_LED1_G_Pin);
 8001192:	2104      	movs	r1, #4
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <Error_Handler+0x88>)
 8001196:	f002 fcf9 	bl	8003b8c <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 800119a:	e7e2      	b.n	8001162 <Error_Handler+0x46>
 800119c:	48000400 	.word	0x48000400
 80011a0:	48000800 	.word	0x48000800
 80011a4:	48000c00 	.word	0x48000c00

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <HAL_MspInit+0x44>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <HAL_MspInit+0x44>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6193      	str	r3, [r2, #24]
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <HAL_MspInit+0x44>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_MspInit+0x44>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	4a08      	ldr	r2, [pc, #32]	; (80011ec <HAL_MspInit+0x44>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	61d3      	str	r3, [r2, #28]
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_MspInit+0x44>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <NMI_Handler+0x4>
	...

080011f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	HAL_GPIO_WritePin(pDOUT_LED2_B_GPIO_Port, pDOUT_LED2_B_Pin, LED_PIN_SET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2120      	movs	r1, #32
 8001200:	480e      	ldr	r0, [pc, #56]	; (800123c <HardFault_Handler+0x44>)
 8001202:	f002 fcab 	bl	8003b5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin, LED_PIN_SET);
 8001206:	2200      	movs	r2, #0
 8001208:	2180      	movs	r1, #128	; 0x80
 800120a:	480c      	ldr	r0, [pc, #48]	; (800123c <HardFault_Handler+0x44>)
 800120c:	f002 fca6 	bl	8003b5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pDOUT_LED2_G_GPIO_Port, pDOUT_LED2_G_Pin, LED_PIN_SET);
 8001210:	2200      	movs	r2, #0
 8001212:	2140      	movs	r1, #64	; 0x40
 8001214:	4809      	ldr	r0, [pc, #36]	; (800123c <HardFault_Handler+0x44>)
 8001216:	f002 fca1 	bl	8003b5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pDOUT_LED1_B_GPIO_Port, pDOUT_LED1_B_Pin, LED_PIN_SET);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001220:	4807      	ldr	r0, [pc, #28]	; (8001240 <HardFault_Handler+0x48>)
 8001222:	f002 fc9b 	bl	8003b5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pDOUT_LED1_R_GPIO_Port, pDOUT_LED1_R_Pin, LED_PIN_SET);
 8001226:	2200      	movs	r2, #0
 8001228:	2110      	movs	r1, #16
 800122a:	4804      	ldr	r0, [pc, #16]	; (800123c <HardFault_Handler+0x44>)
 800122c:	f002 fc96 	bl	8003b5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pDOUT_LED1_G_GPIO_Port, pDOUT_LED1_G_Pin, LED_PIN_SET);
 8001230:	2200      	movs	r2, #0
 8001232:	2104      	movs	r1, #4
 8001234:	4803      	ldr	r0, [pc, #12]	; (8001244 <HardFault_Handler+0x4c>)
 8001236:	f002 fc91 	bl	8003b5c <HAL_GPIO_WritePin>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <HardFault_Handler+0x42>
 800123c:	48000400 	.word	0x48000400
 8001240:	48000800 	.word	0x48000800
 8001244:	48000c00 	.word	0x48000c00

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <MemManage_Handler+0x4>

0800124e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <BusFault_Handler+0x4>

08001254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <UsageFault_Handler+0x4>

0800125a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001288:	f000 ff0a 	bl	80020a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <DMA1_Channel1_IRQHandler+0x10>)
 8001296:	f002 f9b1 	bl	80035fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000078 	.word	0x20000078

080012a4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <DMA1_Channel4_IRQHandler+0x10>)
 80012aa:	f002 f9a7 	bl	80035fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20001214 	.word	0x20001214

080012b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <TIM4_IRQHandler+0x14>)
 80012be:	f004 fc9c 	bl	8005bfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  HAL_TIM_IC_CaptureCallback(&htim4);
 80012c2:	4802      	ldr	r0, [pc, #8]	; (80012cc <TIM4_IRQHandler+0x14>)
 80012c4:	f7ff ff16 	bl	80010f4 <HAL_TIM_IC_CaptureCallback>

  /* USER CODE END TIM4_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	2000117c 	.word	0x2000117c

080012d0 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3_up);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <DMA2_Channel1_IRQHandler+0x10>)
 80012d6:	f002 f991 	bl	80035fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200012e0 	.word	0x200012e0

080012e4 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch4_trig_com);
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <DMA2_Channel2_IRQHandler+0x10>)
 80012ea:	f002 f987 	bl	80035fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20001324 	.word	0x20001324

080012f8 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <DMA2_Channel3_IRQHandler+0x10>)
 80012fe:	f002 f97d 	bl	80035fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20001258 	.word	0x20001258

0800130c <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <DMA2_Channel5_IRQHandler+0x10>)
 8001312:	f002 f973 	bl	80035fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2000129c 	.word	0x2000129c

08001320 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <SystemInit+0x20>)
 8001326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800132a:	4a05      	ldr	r2, [pc, #20]	; (8001340 <SystemInit+0x20>)
 800132c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim8_ch3_up;
DMA_HandleTypeDef hdma_tim8_ch4_trig_com;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08e      	sub	sp, #56	; 0x38
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	615a      	str	r2, [r3, #20]
 8001374:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001376:	4b33      	ldr	r3, [pc, #204]	; (8001444 <MX_TIM2_Init+0x100>)
 8001378:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800137c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800137e:	4b31      	ldr	r3, [pc, #196]	; (8001444 <MX_TIM2_Init+0x100>)
 8001380:	2200      	movs	r2, #0
 8001382:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001384:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <MX_TIM2_Init+0x100>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_PERIOD;
 800138a:	4b2e      	ldr	r3, [pc, #184]	; (8001444 <MX_TIM2_Init+0x100>)
 800138c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001390:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001392:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <MX_TIM2_Init+0x100>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001398:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <MX_TIM2_Init+0x100>)
 800139a:	2280      	movs	r2, #128	; 0x80
 800139c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800139e:	4829      	ldr	r0, [pc, #164]	; (8001444 <MX_TIM2_Init+0x100>)
 80013a0:	f004 f8b6 	bl	8005510 <HAL_TIM_Base_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80013aa:	f7ff feb7 	bl	800111c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013b8:	4619      	mov	r1, r3
 80013ba:	4822      	ldr	r0, [pc, #136]	; (8001444 <MX_TIM2_Init+0x100>)
 80013bc:	f004 ff66 	bl	800628c <HAL_TIM_ConfigClockSource>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80013c6:	f7ff fea9 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013ca:	481e      	ldr	r0, [pc, #120]	; (8001444 <MX_TIM2_Init+0x100>)
 80013cc:	f004 fa5a 	bl	8005884 <HAL_TIM_PWM_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80013d6:	f7ff fea1 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4619      	mov	r1, r3
 80013e8:	4816      	ldr	r0, [pc, #88]	; (8001444 <MX_TIM2_Init+0x100>)
 80013ea:	f005 fdc9 	bl	8006f80 <HAL_TIMEx_MasterConfigSynchronization>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80013f4:	f7ff fe92 	bl	800111c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f8:	2360      	movs	r3, #96	; 0x60
 80013fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001408:	463b      	mov	r3, r7
 800140a:	2200      	movs	r2, #0
 800140c:	4619      	mov	r1, r3
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <MX_TIM2_Init+0x100>)
 8001410:	f004 fe28 	bl	8006064 <HAL_TIM_PWM_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800141a:	f7ff fe7f 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800141e:	463b      	mov	r3, r7
 8001420:	2204      	movs	r2, #4
 8001422:	4619      	mov	r1, r3
 8001424:	4807      	ldr	r0, [pc, #28]	; (8001444 <MX_TIM2_Init+0x100>)
 8001426:	f004 fe1d 	bl	8006064 <HAL_TIM_PWM_ConfigChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001430:	f7ff fe74 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001434:	4803      	ldr	r0, [pc, #12]	; (8001444 <MX_TIM2_Init+0x100>)
 8001436:	f000 fb5b 	bl	8001af0 <HAL_TIM_MspPostInit>

}
 800143a:	bf00      	nop
 800143c:	3738      	adds	r7, #56	; 0x38
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200010e4 	.word	0x200010e4

08001448 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800145a:	463b      	mov	r3, r7
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	615a      	str	r2, [r3, #20]
 800146a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800146c:	4b32      	ldr	r3, [pc, #200]	; (8001538 <MX_TIM3_Init+0xf0>)
 800146e:	4a33      	ldr	r2, [pc, #204]	; (800153c <MX_TIM3_Init+0xf4>)
 8001470:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001472:	4b31      	ldr	r3, [pc, #196]	; (8001538 <MX_TIM3_Init+0xf0>)
 8001474:	2200      	movs	r2, #0
 8001476:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001478:	4b2f      	ldr	r3, [pc, #188]	; (8001538 <MX_TIM3_Init+0xf0>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_PERIOD;
 800147e:	4b2e      	ldr	r3, [pc, #184]	; (8001538 <MX_TIM3_Init+0xf0>)
 8001480:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001484:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001486:	4b2c      	ldr	r3, [pc, #176]	; (8001538 <MX_TIM3_Init+0xf0>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148c:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <MX_TIM3_Init+0xf0>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001492:	4829      	ldr	r0, [pc, #164]	; (8001538 <MX_TIM3_Init+0xf0>)
 8001494:	f004 f9f6 	bl	8005884 <HAL_TIM_PWM_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800149e:	f7ff fe3d 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	4619      	mov	r1, r3
 80014b0:	4821      	ldr	r0, [pc, #132]	; (8001538 <MX_TIM3_Init+0xf0>)
 80014b2:	f005 fd65 	bl	8006f80 <HAL_TIMEx_MasterConfigSynchronization>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80014bc:	f7ff fe2e 	bl	800111c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c0:	2360      	movs	r3, #96	; 0x60
 80014c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014d0:	463b      	mov	r3, r7
 80014d2:	2200      	movs	r2, #0
 80014d4:	4619      	mov	r1, r3
 80014d6:	4818      	ldr	r0, [pc, #96]	; (8001538 <MX_TIM3_Init+0xf0>)
 80014d8:	f004 fdc4 	bl	8006064 <HAL_TIM_PWM_ConfigChannel>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80014e2:	f7ff fe1b 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014e6:	463b      	mov	r3, r7
 80014e8:	2204      	movs	r2, #4
 80014ea:	4619      	mov	r1, r3
 80014ec:	4812      	ldr	r0, [pc, #72]	; (8001538 <MX_TIM3_Init+0xf0>)
 80014ee:	f004 fdb9 	bl	8006064 <HAL_TIM_PWM_ConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80014f8:	f7ff fe10 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014fc:	463b      	mov	r3, r7
 80014fe:	2208      	movs	r2, #8
 8001500:	4619      	mov	r1, r3
 8001502:	480d      	ldr	r0, [pc, #52]	; (8001538 <MX_TIM3_Init+0xf0>)
 8001504:	f004 fdae 	bl	8006064 <HAL_TIM_PWM_ConfigChannel>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 800150e:	f7ff fe05 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001512:	463b      	mov	r3, r7
 8001514:	220c      	movs	r2, #12
 8001516:	4619      	mov	r1, r3
 8001518:	4807      	ldr	r0, [pc, #28]	; (8001538 <MX_TIM3_Init+0xf0>)
 800151a:	f004 fda3 	bl	8006064 <HAL_TIM_PWM_ConfigChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8001524:	f7ff fdfa 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001528:	4803      	ldr	r0, [pc, #12]	; (8001538 <MX_TIM3_Init+0xf0>)
 800152a:	f000 fae1 	bl	8001af0 <HAL_TIM_MspPostInit>

}
 800152e:	bf00      	nop
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20001130 	.word	0x20001130
 800153c:	40000400 	.word	0x40000400

08001540 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800155e:	4b2c      	ldr	r3, [pc, #176]	; (8001610 <MX_TIM4_Init+0xd0>)
 8001560:	4a2c      	ldr	r2, [pc, #176]	; (8001614 <MX_TIM4_Init+0xd4>)
 8001562:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1023;
 8001564:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <MX_TIM4_Init+0xd0>)
 8001566:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800156a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156c:	4b28      	ldr	r3, [pc, #160]	; (8001610 <MX_TIM4_Init+0xd0>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001572:	4b27      	ldr	r3, [pc, #156]	; (8001610 <MX_TIM4_Init+0xd0>)
 8001574:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001578:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157a:	4b25      	ldr	r3, [pc, #148]	; (8001610 <MX_TIM4_Init+0xd0>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001580:	4b23      	ldr	r3, [pc, #140]	; (8001610 <MX_TIM4_Init+0xd0>)
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001586:	4822      	ldr	r0, [pc, #136]	; (8001610 <MX_TIM4_Init+0xd0>)
 8001588:	f004 fae0 	bl	8005b4c <HAL_TIM_IC_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001592:	f7ff fdc3 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	481a      	ldr	r0, [pc, #104]	; (8001610 <MX_TIM4_Init+0xd0>)
 80015a6:	f005 fceb 	bl	8006f80 <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80015b0:	f7ff fdb4 	bl	800111c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80015b4:	2302      	movs	r3, #2
 80015b6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015b8:	2301      	movs	r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 80015c0:	230f      	movs	r3, #15
 80015c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	2200      	movs	r2, #0
 80015c8:	4619      	mov	r1, r3
 80015ca:	4811      	ldr	r0, [pc, #68]	; (8001610 <MX_TIM4_Init+0xd0>)
 80015cc:	f004 fcae 	bl	8005f2c <HAL_TIM_IC_ConfigChannel>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80015d6:	f7ff fda1 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	2204      	movs	r2, #4
 80015de:	4619      	mov	r1, r3
 80015e0:	480b      	ldr	r0, [pc, #44]	; (8001610 <MX_TIM4_Init+0xd0>)
 80015e2:	f004 fca3 	bl	8005f2c <HAL_TIM_IC_ConfigChannel>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80015ec:	f7ff fd96 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	2208      	movs	r2, #8
 80015f4:	4619      	mov	r1, r3
 80015f6:	4806      	ldr	r0, [pc, #24]	; (8001610 <MX_TIM4_Init+0xd0>)
 80015f8:	f004 fc98 	bl	8005f2c <HAL_TIM_IC_ConfigChannel>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8001602:	f7ff fd8b 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	3720      	adds	r7, #32
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2000117c 	.word	0x2000117c
 8001614:	40000800 	.word	0x40000800

08001618 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b096      	sub	sp, #88	; 0x58
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800162a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]
 800163a:	615a      	str	r2, [r3, #20]
 800163c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	222c      	movs	r2, #44	; 0x2c
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f006 f9c3 	bl	80079d0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800164a:	4b4a      	ldr	r3, [pc, #296]	; (8001774 <MX_TIM8_Init+0x15c>)
 800164c:	4a4a      	ldr	r2, [pc, #296]	; (8001778 <MX_TIM8_Init+0x160>)
 800164e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001650:	4b48      	ldr	r3, [pc, #288]	; (8001774 <MX_TIM8_Init+0x15c>)
 8001652:	2200      	movs	r2, #0
 8001654:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001656:	4b47      	ldr	r3, [pc, #284]	; (8001774 <MX_TIM8_Init+0x15c>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1023;
 800165c:	4b45      	ldr	r3, [pc, #276]	; (8001774 <MX_TIM8_Init+0x15c>)
 800165e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001662:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001664:	4b43      	ldr	r3, [pc, #268]	; (8001774 <MX_TIM8_Init+0x15c>)
 8001666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800166a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800166c:	4b41      	ldr	r3, [pc, #260]	; (8001774 <MX_TIM8_Init+0x15c>)
 800166e:	2200      	movs	r2, #0
 8001670:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001672:	4b40      	ldr	r3, [pc, #256]	; (8001774 <MX_TIM8_Init+0x15c>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001678:	483e      	ldr	r0, [pc, #248]	; (8001774 <MX_TIM8_Init+0x15c>)
 800167a:	f003 ffa0 	bl	80055be <HAL_TIM_OC_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM8_Init+0x70>
  {
    Error_Handler();
 8001684:	f7ff fd4a 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001694:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001698:	4619      	mov	r1, r3
 800169a:	4836      	ldr	r0, [pc, #216]	; (8001774 <MX_TIM8_Init+0x15c>)
 800169c:	f005 fc70 	bl	8006f80 <HAL_TIMEx_MasterConfigSynchronization>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 80016a6:	f7ff fd39 	bl	800111c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80016aa:	2300      	movs	r3, #0
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b2:	2300      	movs	r3, #0
 80016b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016b6:	2300      	movs	r3, #0
 80016b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016ca:	2200      	movs	r2, #0
 80016cc:	4619      	mov	r1, r3
 80016ce:	4829      	ldr	r0, [pc, #164]	; (8001774 <MX_TIM8_Init+0x15c>)
 80016d0:	f004 fbb2 	bl	8005e38 <HAL_TIM_OC_ConfigChannel>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 80016da:	f7ff fd1f 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016e2:	2204      	movs	r2, #4
 80016e4:	4619      	mov	r1, r3
 80016e6:	4823      	ldr	r0, [pc, #140]	; (8001774 <MX_TIM8_Init+0x15c>)
 80016e8:	f004 fba6 	bl	8005e38 <HAL_TIM_OC_ConfigChannel>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 80016f2:	f7ff fd13 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016fa:	2208      	movs	r2, #8
 80016fc:	4619      	mov	r1, r3
 80016fe:	481d      	ldr	r0, [pc, #116]	; (8001774 <MX_TIM8_Init+0x15c>)
 8001700:	f004 fb9a 	bl	8005e38 <HAL_TIM_OC_ConfigChannel>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800170a:	f7ff fd07 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800170e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001712:	220c      	movs	r2, #12
 8001714:	4619      	mov	r1, r3
 8001716:	4817      	ldr	r0, [pc, #92]	; (8001774 <MX_TIM8_Init+0x15c>)
 8001718:	f004 fb8e 	bl	8005e38 <HAL_TIM_OC_ConfigChannel>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001722:	f7ff fcfb 	bl	800111c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800173a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800173e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001748:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4619      	mov	r1, r3
 800175a:	4806      	ldr	r0, [pc, #24]	; (8001774 <MX_TIM8_Init+0x15c>)
 800175c:	f005 fc9c 	bl	8007098 <HAL_TIMEx_ConfigBreakDeadTime>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM8_Init+0x152>
  {
    Error_Handler();
 8001766:	f7ff fcd9 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	3758      	adds	r7, #88	; 0x58
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200011c8 	.word	0x200011c8
 8001778:	40013400 	.word	0x40013400

0800177c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800178c:	d10b      	bne.n	80017a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_TIM_Base_MspInit+0x38>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <HAL_TIM_Base_MspInit+0x38>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	61d3      	str	r3, [r2, #28]
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_TIM_Base_MspInit+0x38>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017a6:	bf00      	nop
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000

080017b8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <HAL_TIM_PWM_MspInit+0x38>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d10b      	bne.n	80017e2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	61d3      	str	r3, [r2, #28]
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40000400 	.word	0x40000400
 80017f4:	40021000 	.word	0x40021000

080017f8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM4)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a3f      	ldr	r2, [pc, #252]	; (8001914 <HAL_TIM_IC_MspInit+0x11c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d177      	bne.n	800190a <HAL_TIM_IC_MspInit+0x112>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800181a:	4b3f      	ldr	r3, [pc, #252]	; (8001918 <HAL_TIM_IC_MspInit+0x120>)
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	4a3e      	ldr	r2, [pc, #248]	; (8001918 <HAL_TIM_IC_MspInit+0x120>)
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	61d3      	str	r3, [r2, #28]
 8001826:	4b3c      	ldr	r3, [pc, #240]	; (8001918 <HAL_TIM_IC_MspInit+0x120>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001832:	4b39      	ldr	r3, [pc, #228]	; (8001918 <HAL_TIM_IC_MspInit+0x120>)
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	4a38      	ldr	r2, [pc, #224]	; (8001918 <HAL_TIM_IC_MspInit+0x120>)
 8001838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800183c:	6153      	str	r3, [r2, #20]
 800183e:	4b36      	ldr	r3, [pc, #216]	; (8001918 <HAL_TIM_IC_MspInit+0x120>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	4b33      	ldr	r3, [pc, #204]	; (8001918 <HAL_TIM_IC_MspInit+0x120>)
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	4a32      	ldr	r2, [pc, #200]	; (8001918 <HAL_TIM_IC_MspInit+0x120>)
 8001850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001854:	6153      	str	r3, [r2, #20]
 8001856:	4b30      	ldr	r3, [pc, #192]	; (8001918 <HAL_TIM_IC_MspInit+0x120>)
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = pDIN_BYP_Pin|pDIN_TAP_Pin;
 8001862:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800186c:	2301      	movs	r3, #1
 800186e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001874:	230a      	movs	r3, #10
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4619      	mov	r1, r3
 800187e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001882:	f001 ffc9 	bl	8003818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = pDIN_TAP_EXT_Pin;
 8001886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800188a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001890:	2301      	movs	r3, #1
 8001892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001898:	2302      	movs	r3, #2
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(pDIN_TAP_EXT_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	481e      	ldr	r0, [pc, #120]	; (800191c <HAL_TIM_IC_MspInit+0x124>)
 80018a4:	f001 ffb8 	bl	8003818 <HAL_GPIO_Init>

    /* TIM4 DMA Init */
    /* TIM4_CH2 Init */
    hdma_tim4_ch2.Instance = DMA1_Channel4;
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <HAL_TIM_IC_MspInit+0x128>)
 80018aa:	4a1e      	ldr	r2, [pc, #120]	; (8001924 <HAL_TIM_IC_MspInit+0x12c>)
 80018ac:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018ae:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <HAL_TIM_IC_MspInit+0x128>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b4:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <HAL_TIM_IC_MspInit+0x128>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80018ba:	4b19      	ldr	r3, [pc, #100]	; (8001920 <HAL_TIM_IC_MspInit+0x128>)
 80018bc:	2280      	movs	r2, #128	; 0x80
 80018be:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <HAL_TIM_IC_MspInit+0x128>)
 80018c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018c6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018c8:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_TIM_IC_MspInit+0x128>)
 80018ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ce:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <HAL_TIM_IC_MspInit+0x128>)
 80018d2:	2220      	movs	r2, #32
 80018d4:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_TIM_IC_MspInit+0x128>)
 80018d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 80018de:	4810      	ldr	r0, [pc, #64]	; (8001920 <HAL_TIM_IC_MspInit+0x128>)
 80018e0:	f001 fd6b 	bl	80033ba <HAL_DMA_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_TIM_IC_MspInit+0xf6>
    {
      Error_Handler();
 80018ea:	f7ff fc17 	bl	800111c <Error_Handler>
    }

    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <HAL_TIM_IC_MspInit+0x128>)
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28
 80018f4:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_TIM_IC_MspInit+0x128>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2106      	movs	r1, #6
 80018fe:	201e      	movs	r0, #30
 8001900:	f001 fd25 	bl	800334e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001904:	201e      	movs	r0, #30
 8001906:	f001 fd3e 	bl	8003386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800190a:	bf00      	nop
 800190c:	3728      	adds	r7, #40	; 0x28
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40000800 	.word	0x40000800
 8001918:	40021000 	.word	0x40021000
 800191c:	48000400 	.word	0x48000400
 8001920:	20001214 	.word	0x20001214
 8001924:	40020044 	.word	0x40020044

08001928 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM8)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a64      	ldr	r2, [pc, #400]	; (8001ac8 <HAL_TIM_OC_MspInit+0x1a0>)
 8001936:	4293      	cmp	r3, r2
 8001938:	f040 80c2 	bne.w	8001ac0 <HAL_TIM_OC_MspInit+0x198>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800193c:	4b63      	ldr	r3, [pc, #396]	; (8001acc <HAL_TIM_OC_MspInit+0x1a4>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	4a62      	ldr	r2, [pc, #392]	; (8001acc <HAL_TIM_OC_MspInit+0x1a4>)
 8001942:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001946:	6193      	str	r3, [r2, #24]
 8001948:	4b60      	ldr	r3, [pc, #384]	; (8001acc <HAL_TIM_OC_MspInit+0x1a4>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* TIM8_CH1 Init */
    hdma_tim8_ch1.Instance = DMA2_Channel3;
 8001954:	4b5e      	ldr	r3, [pc, #376]	; (8001ad0 <HAL_TIM_OC_MspInit+0x1a8>)
 8001956:	4a5f      	ldr	r2, [pc, #380]	; (8001ad4 <HAL_TIM_OC_MspInit+0x1ac>)
 8001958:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800195a:	4b5d      	ldr	r3, [pc, #372]	; (8001ad0 <HAL_TIM_OC_MspInit+0x1a8>)
 800195c:	2210      	movs	r2, #16
 800195e:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001960:	4b5b      	ldr	r3, [pc, #364]	; (8001ad0 <HAL_TIM_OC_MspInit+0x1a8>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001966:	4b5a      	ldr	r3, [pc, #360]	; (8001ad0 <HAL_TIM_OC_MspInit+0x1a8>)
 8001968:	2280      	movs	r2, #128	; 0x80
 800196a:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800196c:	4b58      	ldr	r3, [pc, #352]	; (8001ad0 <HAL_TIM_OC_MspInit+0x1a8>)
 800196e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001972:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001974:	4b56      	ldr	r3, [pc, #344]	; (8001ad0 <HAL_TIM_OC_MspInit+0x1a8>)
 8001976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800197a:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 800197c:	4b54      	ldr	r3, [pc, #336]	; (8001ad0 <HAL_TIM_OC_MspInit+0x1a8>)
 800197e:	2220      	movs	r2, #32
 8001980:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001982:	4b53      	ldr	r3, [pc, #332]	; (8001ad0 <HAL_TIM_OC_MspInit+0x1a8>)
 8001984:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001988:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 800198a:	4851      	ldr	r0, [pc, #324]	; (8001ad0 <HAL_TIM_OC_MspInit+0x1a8>)
 800198c:	f001 fd15 	bl	80033ba <HAL_DMA_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_TIM_OC_MspInit+0x72>
    {
      Error_Handler();
 8001996:	f7ff fbc1 	bl	800111c <Error_Handler>
    }

    __HAL_LINKDMA(tim_ocHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4c      	ldr	r2, [pc, #304]	; (8001ad0 <HAL_TIM_OC_MspInit+0x1a8>)
 800199e:	625a      	str	r2, [r3, #36]	; 0x24
 80019a0:	4a4b      	ldr	r2, [pc, #300]	; (8001ad0 <HAL_TIM_OC_MspInit+0x1a8>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM8_CH2 Init */
    hdma_tim8_ch2.Instance = DMA2_Channel5;
 80019a6:	4b4c      	ldr	r3, [pc, #304]	; (8001ad8 <HAL_TIM_OC_MspInit+0x1b0>)
 80019a8:	4a4c      	ldr	r2, [pc, #304]	; (8001adc <HAL_TIM_OC_MspInit+0x1b4>)
 80019aa:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019ac:	4b4a      	ldr	r3, [pc, #296]	; (8001ad8 <HAL_TIM_OC_MspInit+0x1b0>)
 80019ae:	2210      	movs	r2, #16
 80019b0:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b2:	4b49      	ldr	r3, [pc, #292]	; (8001ad8 <HAL_TIM_OC_MspInit+0x1b0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80019b8:	4b47      	ldr	r3, [pc, #284]	; (8001ad8 <HAL_TIM_OC_MspInit+0x1b0>)
 80019ba:	2280      	movs	r2, #128	; 0x80
 80019bc:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019be:	4b46      	ldr	r3, [pc, #280]	; (8001ad8 <HAL_TIM_OC_MspInit+0x1b0>)
 80019c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019c4:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019c6:	4b44      	ldr	r3, [pc, #272]	; (8001ad8 <HAL_TIM_OC_MspInit+0x1b0>)
 80019c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019cc:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.Mode = DMA_CIRCULAR;
 80019ce:	4b42      	ldr	r3, [pc, #264]	; (8001ad8 <HAL_TIM_OC_MspInit+0x1b0>)
 80019d0:	2220      	movs	r2, #32
 80019d2:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 80019d4:	4b40      	ldr	r3, [pc, #256]	; (8001ad8 <HAL_TIM_OC_MspInit+0x1b0>)
 80019d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 80019dc:	483e      	ldr	r0, [pc, #248]	; (8001ad8 <HAL_TIM_OC_MspInit+0x1b0>)
 80019de:	f001 fcec 	bl	80033ba <HAL_DMA_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_TIM_OC_MspInit+0xc4>
    {
      Error_Handler();
 80019e8:	f7ff fb98 	bl	800111c <Error_Handler>
    }

    __HAL_LINKDMA(tim_ocHandle,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a3a      	ldr	r2, [pc, #232]	; (8001ad8 <HAL_TIM_OC_MspInit+0x1b0>)
 80019f0:	629a      	str	r2, [r3, #40]	; 0x28
 80019f2:	4a39      	ldr	r2, [pc, #228]	; (8001ad8 <HAL_TIM_OC_MspInit+0x1b0>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM8_CH3_UP Init */
    hdma_tim8_ch3_up.Instance = DMA2_Channel1;
 80019f8:	4b39      	ldr	r3, [pc, #228]	; (8001ae0 <HAL_TIM_OC_MspInit+0x1b8>)
 80019fa:	4a3a      	ldr	r2, [pc, #232]	; (8001ae4 <HAL_TIM_OC_MspInit+0x1bc>)
 80019fc:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019fe:	4b38      	ldr	r3, [pc, #224]	; (8001ae0 <HAL_TIM_OC_MspInit+0x1b8>)
 8001a00:	2210      	movs	r2, #16
 8001a02:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a04:	4b36      	ldr	r3, [pc, #216]	; (8001ae0 <HAL_TIM_OC_MspInit+0x1b8>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8001a0a:	4b35      	ldr	r3, [pc, #212]	; (8001ae0 <HAL_TIM_OC_MspInit+0x1b8>)
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a10:	4b33      	ldr	r3, [pc, #204]	; (8001ae0 <HAL_TIM_OC_MspInit+0x1b8>)
 8001a12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a16:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a18:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <HAL_TIM_OC_MspInit+0x1b8>)
 8001a1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a1e:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3_up.Init.Mode = DMA_CIRCULAR;
 8001a20:	4b2f      	ldr	r3, [pc, #188]	; (8001ae0 <HAL_TIM_OC_MspInit+0x1b8>)
 8001a22:	2220      	movs	r2, #32
 8001a24:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001a26:	4b2e      	ldr	r3, [pc, #184]	; (8001ae0 <HAL_TIM_OC_MspInit+0x1b8>)
 8001a28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a2c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim8_ch3_up) != HAL_OK)
 8001a2e:	482c      	ldr	r0, [pc, #176]	; (8001ae0 <HAL_TIM_OC_MspInit+0x1b8>)
 8001a30:	f001 fcc3 	bl	80033ba <HAL_DMA_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_TIM_OC_MspInit+0x116>
    {
      Error_Handler();
 8001a3a:	f7ff fb6f 	bl	800111c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_ocHandle,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3_up);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a27      	ldr	r2, [pc, #156]	; (8001ae0 <HAL_TIM_OC_MspInit+0x1b8>)
 8001a42:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a44:	4a26      	ldr	r2, [pc, #152]	; (8001ae0 <HAL_TIM_OC_MspInit+0x1b8>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_ocHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim8_ch3_up);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a24      	ldr	r2, [pc, #144]	; (8001ae0 <HAL_TIM_OC_MspInit+0x1b8>)
 8001a4e:	621a      	str	r2, [r3, #32]
 8001a50:	4a23      	ldr	r2, [pc, #140]	; (8001ae0 <HAL_TIM_OC_MspInit+0x1b8>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM8_CH4_TRIG_COM Init */
    hdma_tim8_ch4_trig_com.Instance = DMA2_Channel2;
 8001a56:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <HAL_TIM_OC_MspInit+0x1c0>)
 8001a58:	4a24      	ldr	r2, [pc, #144]	; (8001aec <HAL_TIM_OC_MspInit+0x1c4>)
 8001a5a:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a5c:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <HAL_TIM_OC_MspInit+0x1c0>)
 8001a5e:	2210      	movs	r2, #16
 8001a60:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a62:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <HAL_TIM_OC_MspInit+0x1c0>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8001a68:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <HAL_TIM_OC_MspInit+0x1c0>)
 8001a6a:	2280      	movs	r2, #128	; 0x80
 8001a6c:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <HAL_TIM_OC_MspInit+0x1c0>)
 8001a70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a74:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a76:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <HAL_TIM_OC_MspInit+0x1c0>)
 8001a78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a7c:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <HAL_TIM_OC_MspInit+0x1c0>)
 8001a80:	2220      	movs	r2, #32
 8001a82:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 8001a84:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <HAL_TIM_OC_MspInit+0x1c0>)
 8001a86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a8a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim8_ch4_trig_com) != HAL_OK)
 8001a8c:	4816      	ldr	r0, [pc, #88]	; (8001ae8 <HAL_TIM_OC_MspInit+0x1c0>)
 8001a8e:	f001 fc94 	bl	80033ba <HAL_DMA_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_TIM_OC_MspInit+0x174>
    {
      Error_Handler();
 8001a98:	f7ff fb40 	bl	800111c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_ocHandle,hdma[TIM_DMA_ID_CC4],hdma_tim8_ch4_trig_com);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <HAL_TIM_OC_MspInit+0x1c0>)
 8001aa0:	631a      	str	r2, [r3, #48]	; 0x30
 8001aa2:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <HAL_TIM_OC_MspInit+0x1c0>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_ocHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim8_ch4_trig_com);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a0f      	ldr	r2, [pc, #60]	; (8001ae8 <HAL_TIM_OC_MspInit+0x1c0>)
 8001aac:	639a      	str	r2, [r3, #56]	; 0x38
 8001aae:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <HAL_TIM_OC_MspInit+0x1c0>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_ocHandle,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim8_ch4_trig_com);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a0c      	ldr	r2, [pc, #48]	; (8001ae8 <HAL_TIM_OC_MspInit+0x1c0>)
 8001ab8:	635a      	str	r2, [r3, #52]	; 0x34
 8001aba:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <HAL_TIM_OC_MspInit+0x1c0>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40013400 	.word	0x40013400
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	20001258 	.word	0x20001258
 8001ad4:	40020430 	.word	0x40020430
 8001ad8:	2000129c 	.word	0x2000129c
 8001adc:	40020458 	.word	0x40020458
 8001ae0:	200012e0 	.word	0x200012e0
 8001ae4:	40020408 	.word	0x40020408
 8001ae8:	20001324 	.word	0x20001324
 8001aec:	4002041c 	.word	0x4002041c

08001af0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08c      	sub	sp, #48	; 0x30
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b10:	d139      	bne.n	8001b86 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	4b3e      	ldr	r3, [pc, #248]	; (8001c0c <HAL_TIM_MspPostInit+0x11c>)
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	4a3d      	ldr	r2, [pc, #244]	; (8001c0c <HAL_TIM_MspPostInit+0x11c>)
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1c:	6153      	str	r3, [r2, #20]
 8001b1e:	4b3b      	ldr	r3, [pc, #236]	; (8001c0c <HAL_TIM_MspPostInit+0x11c>)
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	61bb      	str	r3, [r7, #24]
 8001b28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2a:	4b38      	ldr	r3, [pc, #224]	; (8001c0c <HAL_TIM_MspPostInit+0x11c>)
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	4a37      	ldr	r2, [pc, #220]	; (8001c0c <HAL_TIM_MspPostInit+0x11c>)
 8001b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b34:	6153      	str	r3, [r2, #20]
 8001b36:	4b35      	ldr	r3, [pc, #212]	; (8001c0c <HAL_TIM_MspPostInit+0x11c>)
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = pPWM_VOL_1_Pin;
 8001b42:	2320      	movs	r3, #32
 8001b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b52:	2301      	movs	r3, #1
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(pPWM_VOL_1_GPIO_Port, &GPIO_InitStruct);
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b60:	f001 fe5a 	bl	8003818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = pPWM_VOL_2_Pin;
 8001b64:	2308      	movs	r3, #8
 8001b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b70:	2303      	movs	r3, #3
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b74:	2301      	movs	r3, #1
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(pPWM_VOL_2_GPIO_Port, &GPIO_InitStruct);
 8001b78:	f107 031c 	add.w	r3, r7, #28
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4824      	ldr	r0, [pc, #144]	; (8001c10 <HAL_TIM_MspPostInit+0x120>)
 8001b80:	f001 fe4a 	bl	8003818 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b84:	e03e      	b.n	8001c04 <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM3)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a22      	ldr	r2, [pc, #136]	; (8001c14 <HAL_TIM_MspPostInit+0x124>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d139      	bne.n	8001c04 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b90:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <HAL_TIM_MspPostInit+0x11c>)
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	4a1d      	ldr	r2, [pc, #116]	; (8001c0c <HAL_TIM_MspPostInit+0x11c>)
 8001b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b9a:	6153      	str	r3, [r2, #20]
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <HAL_TIM_MspPostInit+0x11c>)
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba8:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <HAL_TIM_MspPostInit+0x11c>)
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	4a17      	ldr	r2, [pc, #92]	; (8001c0c <HAL_TIM_MspPostInit+0x11c>)
 8001bae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bb2:	6153      	str	r3, [r2, #20]
 8001bb4:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <HAL_TIM_MspPostInit+0x11c>)
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = pPWM_2_Pin|pPWM_1_Pin;
 8001bc0:	2350      	movs	r3, #80	; 0x50
 8001bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd4:	f107 031c 	add.w	r3, r7, #28
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bde:	f001 fe1b 	bl	8003818 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = pPWM_3_Pin|pPWM_4_Pin;
 8001be2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf8:	f107 031c 	add.w	r3, r7, #28
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4806      	ldr	r0, [pc, #24]	; (8001c18 <HAL_TIM_MspPostInit+0x128>)
 8001c00:	f001 fe0a 	bl	8003818 <HAL_GPIO_Init>
}
 8001c04:	bf00      	nop
 8001c06:	3730      	adds	r7, #48	; 0x30
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	48000400 	.word	0x48000400
 8001c14:	40000400 	.word	0x40000400
 8001c18:	48000800 	.word	0x48000800

08001c1c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <MX_USART1_UART_Init+0x58>)
 8001c22:	4a15      	ldr	r2, [pc, #84]	; (8001c78 <MX_USART1_UART_Init+0x5c>)
 8001c24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <MX_USART1_UART_Init+0x58>)
 8001c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <MX_USART1_UART_Init+0x58>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <MX_USART1_UART_Init+0x58>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <MX_USART1_UART_Init+0x58>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <MX_USART1_UART_Init+0x58>)
 8001c42:	220c      	movs	r2, #12
 8001c44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <MX_USART1_UART_Init+0x58>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <MX_USART1_UART_Init+0x58>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <MX_USART1_UART_Init+0x58>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <MX_USART1_UART_Init+0x58>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c5e:	4805      	ldr	r0, [pc, #20]	; (8001c74 <MX_USART1_UART_Init+0x58>)
 8001c60:	f005 fabe 	bl	80071e0 <HAL_UART_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c6a:	f7ff fa57 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20001368 	.word	0x20001368
 8001c78:	40013800 	.word	0x40013800

08001c7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a17      	ldr	r2, [pc, #92]	; (8001cf8 <HAL_UART_MspInit+0x7c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d127      	bne.n	8001cee <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c9e:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <HAL_UART_MspInit+0x80>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	4a16      	ldr	r2, [pc, #88]	; (8001cfc <HAL_UART_MspInit+0x80>)
 8001ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca8:	6193      	str	r3, [r2, #24]
 8001caa:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <HAL_UART_MspInit+0x80>)
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_UART_MspInit+0x80>)
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	4a10      	ldr	r2, [pc, #64]	; (8001cfc <HAL_UART_MspInit+0x80>)
 8001cbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001cc0:	6153      	str	r3, [r2, #20]
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <HAL_UART_MspInit+0x80>)
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001cce:	2330      	movs	r3, #48	; 0x30
 8001cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cde:	2307      	movs	r3, #7
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4805      	ldr	r0, [pc, #20]	; (8001d00 <HAL_UART_MspInit+0x84>)
 8001cea:	f001 fd95 	bl	8003818 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001cee:	bf00      	nop
 8001cf0:	3728      	adds	r7, #40	; 0x28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40013800 	.word	0x40013800
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	48000800 	.word	0x48000800

08001d04 <sm_bypass_sw>:

#include "lib/sm_bypass.h"
#include "stm32f3xx_hal.h"
#include "main.h"

void sm_bypass_sw(StateBypassSw *state_switch, EventBypassSw event, StateEffect *state_effect){
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	72fb      	strb	r3, [r7, #11]

	static uint32_t debounce_start = 0;
	const uint32_t debounce_time_ms = 100;
 8001d12:	2364      	movs	r3, #100	; 0x64
 8001d14:	617b      	str	r3, [r7, #20]

	switch (*state_switch) {
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d840      	bhi.n	8001da0 <sm_bypass_sw+0x9c>
 8001d1e:	a201      	add	r2, pc, #4	; (adr r2, 8001d24 <sm_bypass_sw+0x20>)
 8001d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d24:	08001d35 	.word	0x08001d35
 8001d28:	08001d6f 	.word	0x08001d6f
 8001d2c:	08001d55 	.word	0x08001d55
 8001d30:	08001d87 	.word	0x08001d87
		case STATE_IDLE:
			if (event == EVENT_PRESSED) {
 8001d34:	7afb      	ldrb	r3, [r7, #11]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d136      	bne.n	8001da8 <sm_bypass_sw+0xa4>
				*state_switch = STATE_DEBOUNCE_PRESS;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	701a      	strb	r2, [r3, #0]
				sm_effect(state_effect, EVENT_TOGGLE);
 8001d40:	2100      	movs	r1, #0
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f83e 	bl	8001dc4 <sm_effect>
				debounce_start = HAL_GetTick();
 8001d48:	f000 f9be 	bl	80020c8 <HAL_GetTick>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	4a1c      	ldr	r2, [pc, #112]	; (8001dc0 <sm_bypass_sw+0xbc>)
 8001d50:	6013      	str	r3, [r2, #0]
			}
			break;
 8001d52:	e029      	b.n	8001da8 <sm_bypass_sw+0xa4>

		case STATE_DEBOUNCE_PRESS:
			if (HAL_GetTick() - debounce_start >= debounce_time_ms) {
 8001d54:	f000 f9b8 	bl	80020c8 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <sm_bypass_sw+0xbc>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d822      	bhi.n	8001dac <sm_bypass_sw+0xa8>
				*state_switch = STATE_WAIT_RELEASE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001d6c:	e01e      	b.n	8001dac <sm_bypass_sw+0xa8>

		case STATE_WAIT_RELEASE:
			if (event == EVENT_RELEASED) {
 8001d6e:	7afb      	ldrb	r3, [r7, #11]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d11d      	bne.n	8001db0 <sm_bypass_sw+0xac>
				debounce_start = HAL_GetTick();
 8001d74:	f000 f9a8 	bl	80020c8 <HAL_GetTick>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4a11      	ldr	r2, [pc, #68]	; (8001dc0 <sm_bypass_sw+0xbc>)
 8001d7c:	6013      	str	r3, [r2, #0]

				*state_switch = STATE_DEBOUNCE_RELEASE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2203      	movs	r2, #3
 8001d82:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001d84:	e014      	b.n	8001db0 <sm_bypass_sw+0xac>

		case STATE_DEBOUNCE_RELEASE:
			if (HAL_GetTick() - debounce_start >= debounce_time_ms) {
 8001d86:	f000 f99f 	bl	80020c8 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <sm_bypass_sw+0xbc>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d80d      	bhi.n	8001db4 <sm_bypass_sw+0xb0>
				*state_switch = STATE_IDLE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001d9e:	e009      	b.n	8001db4 <sm_bypass_sw+0xb0>

		default:
			*state_switch = STATE_IDLE;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
			break;
 8001da6:	e006      	b.n	8001db6 <sm_bypass_sw+0xb2>
			break;
 8001da8:	bf00      	nop
 8001daa:	e004      	b.n	8001db6 <sm_bypass_sw+0xb2>
			break;
 8001dac:	bf00      	nop
 8001dae:	e002      	b.n	8001db6 <sm_bypass_sw+0xb2>
			break;
 8001db0:	bf00      	nop
 8001db2:	e000      	b.n	8001db6 <sm_bypass_sw+0xb2>
			break;
 8001db4:	bf00      	nop
	}
}
 8001db6:	bf00      	nop
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200013ec 	.word	0x200013ec

08001dc4 <sm_effect>:

void sm_effect(StateEffect *state, EventEffect event){
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	70fb      	strb	r3, [r7, #3]
	switch (*state) {
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <sm_effect+0x26>
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d10d      	bne.n	8001df8 <sm_effect+0x34>
		case STATE_BYPASS:
			if (event == EVENT_TOGGLE){
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10e      	bne.n	8001e00 <sm_effect+0x3c>
				*state = STATE_EFFECT;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]

			}
			break;
 8001de8:	e00a      	b.n	8001e00 <sm_effect+0x3c>
		case STATE_EFFECT:
			if (event == EVENT_TOGGLE){
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <sm_effect+0x40>
				*state = STATE_BYPASS;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001df6:	e005      	b.n	8001e04 <sm_effect+0x40>

		default:
			*state = STATE_BYPASS;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	701a      	strb	r2, [r3, #0]
			break;
 8001dfe:	e002      	b.n	8001e06 <sm_effect+0x42>
			break;
 8001e00:	bf00      	nop
 8001e02:	e000      	b.n	8001e06 <sm_effect+0x42>
			break;
 8001e04:	bf00      	nop
	}
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <sm_relay_mute>:

void sm_relay_mute(StateRelayMute *state, EventRelayMute event) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
	static uint32_t mute_start = 0;
	const uint32_t mute_time_ms = 10;
 8001e20:	230a      	movs	r3, #10
 8001e22:	60fb      	str	r3, [r7, #12]

	switch (*state) {
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	f200 80b3 	bhi.w	8001f94 <sm_relay_mute+0x180>
 8001e2e:	a201      	add	r2, pc, #4	; (adr r2, 8001e34 <sm_relay_mute+0x20>)
 8001e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e34:	08001f5b 	.word	0x08001f5b
 8001e38:	08001eef 	.word	0x08001eef
 8001e3c:	08001e45 	.word	0x08001e45
 8001e40:	08001e81 	.word	0x08001e81
		case STATE_BYPASS_UNMUTE:
			if (event == EVENT_EFFECT){
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f040 80a8 	bne.w	8001f9c <sm_relay_mute+0x188>
				*state = STATE_BYPASS_MUTE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2203      	movs	r2, #3
 8001e50:	701a      	strb	r2, [r3, #0]
				mute_start = HAL_GetTick();
 8001e52:	f000 f939 	bl	80020c8 <HAL_GetTick>
 8001e56:	4603      	mov	r3, r0
 8001e58:	4a56      	ldr	r2, [pc, #344]	; (8001fb4 <sm_relay_mute+0x1a0>)
 8001e5a:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(pDOUT_MUTE_1_GPIO_Port, pDOUT_MUTE_1_Pin,
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e62:	4855      	ldr	r0, [pc, #340]	; (8001fb8 <sm_relay_mute+0x1a4>)
 8001e64:	f001 fe7a 	bl	8003b5c <HAL_GPIO_WritePin>
					GPIO_PIN_SET);
				HAL_GPIO_WritePin(pDOUT_MUTE_2_GPIO_Port, pDOUT_MUTE_2_Pin,
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e6e:	4852      	ldr	r0, [pc, #328]	; (8001fb8 <sm_relay_mute+0x1a4>)
 8001e70:	f001 fe74 	bl	8003b5c <HAL_GPIO_WritePin>
					GPIO_PIN_SET);
				HAL_GPIO_WritePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin,
 8001e74:	2200      	movs	r2, #0
 8001e76:	2180      	movs	r1, #128	; 0x80
 8001e78:	4850      	ldr	r0, [pc, #320]	; (8001fbc <sm_relay_mute+0x1a8>)
 8001e7a:	f001 fe6f 	bl	8003b5c <HAL_GPIO_WritePin>
					LED_PIN_SET);
			}
			break;
 8001e7e:	e08d      	b.n	8001f9c <sm_relay_mute+0x188>
		case STATE_BYPASS_MUTE:
			if (HAL_GetTick() - mute_start >= mute_time_ms){
 8001e80:	f000 f922 	bl	80020c8 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	4b4b      	ldr	r3, [pc, #300]	; (8001fb4 <sm_relay_mute+0x1a0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	f200 8086 	bhi.w	8001fa0 <sm_relay_mute+0x18c>
				if (event == EVENT_BYPASS){
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d114      	bne.n	8001ec4 <sm_relay_mute+0xb0>
					*state = STATE_BYPASS_UNMUTE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(pDOUT_MUTE_1_GPIO_Port, pDOUT_MUTE_1_Pin,
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ea6:	4844      	ldr	r0, [pc, #272]	; (8001fb8 <sm_relay_mute+0x1a4>)
 8001ea8:	f001 fe58 	bl	8003b5c <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
					HAL_GPIO_WritePin(pDOUT_MUTE_2_GPIO_Port, pDOUT_MUTE_2_Pin,
 8001eac:	2200      	movs	r2, #0
 8001eae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001eb2:	4841      	ldr	r0, [pc, #260]	; (8001fb8 <sm_relay_mute+0x1a4>)
 8001eb4:	f001 fe52 	bl	8003b5c <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
					HAL_GPIO_WritePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin,
 8001eb8:	2201      	movs	r2, #1
 8001eba:	2180      	movs	r1, #128	; 0x80
 8001ebc:	483f      	ldr	r0, [pc, #252]	; (8001fbc <sm_relay_mute+0x1a8>)
 8001ebe:	f001 fe4d 	bl	8003b5c <HAL_GPIO_WritePin>
						GPIO_PIN_SET);
					HAL_GPIO_WritePin(pDOUT_LED2_B_GPIO_Port, pDOUT_LED2_B_Pin,
						LED_PIN_SET);
				}
			}
			break;
 8001ec2:	e06d      	b.n	8001fa0 <sm_relay_mute+0x18c>
					*state = STATE_EFFECT_MUTE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
					mute_start = HAL_GetTick();
 8001eca:	f000 f8fd 	bl	80020c8 <HAL_GetTick>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4a38      	ldr	r2, [pc, #224]	; (8001fb4 <sm_relay_mute+0x1a0>)
 8001ed2:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(pDOUT_RLY_SET_GPIO_Port, pDOUT_RLY_SET_Pin,
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ede:	f001 fe3d 	bl	8003b5c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(pDOUT_LED2_B_GPIO_Port, pDOUT_LED2_B_Pin,
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2120      	movs	r1, #32
 8001ee6:	4835      	ldr	r0, [pc, #212]	; (8001fbc <sm_relay_mute+0x1a8>)
 8001ee8:	f001 fe38 	bl	8003b5c <HAL_GPIO_WritePin>
			break;
 8001eec:	e058      	b.n	8001fa0 <sm_relay_mute+0x18c>
		case STATE_EFFECT_MUTE:
			if (HAL_GetTick() - mute_start >= mute_time_ms){
 8001eee:	f000 f8eb 	bl	80020c8 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	4b2f      	ldr	r3, [pc, #188]	; (8001fb4 <sm_relay_mute+0x1a0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d851      	bhi.n	8001fa4 <sm_relay_mute+0x190>
				if (event == EVENT_BYPASS){
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d114      	bne.n	8001f30 <sm_relay_mute+0x11c>
					*state = STATE_BYPASS_MUTE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2203      	movs	r2, #3
 8001f0a:	701a      	strb	r2, [r3, #0]
					mute_start = HAL_GetTick();
 8001f0c:	f000 f8dc 	bl	80020c8 <HAL_GetTick>
 8001f10:	4603      	mov	r3, r0
 8001f12:	4a28      	ldr	r2, [pc, #160]	; (8001fb4 <sm_relay_mute+0x1a0>)
 8001f14:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(pDOUT_RLY_SET_GPIO_Port, pDOUT_RLY_SET_Pin,
 8001f16:	2200      	movs	r2, #0
 8001f18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f20:	f001 fe1c 	bl	8003b5c <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
					HAL_GPIO_WritePin(pDOUT_LED2_B_GPIO_Port, pDOUT_LED2_B_Pin,
 8001f24:	2201      	movs	r2, #1
 8001f26:	2120      	movs	r1, #32
 8001f28:	4824      	ldr	r0, [pc, #144]	; (8001fbc <sm_relay_mute+0x1a8>)
 8001f2a:	f001 fe17 	bl	8003b5c <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
					HAL_GPIO_WritePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin,
						LED_PIN_RESET);
				}
			}
			break;
 8001f2e:	e039      	b.n	8001fa4 <sm_relay_mute+0x190>
					*state = STATE_EFFECT_UNMUTE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(pDOUT_MUTE_1_GPIO_Port, pDOUT_MUTE_1_Pin,
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f3c:	481e      	ldr	r0, [pc, #120]	; (8001fb8 <sm_relay_mute+0x1a4>)
 8001f3e:	f001 fe0d 	bl	8003b5c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(pDOUT_MUTE_2_GPIO_Port, pDOUT_MUTE_2_Pin,
 8001f42:	2200      	movs	r2, #0
 8001f44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f48:	481b      	ldr	r0, [pc, #108]	; (8001fb8 <sm_relay_mute+0x1a4>)
 8001f4a:	f001 fe07 	bl	8003b5c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin,
 8001f4e:	2201      	movs	r2, #1
 8001f50:	2180      	movs	r1, #128	; 0x80
 8001f52:	481a      	ldr	r0, [pc, #104]	; (8001fbc <sm_relay_mute+0x1a8>)
 8001f54:	f001 fe02 	bl	8003b5c <HAL_GPIO_WritePin>
			break;
 8001f58:	e024      	b.n	8001fa4 <sm_relay_mute+0x190>
		case STATE_EFFECT_UNMUTE:
			if (event == EVENT_BYPASS){
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d123      	bne.n	8001fa8 <sm_relay_mute+0x194>
				*state = STATE_EFFECT_MUTE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
				mute_start = HAL_GetTick();
 8001f66:	f000 f8af 	bl	80020c8 <HAL_GetTick>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4a11      	ldr	r2, [pc, #68]	; (8001fb4 <sm_relay_mute+0x1a0>)
 8001f6e:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(pDOUT_MUTE_1_GPIO_Port, pDOUT_MUTE_1_Pin,
 8001f70:	2201      	movs	r2, #1
 8001f72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f76:	4810      	ldr	r0, [pc, #64]	; (8001fb8 <sm_relay_mute+0x1a4>)
 8001f78:	f001 fdf0 	bl	8003b5c <HAL_GPIO_WritePin>
					GPIO_PIN_SET);
				HAL_GPIO_WritePin(pDOUT_MUTE_2_GPIO_Port, pDOUT_MUTE_2_Pin,
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f82:	480d      	ldr	r0, [pc, #52]	; (8001fb8 <sm_relay_mute+0x1a4>)
 8001f84:	f001 fdea 	bl	8003b5c <HAL_GPIO_WritePin>
					GPIO_PIN_SET);
				HAL_GPIO_WritePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin,
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2180      	movs	r1, #128	; 0x80
 8001f8c:	480b      	ldr	r0, [pc, #44]	; (8001fbc <sm_relay_mute+0x1a8>)
 8001f8e:	f001 fde5 	bl	8003b5c <HAL_GPIO_WritePin>
					LED_PIN_SET);
			}
			break;
 8001f92:	e009      	b.n	8001fa8 <sm_relay_mute+0x194>
		default:
			*state = STATE_BYPASS;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
			break;
 8001f9a:	e006      	b.n	8001faa <sm_relay_mute+0x196>
			break;
 8001f9c:	bf00      	nop
 8001f9e:	e004      	b.n	8001faa <sm_relay_mute+0x196>
			break;
 8001fa0:	bf00      	nop
 8001fa2:	e002      	b.n	8001faa <sm_relay_mute+0x196>
			break;
 8001fa4:	bf00      	nop
 8001fa6:	e000      	b.n	8001faa <sm_relay_mute+0x196>
			break;
 8001fa8:	bf00      	nop
	}
}
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200013f0 	.word	0x200013f0
 8001fb8:	48000800 	.word	0x48000800
 8001fbc:	48000400 	.word	0x48000400

08001fc0 <Reset_Handler>:
 8001fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff8 <LoopForever+0x2>
 8001fc4:	480d      	ldr	r0, [pc, #52]	; (8001ffc <LoopForever+0x6>)
 8001fc6:	490e      	ldr	r1, [pc, #56]	; (8002000 <LoopForever+0xa>)
 8001fc8:	4a0e      	ldr	r2, [pc, #56]	; (8002004 <LoopForever+0xe>)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e002      	b.n	8001fd4 <LoopCopyDataInit>

08001fce <CopyDataInit>:
 8001fce:	58d4      	ldr	r4, [r2, r3]
 8001fd0:	50c4      	str	r4, [r0, r3]
 8001fd2:	3304      	adds	r3, #4

08001fd4 <LoopCopyDataInit>:
 8001fd4:	18c4      	adds	r4, r0, r3
 8001fd6:	428c      	cmp	r4, r1
 8001fd8:	d3f9      	bcc.n	8001fce <CopyDataInit>
 8001fda:	4a0b      	ldr	r2, [pc, #44]	; (8002008 <LoopForever+0x12>)
 8001fdc:	4c0b      	ldr	r4, [pc, #44]	; (800200c <LoopForever+0x16>)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	e001      	b.n	8001fe6 <LoopFillZerobss>

08001fe2 <FillZerobss>:
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	3204      	adds	r2, #4

08001fe6 <LoopFillZerobss>:
 8001fe6:	42a2      	cmp	r2, r4
 8001fe8:	d3fb      	bcc.n	8001fe2 <FillZerobss>
 8001fea:	f7ff f999 	bl	8001320 <SystemInit>
 8001fee:	f005 fccb 	bl	8007988 <__libc_init_array>
 8001ff2:	f7fe fb9f 	bl	8000734 <main>

08001ff6 <LoopForever>:
 8001ff6:	e7fe      	b.n	8001ff6 <LoopForever>
 8001ff8:	20010000 	.word	0x20010000
 8001ffc:	20000000 	.word	0x20000000
 8002000:	2000000c 	.word	0x2000000c
 8002004:	08007a38 	.word	0x08007a38
 8002008:	2000000c 	.word	0x2000000c
 800200c:	200013f8 	.word	0x200013f8

08002010 <ADC1_2_IRQHandler>:
 8002010:	e7fe      	b.n	8002010 <ADC1_2_IRQHandler>
	...

08002014 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <HAL_Init+0x28>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a07      	ldr	r2, [pc, #28]	; (800203c <HAL_Init+0x28>)
 800201e:	f043 0310 	orr.w	r3, r3, #16
 8002022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002024:	2003      	movs	r0, #3
 8002026:	f001 f987 	bl	8003338 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800202a:	200f      	movs	r0, #15
 800202c:	f000 f808 	bl	8002040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002030:	f7ff f8ba 	bl	80011a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40022000 	.word	0x40022000

08002040 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_InitTick+0x54>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_InitTick+0x58>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4619      	mov	r1, r3
 8002052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002056:	fbb3 f3f1 	udiv	r3, r3, r1
 800205a:	fbb2 f3f3 	udiv	r3, r2, r3
 800205e:	4618      	mov	r0, r3
 8002060:	f001 f99f 	bl	80033a2 <HAL_SYSTICK_Config>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e00e      	b.n	800208c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b0f      	cmp	r3, #15
 8002072:	d80a      	bhi.n	800208a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002074:	2200      	movs	r2, #0
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f001 f967 	bl	800334e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002080:	4a06      	ldr	r2, [pc, #24]	; (800209c <HAL_InitTick+0x5c>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e000      	b.n	800208c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000000 	.word	0x20000000
 8002098:	20000008 	.word	0x20000008
 800209c:	20000004 	.word	0x20000004

080020a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_IncTick+0x20>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_IncTick+0x24>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <HAL_IncTick+0x24>)
 80020b2:	6013      	str	r3, [r2, #0]
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000008 	.word	0x20000008
 80020c4:	200013f4 	.word	0x200013f4

080020c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <HAL_GetTick+0x14>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	200013f4 	.word	0x200013f4

080020e0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff ffee 	bl	80020c8 <HAL_GetTick>
 80020ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f8:	d005      	beq.n	8002106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <HAL_Delay+0x44>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4413      	add	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002106:	bf00      	nop
 8002108:	f7ff ffde 	bl	80020c8 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	429a      	cmp	r2, r3
 8002116:	d8f7      	bhi.n	8002108 <HAL_Delay+0x28>
  {
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000008 	.word	0x20000008

08002128 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b09a      	sub	sp, #104	; 0x68
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e1e3      	b.n	8002538 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b00      	cmp	r3, #0
 8002180:	d176      	bne.n	8002270 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	2b00      	cmp	r3, #0
 8002188:	d152      	bne.n	8002230 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7fe f8f5 	bl	8000394 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d13b      	bne.n	8002230 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 ff87 	bl	80030cc <ADC_Disable>
 80021be:	4603      	mov	r3, r0
 80021c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d12f      	bne.n	8002230 <HAL_ADC_Init+0xe0>
 80021d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d12b      	bne.n	8002230 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021e0:	f023 0302 	bic.w	r3, r3, #2
 80021e4:	f043 0202 	orr.w	r2, r3, #2
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021fa:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800220a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800220c:	4b92      	ldr	r3, [pc, #584]	; (8002458 <HAL_ADC_Init+0x308>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a92      	ldr	r2, [pc, #584]	; (800245c <HAL_ADC_Init+0x30c>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	0c9a      	lsrs	r2, r3, #18
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002222:	e002      	b.n	800222a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	3b01      	subs	r3, #1
 8002228:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f9      	bne.n	8002224 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d007      	beq.n	800224e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800224c:	d110      	bne.n	8002270 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f023 0312 	bic.w	r3, r3, #18
 8002256:	f043 0210 	orr.w	r2, r3, #16
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	f043 0201 	orr.w	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2b00      	cmp	r3, #0
 800227a:	f040 8150 	bne.w	800251e <HAL_ADC_Init+0x3ce>
 800227e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 814b 	bne.w	800251e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002292:	2b00      	cmp	r3, #0
 8002294:	f040 8143 	bne.w	800251e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022a0:	f043 0202 	orr.w	r2, r3, #2
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022b0:	d004      	beq.n	80022bc <HAL_ADC_Init+0x16c>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a6a      	ldr	r2, [pc, #424]	; (8002460 <HAL_ADC_Init+0x310>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d101      	bne.n	80022c0 <HAL_ADC_Init+0x170>
 80022bc:	4b69      	ldr	r3, [pc, #420]	; (8002464 <HAL_ADC_Init+0x314>)
 80022be:	e000      	b.n	80022c2 <HAL_ADC_Init+0x172>
 80022c0:	4b69      	ldr	r3, [pc, #420]	; (8002468 <HAL_ADC_Init+0x318>)
 80022c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022cc:	d102      	bne.n	80022d4 <HAL_ADC_Init+0x184>
 80022ce:	4b64      	ldr	r3, [pc, #400]	; (8002460 <HAL_ADC_Init+0x310>)
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	e01a      	b.n	800230a <HAL_ADC_Init+0x1ba>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a61      	ldr	r2, [pc, #388]	; (8002460 <HAL_ADC_Init+0x310>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d103      	bne.n	80022e6 <HAL_ADC_Init+0x196>
 80022de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	e011      	b.n	800230a <HAL_ADC_Init+0x1ba>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a60      	ldr	r2, [pc, #384]	; (800246c <HAL_ADC_Init+0x31c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d102      	bne.n	80022f6 <HAL_ADC_Init+0x1a6>
 80022f0:	4b5f      	ldr	r3, [pc, #380]	; (8002470 <HAL_ADC_Init+0x320>)
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e009      	b.n	800230a <HAL_ADC_Init+0x1ba>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a5d      	ldr	r2, [pc, #372]	; (8002470 <HAL_ADC_Init+0x320>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d102      	bne.n	8002306 <HAL_ADC_Init+0x1b6>
 8002300:	4b5a      	ldr	r3, [pc, #360]	; (800246c <HAL_ADC_Init+0x31c>)
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	e001      	b.n	800230a <HAL_ADC_Init+0x1ba>
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b01      	cmp	r3, #1
 8002316:	d108      	bne.n	800232a <HAL_ADC_Init+0x1da>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_ADC_Init+0x1da>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <HAL_ADC_Init+0x1dc>
 800232a:	2300      	movs	r3, #0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d11c      	bne.n	800236a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002330:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002332:	2b00      	cmp	r3, #0
 8002334:	d010      	beq.n	8002358 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	2b01      	cmp	r3, #1
 8002340:	d107      	bne.n	8002352 <HAL_ADC_Init+0x202>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_ADC_Init+0x202>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_ADC_Init+0x204>
 8002352:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002354:	2b00      	cmp	r3, #0
 8002356:	d108      	bne.n	800236a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	431a      	orrs	r2, r3
 8002366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002368:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	7e5b      	ldrb	r3, [r3, #25]
 800236e:	035b      	lsls	r3, r3, #13
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002374:	2a01      	cmp	r2, #1
 8002376:	d002      	beq.n	800237e <HAL_ADC_Init+0x22e>
 8002378:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800237c:	e000      	b.n	8002380 <HAL_ADC_Init+0x230>
 800237e:	2200      	movs	r2, #0
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4313      	orrs	r3, r2
 800238e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002390:	4313      	orrs	r3, r2
 8002392:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3020 	ldrb.w	r3, [r3, #32]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d11b      	bne.n	80023d6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	7e5b      	ldrb	r3, [r3, #25]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	3b01      	subs	r3, #1
 80023ac:	045a      	lsls	r2, r3, #17
 80023ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b6:	663b      	str	r3, [r7, #96]	; 0x60
 80023b8:	e00d      	b.n	80023d6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80023c2:	f043 0220 	orr.w	r2, r3, #32
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	f043 0201 	orr.w	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d054      	beq.n	8002488 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a22      	ldr	r2, [pc, #136]	; (800246c <HAL_ADC_Init+0x31c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d004      	beq.n	80023f2 <HAL_ADC_Init+0x2a2>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a20      	ldr	r2, [pc, #128]	; (8002470 <HAL_ADC_Init+0x320>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d140      	bne.n	8002474 <HAL_ADC_Init+0x324>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80023fa:	d02a      	beq.n	8002452 <HAL_ADC_Init+0x302>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002404:	d022      	beq.n	800244c <HAL_ADC_Init+0x2fc>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800240e:	d01a      	beq.n	8002446 <HAL_ADC_Init+0x2f6>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002418:	d012      	beq.n	8002440 <HAL_ADC_Init+0x2f0>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002422:	d00a      	beq.n	800243a <HAL_ADC_Init+0x2ea>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 800242c:	d002      	beq.n	8002434 <HAL_ADC_Init+0x2e4>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	e023      	b.n	800247c <HAL_ADC_Init+0x32c>
 8002434:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002438:	e020      	b.n	800247c <HAL_ADC_Init+0x32c>
 800243a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800243e:	e01d      	b.n	800247c <HAL_ADC_Init+0x32c>
 8002440:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002444:	e01a      	b.n	800247c <HAL_ADC_Init+0x32c>
 8002446:	f44f 7380 	mov.w	r3, #256	; 0x100
 800244a:	e017      	b.n	800247c <HAL_ADC_Init+0x32c>
 800244c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002450:	e014      	b.n	800247c <HAL_ADC_Init+0x32c>
 8002452:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002456:	e011      	b.n	800247c <HAL_ADC_Init+0x32c>
 8002458:	20000000 	.word	0x20000000
 800245c:	431bde83 	.word	0x431bde83
 8002460:	50000100 	.word	0x50000100
 8002464:	50000300 	.word	0x50000300
 8002468:	50000700 	.word	0x50000700
 800246c:	50000400 	.word	0x50000400
 8002470:	50000500 	.word	0x50000500
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002480:	4313      	orrs	r3, r2
 8002482:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002484:	4313      	orrs	r3, r2
 8002486:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b00      	cmp	r3, #0
 8002494:	d114      	bne.n	80024c0 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024a4:	f023 0302 	bic.w	r3, r3, #2
 80024a8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	7e1b      	ldrb	r3, [r3, #24]
 80024ae:	039a      	lsls	r2, r3, #14
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4313      	orrs	r3, r2
 80024ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024bc:	4313      	orrs	r3, r2
 80024be:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	4b1e      	ldr	r3, [pc, #120]	; (8002540 <HAL_ADC_Init+0x3f0>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80024d0:	430b      	orrs	r3, r1
 80024d2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d10c      	bne.n	80024f6 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f023 010f 	bic.w	r1, r3, #15
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	1e5a      	subs	r2, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	631a      	str	r2, [r3, #48]	; 0x30
 80024f4:	e007      	b.n	8002506 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 020f 	bic.w	r2, r2, #15
 8002504:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	f023 0303 	bic.w	r3, r3, #3
 8002514:	f043 0201 	orr.w	r2, r3, #1
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	641a      	str	r2, [r3, #64]	; 0x40
 800251c:	e00a      	b.n	8002534 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f023 0312 	bic.w	r3, r3, #18
 8002526:	f043 0210 	orr.w	r2, r3, #16
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800252e:	2301      	movs	r3, #1
 8002530:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002534:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002538:	4618      	mov	r0, r3
 800253a:	3768      	adds	r7, #104	; 0x68
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	fff0c007 	.word	0xfff0c007

08002544 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	f040 80f7 	bne.w	8002752 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_ADC_Start_DMA+0x2e>
 800256e:	2302      	movs	r3, #2
 8002570:	e0f2      	b.n	8002758 <HAL_ADC_Start_DMA+0x214>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002582:	d004      	beq.n	800258e <HAL_ADC_Start_DMA+0x4a>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a75      	ldr	r2, [pc, #468]	; (8002760 <HAL_ADC_Start_DMA+0x21c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d109      	bne.n	80025a2 <HAL_ADC_Start_DMA+0x5e>
 800258e:	4b75      	ldr	r3, [pc, #468]	; (8002764 <HAL_ADC_Start_DMA+0x220>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 031f 	and.w	r3, r3, #31
 8002596:	2b00      	cmp	r3, #0
 8002598:	bf0c      	ite	eq
 800259a:	2301      	moveq	r3, #1
 800259c:	2300      	movne	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	e008      	b.n	80025b4 <HAL_ADC_Start_DMA+0x70>
 80025a2:	4b71      	ldr	r3, [pc, #452]	; (8002768 <HAL_ADC_Start_DMA+0x224>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	bf0c      	ite	eq
 80025ae:	2301      	moveq	r3, #1
 80025b0:	2300      	movne	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80c5 	beq.w	8002744 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 fd22 	bl	8003004 <ADC_Enable>
 80025c0:	4603      	mov	r3, r0
 80025c2:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80025c4:	7dfb      	ldrb	r3, [r7, #23]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f040 80b7 	bne.w	800273a <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025d4:	f023 0301 	bic.w	r3, r3, #1
 80025d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025e8:	d004      	beq.n	80025f4 <HAL_ADC_Start_DMA+0xb0>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a5c      	ldr	r2, [pc, #368]	; (8002760 <HAL_ADC_Start_DMA+0x21c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d106      	bne.n	8002602 <HAL_ADC_Start_DMA+0xbe>
 80025f4:	4b5b      	ldr	r3, [pc, #364]	; (8002764 <HAL_ADC_Start_DMA+0x220>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d010      	beq.n	8002622 <HAL_ADC_Start_DMA+0xde>
 8002600:	e005      	b.n	800260e <HAL_ADC_Start_DMA+0xca>
 8002602:	4b59      	ldr	r3, [pc, #356]	; (8002768 <HAL_ADC_Start_DMA+0x224>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	2b00      	cmp	r3, #0
 800260c:	d009      	beq.n	8002622 <HAL_ADC_Start_DMA+0xde>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002616:	d004      	beq.n	8002622 <HAL_ADC_Start_DMA+0xde>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a53      	ldr	r2, [pc, #332]	; (800276c <HAL_ADC_Start_DMA+0x228>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d115      	bne.n	800264e <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d036      	beq.n	80026aa <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002644:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800264c:	e02d      	b.n	80026aa <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002662:	d004      	beq.n	800266e <HAL_ADC_Start_DMA+0x12a>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a3d      	ldr	r2, [pc, #244]	; (8002760 <HAL_ADC_Start_DMA+0x21c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d10a      	bne.n	8002684 <HAL_ADC_Start_DMA+0x140>
 800266e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	bf14      	ite	ne
 800267c:	2301      	movne	r3, #1
 800267e:	2300      	moveq	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	e008      	b.n	8002696 <HAL_ADC_Start_DMA+0x152>
 8002684:	4b39      	ldr	r3, [pc, #228]	; (800276c <HAL_ADC_Start_DMA+0x228>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	bf14      	ite	ne
 8002690:	2301      	movne	r3, #1
 8002692:	2300      	moveq	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d007      	beq.n	80026aa <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b6:	d106      	bne.n	80026c6 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026bc:	f023 0206 	bic.w	r2, r3, #6
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	645a      	str	r2, [r3, #68]	; 0x44
 80026c4:	e002      	b.n	80026cc <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d8:	4a25      	ldr	r2, [pc, #148]	; (8002770 <HAL_ADC_Start_DMA+0x22c>)
 80026da:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e0:	4a24      	ldr	r2, [pc, #144]	; (8002774 <HAL_ADC_Start_DMA+0x230>)
 80026e2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e8:	4a23      	ldr	r2, [pc, #140]	; (8002778 <HAL_ADC_Start_DMA+0x234>)
 80026ea:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	221c      	movs	r2, #28
 80026f2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0210 	orr.w	r2, r2, #16
 8002702:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	3340      	adds	r3, #64	; 0x40
 800271e:	4619      	mov	r1, r3
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f000 fed2 	bl	80034cc <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0204 	orr.w	r2, r2, #4
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	e00d      	b.n	8002756 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002742:	e008      	b.n	8002756 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002750:	e001      	b.n	8002756 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002752:	2302      	movs	r3, #2
 8002754:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002756:	7dfb      	ldrb	r3, [r7, #23]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	50000100 	.word	0x50000100
 8002764:	50000300 	.word	0x50000300
 8002768:	50000700 	.word	0x50000700
 800276c:	50000400 	.word	0x50000400
 8002770:	08002f39 	.word	0x08002f39
 8002774:	08002fb3 	.word	0x08002fb3
 8002778:	08002fcf 	.word	0x08002fcf

0800277c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800277c:	b480      	push	{r7}
 800277e:	b09b      	sub	sp, #108	; 0x6c
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_ADC_ConfigChannel+0x22>
 800279a:	2302      	movs	r3, #2
 800279c:	e2ca      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x5b8>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f040 82ae 	bne.w	8002d12 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d81c      	bhi.n	80027f8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4413      	add	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	461a      	mov	r2, r3
 80027d2:	231f      	movs	r3, #31
 80027d4:	4093      	lsls	r3, r2
 80027d6:	43db      	mvns	r3, r3
 80027d8:	4019      	ands	r1, r3
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	fa00 f203 	lsl.w	r2, r0, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30
 80027f6:	e063      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b09      	cmp	r3, #9
 80027fe:	d81e      	bhi.n	800283e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4413      	add	r3, r2
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	3b1e      	subs	r3, #30
 8002814:	221f      	movs	r2, #31
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	4019      	ands	r1, r3
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	6818      	ldr	r0, [r3, #0]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4413      	add	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	3b1e      	subs	r3, #30
 8002830:	fa00 f203 	lsl.w	r2, r0, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	635a      	str	r2, [r3, #52]	; 0x34
 800283c:	e040      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b0e      	cmp	r3, #14
 8002844:	d81e      	bhi.n	8002884 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4413      	add	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	3b3c      	subs	r3, #60	; 0x3c
 800285a:	221f      	movs	r2, #31
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	4019      	ands	r1, r3
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4413      	add	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	3b3c      	subs	r3, #60	; 0x3c
 8002876:	fa00 f203 	lsl.w	r2, r0, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	639a      	str	r2, [r3, #56]	; 0x38
 8002882:	e01d      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	3b5a      	subs	r3, #90	; 0x5a
 8002898:	221f      	movs	r2, #31
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	4019      	ands	r1, r3
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4413      	add	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	3b5a      	subs	r3, #90	; 0x5a
 80028b4:	fa00 f203 	lsl.w	r2, r0, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f040 80e5 	bne.w	8002a9a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b09      	cmp	r3, #9
 80028d6:	d91c      	bls.n	8002912 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6999      	ldr	r1, [r3, #24]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4613      	mov	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	4413      	add	r3, r2
 80028e8:	3b1e      	subs	r3, #30
 80028ea:	2207      	movs	r2, #7
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	4019      	ands	r1, r3
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	6898      	ldr	r0, [r3, #8]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4613      	mov	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	3b1e      	subs	r3, #30
 8002904:	fa00 f203 	lsl.w	r2, r0, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	619a      	str	r2, [r3, #24]
 8002910:	e019      	b.n	8002946 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6959      	ldr	r1, [r3, #20]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4613      	mov	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4413      	add	r3, r2
 8002922:	2207      	movs	r2, #7
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	4019      	ands	r1, r3
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	6898      	ldr	r0, [r3, #8]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4613      	mov	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	fa00 f203 	lsl.w	r2, r0, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	08db      	lsrs	r3, r3, #3
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	3b01      	subs	r3, #1
 8002964:	2b03      	cmp	r3, #3
 8002966:	d84f      	bhi.n	8002a08 <HAL_ADC_ConfigChannel+0x28c>
 8002968:	a201      	add	r2, pc, #4	; (adr r2, 8002970 <HAL_ADC_ConfigChannel+0x1f4>)
 800296a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296e:	bf00      	nop
 8002970:	08002981 	.word	0x08002981
 8002974:	080029a3 	.word	0x080029a3
 8002978:	080029c5 	.word	0x080029c5
 800297c:	080029e7 	.word	0x080029e7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002986:	4b9a      	ldr	r3, [pc, #616]	; (8002bf0 <HAL_ADC_ConfigChannel+0x474>)
 8002988:	4013      	ands	r3, r2
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	0691      	lsls	r1, r2, #26
 8002990:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002992:	430a      	orrs	r2, r1
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800299e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029a0:	e07e      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80029a8:	4b91      	ldr	r3, [pc, #580]	; (8002bf0 <HAL_ADC_ConfigChannel+0x474>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	0691      	lsls	r1, r2, #26
 80029b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029b4:	430a      	orrs	r2, r1
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80029c0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029c2:	e06d      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80029ca:	4b89      	ldr	r3, [pc, #548]	; (8002bf0 <HAL_ADC_ConfigChannel+0x474>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	0691      	lsls	r1, r2, #26
 80029d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029d6:	430a      	orrs	r2, r1
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80029e2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029e4:	e05c      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80029ec:	4b80      	ldr	r3, [pc, #512]	; (8002bf0 <HAL_ADC_ConfigChannel+0x474>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	0691      	lsls	r1, r2, #26
 80029f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029f8:	430a      	orrs	r2, r1
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a04:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a06:	e04b      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	069b      	lsls	r3, r3, #26
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d107      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a2a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	069b      	lsls	r3, r3, #26
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d107      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a4e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	069b      	lsls	r3, r3, #26
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d107      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a72:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	069b      	lsls	r3, r3, #26
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d10a      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a96:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002a98:	e001      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002a9a:	bf00      	nop
 8002a9c:	e000      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002a9e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d108      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x344>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x344>
 8002abc:	2301      	movs	r3, #1
 8002abe:	e000      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x346>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f040 8130 	bne.w	8002d28 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d00f      	beq.n	8002af0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2201      	movs	r2, #1
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43da      	mvns	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	400a      	ands	r2, r1
 8002aea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002aee:	e049      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2201      	movs	r2, #1
 8002afe:	409a      	lsls	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b09      	cmp	r3, #9
 8002b10:	d91c      	bls.n	8002b4c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6999      	ldr	r1, [r3, #24]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	4413      	add	r3, r2
 8002b22:	3b1b      	subs	r3, #27
 8002b24:	2207      	movs	r2, #7
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	4019      	ands	r1, r3
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6898      	ldr	r0, [r3, #8]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	4613      	mov	r3, r2
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3b1b      	subs	r3, #27
 8002b3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	619a      	str	r2, [r3, #24]
 8002b4a:	e01b      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6959      	ldr	r1, [r3, #20]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	4613      	mov	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4413      	add	r3, r2
 8002b5e:	2207      	movs	r2, #7
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	4019      	ands	r1, r3
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	6898      	ldr	r0, [r3, #8]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	4613      	mov	r3, r2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	4413      	add	r3, r2
 8002b78:	fa00 f203 	lsl.w	r2, r0, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b8c:	d004      	beq.n	8002b98 <HAL_ADC_ConfigChannel+0x41c>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a18      	ldr	r2, [pc, #96]	; (8002bf4 <HAL_ADC_ConfigChannel+0x478>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d101      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x420>
 8002b98:	4b17      	ldr	r3, [pc, #92]	; (8002bf8 <HAL_ADC_ConfigChannel+0x47c>)
 8002b9a:	e000      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x422>
 8002b9c:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <HAL_ADC_ConfigChannel+0x480>)
 8002b9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b10      	cmp	r3, #16
 8002ba6:	d105      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002ba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d015      	beq.n	8002be0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002bb8:	2b11      	cmp	r3, #17
 8002bba:	d105      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00b      	beq.n	8002be0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002bcc:	2b12      	cmp	r3, #18
 8002bce:	f040 80ab 	bne.w	8002d28 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f040 80a4 	bne.w	8002d28 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002be8:	d10a      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x484>
 8002bea:	4b02      	ldr	r3, [pc, #8]	; (8002bf4 <HAL_ADC_ConfigChannel+0x478>)
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	e022      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x4ba>
 8002bf0:	83fff000 	.word	0x83fff000
 8002bf4:	50000100 	.word	0x50000100
 8002bf8:	50000300 	.word	0x50000300
 8002bfc:	50000700 	.word	0x50000700
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a4e      	ldr	r2, [pc, #312]	; (8002d40 <HAL_ADC_ConfigChannel+0x5c4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d103      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x496>
 8002c0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	e011      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x4ba>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a4b      	ldr	r2, [pc, #300]	; (8002d44 <HAL_ADC_ConfigChannel+0x5c8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d102      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x4a6>
 8002c1c:	4b4a      	ldr	r3, [pc, #296]	; (8002d48 <HAL_ADC_ConfigChannel+0x5cc>)
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	e009      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x4ba>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a48      	ldr	r2, [pc, #288]	; (8002d48 <HAL_ADC_ConfigChannel+0x5cc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d102      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x4b6>
 8002c2c:	4b45      	ldr	r3, [pc, #276]	; (8002d44 <HAL_ADC_ConfigChannel+0x5c8>)
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	e001      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x4ba>
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d108      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x4da>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x4da>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x4dc>
 8002c56:	2300      	movs	r3, #0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d150      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c5c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d010      	beq.n	8002c84 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d107      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x502>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x502>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x504>
 8002c7e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d13c      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b10      	cmp	r3, #16
 8002c8a:	d11d      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x54c>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c94:	d118      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ca2:	4b2a      	ldr	r3, [pc, #168]	; (8002d4c <HAL_ADC_ConfigChannel+0x5d0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a2a      	ldr	r2, [pc, #168]	; (8002d50 <HAL_ADC_ConfigChannel+0x5d4>)
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	0c9a      	lsrs	r2, r3, #18
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cb8:	e002      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f9      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002cc6:	e02e      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b11      	cmp	r3, #17
 8002cce:	d10b      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x56c>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cd8:	d106      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ce6:	e01e      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b12      	cmp	r3, #18
 8002cee:	d11a      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002cf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cfa:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002cfc:	e013      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f043 0220 	orr.w	r2, r3, #32
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002d10:	e00a      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f043 0220 	orr.w	r2, r3, #32
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002d24:	e000      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d26:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	376c      	adds	r7, #108	; 0x6c
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	50000100 	.word	0x50000100
 8002d44:	50000400 	.word	0x50000400
 8002d48:	50000500 	.word	0x50000500
 8002d4c:	20000000 	.word	0x20000000
 8002d50:	431bde83 	.word	0x431bde83

08002d54 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b099      	sub	sp, #100	; 0x64
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d6c:	d102      	bne.n	8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002d6e:	4b6d      	ldr	r3, [pc, #436]	; (8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	e01a      	b.n	8002daa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a6a      	ldr	r2, [pc, #424]	; (8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d103      	bne.n	8002d86 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002d7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	e011      	b.n	8002daa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a67      	ldr	r2, [pc, #412]	; (8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d102      	bne.n	8002d96 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d90:	4b66      	ldr	r3, [pc, #408]	; (8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	e009      	b.n	8002daa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a64      	ldr	r2, [pc, #400]	; (8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d102      	bne.n	8002da6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002da0:	4b61      	ldr	r3, [pc, #388]	; (8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	e001      	b.n	8002daa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0b0      	b.n	8002f16 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e0a9      	b.n	8002f16 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f040 808d 	bne.w	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f040 8086 	bne.w	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002df0:	d004      	beq.n	8002dfc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a4b      	ldr	r2, [pc, #300]	; (8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d101      	bne.n	8002e00 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002dfc:	4b4c      	ldr	r3, [pc, #304]	; (8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002dfe:	e000      	b.n	8002e02 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002e00:	4b4c      	ldr	r3, [pc, #304]	; (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002e02:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d040      	beq.n	8002e8e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002e0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	6859      	ldr	r1, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e1e:	035b      	lsls	r3, r3, #13
 8002e20:	430b      	orrs	r3, r1
 8002e22:	431a      	orrs	r2, r3
 8002e24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e26:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d108      	bne.n	8002e48 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d15c      	bne.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d107      	bne.n	8002e6a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002e6a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d14b      	bne.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002e70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e78:	f023 030f 	bic.w	r3, r3, #15
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	6811      	ldr	r1, [r2, #0]
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	6892      	ldr	r2, [r2, #8]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	431a      	orrs	r2, r3
 8002e88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e8a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e8c:	e03c      	b.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e98:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d108      	bne.n	8002eba <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d123      	bne.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d107      	bne.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002edc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d112      	bne.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002eea:	f023 030f 	bic.w	r3, r3, #15
 8002eee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ef0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ef2:	e009      	b.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	f043 0220 	orr.w	r2, r3, #32
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002f06:	e000      	b.n	8002f0a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f08:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002f16:	4618      	mov	r0, r3
 8002f18:	3764      	adds	r7, #100	; 0x64
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	50000100 	.word	0x50000100
 8002f28:	50000400 	.word	0x50000400
 8002f2c:	50000500 	.word	0x50000500
 8002f30:	50000300 	.word	0x50000300
 8002f34:	50000700 	.word	0x50000700

08002f38 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d126      	bne.n	8002fa0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d115      	bne.n	8002f98 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d111      	bne.n	8002f98 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d105      	bne.n	8002f98 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	f043 0201 	orr.w	r2, r3, #1
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f7fe f8b5 	bl	8001108 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002f9e:	e004      	b.n	8002faa <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	4798      	blx	r3
}
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f7ff f8b1 	bl	8002128 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002fc6:	bf00      	nop
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fec:	f043 0204 	orr.w	r2, r3, #4
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f7ff f8a1 	bl	800213c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b01      	cmp	r3, #1
 800301c:	d108      	bne.n	8003030 <ADC_Enable+0x2c>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <ADC_Enable+0x2c>
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <ADC_Enable+0x2e>
 8003030:	2300      	movs	r3, #0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d143      	bne.n	80030be <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	4b22      	ldr	r3, [pc, #136]	; (80030c8 <ADC_Enable+0xc4>)
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00d      	beq.n	8003060 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	f043 0210 	orr.w	r2, r3, #16
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003054:	f043 0201 	orr.w	r2, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e02f      	b.n	80030c0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003070:	f7ff f82a 	bl	80020c8 <HAL_GetTick>
 8003074:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003076:	e01b      	b.n	80030b0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003078:	f7ff f826 	bl	80020c8 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d914      	bls.n	80030b0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	d00d      	beq.n	80030b0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	f043 0210 	orr.w	r2, r3, #16
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a4:	f043 0201 	orr.w	r2, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e007      	b.n	80030c0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d1dc      	bne.n	8003078 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	8000003f 	.word	0x8000003f

080030cc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d108      	bne.n	80030f8 <ADC_Disable+0x2c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <ADC_Disable+0x2c>
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <ADC_Disable+0x2e>
 80030f8:	2300      	movs	r3, #0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d047      	beq.n	800318e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 030d 	and.w	r3, r3, #13
 8003108:	2b01      	cmp	r3, #1
 800310a:	d10f      	bne.n	800312c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0202 	orr.w	r2, r2, #2
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2203      	movs	r2, #3
 8003122:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003124:	f7fe ffd0 	bl	80020c8 <HAL_GetTick>
 8003128:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800312a:	e029      	b.n	8003180 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	f043 0210 	orr.w	r2, r3, #16
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313c:	f043 0201 	orr.w	r2, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e023      	b.n	8003190 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003148:	f7fe ffbe 	bl	80020c8 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d914      	bls.n	8003180 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b01      	cmp	r3, #1
 8003162:	d10d      	bne.n	8003180 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	f043 0210 	orr.w	r2, r3, #16
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003174:	f043 0201 	orr.w	r2, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e007      	b.n	8003190 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b01      	cmp	r3, #1
 800318c:	d0dc      	beq.n	8003148 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <__NVIC_SetPriorityGrouping+0x44>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031b4:	4013      	ands	r3, r2
 80031b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ca:	4a04      	ldr	r2, [pc, #16]	; (80031dc <__NVIC_SetPriorityGrouping+0x44>)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	60d3      	str	r3, [r2, #12]
}
 80031d0:	bf00      	nop
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <__NVIC_GetPriorityGrouping+0x18>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	0a1b      	lsrs	r3, r3, #8
 80031ea:	f003 0307 	and.w	r3, r3, #7
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320a:	2b00      	cmp	r3, #0
 800320c:	db0b      	blt.n	8003226 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	f003 021f 	and.w	r2, r3, #31
 8003214:	4907      	ldr	r1, [pc, #28]	; (8003234 <__NVIC_EnableIRQ+0x38>)
 8003216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	2001      	movs	r0, #1
 800321e:	fa00 f202 	lsl.w	r2, r0, r2
 8003222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	e000e100 	.word	0xe000e100

08003238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	6039      	str	r1, [r7, #0]
 8003242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003248:	2b00      	cmp	r3, #0
 800324a:	db0a      	blt.n	8003262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	b2da      	uxtb	r2, r3
 8003250:	490c      	ldr	r1, [pc, #48]	; (8003284 <__NVIC_SetPriority+0x4c>)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	0112      	lsls	r2, r2, #4
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	440b      	add	r3, r1
 800325c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003260:	e00a      	b.n	8003278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	b2da      	uxtb	r2, r3
 8003266:	4908      	ldr	r1, [pc, #32]	; (8003288 <__NVIC_SetPriority+0x50>)
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	3b04      	subs	r3, #4
 8003270:	0112      	lsls	r2, r2, #4
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	440b      	add	r3, r1
 8003276:	761a      	strb	r2, [r3, #24]
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	e000e100 	.word	0xe000e100
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800328c:	b480      	push	{r7}
 800328e:	b089      	sub	sp, #36	; 0x24
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f1c3 0307 	rsb	r3, r3, #7
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	bf28      	it	cs
 80032aa:	2304      	movcs	r3, #4
 80032ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	3304      	adds	r3, #4
 80032b2:	2b06      	cmp	r3, #6
 80032b4:	d902      	bls.n	80032bc <NVIC_EncodePriority+0x30>
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3b03      	subs	r3, #3
 80032ba:	e000      	b.n	80032be <NVIC_EncodePriority+0x32>
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c0:	f04f 32ff 	mov.w	r2, #4294967295
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43da      	mvns	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	401a      	ands	r2, r3
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032d4:	f04f 31ff 	mov.w	r1, #4294967295
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	fa01 f303 	lsl.w	r3, r1, r3
 80032de:	43d9      	mvns	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e4:	4313      	orrs	r3, r2
         );
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3724      	adds	r7, #36	; 0x24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
	...

080032f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3b01      	subs	r3, #1
 8003300:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003304:	d301      	bcc.n	800330a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003306:	2301      	movs	r3, #1
 8003308:	e00f      	b.n	800332a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800330a:	4a0a      	ldr	r2, [pc, #40]	; (8003334 <SysTick_Config+0x40>)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3b01      	subs	r3, #1
 8003310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003312:	210f      	movs	r1, #15
 8003314:	f04f 30ff 	mov.w	r0, #4294967295
 8003318:	f7ff ff8e 	bl	8003238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800331c:	4b05      	ldr	r3, [pc, #20]	; (8003334 <SysTick_Config+0x40>)
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003322:	4b04      	ldr	r3, [pc, #16]	; (8003334 <SysTick_Config+0x40>)
 8003324:	2207      	movs	r2, #7
 8003326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	e000e010 	.word	0xe000e010

08003338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff ff29 	bl	8003198 <__NVIC_SetPriorityGrouping>
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b086      	sub	sp, #24
 8003352:	af00      	add	r7, sp, #0
 8003354:	4603      	mov	r3, r0
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
 800335a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003360:	f7ff ff3e 	bl	80031e0 <__NVIC_GetPriorityGrouping>
 8003364:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	6978      	ldr	r0, [r7, #20]
 800336c:	f7ff ff8e 	bl	800328c <NVIC_EncodePriority>
 8003370:	4602      	mov	r2, r0
 8003372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ff5d 	bl	8003238 <__NVIC_SetPriority>
}
 800337e:	bf00      	nop
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	4603      	mov	r3, r0
 800338e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff ff31 	bl	80031fc <__NVIC_EnableIRQ>
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7ff ffa2 	bl	80032f4 <SysTick_Config>
 80033b0:	4603      	mov	r3, r0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e037      	b.n	8003440 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80033e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80033ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80033f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003400:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800340c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f9bc 	bl	80037a0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}  
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
 8003454:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_DMA_Start+0x20>
 8003464:	2302      	movs	r3, #2
 8003466:	e02d      	b.n	80034c4 <HAL_DMA_Start+0x7c>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003476:	2b01      	cmp	r3, #1
 8003478:	d11d      	bne.n	80034b6 <HAL_DMA_Start+0x6e>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2202      	movs	r2, #2
 800347e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0201 	bic.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f94f 	bl	8003742 <DMA_SetConfig>
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;  
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	e005      	b.n	80034c2 <HAL_DMA_Start+0x7a>
  }
  else
  {
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	/* Remain BUSY */
  	status = HAL_BUSY;
 80034be:	2302      	movs	r3, #2
 80034c0:	75fb      	strb	r3, [r7, #23]
  }  

  return status; 
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
} 
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <HAL_DMA_Start_IT+0x20>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e04a      	b.n	8003582 <HAL_DMA_Start_IT+0xb6>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d13a      	bne.n	8003574 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2202      	movs	r2, #2
 8003502:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0201 	bic.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f90d 	bl	8003742 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 020e 	orr.w	r2, r2, #14
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	e00f      	b.n	8003562 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 020a 	orr.w	r2, r2, #10
 8003550:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0204 	bic.w	r2, r2, #4
 8003560:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	e005      	b.n	8003580 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800357c:	2302      	movs	r3, #2
 800357e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003580:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003598:	2b02      	cmp	r3, #2
 800359a:	d008      	beq.n	80035ae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2204      	movs	r2, #4
 80035a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e020      	b.n	80035f0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 020e 	bic.w	r2, r2, #14
 80035bc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0201 	bic.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d6:	2101      	movs	r1, #1
 80035d8:	fa01 f202 	lsl.w	r2, r1, r2
 80035dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	2204      	movs	r2, #4
 800361a:	409a      	lsls	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4013      	ands	r3, r2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d024      	beq.n	800366e <HAL_DMA_IRQHandler+0x72>
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b00      	cmp	r3, #0
 800362c:	d01f      	beq.n	800366e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d107      	bne.n	800364c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0204 	bic.w	r2, r2, #4
 800364a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003654:	2104      	movs	r1, #4
 8003656:	fa01 f202 	lsl.w	r2, r1, r2
 800365a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	2b00      	cmp	r3, #0
 8003662:	d06a      	beq.n	800373a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800366c:	e065      	b.n	800373a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	2202      	movs	r2, #2
 8003674:	409a      	lsls	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	4013      	ands	r3, r2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d02c      	beq.n	80036d8 <HAL_DMA_IRQHandler+0xdc>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d027      	beq.n	80036d8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10b      	bne.n	80036ae <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 020a 	bic.w	r2, r2, #10
 80036a4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b6:	2102      	movs	r1, #2
 80036b8:	fa01 f202 	lsl.w	r2, r1, r2
 80036bc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d035      	beq.n	800373a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80036d6:	e030      	b.n	800373a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	2208      	movs	r2, #8
 80036de:	409a      	lsls	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d028      	beq.n	800373a <HAL_DMA_IRQHandler+0x13e>
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d023      	beq.n	800373a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 020e 	bic.w	r2, r2, #14
 8003700:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370a:	2101      	movs	r1, #1
 800370c:	fa01 f202 	lsl.w	r2, r1, r2
 8003710:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	2b00      	cmp	r3, #0
 800372e:	d004      	beq.n	800373a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	4798      	blx	r3
    }
  }
}  
 8003738:	e7ff      	b.n	800373a <HAL_DMA_IRQHandler+0x13e>
 800373a:	bf00      	nop
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003742:	b480      	push	{r7}
 8003744:	b085      	sub	sp, #20
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
 800374e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003758:	2101      	movs	r1, #1
 800375a:	fa01 f202 	lsl.w	r2, r1, r2
 800375e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b10      	cmp	r3, #16
 800376e:	d108      	bne.n	8003782 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003780:	e007      	b.n	8003792 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	60da      	str	r2, [r3, #12]
}
 8003792:	bf00      	nop
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	461a      	mov	r2, r3
 80037ae:	4b14      	ldr	r3, [pc, #80]	; (8003800 <DMA_CalcBaseAndBitshift+0x60>)
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d80f      	bhi.n	80037d4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	4b12      	ldr	r3, [pc, #72]	; (8003804 <DMA_CalcBaseAndBitshift+0x64>)
 80037bc:	4413      	add	r3, r2
 80037be:	4a12      	ldr	r2, [pc, #72]	; (8003808 <DMA_CalcBaseAndBitshift+0x68>)
 80037c0:	fba2 2303 	umull	r2, r3, r2, r3
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	009a      	lsls	r2, r3, #2
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a0f      	ldr	r2, [pc, #60]	; (800380c <DMA_CalcBaseAndBitshift+0x6c>)
 80037d0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80037d2:	e00e      	b.n	80037f2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	4b0d      	ldr	r3, [pc, #52]	; (8003810 <DMA_CalcBaseAndBitshift+0x70>)
 80037dc:	4413      	add	r3, r2
 80037de:	4a0a      	ldr	r2, [pc, #40]	; (8003808 <DMA_CalcBaseAndBitshift+0x68>)
 80037e0:	fba2 2303 	umull	r2, r3, r2, r3
 80037e4:	091b      	lsrs	r3, r3, #4
 80037e6:	009a      	lsls	r2, r3, #2
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a09      	ldr	r2, [pc, #36]	; (8003814 <DMA_CalcBaseAndBitshift+0x74>)
 80037f0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40020407 	.word	0x40020407
 8003804:	bffdfff8 	.word	0xbffdfff8
 8003808:	cccccccd 	.word	0xcccccccd
 800380c:	40020000 	.word	0x40020000
 8003810:	bffdfbf8 	.word	0xbffdfbf8
 8003814:	40020400 	.word	0x40020400

08003818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003822:	2300      	movs	r3, #0
 8003824:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003826:	e160      	b.n	8003aea <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	2101      	movs	r1, #1
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	fa01 f303 	lsl.w	r3, r1, r3
 8003834:	4013      	ands	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 8152 	beq.w	8003ae4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	2b01      	cmp	r3, #1
 800384a:	d005      	beq.n	8003858 <HAL_GPIO_Init+0x40>
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d130      	bne.n	80038ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	2203      	movs	r2, #3
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4013      	ands	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800388e:	2201      	movs	r2, #1
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43db      	mvns	r3, r3
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4013      	ands	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	091b      	lsrs	r3, r3, #4
 80038a4:	f003 0201 	and.w	r2, r3, #1
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	2b03      	cmp	r3, #3
 80038c4:	d017      	beq.n	80038f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	2203      	movs	r2, #3
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43db      	mvns	r3, r3
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d123      	bne.n	800394a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	08da      	lsrs	r2, r3, #3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3208      	adds	r2, #8
 800390a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800390e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	220f      	movs	r2, #15
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	43db      	mvns	r3, r3
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4013      	ands	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	691a      	ldr	r2, [r3, #16]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	4313      	orrs	r3, r2
 800393a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	08da      	lsrs	r2, r3, #3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3208      	adds	r2, #8
 8003944:	6939      	ldr	r1, [r7, #16]
 8003946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	2203      	movs	r2, #3
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43db      	mvns	r3, r3
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4013      	ands	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 0203 	and.w	r2, r3, #3
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80ac 	beq.w	8003ae4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800398c:	4b5e      	ldr	r3, [pc, #376]	; (8003b08 <HAL_GPIO_Init+0x2f0>)
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	4a5d      	ldr	r2, [pc, #372]	; (8003b08 <HAL_GPIO_Init+0x2f0>)
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	6193      	str	r3, [r2, #24]
 8003998:	4b5b      	ldr	r3, [pc, #364]	; (8003b08 <HAL_GPIO_Init+0x2f0>)
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039a4:	4a59      	ldr	r2, [pc, #356]	; (8003b0c <HAL_GPIO_Init+0x2f4>)
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	089b      	lsrs	r3, r3, #2
 80039aa:	3302      	adds	r3, #2
 80039ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	220f      	movs	r2, #15
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	43db      	mvns	r3, r3
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4013      	ands	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039ce:	d025      	beq.n	8003a1c <HAL_GPIO_Init+0x204>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a4f      	ldr	r2, [pc, #316]	; (8003b10 <HAL_GPIO_Init+0x2f8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d01f      	beq.n	8003a18 <HAL_GPIO_Init+0x200>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a4e      	ldr	r2, [pc, #312]	; (8003b14 <HAL_GPIO_Init+0x2fc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d019      	beq.n	8003a14 <HAL_GPIO_Init+0x1fc>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a4d      	ldr	r2, [pc, #308]	; (8003b18 <HAL_GPIO_Init+0x300>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d013      	beq.n	8003a10 <HAL_GPIO_Init+0x1f8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a4c      	ldr	r2, [pc, #304]	; (8003b1c <HAL_GPIO_Init+0x304>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00d      	beq.n	8003a0c <HAL_GPIO_Init+0x1f4>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a4b      	ldr	r2, [pc, #300]	; (8003b20 <HAL_GPIO_Init+0x308>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d007      	beq.n	8003a08 <HAL_GPIO_Init+0x1f0>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a4a      	ldr	r2, [pc, #296]	; (8003b24 <HAL_GPIO_Init+0x30c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d101      	bne.n	8003a04 <HAL_GPIO_Init+0x1ec>
 8003a00:	2306      	movs	r3, #6
 8003a02:	e00c      	b.n	8003a1e <HAL_GPIO_Init+0x206>
 8003a04:	2307      	movs	r3, #7
 8003a06:	e00a      	b.n	8003a1e <HAL_GPIO_Init+0x206>
 8003a08:	2305      	movs	r3, #5
 8003a0a:	e008      	b.n	8003a1e <HAL_GPIO_Init+0x206>
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	e006      	b.n	8003a1e <HAL_GPIO_Init+0x206>
 8003a10:	2303      	movs	r3, #3
 8003a12:	e004      	b.n	8003a1e <HAL_GPIO_Init+0x206>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e002      	b.n	8003a1e <HAL_GPIO_Init+0x206>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <HAL_GPIO_Init+0x206>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	f002 0203 	and.w	r2, r2, #3
 8003a24:	0092      	lsls	r2, r2, #2
 8003a26:	4093      	lsls	r3, r2
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a2e:	4937      	ldr	r1, [pc, #220]	; (8003b0c <HAL_GPIO_Init+0x2f4>)
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	089b      	lsrs	r3, r3, #2
 8003a34:	3302      	adds	r3, #2
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a3c:	4b3a      	ldr	r3, [pc, #232]	; (8003b28 <HAL_GPIO_Init+0x310>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	43db      	mvns	r3, r3
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a60:	4a31      	ldr	r2, [pc, #196]	; (8003b28 <HAL_GPIO_Init+0x310>)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a66:	4b30      	ldr	r3, [pc, #192]	; (8003b28 <HAL_GPIO_Init+0x310>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4013      	ands	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a8a:	4a27      	ldr	r2, [pc, #156]	; (8003b28 <HAL_GPIO_Init+0x310>)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a90:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <HAL_GPIO_Init+0x310>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ab4:	4a1c      	ldr	r2, [pc, #112]	; (8003b28 <HAL_GPIO_Init+0x310>)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003aba:	4b1b      	ldr	r3, [pc, #108]	; (8003b28 <HAL_GPIO_Init+0x310>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ade:	4a12      	ldr	r2, [pc, #72]	; (8003b28 <HAL_GPIO_Init+0x310>)
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f47f ae97 	bne.w	8003828 <HAL_GPIO_Init+0x10>
  }
}
 8003afa:	bf00      	nop
 8003afc:	bf00      	nop
 8003afe:	371c      	adds	r7, #28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40010000 	.word	0x40010000
 8003b10:	48000400 	.word	0x48000400
 8003b14:	48000800 	.word	0x48000800
 8003b18:	48000c00 	.word	0x48000c00
 8003b1c:	48001000 	.word	0x48001000
 8003b20:	48001400 	.word	0x48001400
 8003b24:	48001800 	.word	0x48001800
 8003b28:	40010400 	.word	0x40010400

08003b2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	887b      	ldrh	r3, [r7, #2]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b44:	2301      	movs	r3, #1
 8003b46:	73fb      	strb	r3, [r7, #15]
 8003b48:	e001      	b.n	8003b4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	807b      	strh	r3, [r7, #2]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b6c:	787b      	ldrb	r3, [r7, #1]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b72:	887a      	ldrh	r2, [r7, #2]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b78:	e002      	b.n	8003b80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b7a:	887a      	ldrh	r2, [r7, #2]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b9e:	887a      	ldrh	r2, [r7, #2]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	041a      	lsls	r2, r3, #16
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	43d9      	mvns	r1, r3
 8003baa:	887b      	ldrh	r3, [r7, #2]
 8003bac:	400b      	ands	r3, r1
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	619a      	str	r2, [r3, #24]
}
 8003bb4:	bf00      	nop
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bcc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003bd0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bd6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d102      	bne.n	8003be6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	f001 b83a 	b.w	8004c5a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 816f 	beq.w	8003eda <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003bfc:	4bb5      	ldr	r3, [pc, #724]	; (8003ed4 <HAL_RCC_OscConfig+0x314>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d00c      	beq.n	8003c22 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c08:	4bb2      	ldr	r3, [pc, #712]	; (8003ed4 <HAL_RCC_OscConfig+0x314>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 030c 	and.w	r3, r3, #12
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d15c      	bne.n	8003cce <HAL_RCC_OscConfig+0x10e>
 8003c14:	4baf      	ldr	r3, [pc, #700]	; (8003ed4 <HAL_RCC_OscConfig+0x314>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c20:	d155      	bne.n	8003cce <HAL_RCC_OscConfig+0x10e>
 8003c22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c26:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003c2e:	fa93 f3a3 	rbit	r3, r3
 8003c32:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c36:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c3a:	fab3 f383 	clz	r3, r3
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	095b      	lsrs	r3, r3, #5
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d102      	bne.n	8003c54 <HAL_RCC_OscConfig+0x94>
 8003c4e:	4ba1      	ldr	r3, [pc, #644]	; (8003ed4 <HAL_RCC_OscConfig+0x314>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	e015      	b.n	8003c80 <HAL_RCC_OscConfig+0xc0>
 8003c54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c58:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003c60:	fa93 f3a3 	rbit	r3, r3
 8003c64:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c6c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003c70:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003c74:	fa93 f3a3 	rbit	r3, r3
 8003c78:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003c7c:	4b95      	ldr	r3, [pc, #596]	; (8003ed4 <HAL_RCC_OscConfig+0x314>)
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c84:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003c88:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003c8c:	fa92 f2a2 	rbit	r2, r2
 8003c90:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003c94:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003c98:	fab2 f282 	clz	r2, r2
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	f042 0220 	orr.w	r2, r2, #32
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	f002 021f 	and.w	r2, r2, #31
 8003ca8:	2101      	movs	r1, #1
 8003caa:	fa01 f202 	lsl.w	r2, r1, r2
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 8111 	beq.w	8003ed8 <HAL_RCC_OscConfig+0x318>
 8003cb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f040 8108 	bne.w	8003ed8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	f000 bfc6 	b.w	8004c5a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cde:	d106      	bne.n	8003cee <HAL_RCC_OscConfig+0x12e>
 8003ce0:	4b7c      	ldr	r3, [pc, #496]	; (8003ed4 <HAL_RCC_OscConfig+0x314>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a7b      	ldr	r2, [pc, #492]	; (8003ed4 <HAL_RCC_OscConfig+0x314>)
 8003ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	e036      	b.n	8003d5c <HAL_RCC_OscConfig+0x19c>
 8003cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cf2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10c      	bne.n	8003d18 <HAL_RCC_OscConfig+0x158>
 8003cfe:	4b75      	ldr	r3, [pc, #468]	; (8003ed4 <HAL_RCC_OscConfig+0x314>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a74      	ldr	r2, [pc, #464]	; (8003ed4 <HAL_RCC_OscConfig+0x314>)
 8003d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	4b72      	ldr	r3, [pc, #456]	; (8003ed4 <HAL_RCC_OscConfig+0x314>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a71      	ldr	r2, [pc, #452]	; (8003ed4 <HAL_RCC_OscConfig+0x314>)
 8003d10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	e021      	b.n	8003d5c <HAL_RCC_OscConfig+0x19c>
 8003d18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d28:	d10c      	bne.n	8003d44 <HAL_RCC_OscConfig+0x184>
 8003d2a:	4b6a      	ldr	r3, [pc, #424]	; (8003ed4 <HAL_RCC_OscConfig+0x314>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a69      	ldr	r2, [pc, #420]	; (8003ed4 <HAL_RCC_OscConfig+0x314>)
 8003d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	4b67      	ldr	r3, [pc, #412]	; (8003ed4 <HAL_RCC_OscConfig+0x314>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a66      	ldr	r2, [pc, #408]	; (8003ed4 <HAL_RCC_OscConfig+0x314>)
 8003d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	e00b      	b.n	8003d5c <HAL_RCC_OscConfig+0x19c>
 8003d44:	4b63      	ldr	r3, [pc, #396]	; (8003ed4 <HAL_RCC_OscConfig+0x314>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a62      	ldr	r2, [pc, #392]	; (8003ed4 <HAL_RCC_OscConfig+0x314>)
 8003d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	4b60      	ldr	r3, [pc, #384]	; (8003ed4 <HAL_RCC_OscConfig+0x314>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a5f      	ldr	r2, [pc, #380]	; (8003ed4 <HAL_RCC_OscConfig+0x314>)
 8003d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d5a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d059      	beq.n	8003e20 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6c:	f7fe f9ac 	bl	80020c8 <HAL_GetTick>
 8003d70:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d74:	e00a      	b.n	8003d8c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d76:	f7fe f9a7 	bl	80020c8 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b64      	cmp	r3, #100	; 0x64
 8003d84:	d902      	bls.n	8003d8c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	f000 bf67 	b.w	8004c5a <HAL_RCC_OscConfig+0x109a>
 8003d8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d90:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d94:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003d98:	fa93 f3a3 	rbit	r3, r3
 8003d9c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003da0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da4:	fab3 f383 	clz	r3, r3
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d102      	bne.n	8003dbe <HAL_RCC_OscConfig+0x1fe>
 8003db8:	4b46      	ldr	r3, [pc, #280]	; (8003ed4 <HAL_RCC_OscConfig+0x314>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	e015      	b.n	8003dea <HAL_RCC_OscConfig+0x22a>
 8003dbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dc2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003dca:	fa93 f3a3 	rbit	r3, r3
 8003dce:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003dd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dd6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003dda:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003dde:	fa93 f3a3 	rbit	r3, r3
 8003de2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003de6:	4b3b      	ldr	r3, [pc, #236]	; (8003ed4 <HAL_RCC_OscConfig+0x314>)
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003dee:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003df2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003df6:	fa92 f2a2 	rbit	r2, r2
 8003dfa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003dfe:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003e02:	fab2 f282 	clz	r2, r2
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	f042 0220 	orr.w	r2, r2, #32
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	f002 021f 	and.w	r2, r2, #31
 8003e12:	2101      	movs	r1, #1
 8003e14:	fa01 f202 	lsl.w	r2, r1, r2
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0ab      	beq.n	8003d76 <HAL_RCC_OscConfig+0x1b6>
 8003e1e:	e05c      	b.n	8003eda <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e20:	f7fe f952 	bl	80020c8 <HAL_GetTick>
 8003e24:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e28:	e00a      	b.n	8003e40 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e2a:	f7fe f94d 	bl	80020c8 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b64      	cmp	r3, #100	; 0x64
 8003e38:	d902      	bls.n	8003e40 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	f000 bf0d 	b.w	8004c5a <HAL_RCC_OscConfig+0x109a>
 8003e40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e44:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003e4c:	fa93 f3a3 	rbit	r3, r3
 8003e50:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003e54:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e58:	fab3 f383 	clz	r3, r3
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d102      	bne.n	8003e72 <HAL_RCC_OscConfig+0x2b2>
 8003e6c:	4b19      	ldr	r3, [pc, #100]	; (8003ed4 <HAL_RCC_OscConfig+0x314>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	e015      	b.n	8003e9e <HAL_RCC_OscConfig+0x2de>
 8003e72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e76:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003e7e:	fa93 f3a3 	rbit	r3, r3
 8003e82:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003e86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e8a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003e8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e92:	fa93 f3a3 	rbit	r3, r3
 8003e96:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003e9a:	4b0e      	ldr	r3, [pc, #56]	; (8003ed4 <HAL_RCC_OscConfig+0x314>)
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ea2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003ea6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003eaa:	fa92 f2a2 	rbit	r2, r2
 8003eae:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003eb2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003eb6:	fab2 f282 	clz	r2, r2
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	f042 0220 	orr.w	r2, r2, #32
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	f002 021f 	and.w	r2, r2, #31
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ecc:	4013      	ands	r3, r2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1ab      	bne.n	8003e2a <HAL_RCC_OscConfig+0x26a>
 8003ed2:	e002      	b.n	8003eda <HAL_RCC_OscConfig+0x31a>
 8003ed4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ede:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 817f 	beq.w	80041ee <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ef0:	4ba7      	ldr	r3, [pc, #668]	; (8004190 <HAL_RCC_OscConfig+0x5d0>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f003 030c 	and.w	r3, r3, #12
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00c      	beq.n	8003f16 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003efc:	4ba4      	ldr	r3, [pc, #656]	; (8004190 <HAL_RCC_OscConfig+0x5d0>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f003 030c 	and.w	r3, r3, #12
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d173      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x430>
 8003f08:	4ba1      	ldr	r3, [pc, #644]	; (8004190 <HAL_RCC_OscConfig+0x5d0>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003f10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f14:	d16c      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x430>
 8003f16:	2302      	movs	r3, #2
 8003f18:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003f20:	fa93 f3a3 	rbit	r3, r3
 8003f24:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003f28:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f2c:	fab3 f383 	clz	r3, r3
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	f043 0301 	orr.w	r3, r3, #1
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d102      	bne.n	8003f46 <HAL_RCC_OscConfig+0x386>
 8003f40:	4b93      	ldr	r3, [pc, #588]	; (8004190 <HAL_RCC_OscConfig+0x5d0>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	e013      	b.n	8003f6e <HAL_RCC_OscConfig+0x3ae>
 8003f46:	2302      	movs	r3, #2
 8003f48:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003f50:	fa93 f3a3 	rbit	r3, r3
 8003f54:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003f58:	2302      	movs	r3, #2
 8003f5a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003f5e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003f62:	fa93 f3a3 	rbit	r3, r3
 8003f66:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003f6a:	4b89      	ldr	r3, [pc, #548]	; (8004190 <HAL_RCC_OscConfig+0x5d0>)
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003f74:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003f78:	fa92 f2a2 	rbit	r2, r2
 8003f7c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003f80:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003f84:	fab2 f282 	clz	r2, r2
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	f042 0220 	orr.w	r2, r2, #32
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	f002 021f 	and.w	r2, r2, #31
 8003f94:	2101      	movs	r1, #1
 8003f96:	fa01 f202 	lsl.w	r2, r1, r2
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x3f6>
 8003fa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fa4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d002      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	f000 be52 	b.w	8004c5a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb6:	4b76      	ldr	r3, [pc, #472]	; (8004190 <HAL_RCC_OscConfig+0x5d0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fc2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	21f8      	movs	r1, #248	; 0xf8
 8003fcc:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003fd4:	fa91 f1a1 	rbit	r1, r1
 8003fd8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003fdc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003fe0:	fab1 f181 	clz	r1, r1
 8003fe4:	b2c9      	uxtb	r1, r1
 8003fe6:	408b      	lsls	r3, r1
 8003fe8:	4969      	ldr	r1, [pc, #420]	; (8004190 <HAL_RCC_OscConfig+0x5d0>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fee:	e0fe      	b.n	80041ee <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ff0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ff4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 8088 	beq.w	8004112 <HAL_RCC_OscConfig+0x552>
 8004002:	2301      	movs	r3, #1
 8004004:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004008:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800400c:	fa93 f3a3 	rbit	r3, r3
 8004010:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004014:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004018:	fab3 f383 	clz	r3, r3
 800401c:	b2db      	uxtb	r3, r3
 800401e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004022:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	461a      	mov	r2, r3
 800402a:	2301      	movs	r3, #1
 800402c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402e:	f7fe f84b 	bl	80020c8 <HAL_GetTick>
 8004032:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004036:	e00a      	b.n	800404e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004038:	f7fe f846 	bl	80020c8 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d902      	bls.n	800404e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	f000 be06 	b.w	8004c5a <HAL_RCC_OscConfig+0x109a>
 800404e:	2302      	movs	r3, #2
 8004050:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004054:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004058:	fa93 f3a3 	rbit	r3, r3
 800405c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004060:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004064:	fab3 f383 	clz	r3, r3
 8004068:	b2db      	uxtb	r3, r3
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	b2db      	uxtb	r3, r3
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b01      	cmp	r3, #1
 8004076:	d102      	bne.n	800407e <HAL_RCC_OscConfig+0x4be>
 8004078:	4b45      	ldr	r3, [pc, #276]	; (8004190 <HAL_RCC_OscConfig+0x5d0>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	e013      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e6>
 800407e:	2302      	movs	r3, #2
 8004080:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004084:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004088:	fa93 f3a3 	rbit	r3, r3
 800408c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004090:	2302      	movs	r3, #2
 8004092:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004096:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800409a:	fa93 f3a3 	rbit	r3, r3
 800409e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80040a2:	4b3b      	ldr	r3, [pc, #236]	; (8004190 <HAL_RCC_OscConfig+0x5d0>)
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	2202      	movs	r2, #2
 80040a8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80040ac:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80040b0:	fa92 f2a2 	rbit	r2, r2
 80040b4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80040b8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80040bc:	fab2 f282 	clz	r2, r2
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	f042 0220 	orr.w	r2, r2, #32
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	f002 021f 	and.w	r2, r2, #31
 80040cc:	2101      	movs	r1, #1
 80040ce:	fa01 f202 	lsl.w	r2, r1, r2
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0af      	beq.n	8004038 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d8:	4b2d      	ldr	r3, [pc, #180]	; (8004190 <HAL_RCC_OscConfig+0x5d0>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	21f8      	movs	r1, #248	; 0xf8
 80040ee:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80040f6:	fa91 f1a1 	rbit	r1, r1
 80040fa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80040fe:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004102:	fab1 f181 	clz	r1, r1
 8004106:	b2c9      	uxtb	r1, r1
 8004108:	408b      	lsls	r3, r1
 800410a:	4921      	ldr	r1, [pc, #132]	; (8004190 <HAL_RCC_OscConfig+0x5d0>)
 800410c:	4313      	orrs	r3, r2
 800410e:	600b      	str	r3, [r1, #0]
 8004110:	e06d      	b.n	80041ee <HAL_RCC_OscConfig+0x62e>
 8004112:	2301      	movs	r3, #1
 8004114:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004118:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800411c:	fa93 f3a3 	rbit	r3, r3
 8004120:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004124:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004128:	fab3 f383 	clz	r3, r3
 800412c:	b2db      	uxtb	r3, r3
 800412e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004132:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	461a      	mov	r2, r3
 800413a:	2300      	movs	r3, #0
 800413c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413e:	f7fd ffc3 	bl	80020c8 <HAL_GetTick>
 8004142:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004146:	e00a      	b.n	800415e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004148:	f7fd ffbe 	bl	80020c8 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d902      	bls.n	800415e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	f000 bd7e 	b.w	8004c5a <HAL_RCC_OscConfig+0x109a>
 800415e:	2302      	movs	r3, #2
 8004160:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004164:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004168:	fa93 f3a3 	rbit	r3, r3
 800416c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004170:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004174:	fab3 f383 	clz	r3, r3
 8004178:	b2db      	uxtb	r3, r3
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	b2db      	uxtb	r3, r3
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b01      	cmp	r3, #1
 8004186:	d105      	bne.n	8004194 <HAL_RCC_OscConfig+0x5d4>
 8004188:	4b01      	ldr	r3, [pc, #4]	; (8004190 <HAL_RCC_OscConfig+0x5d0>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	e016      	b.n	80041bc <HAL_RCC_OscConfig+0x5fc>
 800418e:	bf00      	nop
 8004190:	40021000 	.word	0x40021000
 8004194:	2302      	movs	r3, #2
 8004196:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800419e:	fa93 f3a3 	rbit	r3, r3
 80041a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80041a6:	2302      	movs	r3, #2
 80041a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80041ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80041b0:	fa93 f3a3 	rbit	r3, r3
 80041b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80041b8:	4bbf      	ldr	r3, [pc, #764]	; (80044b8 <HAL_RCC_OscConfig+0x8f8>)
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	2202      	movs	r2, #2
 80041be:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80041c2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80041c6:	fa92 f2a2 	rbit	r2, r2
 80041ca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80041ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80041d2:	fab2 f282 	clz	r2, r2
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	f042 0220 	orr.w	r2, r2, #32
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	f002 021f 	and.w	r2, r2, #31
 80041e2:	2101      	movs	r1, #1
 80041e4:	fa01 f202 	lsl.w	r2, r1, r2
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1ac      	bne.n	8004148 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 8113 	beq.w	800442a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004204:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004208:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d07c      	beq.n	800430e <HAL_RCC_OscConfig+0x74e>
 8004214:	2301      	movs	r3, #1
 8004216:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800421e:	fa93 f3a3 	rbit	r3, r3
 8004222:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8004226:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800422a:	fab3 f383 	clz	r3, r3
 800422e:	b2db      	uxtb	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	4ba2      	ldr	r3, [pc, #648]	; (80044bc <HAL_RCC_OscConfig+0x8fc>)
 8004234:	4413      	add	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	461a      	mov	r2, r3
 800423a:	2301      	movs	r3, #1
 800423c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800423e:	f7fd ff43 	bl	80020c8 <HAL_GetTick>
 8004242:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004246:	e00a      	b.n	800425e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004248:	f7fd ff3e 	bl	80020c8 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d902      	bls.n	800425e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	f000 bcfe 	b.w	8004c5a <HAL_RCC_OscConfig+0x109a>
 800425e:	2302      	movs	r3, #2
 8004260:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004268:	fa93 f2a3 	rbit	r2, r3
 800426c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004270:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800427a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800427e:	2202      	movs	r2, #2
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004286:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	fa93 f2a3 	rbit	r2, r3
 8004290:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800429e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042a2:	2202      	movs	r2, #2
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	fa93 f2a3 	rbit	r2, r3
 80042b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80042bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042be:	4b7e      	ldr	r3, [pc, #504]	; (80044b8 <HAL_RCC_OscConfig+0x8f8>)
 80042c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80042ca:	2102      	movs	r1, #2
 80042cc:	6019      	str	r1, [r3, #0]
 80042ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	fa93 f1a3 	rbit	r1, r3
 80042dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80042e4:	6019      	str	r1, [r3, #0]
  return result;
 80042e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042ea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	fab3 f383 	clz	r3, r3
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	2101      	movs	r1, #1
 8004302:	fa01 f303 	lsl.w	r3, r1, r3
 8004306:	4013      	ands	r3, r2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d09d      	beq.n	8004248 <HAL_RCC_OscConfig+0x688>
 800430c:	e08d      	b.n	800442a <HAL_RCC_OscConfig+0x86a>
 800430e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004312:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004316:	2201      	movs	r2, #1
 8004318:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800431e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	fa93 f2a3 	rbit	r2, r3
 8004328:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800432c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004330:	601a      	str	r2, [r3, #0]
  return result;
 8004332:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004336:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800433a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800433c:	fab3 f383 	clz	r3, r3
 8004340:	b2db      	uxtb	r3, r3
 8004342:	461a      	mov	r2, r3
 8004344:	4b5d      	ldr	r3, [pc, #372]	; (80044bc <HAL_RCC_OscConfig+0x8fc>)
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	461a      	mov	r2, r3
 800434c:	2300      	movs	r3, #0
 800434e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004350:	f7fd feba 	bl	80020c8 <HAL_GetTick>
 8004354:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004358:	e00a      	b.n	8004370 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800435a:	f7fd feb5 	bl	80020c8 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d902      	bls.n	8004370 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	f000 bc75 	b.w	8004c5a <HAL_RCC_OscConfig+0x109a>
 8004370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004374:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004378:	2202      	movs	r2, #2
 800437a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004380:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	fa93 f2a3 	rbit	r2, r3
 800438a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800438e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004398:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800439c:	2202      	movs	r2, #2
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	fa93 f2a3 	rbit	r2, r3
 80043ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80043c0:	2202      	movs	r2, #2
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	fa93 f2a3 	rbit	r2, r3
 80043d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80043da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043dc:	4b36      	ldr	r3, [pc, #216]	; (80044b8 <HAL_RCC_OscConfig+0x8f8>)
 80043de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80043e8:	2102      	movs	r1, #2
 80043ea:	6019      	str	r1, [r3, #0]
 80043ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	fa93 f1a3 	rbit	r1, r3
 80043fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043fe:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004402:	6019      	str	r1, [r3, #0]
  return result;
 8004404:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004408:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	fab3 f383 	clz	r3, r3
 8004412:	b2db      	uxtb	r3, r3
 8004414:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004418:	b2db      	uxtb	r3, r3
 800441a:	f003 031f 	and.w	r3, r3, #31
 800441e:	2101      	movs	r1, #1
 8004420:	fa01 f303 	lsl.w	r3, r1, r3
 8004424:	4013      	ands	r3, r2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d197      	bne.n	800435a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800442a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800442e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 81a5 	beq.w	800478a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004440:	2300      	movs	r3, #0
 8004442:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004446:	4b1c      	ldr	r3, [pc, #112]	; (80044b8 <HAL_RCC_OscConfig+0x8f8>)
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d116      	bne.n	8004480 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004452:	4b19      	ldr	r3, [pc, #100]	; (80044b8 <HAL_RCC_OscConfig+0x8f8>)
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	4a18      	ldr	r2, [pc, #96]	; (80044b8 <HAL_RCC_OscConfig+0x8f8>)
 8004458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800445c:	61d3      	str	r3, [r2, #28]
 800445e:	4b16      	ldr	r3, [pc, #88]	; (80044b8 <HAL_RCC_OscConfig+0x8f8>)
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004466:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800446a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004474:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004478:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800447a:	2301      	movs	r3, #1
 800447c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004480:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <HAL_RCC_OscConfig+0x900>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d121      	bne.n	80044d0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800448c:	4b0c      	ldr	r3, [pc, #48]	; (80044c0 <HAL_RCC_OscConfig+0x900>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a0b      	ldr	r2, [pc, #44]	; (80044c0 <HAL_RCC_OscConfig+0x900>)
 8004492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004496:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004498:	f7fd fe16 	bl	80020c8 <HAL_GetTick>
 800449c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a0:	e010      	b.n	80044c4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a2:	f7fd fe11 	bl	80020c8 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b64      	cmp	r3, #100	; 0x64
 80044b0:	d908      	bls.n	80044c4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e3d1      	b.n	8004c5a <HAL_RCC_OscConfig+0x109a>
 80044b6:	bf00      	nop
 80044b8:	40021000 	.word	0x40021000
 80044bc:	10908120 	.word	0x10908120
 80044c0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c4:	4b8d      	ldr	r3, [pc, #564]	; (80046fc <HAL_RCC_OscConfig+0xb3c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0e8      	beq.n	80044a2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d106      	bne.n	80044ee <HAL_RCC_OscConfig+0x92e>
 80044e0:	4b87      	ldr	r3, [pc, #540]	; (8004700 <HAL_RCC_OscConfig+0xb40>)
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	4a86      	ldr	r2, [pc, #536]	; (8004700 <HAL_RCC_OscConfig+0xb40>)
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	6213      	str	r3, [r2, #32]
 80044ec:	e035      	b.n	800455a <HAL_RCC_OscConfig+0x99a>
 80044ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10c      	bne.n	8004518 <HAL_RCC_OscConfig+0x958>
 80044fe:	4b80      	ldr	r3, [pc, #512]	; (8004700 <HAL_RCC_OscConfig+0xb40>)
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	4a7f      	ldr	r2, [pc, #508]	; (8004700 <HAL_RCC_OscConfig+0xb40>)
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	6213      	str	r3, [r2, #32]
 800450a:	4b7d      	ldr	r3, [pc, #500]	; (8004700 <HAL_RCC_OscConfig+0xb40>)
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	4a7c      	ldr	r2, [pc, #496]	; (8004700 <HAL_RCC_OscConfig+0xb40>)
 8004510:	f023 0304 	bic.w	r3, r3, #4
 8004514:	6213      	str	r3, [r2, #32]
 8004516:	e020      	b.n	800455a <HAL_RCC_OscConfig+0x99a>
 8004518:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800451c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b05      	cmp	r3, #5
 8004526:	d10c      	bne.n	8004542 <HAL_RCC_OscConfig+0x982>
 8004528:	4b75      	ldr	r3, [pc, #468]	; (8004700 <HAL_RCC_OscConfig+0xb40>)
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	4a74      	ldr	r2, [pc, #464]	; (8004700 <HAL_RCC_OscConfig+0xb40>)
 800452e:	f043 0304 	orr.w	r3, r3, #4
 8004532:	6213      	str	r3, [r2, #32]
 8004534:	4b72      	ldr	r3, [pc, #456]	; (8004700 <HAL_RCC_OscConfig+0xb40>)
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	4a71      	ldr	r2, [pc, #452]	; (8004700 <HAL_RCC_OscConfig+0xb40>)
 800453a:	f043 0301 	orr.w	r3, r3, #1
 800453e:	6213      	str	r3, [r2, #32]
 8004540:	e00b      	b.n	800455a <HAL_RCC_OscConfig+0x99a>
 8004542:	4b6f      	ldr	r3, [pc, #444]	; (8004700 <HAL_RCC_OscConfig+0xb40>)
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	4a6e      	ldr	r2, [pc, #440]	; (8004700 <HAL_RCC_OscConfig+0xb40>)
 8004548:	f023 0301 	bic.w	r3, r3, #1
 800454c:	6213      	str	r3, [r2, #32]
 800454e:	4b6c      	ldr	r3, [pc, #432]	; (8004700 <HAL_RCC_OscConfig+0xb40>)
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	4a6b      	ldr	r2, [pc, #428]	; (8004700 <HAL_RCC_OscConfig+0xb40>)
 8004554:	f023 0304 	bic.w	r3, r3, #4
 8004558:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800455a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800455e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 8081 	beq.w	800466e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800456c:	f7fd fdac 	bl	80020c8 <HAL_GetTick>
 8004570:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004574:	e00b      	b.n	800458e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004576:	f7fd fda7 	bl	80020c8 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f241 3288 	movw	r2, #5000	; 0x1388
 8004586:	4293      	cmp	r3, r2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e365      	b.n	8004c5a <HAL_RCC_OscConfig+0x109a>
 800458e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004592:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004596:	2202      	movs	r2, #2
 8004598:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800459e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	fa93 f2a3 	rbit	r2, r3
 80045a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80045ba:	2202      	movs	r2, #2
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	fa93 f2a3 	rbit	r2, r3
 80045cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045d0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80045d4:	601a      	str	r2, [r3, #0]
  return result;
 80045d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045da:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80045de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e0:	fab3 f383 	clz	r3, r3
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	f043 0302 	orr.w	r3, r3, #2
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d102      	bne.n	80045fa <HAL_RCC_OscConfig+0xa3a>
 80045f4:	4b42      	ldr	r3, [pc, #264]	; (8004700 <HAL_RCC_OscConfig+0xb40>)
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	e013      	b.n	8004622 <HAL_RCC_OscConfig+0xa62>
 80045fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004602:	2202      	movs	r2, #2
 8004604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004606:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800460a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	fa93 f2a3 	rbit	r2, r3
 8004614:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004618:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	4b38      	ldr	r3, [pc, #224]	; (8004700 <HAL_RCC_OscConfig+0xb40>)
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004626:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800462a:	2102      	movs	r1, #2
 800462c:	6011      	str	r1, [r2, #0]
 800462e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004632:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004636:	6812      	ldr	r2, [r2, #0]
 8004638:	fa92 f1a2 	rbit	r1, r2
 800463c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004640:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004644:	6011      	str	r1, [r2, #0]
  return result;
 8004646:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800464a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800464e:	6812      	ldr	r2, [r2, #0]
 8004650:	fab2 f282 	clz	r2, r2
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	f002 021f 	and.w	r2, r2, #31
 8004660:	2101      	movs	r1, #1
 8004662:	fa01 f202 	lsl.w	r2, r1, r2
 8004666:	4013      	ands	r3, r2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d084      	beq.n	8004576 <HAL_RCC_OscConfig+0x9b6>
 800466c:	e083      	b.n	8004776 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800466e:	f7fd fd2b 	bl	80020c8 <HAL_GetTick>
 8004672:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004676:	e00b      	b.n	8004690 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004678:	f7fd fd26 	bl	80020c8 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	f241 3288 	movw	r2, #5000	; 0x1388
 8004688:	4293      	cmp	r3, r2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e2e4      	b.n	8004c5a <HAL_RCC_OscConfig+0x109a>
 8004690:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004694:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004698:	2202      	movs	r2, #2
 800469a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046a0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	fa93 f2a3 	rbit	r2, r3
 80046aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046b8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80046bc:	2202      	movs	r2, #2
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046c4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	fa93 f2a3 	rbit	r2, r3
 80046ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046d2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80046d6:	601a      	str	r2, [r3, #0]
  return result;
 80046d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046dc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80046e0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046e2:	fab3 f383 	clz	r3, r3
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	095b      	lsrs	r3, r3, #5
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	f043 0302 	orr.w	r3, r3, #2
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d106      	bne.n	8004704 <HAL_RCC_OscConfig+0xb44>
 80046f6:	4b02      	ldr	r3, [pc, #8]	; (8004700 <HAL_RCC_OscConfig+0xb40>)
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	e017      	b.n	800472c <HAL_RCC_OscConfig+0xb6c>
 80046fc:	40007000 	.word	0x40007000
 8004700:	40021000 	.word	0x40021000
 8004704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004708:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800470c:	2202      	movs	r2, #2
 800470e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004714:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	fa93 f2a3 	rbit	r2, r3
 800471e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004722:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	4bb3      	ldr	r3, [pc, #716]	; (80049f8 <HAL_RCC_OscConfig+0xe38>)
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004730:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004734:	2102      	movs	r1, #2
 8004736:	6011      	str	r1, [r2, #0]
 8004738:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800473c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004740:	6812      	ldr	r2, [r2, #0]
 8004742:	fa92 f1a2 	rbit	r1, r2
 8004746:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800474a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800474e:	6011      	str	r1, [r2, #0]
  return result;
 8004750:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004754:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004758:	6812      	ldr	r2, [r2, #0]
 800475a:	fab2 f282 	clz	r2, r2
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	f002 021f 	and.w	r2, r2, #31
 800476a:	2101      	movs	r1, #1
 800476c:	fa01 f202 	lsl.w	r2, r1, r2
 8004770:	4013      	ands	r3, r2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d180      	bne.n	8004678 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004776:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800477a:	2b01      	cmp	r3, #1
 800477c:	d105      	bne.n	800478a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800477e:	4b9e      	ldr	r3, [pc, #632]	; (80049f8 <HAL_RCC_OscConfig+0xe38>)
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	4a9d      	ldr	r2, [pc, #628]	; (80049f8 <HAL_RCC_OscConfig+0xe38>)
 8004784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004788:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800478a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800478e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 825e 	beq.w	8004c58 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800479c:	4b96      	ldr	r3, [pc, #600]	; (80049f8 <HAL_RCC_OscConfig+0xe38>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f003 030c 	and.w	r3, r3, #12
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	f000 821f 	beq.w	8004be8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	f040 8170 	bne.w	8004a9c <HAL_RCC_OscConfig+0xedc>
 80047bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047c0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80047c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047ce:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	fa93 f2a3 	rbit	r2, r3
 80047d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047dc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80047e0:	601a      	str	r2, [r3, #0]
  return result;
 80047e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047e6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80047ea:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ec:	fab3 f383 	clz	r3, r3
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	461a      	mov	r2, r3
 80047fe:	2300      	movs	r3, #0
 8004800:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004802:	f7fd fc61 	bl	80020c8 <HAL_GetTick>
 8004806:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800480a:	e009      	b.n	8004820 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800480c:	f7fd fc5c 	bl	80020c8 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e21c      	b.n	8004c5a <HAL_RCC_OscConfig+0x109a>
 8004820:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004824:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004828:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800482c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004832:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	fa93 f2a3 	rbit	r2, r3
 800483c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004840:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004844:	601a      	str	r2, [r3, #0]
  return result;
 8004846:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800484a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800484e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004850:	fab3 f383 	clz	r3, r3
 8004854:	b2db      	uxtb	r3, r3
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	b2db      	uxtb	r3, r3
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b01      	cmp	r3, #1
 8004862:	d102      	bne.n	800486a <HAL_RCC_OscConfig+0xcaa>
 8004864:	4b64      	ldr	r3, [pc, #400]	; (80049f8 <HAL_RCC_OscConfig+0xe38>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	e027      	b.n	80048ba <HAL_RCC_OscConfig+0xcfa>
 800486a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800486e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004872:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004878:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800487c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	fa93 f2a3 	rbit	r2, r3
 8004886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800488a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004894:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004898:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048a2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	fa93 f2a3 	rbit	r2, r3
 80048ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048b0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	4b50      	ldr	r3, [pc, #320]	; (80049f8 <HAL_RCC_OscConfig+0xe38>)
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80048be:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80048c2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80048c6:	6011      	str	r1, [r2, #0]
 80048c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80048cc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80048d0:	6812      	ldr	r2, [r2, #0]
 80048d2:	fa92 f1a2 	rbit	r1, r2
 80048d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80048da:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80048de:	6011      	str	r1, [r2, #0]
  return result;
 80048e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80048e4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80048e8:	6812      	ldr	r2, [r2, #0]
 80048ea:	fab2 f282 	clz	r2, r2
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	f042 0220 	orr.w	r2, r2, #32
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	f002 021f 	and.w	r2, r2, #31
 80048fa:	2101      	movs	r1, #1
 80048fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004900:	4013      	ands	r3, r2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d182      	bne.n	800480c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004906:	4b3c      	ldr	r3, [pc, #240]	; (80049f8 <HAL_RCC_OscConfig+0xe38>)
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	f023 020f 	bic.w	r2, r3, #15
 800490e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004912:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	4937      	ldr	r1, [pc, #220]	; (80049f8 <HAL_RCC_OscConfig+0xe38>)
 800491c:	4313      	orrs	r3, r2
 800491e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004920:	4b35      	ldr	r3, [pc, #212]	; (80049f8 <HAL_RCC_OscConfig+0xe38>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004928:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800492c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6a19      	ldr	r1, [r3, #32]
 8004934:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004938:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	430b      	orrs	r3, r1
 8004942:	492d      	ldr	r1, [pc, #180]	; (80049f8 <HAL_RCC_OscConfig+0xe38>)
 8004944:	4313      	orrs	r3, r2
 8004946:	604b      	str	r3, [r1, #4]
 8004948:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800494c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004950:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004954:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004956:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800495a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	fa93 f2a3 	rbit	r2, r3
 8004964:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004968:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800496c:	601a      	str	r2, [r3, #0]
  return result;
 800496e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004972:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004976:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004978:	fab3 f383 	clz	r3, r3
 800497c:	b2db      	uxtb	r3, r3
 800497e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004982:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	461a      	mov	r2, r3
 800498a:	2301      	movs	r3, #1
 800498c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498e:	f7fd fb9b 	bl	80020c8 <HAL_GetTick>
 8004992:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004996:	e009      	b.n	80049ac <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004998:	f7fd fb96 	bl	80020c8 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e156      	b.n	8004c5a <HAL_RCC_OscConfig+0x109a>
 80049ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049b0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80049b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049be:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	fa93 f2a3 	rbit	r2, r3
 80049c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049cc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80049d0:	601a      	str	r2, [r3, #0]
  return result;
 80049d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049d6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80049da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049dc:	fab3 f383 	clz	r3, r3
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d105      	bne.n	80049fc <HAL_RCC_OscConfig+0xe3c>
 80049f0:	4b01      	ldr	r3, [pc, #4]	; (80049f8 <HAL_RCC_OscConfig+0xe38>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	e02a      	b.n	8004a4c <HAL_RCC_OscConfig+0xe8c>
 80049f6:	bf00      	nop
 80049f8:	40021000 	.word	0x40021000
 80049fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a00:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004a04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a0e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	fa93 f2a3 	rbit	r2, r3
 8004a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a1c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a26:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004a2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a34:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	fa93 f2a3 	rbit	r2, r3
 8004a3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a42:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	4b86      	ldr	r3, [pc, #536]	; (8004c64 <HAL_RCC_OscConfig+0x10a4>)
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a50:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004a54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004a58:	6011      	str	r1, [r2, #0]
 8004a5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a5e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	fa92 f1a2 	rbit	r1, r2
 8004a68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a6c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004a70:	6011      	str	r1, [r2, #0]
  return result;
 8004a72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a76:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004a7a:	6812      	ldr	r2, [r2, #0]
 8004a7c:	fab2 f282 	clz	r2, r2
 8004a80:	b2d2      	uxtb	r2, r2
 8004a82:	f042 0220 	orr.w	r2, r2, #32
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	f002 021f 	and.w	r2, r2, #31
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a92:	4013      	ands	r3, r2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f43f af7f 	beq.w	8004998 <HAL_RCC_OscConfig+0xdd8>
 8004a9a:	e0dd      	b.n	8004c58 <HAL_RCC_OscConfig+0x1098>
 8004a9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004aa0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004aa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004aae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	fa93 f2a3 	rbit	r2, r3
 8004ab8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004abc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004ac0:	601a      	str	r2, [r3, #0]
  return result;
 8004ac2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ac6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004aca:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004acc:	fab3 f383 	clz	r3, r3
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ad6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	461a      	mov	r2, r3
 8004ade:	2300      	movs	r3, #0
 8004ae0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae2:	f7fd faf1 	bl	80020c8 <HAL_GetTick>
 8004ae6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aea:	e009      	b.n	8004b00 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aec:	f7fd faec 	bl	80020c8 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e0ac      	b.n	8004c5a <HAL_RCC_OscConfig+0x109a>
 8004b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b04:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004b08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b12:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	fa93 f2a3 	rbit	r2, r3
 8004b1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b20:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004b24:	601a      	str	r2, [r3, #0]
  return result;
 8004b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b2a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004b2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b30:	fab3 f383 	clz	r3, r3
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	f043 0301 	orr.w	r3, r3, #1
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d102      	bne.n	8004b4a <HAL_RCC_OscConfig+0xf8a>
 8004b44:	4b47      	ldr	r3, [pc, #284]	; (8004c64 <HAL_RCC_OscConfig+0x10a4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	e027      	b.n	8004b9a <HAL_RCC_OscConfig+0xfda>
 8004b4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b4e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004b52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b5c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	fa93 f2a3 	rbit	r2, r3
 8004b66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b6a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b74:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004b78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b82:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	fa93 f2a3 	rbit	r2, r3
 8004b8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b90:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	4b33      	ldr	r3, [pc, #204]	; (8004c64 <HAL_RCC_OscConfig+0x10a4>)
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b9e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004ba2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004ba6:	6011      	str	r1, [r2, #0]
 8004ba8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004bac:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004bb0:	6812      	ldr	r2, [r2, #0]
 8004bb2:	fa92 f1a2 	rbit	r1, r2
 8004bb6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004bba:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004bbe:	6011      	str	r1, [r2, #0]
  return result;
 8004bc0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004bc4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004bc8:	6812      	ldr	r2, [r2, #0]
 8004bca:	fab2 f282 	clz	r2, r2
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	f042 0220 	orr.w	r2, r2, #32
 8004bd4:	b2d2      	uxtb	r2, r2
 8004bd6:	f002 021f 	and.w	r2, r2, #31
 8004bda:	2101      	movs	r1, #1
 8004bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8004be0:	4013      	ands	r3, r2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d182      	bne.n	8004aec <HAL_RCC_OscConfig+0xf2c>
 8004be6:	e037      	b.n	8004c58 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004be8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e02e      	b.n	8004c5a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004bfc:	4b19      	ldr	r3, [pc, #100]	; (8004c64 <HAL_RCC_OscConfig+0x10a4>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004c04:	4b17      	ldr	r3, [pc, #92]	; (8004c64 <HAL_RCC_OscConfig+0x10a4>)
 8004c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c08:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c10:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d117      	bne.n	8004c54 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004c24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c28:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d10b      	bne.n	8004c54 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004c3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c40:	f003 020f 	and.w	r2, r3, #15
 8004c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d001      	beq.n	8004c58 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e000      	b.n	8004c5a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40021000 	.word	0x40021000

08004c68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b09e      	sub	sp, #120	; 0x78
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e162      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c80:	4b90      	ldr	r3, [pc, #576]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d910      	bls.n	8004cb0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8e:	4b8d      	ldr	r3, [pc, #564]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f023 0207 	bic.w	r2, r3, #7
 8004c96:	498b      	ldr	r1, [pc, #556]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9e:	4b89      	ldr	r3, [pc, #548]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d001      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e14a      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d008      	beq.n	8004cce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cbc:	4b82      	ldr	r3, [pc, #520]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	497f      	ldr	r1, [pc, #508]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 80dc 	beq.w	8004e94 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d13c      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xf6>
 8004ce4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ce8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cec:	fa93 f3a3 	rbit	r3, r3
 8004cf0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf4:	fab3 f383 	clz	r3, r3
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	f043 0301 	orr.w	r3, r3, #1
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d102      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xa6>
 8004d08:	4b6f      	ldr	r3, [pc, #444]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	e00f      	b.n	8004d2e <HAL_RCC_ClockConfig+0xc6>
 8004d0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d16:	fa93 f3a3 	rbit	r3, r3
 8004d1a:	667b      	str	r3, [r7, #100]	; 0x64
 8004d1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d20:	663b      	str	r3, [r7, #96]	; 0x60
 8004d22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d24:	fa93 f3a3 	rbit	r3, r3
 8004d28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d2a:	4b67      	ldr	r3, [pc, #412]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d32:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d36:	fa92 f2a2 	rbit	r2, r2
 8004d3a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004d3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d3e:	fab2 f282 	clz	r2, r2
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	f042 0220 	orr.w	r2, r2, #32
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	f002 021f 	and.w	r2, r2, #31
 8004d4e:	2101      	movs	r1, #1
 8004d50:	fa01 f202 	lsl.w	r2, r1, r2
 8004d54:	4013      	ands	r3, r2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d17b      	bne.n	8004e52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e0f3      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d13c      	bne.n	8004de0 <HAL_RCC_ClockConfig+0x178>
 8004d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d6e:	fa93 f3a3 	rbit	r3, r3
 8004d72:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d76:	fab3 f383 	clz	r3, r3
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	095b      	lsrs	r3, r3, #5
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d102      	bne.n	8004d90 <HAL_RCC_ClockConfig+0x128>
 8004d8a:	4b4f      	ldr	r3, [pc, #316]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	e00f      	b.n	8004db0 <HAL_RCC_ClockConfig+0x148>
 8004d90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d94:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d98:	fa93 f3a3 	rbit	r3, r3
 8004d9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004da2:	643b      	str	r3, [r7, #64]	; 0x40
 8004da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004da6:	fa93 f3a3 	rbit	r3, r3
 8004daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dac:	4b46      	ldr	r3, [pc, #280]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004db4:	63ba      	str	r2, [r7, #56]	; 0x38
 8004db6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004db8:	fa92 f2a2 	rbit	r2, r2
 8004dbc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dc0:	fab2 f282 	clz	r2, r2
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	f042 0220 	orr.w	r2, r2, #32
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	f002 021f 	and.w	r2, r2, #31
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d13a      	bne.n	8004e52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e0b2      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2de>
 8004de0:	2302      	movs	r3, #2
 8004de2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de6:	fa93 f3a3 	rbit	r3, r3
 8004dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dee:	fab3 f383 	clz	r3, r3
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	095b      	lsrs	r3, r3, #5
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d102      	bne.n	8004e08 <HAL_RCC_ClockConfig+0x1a0>
 8004e02:	4b31      	ldr	r3, [pc, #196]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	e00d      	b.n	8004e24 <HAL_RCC_ClockConfig+0x1bc>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0e:	fa93 f3a3 	rbit	r3, r3
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
 8004e14:	2302      	movs	r3, #2
 8004e16:	623b      	str	r3, [r7, #32]
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	fa93 f3a3 	rbit	r3, r3
 8004e1e:	61fb      	str	r3, [r7, #28]
 8004e20:	4b29      	ldr	r3, [pc, #164]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	2202      	movs	r2, #2
 8004e26:	61ba      	str	r2, [r7, #24]
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	fa92 f2a2 	rbit	r2, r2
 8004e2e:	617a      	str	r2, [r7, #20]
  return result;
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	fab2 f282 	clz	r2, r2
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	f042 0220 	orr.w	r2, r2, #32
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	f002 021f 	and.w	r2, r2, #31
 8004e42:	2101      	movs	r1, #1
 8004e44:	fa01 f202 	lsl.w	r2, r1, r2
 8004e48:	4013      	ands	r3, r2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e079      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e52:	4b1d      	ldr	r3, [pc, #116]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f023 0203 	bic.w	r2, r3, #3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	491a      	ldr	r1, [pc, #104]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e64:	f7fd f930 	bl	80020c8 <HAL_GetTick>
 8004e68:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e6a:	e00a      	b.n	8004e82 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e6c:	f7fd f92c 	bl	80020c8 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e061      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e82:	4b11      	ldr	r3, [pc, #68]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f003 020c 	and.w	r2, r3, #12
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d1eb      	bne.n	8004e6c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e94:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d214      	bcs.n	8004ecc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea2:	4b08      	ldr	r3, [pc, #32]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f023 0207 	bic.w	r2, r3, #7
 8004eaa:	4906      	ldr	r1, [pc, #24]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb2:	4b04      	ldr	r3, [pc, #16]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d005      	beq.n	8004ecc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e040      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2de>
 8004ec4:	40022000 	.word	0x40022000
 8004ec8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d008      	beq.n	8004eea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ed8:	4b1d      	ldr	r3, [pc, #116]	; (8004f50 <HAL_RCC_ClockConfig+0x2e8>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	491a      	ldr	r1, [pc, #104]	; (8004f50 <HAL_RCC_ClockConfig+0x2e8>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d009      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ef6:	4b16      	ldr	r3, [pc, #88]	; (8004f50 <HAL_RCC_ClockConfig+0x2e8>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	4912      	ldr	r1, [pc, #72]	; (8004f50 <HAL_RCC_ClockConfig+0x2e8>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004f0a:	f000 f829 	bl	8004f60 <HAL_RCC_GetSysClockFreq>
 8004f0e:	4601      	mov	r1, r0
 8004f10:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <HAL_RCC_ClockConfig+0x2e8>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f18:	22f0      	movs	r2, #240	; 0xf0
 8004f1a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	fa92 f2a2 	rbit	r2, r2
 8004f22:	60fa      	str	r2, [r7, #12]
  return result;
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	fab2 f282 	clz	r2, r2
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	40d3      	lsrs	r3, r2
 8004f2e:	4a09      	ldr	r2, [pc, #36]	; (8004f54 <HAL_RCC_ClockConfig+0x2ec>)
 8004f30:	5cd3      	ldrb	r3, [r2, r3]
 8004f32:	fa21 f303 	lsr.w	r3, r1, r3
 8004f36:	4a08      	ldr	r2, [pc, #32]	; (8004f58 <HAL_RCC_ClockConfig+0x2f0>)
 8004f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004f3a:	4b08      	ldr	r3, [pc, #32]	; (8004f5c <HAL_RCC_ClockConfig+0x2f4>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fd f87e 	bl	8002040 <HAL_InitTick>
  
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3778      	adds	r7, #120	; 0x78
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	40021000 	.word	0x40021000
 8004f54:	080079f8 	.word	0x080079f8
 8004f58:	20000000 	.word	0x20000000
 8004f5c:	20000004 	.word	0x20000004

08004f60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b08b      	sub	sp, #44	; 0x2c
 8004f64:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	61fb      	str	r3, [r7, #28]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
 8004f72:	2300      	movs	r3, #0
 8004f74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004f7a:	4b2a      	ldr	r3, [pc, #168]	; (8005024 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f003 030c 	and.w	r3, r3, #12
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d002      	beq.n	8004f90 <HAL_RCC_GetSysClockFreq+0x30>
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d003      	beq.n	8004f96 <HAL_RCC_GetSysClockFreq+0x36>
 8004f8e:	e03f      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f90:	4b25      	ldr	r3, [pc, #148]	; (8005028 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004f92:	623b      	str	r3, [r7, #32]
      break;
 8004f94:	e03f      	b.n	8005016 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004f9c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004fa0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	fa92 f2a2 	rbit	r2, r2
 8004fa8:	607a      	str	r2, [r7, #4]
  return result;
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	fab2 f282 	clz	r2, r2
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	40d3      	lsrs	r3, r2
 8004fb4:	4a1d      	ldr	r2, [pc, #116]	; (800502c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004fb6:	5cd3      	ldrb	r3, [r2, r3]
 8004fb8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004fba:	4b1a      	ldr	r3, [pc, #104]	; (8005024 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	220f      	movs	r2, #15
 8004fc4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	fa92 f2a2 	rbit	r2, r2
 8004fcc:	60fa      	str	r2, [r7, #12]
  return result;
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	fab2 f282 	clz	r2, r2
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	40d3      	lsrs	r3, r2
 8004fd8:	4a15      	ldr	r2, [pc, #84]	; (8005030 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004fda:	5cd3      	ldrb	r3, [r2, r3]
 8004fdc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d008      	beq.n	8004ffa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004fe8:	4a0f      	ldr	r2, [pc, #60]	; (8005028 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	fb02 f303 	mul.w	r3, r2, r3
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff8:	e007      	b.n	800500a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ffa:	4a0b      	ldr	r2, [pc, #44]	; (8005028 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	fbb2 f2f3 	udiv	r2, r2, r3
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	fb02 f303 	mul.w	r3, r2, r3
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	623b      	str	r3, [r7, #32]
      break;
 800500e:	e002      	b.n	8005016 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005010:	4b05      	ldr	r3, [pc, #20]	; (8005028 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005012:	623b      	str	r3, [r7, #32]
      break;
 8005014:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005016:	6a3b      	ldr	r3, [r7, #32]
}
 8005018:	4618      	mov	r0, r3
 800501a:	372c      	adds	r7, #44	; 0x2c
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	40021000 	.word	0x40021000
 8005028:	007a1200 	.word	0x007a1200
 800502c:	08007a10 	.word	0x08007a10
 8005030:	08007a20 	.word	0x08007a20

08005034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005038:	4b03      	ldr	r3, [pc, #12]	; (8005048 <HAL_RCC_GetHCLKFreq+0x14>)
 800503a:	681b      	ldr	r3, [r3, #0]
}
 800503c:	4618      	mov	r0, r3
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	20000000 	.word	0x20000000

0800504c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005052:	f7ff ffef 	bl	8005034 <HAL_RCC_GetHCLKFreq>
 8005056:	4601      	mov	r1, r0
 8005058:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005060:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005064:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	fa92 f2a2 	rbit	r2, r2
 800506c:	603a      	str	r2, [r7, #0]
  return result;
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	fab2 f282 	clz	r2, r2
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	40d3      	lsrs	r3, r2
 8005078:	4a04      	ldr	r2, [pc, #16]	; (800508c <HAL_RCC_GetPCLK1Freq+0x40>)
 800507a:	5cd3      	ldrb	r3, [r2, r3]
 800507c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005080:	4618      	mov	r0, r3
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40021000 	.word	0x40021000
 800508c:	08007a08 	.word	0x08007a08

08005090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005096:	f7ff ffcd 	bl	8005034 <HAL_RCC_GetHCLKFreq>
 800509a:	4601      	mov	r1, r0
 800509c:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80050a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80050a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	fa92 f2a2 	rbit	r2, r2
 80050b0:	603a      	str	r2, [r7, #0]
  return result;
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	fab2 f282 	clz	r2, r2
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	40d3      	lsrs	r3, r2
 80050bc:	4a04      	ldr	r2, [pc, #16]	; (80050d0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80050be:	5cd3      	ldrb	r3, [r2, r3]
 80050c0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80050c4:	4618      	mov	r0, r3
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40021000 	.word	0x40021000
 80050d0:	08007a08 	.word	0x08007a08

080050d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b092      	sub	sp, #72	; 0x48
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80050e4:	2300      	movs	r3, #0
 80050e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 80d4 	beq.w	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050f8:	4b4e      	ldr	r3, [pc, #312]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10e      	bne.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005104:	4b4b      	ldr	r3, [pc, #300]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	4a4a      	ldr	r2, [pc, #296]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800510a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800510e:	61d3      	str	r3, [r2, #28]
 8005110:	4b48      	ldr	r3, [pc, #288]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005118:	60bb      	str	r3, [r7, #8]
 800511a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800511c:	2301      	movs	r3, #1
 800511e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005122:	4b45      	ldr	r3, [pc, #276]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512a:	2b00      	cmp	r3, #0
 800512c:	d118      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800512e:	4b42      	ldr	r3, [pc, #264]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a41      	ldr	r2, [pc, #260]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005138:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800513a:	f7fc ffc5 	bl	80020c8 <HAL_GetTick>
 800513e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005140:	e008      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005142:	f7fc ffc1 	bl	80020c8 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b64      	cmp	r3, #100	; 0x64
 800514e:	d901      	bls.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e1d6      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005154:	4b38      	ldr	r3, [pc, #224]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0f0      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005160:	4b34      	ldr	r3, [pc, #208]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005168:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800516a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 8084 	beq.w	800527a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800517a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800517c:	429a      	cmp	r2, r3
 800517e:	d07c      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005180:	4b2c      	ldr	r3, [pc, #176]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800518a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800518e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005192:	fa93 f3a3 	rbit	r3, r3
 8005196:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800519a:	fab3 f383 	clz	r3, r3
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	461a      	mov	r2, r3
 80051a2:	4b26      	ldr	r3, [pc, #152]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051a4:	4413      	add	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	461a      	mov	r2, r3
 80051aa:	2301      	movs	r3, #1
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	fa93 f3a3 	rbit	r3, r3
 80051ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80051bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051be:	fab3 f383 	clz	r3, r3
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	4b1d      	ldr	r3, [pc, #116]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051c8:	4413      	add	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	461a      	mov	r2, r3
 80051ce:	2300      	movs	r3, #0
 80051d0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051d2:	4a18      	ldr	r2, [pc, #96]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d04b      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e2:	f7fc ff71 	bl	80020c8 <HAL_GetTick>
 80051e6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e8:	e00a      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ea:	f7fc ff6d 	bl	80020c8 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d901      	bls.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e180      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005200:	2302      	movs	r3, #2
 8005202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005206:	fa93 f3a3 	rbit	r3, r3
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
 800520c:	2302      	movs	r3, #2
 800520e:	623b      	str	r3, [r7, #32]
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	fa93 f3a3 	rbit	r3, r3
 8005216:	61fb      	str	r3, [r7, #28]
  return result;
 8005218:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800521a:	fab3 f383 	clz	r3, r3
 800521e:	b2db      	uxtb	r3, r3
 8005220:	095b      	lsrs	r3, r3, #5
 8005222:	b2db      	uxtb	r3, r3
 8005224:	f043 0302 	orr.w	r3, r3, #2
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d108      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800522e:	4b01      	ldr	r3, [pc, #4]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	e00d      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005234:	40021000 	.word	0x40021000
 8005238:	40007000 	.word	0x40007000
 800523c:	10908100 	.word	0x10908100
 8005240:	2302      	movs	r3, #2
 8005242:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	fa93 f3a3 	rbit	r3, r3
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	4b9a      	ldr	r3, [pc, #616]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	2202      	movs	r2, #2
 8005252:	613a      	str	r2, [r7, #16]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	fa92 f2a2 	rbit	r2, r2
 800525a:	60fa      	str	r2, [r7, #12]
  return result;
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	fab2 f282 	clz	r2, r2
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005268:	b2d2      	uxtb	r2, r2
 800526a:	f002 021f 	and.w	r2, r2, #31
 800526e:	2101      	movs	r1, #1
 8005270:	fa01 f202 	lsl.w	r2, r1, r2
 8005274:	4013      	ands	r3, r2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0b7      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800527a:	4b8f      	ldr	r3, [pc, #572]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	498c      	ldr	r1, [pc, #560]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005288:	4313      	orrs	r3, r2
 800528a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800528c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005290:	2b01      	cmp	r3, #1
 8005292:	d105      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005294:	4b88      	ldr	r3, [pc, #544]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	4a87      	ldr	r2, [pc, #540]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800529a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800529e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d008      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052ac:	4b82      	ldr	r3, [pc, #520]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	f023 0203 	bic.w	r2, r3, #3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	497f      	ldr	r1, [pc, #508]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d008      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052ca:	4b7b      	ldr	r3, [pc, #492]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	4978      	ldr	r1, [pc, #480]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052e8:	4b73      	ldr	r3, [pc, #460]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	4970      	ldr	r1, [pc, #448]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0320 	and.w	r3, r3, #32
 8005302:	2b00      	cmp	r3, #0
 8005304:	d008      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005306:	4b6c      	ldr	r3, [pc, #432]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	f023 0210 	bic.w	r2, r3, #16
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	4969      	ldr	r1, [pc, #420]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005314:	4313      	orrs	r3, r2
 8005316:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d008      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005324:	4b64      	ldr	r3, [pc, #400]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005330:	4961      	ldr	r1, [pc, #388]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005332:	4313      	orrs	r3, r2
 8005334:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533e:	2b00      	cmp	r3, #0
 8005340:	d008      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005342:	4b5d      	ldr	r3, [pc, #372]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005346:	f023 0220 	bic.w	r2, r3, #32
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	495a      	ldr	r1, [pc, #360]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005350:	4313      	orrs	r3, r2
 8005352:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d008      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005360:	4b55      	ldr	r3, [pc, #340]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005364:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	4952      	ldr	r1, [pc, #328]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800536e:	4313      	orrs	r3, r2
 8005370:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0308 	and.w	r3, r3, #8
 800537a:	2b00      	cmp	r3, #0
 800537c:	d008      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800537e:	4b4e      	ldr	r3, [pc, #312]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	494b      	ldr	r1, [pc, #300]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800538c:	4313      	orrs	r3, r2
 800538e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0310 	and.w	r3, r3, #16
 8005398:	2b00      	cmp	r3, #0
 800539a:	d008      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800539c:	4b46      	ldr	r3, [pc, #280]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800539e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	4943      	ldr	r1, [pc, #268]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d008      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053ba:	4b3f      	ldr	r3, [pc, #252]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	493c      	ldr	r1, [pc, #240]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d008      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80053d8:	4b37      	ldr	r3, [pc, #220]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053dc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e4:	4934      	ldr	r1, [pc, #208]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d008      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80053f6:	4b30      	ldr	r3, [pc, #192]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fa:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005402:	492d      	ldr	r1, [pc, #180]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005404:	4313      	orrs	r3, r2
 8005406:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d008      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005414:	4b28      	ldr	r3, [pc, #160]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005418:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005420:	4925      	ldr	r1, [pc, #148]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005422:	4313      	orrs	r3, r2
 8005424:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d008      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005432:	4b21      	ldr	r3, [pc, #132]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	491e      	ldr	r1, [pc, #120]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005440:	4313      	orrs	r3, r2
 8005442:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d008      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005450:	4b19      	ldr	r3, [pc, #100]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005454:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545c:	4916      	ldr	r1, [pc, #88]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800545e:	4313      	orrs	r3, r2
 8005460:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d008      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800546e:	4b12      	ldr	r3, [pc, #72]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005472:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547a:	490f      	ldr	r1, [pc, #60]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800547c:	4313      	orrs	r3, r2
 800547e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800548c:	4b0a      	ldr	r3, [pc, #40]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800548e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005490:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005498:	4907      	ldr	r1, [pc, #28]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800549a:	4313      	orrs	r3, r2
 800549c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00c      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80054aa:	4b03      	ldr	r3, [pc, #12]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	e002      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80054b6:	bf00      	nop
 80054b8:	40021000 	.word	0x40021000
 80054bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054be:	4913      	ldr	r1, [pc, #76]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d008      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80054d0:	4b0e      	ldr	r3, [pc, #56]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054dc:	490b      	ldr	r1, [pc, #44]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d008      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80054ee:	4b07      	ldr	r3, [pc, #28]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80054f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054fa:	4904      	ldr	r1, [pc, #16]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3748      	adds	r7, #72	; 0x48
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	40021000 	.word	0x40021000

08005510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e049      	b.n	80055b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d106      	bne.n	800553c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7fc f920 	bl	800177c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3304      	adds	r3, #4
 800554c:	4619      	mov	r1, r3
 800554e:	4610      	mov	r0, r2
 8005550:	f000 ff8e 	bl	8006470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b082      	sub	sp, #8
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e049      	b.n	8005664 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d106      	bne.n	80055ea <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7fc f99f 	bl	8001928 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2202      	movs	r2, #2
 80055ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	3304      	adds	r3, #4
 80055fa:	4619      	mov	r1, r3
 80055fc:	4610      	mov	r0, r2
 80055fe:	f000 ff37 	bl	8006470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d109      	bne.n	8005690 <HAL_TIM_OC_Start+0x24>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b01      	cmp	r3, #1
 8005686:	bf14      	ite	ne
 8005688:	2301      	movne	r3, #1
 800568a:	2300      	moveq	r3, #0
 800568c:	b2db      	uxtb	r3, r3
 800568e:	e03c      	b.n	800570a <HAL_TIM_OC_Start+0x9e>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	2b04      	cmp	r3, #4
 8005694:	d109      	bne.n	80056aa <HAL_TIM_OC_Start+0x3e>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b01      	cmp	r3, #1
 80056a0:	bf14      	ite	ne
 80056a2:	2301      	movne	r3, #1
 80056a4:	2300      	moveq	r3, #0
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	e02f      	b.n	800570a <HAL_TIM_OC_Start+0x9e>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d109      	bne.n	80056c4 <HAL_TIM_OC_Start+0x58>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	bf14      	ite	ne
 80056bc:	2301      	movne	r3, #1
 80056be:	2300      	moveq	r3, #0
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	e022      	b.n	800570a <HAL_TIM_OC_Start+0x9e>
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2b0c      	cmp	r3, #12
 80056c8:	d109      	bne.n	80056de <HAL_TIM_OC_Start+0x72>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	bf14      	ite	ne
 80056d6:	2301      	movne	r3, #1
 80056d8:	2300      	moveq	r3, #0
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	e015      	b.n	800570a <HAL_TIM_OC_Start+0x9e>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b10      	cmp	r3, #16
 80056e2:	d109      	bne.n	80056f8 <HAL_TIM_OC_Start+0x8c>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	bf14      	ite	ne
 80056f0:	2301      	movne	r3, #1
 80056f2:	2300      	moveq	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	e008      	b.n	800570a <HAL_TIM_OC_Start+0x9e>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b01      	cmp	r3, #1
 8005702:	bf14      	ite	ne
 8005704:	2301      	movne	r3, #1
 8005706:	2300      	moveq	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e0a1      	b.n	8005856 <HAL_TIM_OC_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d104      	bne.n	8005722 <HAL_TIM_OC_Start+0xb6>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005720:	e023      	b.n	800576a <HAL_TIM_OC_Start+0xfe>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b04      	cmp	r3, #4
 8005726:	d104      	bne.n	8005732 <HAL_TIM_OC_Start+0xc6>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005730:	e01b      	b.n	800576a <HAL_TIM_OC_Start+0xfe>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b08      	cmp	r3, #8
 8005736:	d104      	bne.n	8005742 <HAL_TIM_OC_Start+0xd6>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005740:	e013      	b.n	800576a <HAL_TIM_OC_Start+0xfe>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b0c      	cmp	r3, #12
 8005746:	d104      	bne.n	8005752 <HAL_TIM_OC_Start+0xe6>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005750:	e00b      	b.n	800576a <HAL_TIM_OC_Start+0xfe>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b10      	cmp	r3, #16
 8005756:	d104      	bne.n	8005762 <HAL_TIM_OC_Start+0xf6>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005760:	e003      	b.n	800576a <HAL_TIM_OC_Start+0xfe>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2202      	movs	r2, #2
 8005766:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2201      	movs	r2, #1
 8005770:	6839      	ldr	r1, [r7, #0]
 8005772:	4618      	mov	r0, r3
 8005774:	f001 fbde 	bl	8006f34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a38      	ldr	r2, [pc, #224]	; (8005860 <HAL_TIM_OC_Start+0x1f4>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d018      	beq.n	80057b4 <HAL_TIM_OC_Start+0x148>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a37      	ldr	r2, [pc, #220]	; (8005864 <HAL_TIM_OC_Start+0x1f8>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d013      	beq.n	80057b4 <HAL_TIM_OC_Start+0x148>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a35      	ldr	r2, [pc, #212]	; (8005868 <HAL_TIM_OC_Start+0x1fc>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00e      	beq.n	80057b4 <HAL_TIM_OC_Start+0x148>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a34      	ldr	r2, [pc, #208]	; (800586c <HAL_TIM_OC_Start+0x200>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d009      	beq.n	80057b4 <HAL_TIM_OC_Start+0x148>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a32      	ldr	r2, [pc, #200]	; (8005870 <HAL_TIM_OC_Start+0x204>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d004      	beq.n	80057b4 <HAL_TIM_OC_Start+0x148>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a31      	ldr	r2, [pc, #196]	; (8005874 <HAL_TIM_OC_Start+0x208>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d101      	bne.n	80057b8 <HAL_TIM_OC_Start+0x14c>
 80057b4:	2301      	movs	r3, #1
 80057b6:	e000      	b.n	80057ba <HAL_TIM_OC_Start+0x14e>
 80057b8:	2300      	movs	r3, #0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d007      	beq.n	80057ce <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a23      	ldr	r2, [pc, #140]	; (8005860 <HAL_TIM_OC_Start+0x1f4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d01d      	beq.n	8005814 <HAL_TIM_OC_Start+0x1a8>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e0:	d018      	beq.n	8005814 <HAL_TIM_OC_Start+0x1a8>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a24      	ldr	r2, [pc, #144]	; (8005878 <HAL_TIM_OC_Start+0x20c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d013      	beq.n	8005814 <HAL_TIM_OC_Start+0x1a8>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a22      	ldr	r2, [pc, #136]	; (800587c <HAL_TIM_OC_Start+0x210>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d00e      	beq.n	8005814 <HAL_TIM_OC_Start+0x1a8>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a1a      	ldr	r2, [pc, #104]	; (8005864 <HAL_TIM_OC_Start+0x1f8>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d009      	beq.n	8005814 <HAL_TIM_OC_Start+0x1a8>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a18      	ldr	r2, [pc, #96]	; (8005868 <HAL_TIM_OC_Start+0x1fc>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d004      	beq.n	8005814 <HAL_TIM_OC_Start+0x1a8>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a19      	ldr	r2, [pc, #100]	; (8005874 <HAL_TIM_OC_Start+0x208>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d115      	bne.n	8005840 <HAL_TIM_OC_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	4b19      	ldr	r3, [pc, #100]	; (8005880 <HAL_TIM_OC_Start+0x214>)
 800581c:	4013      	ands	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b06      	cmp	r3, #6
 8005824:	d015      	beq.n	8005852 <HAL_TIM_OC_Start+0x1e6>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800582c:	d011      	beq.n	8005852 <HAL_TIM_OC_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f042 0201 	orr.w	r2, r2, #1
 800583c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800583e:	e008      	b.n	8005852 <HAL_TIM_OC_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0201 	orr.w	r2, r2, #1
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	e000      	b.n	8005854 <HAL_TIM_OC_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005852:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	40012c00 	.word	0x40012c00
 8005864:	40013400 	.word	0x40013400
 8005868:	40014000 	.word	0x40014000
 800586c:	40014400 	.word	0x40014400
 8005870:	40014800 	.word	0x40014800
 8005874:	40015000 	.word	0x40015000
 8005878:	40000400 	.word	0x40000400
 800587c:	40000800 	.word	0x40000800
 8005880:	00010007 	.word	0x00010007

08005884 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e049      	b.n	800592a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d106      	bne.n	80058b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7fb ff84 	bl	80017b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3304      	adds	r3, #4
 80058c0:	4619      	mov	r1, r3
 80058c2:	4610      	mov	r0, r2
 80058c4:	f000 fdd4 	bl	8006470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
	...

08005934 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d109      	bne.n	8005958 <HAL_TIM_PWM_Start+0x24>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b01      	cmp	r3, #1
 800594e:	bf14      	ite	ne
 8005950:	2301      	movne	r3, #1
 8005952:	2300      	moveq	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	e03c      	b.n	80059d2 <HAL_TIM_PWM_Start+0x9e>
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	2b04      	cmp	r3, #4
 800595c:	d109      	bne.n	8005972 <HAL_TIM_PWM_Start+0x3e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b01      	cmp	r3, #1
 8005968:	bf14      	ite	ne
 800596a:	2301      	movne	r3, #1
 800596c:	2300      	moveq	r3, #0
 800596e:	b2db      	uxtb	r3, r3
 8005970:	e02f      	b.n	80059d2 <HAL_TIM_PWM_Start+0x9e>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b08      	cmp	r3, #8
 8005976:	d109      	bne.n	800598c <HAL_TIM_PWM_Start+0x58>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b01      	cmp	r3, #1
 8005982:	bf14      	ite	ne
 8005984:	2301      	movne	r3, #1
 8005986:	2300      	moveq	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	e022      	b.n	80059d2 <HAL_TIM_PWM_Start+0x9e>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2b0c      	cmp	r3, #12
 8005990:	d109      	bne.n	80059a6 <HAL_TIM_PWM_Start+0x72>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b01      	cmp	r3, #1
 800599c:	bf14      	ite	ne
 800599e:	2301      	movne	r3, #1
 80059a0:	2300      	moveq	r3, #0
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	e015      	b.n	80059d2 <HAL_TIM_PWM_Start+0x9e>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b10      	cmp	r3, #16
 80059aa:	d109      	bne.n	80059c0 <HAL_TIM_PWM_Start+0x8c>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	bf14      	ite	ne
 80059b8:	2301      	movne	r3, #1
 80059ba:	2300      	moveq	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	e008      	b.n	80059d2 <HAL_TIM_PWM_Start+0x9e>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	bf14      	ite	ne
 80059cc:	2301      	movne	r3, #1
 80059ce:	2300      	moveq	r3, #0
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e0a1      	b.n	8005b1e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d104      	bne.n	80059ea <HAL_TIM_PWM_Start+0xb6>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059e8:	e023      	b.n	8005a32 <HAL_TIM_PWM_Start+0xfe>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d104      	bne.n	80059fa <HAL_TIM_PWM_Start+0xc6>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059f8:	e01b      	b.n	8005a32 <HAL_TIM_PWM_Start+0xfe>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d104      	bne.n	8005a0a <HAL_TIM_PWM_Start+0xd6>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a08:	e013      	b.n	8005a32 <HAL_TIM_PWM_Start+0xfe>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b0c      	cmp	r3, #12
 8005a0e:	d104      	bne.n	8005a1a <HAL_TIM_PWM_Start+0xe6>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a18:	e00b      	b.n	8005a32 <HAL_TIM_PWM_Start+0xfe>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b10      	cmp	r3, #16
 8005a1e:	d104      	bne.n	8005a2a <HAL_TIM_PWM_Start+0xf6>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a28:	e003      	b.n	8005a32 <HAL_TIM_PWM_Start+0xfe>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2201      	movs	r2, #1
 8005a38:	6839      	ldr	r1, [r7, #0]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f001 fa7a 	bl	8006f34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a38      	ldr	r2, [pc, #224]	; (8005b28 <HAL_TIM_PWM_Start+0x1f4>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d018      	beq.n	8005a7c <HAL_TIM_PWM_Start+0x148>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a37      	ldr	r2, [pc, #220]	; (8005b2c <HAL_TIM_PWM_Start+0x1f8>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d013      	beq.n	8005a7c <HAL_TIM_PWM_Start+0x148>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a35      	ldr	r2, [pc, #212]	; (8005b30 <HAL_TIM_PWM_Start+0x1fc>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00e      	beq.n	8005a7c <HAL_TIM_PWM_Start+0x148>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a34      	ldr	r2, [pc, #208]	; (8005b34 <HAL_TIM_PWM_Start+0x200>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d009      	beq.n	8005a7c <HAL_TIM_PWM_Start+0x148>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a32      	ldr	r2, [pc, #200]	; (8005b38 <HAL_TIM_PWM_Start+0x204>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d004      	beq.n	8005a7c <HAL_TIM_PWM_Start+0x148>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a31      	ldr	r2, [pc, #196]	; (8005b3c <HAL_TIM_PWM_Start+0x208>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d101      	bne.n	8005a80 <HAL_TIM_PWM_Start+0x14c>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e000      	b.n	8005a82 <HAL_TIM_PWM_Start+0x14e>
 8005a80:	2300      	movs	r3, #0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d007      	beq.n	8005a96 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a23      	ldr	r2, [pc, #140]	; (8005b28 <HAL_TIM_PWM_Start+0x1f4>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d01d      	beq.n	8005adc <HAL_TIM_PWM_Start+0x1a8>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa8:	d018      	beq.n	8005adc <HAL_TIM_PWM_Start+0x1a8>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a24      	ldr	r2, [pc, #144]	; (8005b40 <HAL_TIM_PWM_Start+0x20c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d013      	beq.n	8005adc <HAL_TIM_PWM_Start+0x1a8>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a22      	ldr	r2, [pc, #136]	; (8005b44 <HAL_TIM_PWM_Start+0x210>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d00e      	beq.n	8005adc <HAL_TIM_PWM_Start+0x1a8>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a1a      	ldr	r2, [pc, #104]	; (8005b2c <HAL_TIM_PWM_Start+0x1f8>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d009      	beq.n	8005adc <HAL_TIM_PWM_Start+0x1a8>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a18      	ldr	r2, [pc, #96]	; (8005b30 <HAL_TIM_PWM_Start+0x1fc>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d004      	beq.n	8005adc <HAL_TIM_PWM_Start+0x1a8>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a19      	ldr	r2, [pc, #100]	; (8005b3c <HAL_TIM_PWM_Start+0x208>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d115      	bne.n	8005b08 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689a      	ldr	r2, [r3, #8]
 8005ae2:	4b19      	ldr	r3, [pc, #100]	; (8005b48 <HAL_TIM_PWM_Start+0x214>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2b06      	cmp	r3, #6
 8005aec:	d015      	beq.n	8005b1a <HAL_TIM_PWM_Start+0x1e6>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af4:	d011      	beq.n	8005b1a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f042 0201 	orr.w	r2, r2, #1
 8005b04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b06:	e008      	b.n	8005b1a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0201 	orr.w	r2, r2, #1
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	e000      	b.n	8005b1c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	40012c00 	.word	0x40012c00
 8005b2c:	40013400 	.word	0x40013400
 8005b30:	40014000 	.word	0x40014000
 8005b34:	40014400 	.word	0x40014400
 8005b38:	40014800 	.word	0x40014800
 8005b3c:	40015000 	.word	0x40015000
 8005b40:	40000400 	.word	0x40000400
 8005b44:	40000800 	.word	0x40000800
 8005b48:	00010007 	.word	0x00010007

08005b4c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e049      	b.n	8005bf2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d106      	bne.n	8005b78 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fb fe40 	bl	80017f8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3304      	adds	r3, #4
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4610      	mov	r0, r2
 8005b8c:	f000 fc70 	bl	8006470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d122      	bne.n	8005c56 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d11b      	bne.n	8005c56 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f06f 0202 	mvn.w	r2, #2
 8005c26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	f003 0303 	and.w	r3, r3, #3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7fb fa59 	bl	80010f4 <HAL_TIM_IC_CaptureCallback>
 8005c42:	e005      	b.n	8005c50 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 fbf4 	bl	8006432 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fbfb 	bl	8006446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d122      	bne.n	8005caa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f003 0304 	and.w	r3, r3, #4
 8005c6e:	2b04      	cmp	r3, #4
 8005c70:	d11b      	bne.n	8005caa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f06f 0204 	mvn.w	r2, #4
 8005c7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7fb fa2f 	bl	80010f4 <HAL_TIM_IC_CaptureCallback>
 8005c96:	e005      	b.n	8005ca4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fbca 	bl	8006432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fbd1 	bl	8006446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	f003 0308 	and.w	r3, r3, #8
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d122      	bne.n	8005cfe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f003 0308 	and.w	r3, r3, #8
 8005cc2:	2b08      	cmp	r3, #8
 8005cc4:	d11b      	bne.n	8005cfe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f06f 0208 	mvn.w	r2, #8
 8005cce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2204      	movs	r2, #4
 8005cd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69db      	ldr	r3, [r3, #28]
 8005cdc:	f003 0303 	and.w	r3, r3, #3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7fb fa05 	bl	80010f4 <HAL_TIM_IC_CaptureCallback>
 8005cea:	e005      	b.n	8005cf8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fba0 	bl	8006432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fba7 	bl	8006446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	f003 0310 	and.w	r3, r3, #16
 8005d08:	2b10      	cmp	r3, #16
 8005d0a:	d122      	bne.n	8005d52 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f003 0310 	and.w	r3, r3, #16
 8005d16:	2b10      	cmp	r3, #16
 8005d18:	d11b      	bne.n	8005d52 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f06f 0210 	mvn.w	r2, #16
 8005d22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2208      	movs	r2, #8
 8005d28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69db      	ldr	r3, [r3, #28]
 8005d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d003      	beq.n	8005d40 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7fb f9db 	bl	80010f4 <HAL_TIM_IC_CaptureCallback>
 8005d3e:	e005      	b.n	8005d4c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fb76 	bl	8006432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fb7d 	bl	8006446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d10e      	bne.n	8005d7e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d107      	bne.n	8005d7e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f06f 0201 	mvn.w	r2, #1
 8005d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fb50 	bl	800641e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d88:	2b80      	cmp	r3, #128	; 0x80
 8005d8a:	d10e      	bne.n	8005daa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d96:	2b80      	cmp	r3, #128	; 0x80
 8005d98:	d107      	bne.n	8005daa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f001 fa07 	bl	80071b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005db8:	d10e      	bne.n	8005dd8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc4:	2b80      	cmp	r3, #128	; 0x80
 8005dc6:	d107      	bne.n	8005dd8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f001 f9fa 	bl	80071cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de2:	2b40      	cmp	r3, #64	; 0x40
 8005de4:	d10e      	bne.n	8005e04 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df0:	2b40      	cmp	r3, #64	; 0x40
 8005df2:	d107      	bne.n	8005e04 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 fb2b 	bl	800645a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b20      	cmp	r3, #32
 8005e10:	d10e      	bne.n	8005e30 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f003 0320 	and.w	r3, r3, #32
 8005e1c:	2b20      	cmp	r3, #32
 8005e1e:	d107      	bne.n	8005e30 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f06f 0220 	mvn.w	r2, #32
 8005e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f001 f9ba 	bl	80071a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e30:	bf00      	nop
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e44:	2300      	movs	r3, #0
 8005e46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d101      	bne.n	8005e56 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005e52:	2302      	movs	r3, #2
 8005e54:	e066      	b.n	8005f24 <HAL_TIM_OC_ConfigChannel+0xec>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b14      	cmp	r3, #20
 8005e62:	d857      	bhi.n	8005f14 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005e64:	a201      	add	r2, pc, #4	; (adr r2, 8005e6c <HAL_TIM_OC_ConfigChannel+0x34>)
 8005e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6a:	bf00      	nop
 8005e6c:	08005ec1 	.word	0x08005ec1
 8005e70:	08005f15 	.word	0x08005f15
 8005e74:	08005f15 	.word	0x08005f15
 8005e78:	08005f15 	.word	0x08005f15
 8005e7c:	08005ecf 	.word	0x08005ecf
 8005e80:	08005f15 	.word	0x08005f15
 8005e84:	08005f15 	.word	0x08005f15
 8005e88:	08005f15 	.word	0x08005f15
 8005e8c:	08005edd 	.word	0x08005edd
 8005e90:	08005f15 	.word	0x08005f15
 8005e94:	08005f15 	.word	0x08005f15
 8005e98:	08005f15 	.word	0x08005f15
 8005e9c:	08005eeb 	.word	0x08005eeb
 8005ea0:	08005f15 	.word	0x08005f15
 8005ea4:	08005f15 	.word	0x08005f15
 8005ea8:	08005f15 	.word	0x08005f15
 8005eac:	08005ef9 	.word	0x08005ef9
 8005eb0:	08005f15 	.word	0x08005f15
 8005eb4:	08005f15 	.word	0x08005f15
 8005eb8:	08005f15 	.word	0x08005f15
 8005ebc:	08005f07 	.word	0x08005f07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68b9      	ldr	r1, [r7, #8]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 fb70 	bl	80065ac <TIM_OC1_SetConfig>
      break;
 8005ecc:	e025      	b.n	8005f1a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 fc03 	bl	80066e0 <TIM_OC2_SetConfig>
      break;
 8005eda:	e01e      	b.n	8005f1a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fc90 	bl	8006808 <TIM_OC3_SetConfig>
      break;
 8005ee8:	e017      	b.n	8005f1a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68b9      	ldr	r1, [r7, #8]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 fd1b 	bl	800692c <TIM_OC4_SetConfig>
      break;
 8005ef6:	e010      	b.n	8005f1a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68b9      	ldr	r1, [r7, #8]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fd84 	bl	8006a0c <TIM_OC5_SetConfig>
      break;
 8005f04:	e009      	b.n	8005f1a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68b9      	ldr	r1, [r7, #8]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 fde7 	bl	8006ae0 <TIM_OC6_SetConfig>
      break;
 8005f12:	e002      	b.n	8005f1a <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	75fb      	strb	r3, [r7, #23]
      break;
 8005f18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3718      	adds	r7, #24
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d101      	bne.n	8005f4a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005f46:	2302      	movs	r3, #2
 8005f48:	e088      	b.n	800605c <HAL_TIM_IC_ConfigChannel+0x130>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d11b      	bne.n	8005f90 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6818      	ldr	r0, [r3, #0]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	6819      	ldr	r1, [r3, #0]
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f000 fe26 	bl	8006bb8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	699a      	ldr	r2, [r3, #24]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 020c 	bic.w	r2, r2, #12
 8005f7a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6999      	ldr	r1, [r3, #24]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	689a      	ldr	r2, [r3, #8]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	619a      	str	r2, [r3, #24]
 8005f8e:	e060      	b.n	8006052 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d11c      	bne.n	8005fd0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6818      	ldr	r0, [r3, #0]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	6819      	ldr	r1, [r3, #0]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f000 fea4 	bl	8006cf2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	699a      	ldr	r2, [r3, #24]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005fb8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6999      	ldr	r1, [r3, #24]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	021a      	lsls	r2, r3, #8
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	619a      	str	r2, [r3, #24]
 8005fce:	e040      	b.n	8006052 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b08      	cmp	r3, #8
 8005fd4:	d11b      	bne.n	800600e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6818      	ldr	r0, [r3, #0]
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	6819      	ldr	r1, [r3, #0]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f000 fef1 	bl	8006dcc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69da      	ldr	r2, [r3, #28]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 020c 	bic.w	r2, r2, #12
 8005ff8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69d9      	ldr	r1, [r3, #28]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	689a      	ldr	r2, [r3, #8]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	61da      	str	r2, [r3, #28]
 800600c:	e021      	b.n	8006052 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b0c      	cmp	r3, #12
 8006012:	d11c      	bne.n	800604e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6818      	ldr	r0, [r3, #0]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	6819      	ldr	r1, [r3, #0]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f000 ff0e 	bl	8006e44 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	69da      	ldr	r2, [r3, #28]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006036:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	69d9      	ldr	r1, [r3, #28]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	021a      	lsls	r2, r3, #8
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	61da      	str	r2, [r3, #28]
 800604c:	e001      	b.n	8006052 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800605a:	7dfb      	ldrb	r3, [r7, #23]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3718      	adds	r7, #24
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006070:	2300      	movs	r3, #0
 8006072:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800607a:	2b01      	cmp	r3, #1
 800607c:	d101      	bne.n	8006082 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800607e:	2302      	movs	r3, #2
 8006080:	e0ff      	b.n	8006282 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b14      	cmp	r3, #20
 800608e:	f200 80f0 	bhi.w	8006272 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006092:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006098:	080060ed 	.word	0x080060ed
 800609c:	08006273 	.word	0x08006273
 80060a0:	08006273 	.word	0x08006273
 80060a4:	08006273 	.word	0x08006273
 80060a8:	0800612d 	.word	0x0800612d
 80060ac:	08006273 	.word	0x08006273
 80060b0:	08006273 	.word	0x08006273
 80060b4:	08006273 	.word	0x08006273
 80060b8:	0800616f 	.word	0x0800616f
 80060bc:	08006273 	.word	0x08006273
 80060c0:	08006273 	.word	0x08006273
 80060c4:	08006273 	.word	0x08006273
 80060c8:	080061af 	.word	0x080061af
 80060cc:	08006273 	.word	0x08006273
 80060d0:	08006273 	.word	0x08006273
 80060d4:	08006273 	.word	0x08006273
 80060d8:	080061f1 	.word	0x080061f1
 80060dc:	08006273 	.word	0x08006273
 80060e0:	08006273 	.word	0x08006273
 80060e4:	08006273 	.word	0x08006273
 80060e8:	08006231 	.word	0x08006231
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68b9      	ldr	r1, [r7, #8]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 fa5a 	bl	80065ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699a      	ldr	r2, [r3, #24]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0208 	orr.w	r2, r2, #8
 8006106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699a      	ldr	r2, [r3, #24]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0204 	bic.w	r2, r2, #4
 8006116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6999      	ldr	r1, [r3, #24]
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	691a      	ldr	r2, [r3, #16]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	619a      	str	r2, [r3, #24]
      break;
 800612a:	e0a5      	b.n	8006278 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68b9      	ldr	r1, [r7, #8]
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fad4 	bl	80066e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699a      	ldr	r2, [r3, #24]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006146:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699a      	ldr	r2, [r3, #24]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6999      	ldr	r1, [r3, #24]
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	021a      	lsls	r2, r3, #8
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	619a      	str	r2, [r3, #24]
      break;
 800616c:	e084      	b.n	8006278 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68b9      	ldr	r1, [r7, #8]
 8006174:	4618      	mov	r0, r3
 8006176:	f000 fb47 	bl	8006808 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	69da      	ldr	r2, [r3, #28]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f042 0208 	orr.w	r2, r2, #8
 8006188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69da      	ldr	r2, [r3, #28]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0204 	bic.w	r2, r2, #4
 8006198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69d9      	ldr	r1, [r3, #28]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	691a      	ldr	r2, [r3, #16]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	61da      	str	r2, [r3, #28]
      break;
 80061ac:	e064      	b.n	8006278 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68b9      	ldr	r1, [r7, #8]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 fbb9 	bl	800692c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69da      	ldr	r2, [r3, #28]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69da      	ldr	r2, [r3, #28]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69d9      	ldr	r1, [r3, #28]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	021a      	lsls	r2, r3, #8
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	61da      	str	r2, [r3, #28]
      break;
 80061ee:	e043      	b.n	8006278 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68b9      	ldr	r1, [r7, #8]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 fc08 	bl	8006a0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 0208 	orr.w	r2, r2, #8
 800620a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0204 	bic.w	r2, r2, #4
 800621a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	691a      	ldr	r2, [r3, #16]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800622e:	e023      	b.n	8006278 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68b9      	ldr	r1, [r7, #8]
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fc52 	bl	8006ae0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800624a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800625a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	021a      	lsls	r2, r3, #8
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006270:	e002      	b.n	8006278 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	75fb      	strb	r3, [r7, #23]
      break;
 8006276:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006280:	7dfb      	ldrb	r3, [r7, #23]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop

0800628c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d101      	bne.n	80062a8 <HAL_TIM_ConfigClockSource+0x1c>
 80062a4:	2302      	movs	r3, #2
 80062a6:	e0b6      	b.n	8006416 <HAL_TIM_ConfigClockSource+0x18a>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e4:	d03e      	beq.n	8006364 <HAL_TIM_ConfigClockSource+0xd8>
 80062e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ea:	f200 8087 	bhi.w	80063fc <HAL_TIM_ConfigClockSource+0x170>
 80062ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f2:	f000 8086 	beq.w	8006402 <HAL_TIM_ConfigClockSource+0x176>
 80062f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062fa:	d87f      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x170>
 80062fc:	2b70      	cmp	r3, #112	; 0x70
 80062fe:	d01a      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0xaa>
 8006300:	2b70      	cmp	r3, #112	; 0x70
 8006302:	d87b      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x170>
 8006304:	2b60      	cmp	r3, #96	; 0x60
 8006306:	d050      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x11e>
 8006308:	2b60      	cmp	r3, #96	; 0x60
 800630a:	d877      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x170>
 800630c:	2b50      	cmp	r3, #80	; 0x50
 800630e:	d03c      	beq.n	800638a <HAL_TIM_ConfigClockSource+0xfe>
 8006310:	2b50      	cmp	r3, #80	; 0x50
 8006312:	d873      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x170>
 8006314:	2b40      	cmp	r3, #64	; 0x40
 8006316:	d058      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x13e>
 8006318:	2b40      	cmp	r3, #64	; 0x40
 800631a:	d86f      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x170>
 800631c:	2b30      	cmp	r3, #48	; 0x30
 800631e:	d064      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x15e>
 8006320:	2b30      	cmp	r3, #48	; 0x30
 8006322:	d86b      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x170>
 8006324:	2b20      	cmp	r3, #32
 8006326:	d060      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x15e>
 8006328:	2b20      	cmp	r3, #32
 800632a:	d867      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x170>
 800632c:	2b00      	cmp	r3, #0
 800632e:	d05c      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x15e>
 8006330:	2b10      	cmp	r3, #16
 8006332:	d05a      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x15e>
 8006334:	e062      	b.n	80063fc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6818      	ldr	r0, [r3, #0]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	6899      	ldr	r1, [r3, #8]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f000 fdd5 	bl	8006ef4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006358:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	609a      	str	r2, [r3, #8]
      break;
 8006362:	e04f      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6818      	ldr	r0, [r3, #0]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	6899      	ldr	r1, [r3, #8]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f000 fdbe 	bl	8006ef4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689a      	ldr	r2, [r3, #8]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006386:	609a      	str	r2, [r3, #8]
      break;
 8006388:	e03c      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6818      	ldr	r0, [r3, #0]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	6859      	ldr	r1, [r3, #4]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	461a      	mov	r2, r3
 8006398:	f000 fc7c 	bl	8006c94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2150      	movs	r1, #80	; 0x50
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fd8b 	bl	8006ebe <TIM_ITRx_SetConfig>
      break;
 80063a8:	e02c      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6859      	ldr	r1, [r3, #4]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	461a      	mov	r2, r3
 80063b8:	f000 fcd8 	bl	8006d6c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2160      	movs	r1, #96	; 0x60
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fd7b 	bl	8006ebe <TIM_ITRx_SetConfig>
      break;
 80063c8:	e01c      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6859      	ldr	r1, [r3, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	461a      	mov	r2, r3
 80063d8:	f000 fc5c 	bl	8006c94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2140      	movs	r1, #64	; 0x40
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fd6b 	bl	8006ebe <TIM_ITRx_SetConfig>
      break;
 80063e8:	e00c      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4619      	mov	r1, r3
 80063f4:	4610      	mov	r0, r2
 80063f6:	f000 fd62 	bl	8006ebe <TIM_ITRx_SetConfig>
      break;
 80063fa:	e003      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006400:	e000      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006402:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006414:	7bfb      	ldrb	r3, [r7, #15]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800643a:	bf00      	nop
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
	...

08006470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a42      	ldr	r2, [pc, #264]	; (800658c <TIM_Base_SetConfig+0x11c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d013      	beq.n	80064b0 <TIM_Base_SetConfig+0x40>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800648e:	d00f      	beq.n	80064b0 <TIM_Base_SetConfig+0x40>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a3f      	ldr	r2, [pc, #252]	; (8006590 <TIM_Base_SetConfig+0x120>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00b      	beq.n	80064b0 <TIM_Base_SetConfig+0x40>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a3e      	ldr	r2, [pc, #248]	; (8006594 <TIM_Base_SetConfig+0x124>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d007      	beq.n	80064b0 <TIM_Base_SetConfig+0x40>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a3d      	ldr	r2, [pc, #244]	; (8006598 <TIM_Base_SetConfig+0x128>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d003      	beq.n	80064b0 <TIM_Base_SetConfig+0x40>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a3c      	ldr	r2, [pc, #240]	; (800659c <TIM_Base_SetConfig+0x12c>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d108      	bne.n	80064c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	4313      	orrs	r3, r2
 80064c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a31      	ldr	r2, [pc, #196]	; (800658c <TIM_Base_SetConfig+0x11c>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d01f      	beq.n	800650a <TIM_Base_SetConfig+0x9a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d0:	d01b      	beq.n	800650a <TIM_Base_SetConfig+0x9a>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a2e      	ldr	r2, [pc, #184]	; (8006590 <TIM_Base_SetConfig+0x120>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d017      	beq.n	800650a <TIM_Base_SetConfig+0x9a>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a2d      	ldr	r2, [pc, #180]	; (8006594 <TIM_Base_SetConfig+0x124>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d013      	beq.n	800650a <TIM_Base_SetConfig+0x9a>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a2c      	ldr	r2, [pc, #176]	; (8006598 <TIM_Base_SetConfig+0x128>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d00f      	beq.n	800650a <TIM_Base_SetConfig+0x9a>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a2c      	ldr	r2, [pc, #176]	; (80065a0 <TIM_Base_SetConfig+0x130>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d00b      	beq.n	800650a <TIM_Base_SetConfig+0x9a>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a2b      	ldr	r2, [pc, #172]	; (80065a4 <TIM_Base_SetConfig+0x134>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d007      	beq.n	800650a <TIM_Base_SetConfig+0x9a>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a2a      	ldr	r2, [pc, #168]	; (80065a8 <TIM_Base_SetConfig+0x138>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d003      	beq.n	800650a <TIM_Base_SetConfig+0x9a>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a25      	ldr	r2, [pc, #148]	; (800659c <TIM_Base_SetConfig+0x12c>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d108      	bne.n	800651c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	4313      	orrs	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	4313      	orrs	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a12      	ldr	r2, [pc, #72]	; (800658c <TIM_Base_SetConfig+0x11c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d013      	beq.n	8006570 <TIM_Base_SetConfig+0x100>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a13      	ldr	r2, [pc, #76]	; (8006598 <TIM_Base_SetConfig+0x128>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d00f      	beq.n	8006570 <TIM_Base_SetConfig+0x100>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a13      	ldr	r2, [pc, #76]	; (80065a0 <TIM_Base_SetConfig+0x130>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d00b      	beq.n	8006570 <TIM_Base_SetConfig+0x100>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a12      	ldr	r2, [pc, #72]	; (80065a4 <TIM_Base_SetConfig+0x134>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d007      	beq.n	8006570 <TIM_Base_SetConfig+0x100>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a11      	ldr	r2, [pc, #68]	; (80065a8 <TIM_Base_SetConfig+0x138>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d003      	beq.n	8006570 <TIM_Base_SetConfig+0x100>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a0c      	ldr	r2, [pc, #48]	; (800659c <TIM_Base_SetConfig+0x12c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d103      	bne.n	8006578 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	691a      	ldr	r2, [r3, #16]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	615a      	str	r2, [r3, #20]
}
 800657e:	bf00      	nop
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	40012c00 	.word	0x40012c00
 8006590:	40000400 	.word	0x40000400
 8006594:	40000800 	.word	0x40000800
 8006598:	40013400 	.word	0x40013400
 800659c:	40015000 	.word	0x40015000
 80065a0:	40014000 	.word	0x40014000
 80065a4:	40014400 	.word	0x40014400
 80065a8:	40014800 	.word	0x40014800

080065ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	f023 0201 	bic.w	r2, r3, #1
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0303 	bic.w	r3, r3, #3
 80065e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f023 0302 	bic.w	r3, r3, #2
 80065f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a30      	ldr	r2, [pc, #192]	; (80066c8 <TIM_OC1_SetConfig+0x11c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d013      	beq.n	8006634 <TIM_OC1_SetConfig+0x88>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a2f      	ldr	r2, [pc, #188]	; (80066cc <TIM_OC1_SetConfig+0x120>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00f      	beq.n	8006634 <TIM_OC1_SetConfig+0x88>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a2e      	ldr	r2, [pc, #184]	; (80066d0 <TIM_OC1_SetConfig+0x124>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d00b      	beq.n	8006634 <TIM_OC1_SetConfig+0x88>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a2d      	ldr	r2, [pc, #180]	; (80066d4 <TIM_OC1_SetConfig+0x128>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d007      	beq.n	8006634 <TIM_OC1_SetConfig+0x88>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a2c      	ldr	r2, [pc, #176]	; (80066d8 <TIM_OC1_SetConfig+0x12c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d003      	beq.n	8006634 <TIM_OC1_SetConfig+0x88>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a2b      	ldr	r2, [pc, #172]	; (80066dc <TIM_OC1_SetConfig+0x130>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d10c      	bne.n	800664e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f023 0308 	bic.w	r3, r3, #8
 800663a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	4313      	orrs	r3, r2
 8006644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f023 0304 	bic.w	r3, r3, #4
 800664c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a1d      	ldr	r2, [pc, #116]	; (80066c8 <TIM_OC1_SetConfig+0x11c>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d013      	beq.n	800667e <TIM_OC1_SetConfig+0xd2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a1c      	ldr	r2, [pc, #112]	; (80066cc <TIM_OC1_SetConfig+0x120>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d00f      	beq.n	800667e <TIM_OC1_SetConfig+0xd2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a1b      	ldr	r2, [pc, #108]	; (80066d0 <TIM_OC1_SetConfig+0x124>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d00b      	beq.n	800667e <TIM_OC1_SetConfig+0xd2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a1a      	ldr	r2, [pc, #104]	; (80066d4 <TIM_OC1_SetConfig+0x128>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d007      	beq.n	800667e <TIM_OC1_SetConfig+0xd2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a19      	ldr	r2, [pc, #100]	; (80066d8 <TIM_OC1_SetConfig+0x12c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d003      	beq.n	800667e <TIM_OC1_SetConfig+0xd2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a18      	ldr	r2, [pc, #96]	; (80066dc <TIM_OC1_SetConfig+0x130>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d111      	bne.n	80066a2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800668c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	4313      	orrs	r3, r2
 8006696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	4313      	orrs	r3, r2
 80066a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	621a      	str	r2, [r3, #32]
}
 80066bc:	bf00      	nop
 80066be:	371c      	adds	r7, #28
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	40012c00 	.word	0x40012c00
 80066cc:	40013400 	.word	0x40013400
 80066d0:	40014000 	.word	0x40014000
 80066d4:	40014400 	.word	0x40014400
 80066d8:	40014800 	.word	0x40014800
 80066dc:	40015000 	.word	0x40015000

080066e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	f023 0210 	bic.w	r2, r3, #16
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800670e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800671a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	021b      	lsls	r3, r3, #8
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f023 0320 	bic.w	r3, r3, #32
 800672e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	011b      	lsls	r3, r3, #4
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	4313      	orrs	r3, r2
 800673a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a2c      	ldr	r2, [pc, #176]	; (80067f0 <TIM_OC2_SetConfig+0x110>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d007      	beq.n	8006754 <TIM_OC2_SetConfig+0x74>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a2b      	ldr	r2, [pc, #172]	; (80067f4 <TIM_OC2_SetConfig+0x114>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d003      	beq.n	8006754 <TIM_OC2_SetConfig+0x74>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a2a      	ldr	r2, [pc, #168]	; (80067f8 <TIM_OC2_SetConfig+0x118>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d10d      	bne.n	8006770 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800675a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	011b      	lsls	r3, r3, #4
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	4313      	orrs	r3, r2
 8006766:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800676e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a1f      	ldr	r2, [pc, #124]	; (80067f0 <TIM_OC2_SetConfig+0x110>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d013      	beq.n	80067a0 <TIM_OC2_SetConfig+0xc0>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a1e      	ldr	r2, [pc, #120]	; (80067f4 <TIM_OC2_SetConfig+0x114>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d00f      	beq.n	80067a0 <TIM_OC2_SetConfig+0xc0>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a1e      	ldr	r2, [pc, #120]	; (80067fc <TIM_OC2_SetConfig+0x11c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d00b      	beq.n	80067a0 <TIM_OC2_SetConfig+0xc0>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a1d      	ldr	r2, [pc, #116]	; (8006800 <TIM_OC2_SetConfig+0x120>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d007      	beq.n	80067a0 <TIM_OC2_SetConfig+0xc0>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a1c      	ldr	r2, [pc, #112]	; (8006804 <TIM_OC2_SetConfig+0x124>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d003      	beq.n	80067a0 <TIM_OC2_SetConfig+0xc0>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a17      	ldr	r2, [pc, #92]	; (80067f8 <TIM_OC2_SetConfig+0x118>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d113      	bne.n	80067c8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067a6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067ae:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	621a      	str	r2, [r3, #32]
}
 80067e2:	bf00      	nop
 80067e4:	371c      	adds	r7, #28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	40012c00 	.word	0x40012c00
 80067f4:	40013400 	.word	0x40013400
 80067f8:	40015000 	.word	0x40015000
 80067fc:	40014000 	.word	0x40014000
 8006800:	40014400 	.word	0x40014400
 8006804:	40014800 	.word	0x40014800

08006808 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0303 	bic.w	r3, r3, #3
 8006842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4313      	orrs	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	021b      	lsls	r3, r3, #8
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	4313      	orrs	r3, r2
 8006860:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a2b      	ldr	r2, [pc, #172]	; (8006914 <TIM_OC3_SetConfig+0x10c>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d007      	beq.n	800687a <TIM_OC3_SetConfig+0x72>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a2a      	ldr	r2, [pc, #168]	; (8006918 <TIM_OC3_SetConfig+0x110>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d003      	beq.n	800687a <TIM_OC3_SetConfig+0x72>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a29      	ldr	r2, [pc, #164]	; (800691c <TIM_OC3_SetConfig+0x114>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d10d      	bne.n	8006896 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006880:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	021b      	lsls	r3, r3, #8
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	4313      	orrs	r3, r2
 800688c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006894:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a1e      	ldr	r2, [pc, #120]	; (8006914 <TIM_OC3_SetConfig+0x10c>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d013      	beq.n	80068c6 <TIM_OC3_SetConfig+0xbe>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a1d      	ldr	r2, [pc, #116]	; (8006918 <TIM_OC3_SetConfig+0x110>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d00f      	beq.n	80068c6 <TIM_OC3_SetConfig+0xbe>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a1d      	ldr	r2, [pc, #116]	; (8006920 <TIM_OC3_SetConfig+0x118>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d00b      	beq.n	80068c6 <TIM_OC3_SetConfig+0xbe>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a1c      	ldr	r2, [pc, #112]	; (8006924 <TIM_OC3_SetConfig+0x11c>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d007      	beq.n	80068c6 <TIM_OC3_SetConfig+0xbe>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a1b      	ldr	r2, [pc, #108]	; (8006928 <TIM_OC3_SetConfig+0x120>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d003      	beq.n	80068c6 <TIM_OC3_SetConfig+0xbe>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a16      	ldr	r2, [pc, #88]	; (800691c <TIM_OC3_SetConfig+0x114>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d113      	bne.n	80068ee <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	011b      	lsls	r3, r3, #4
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	4313      	orrs	r3, r2
 80068e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	011b      	lsls	r3, r3, #4
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	621a      	str	r2, [r3, #32]
}
 8006908:	bf00      	nop
 800690a:	371c      	adds	r7, #28
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	40012c00 	.word	0x40012c00
 8006918:	40013400 	.word	0x40013400
 800691c:	40015000 	.word	0x40015000
 8006920:	40014000 	.word	0x40014000
 8006924:	40014400 	.word	0x40014400
 8006928:	40014800 	.word	0x40014800

0800692c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800695a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	021b      	lsls	r3, r3, #8
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	4313      	orrs	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800697a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	031b      	lsls	r3, r3, #12
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	4313      	orrs	r3, r2
 8006986:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a1a      	ldr	r2, [pc, #104]	; (80069f4 <TIM_OC4_SetConfig+0xc8>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d013      	beq.n	80069b8 <TIM_OC4_SetConfig+0x8c>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a19      	ldr	r2, [pc, #100]	; (80069f8 <TIM_OC4_SetConfig+0xcc>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d00f      	beq.n	80069b8 <TIM_OC4_SetConfig+0x8c>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a18      	ldr	r2, [pc, #96]	; (80069fc <TIM_OC4_SetConfig+0xd0>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d00b      	beq.n	80069b8 <TIM_OC4_SetConfig+0x8c>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a17      	ldr	r2, [pc, #92]	; (8006a00 <TIM_OC4_SetConfig+0xd4>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d007      	beq.n	80069b8 <TIM_OC4_SetConfig+0x8c>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a16      	ldr	r2, [pc, #88]	; (8006a04 <TIM_OC4_SetConfig+0xd8>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d003      	beq.n	80069b8 <TIM_OC4_SetConfig+0x8c>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a15      	ldr	r2, [pc, #84]	; (8006a08 <TIM_OC4_SetConfig+0xdc>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d109      	bne.n	80069cc <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	019b      	lsls	r3, r3, #6
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	621a      	str	r2, [r3, #32]
}
 80069e6:	bf00      	nop
 80069e8:	371c      	adds	r7, #28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	40012c00 	.word	0x40012c00
 80069f8:	40013400 	.word	0x40013400
 80069fc:	40014000 	.word	0x40014000
 8006a00:	40014400 	.word	0x40014400
 8006a04:	40014800 	.word	0x40014800
 8006a08:	40015000 	.word	0x40015000

08006a0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	041b      	lsls	r3, r3, #16
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a19      	ldr	r2, [pc, #100]	; (8006ac8 <TIM_OC5_SetConfig+0xbc>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d013      	beq.n	8006a8e <TIM_OC5_SetConfig+0x82>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a18      	ldr	r2, [pc, #96]	; (8006acc <TIM_OC5_SetConfig+0xc0>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d00f      	beq.n	8006a8e <TIM_OC5_SetConfig+0x82>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a17      	ldr	r2, [pc, #92]	; (8006ad0 <TIM_OC5_SetConfig+0xc4>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d00b      	beq.n	8006a8e <TIM_OC5_SetConfig+0x82>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a16      	ldr	r2, [pc, #88]	; (8006ad4 <TIM_OC5_SetConfig+0xc8>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d007      	beq.n	8006a8e <TIM_OC5_SetConfig+0x82>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a15      	ldr	r2, [pc, #84]	; (8006ad8 <TIM_OC5_SetConfig+0xcc>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d003      	beq.n	8006a8e <TIM_OC5_SetConfig+0x82>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a14      	ldr	r2, [pc, #80]	; (8006adc <TIM_OC5_SetConfig+0xd0>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d109      	bne.n	8006aa2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	021b      	lsls	r3, r3, #8
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	621a      	str	r2, [r3, #32]
}
 8006abc:	bf00      	nop
 8006abe:	371c      	adds	r7, #28
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	40012c00 	.word	0x40012c00
 8006acc:	40013400 	.word	0x40013400
 8006ad0:	40014000 	.word	0x40014000
 8006ad4:	40014400 	.word	0x40014400
 8006ad8:	40014800 	.word	0x40014800
 8006adc:	40015000 	.word	0x40015000

08006ae0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b087      	sub	sp, #28
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	021b      	lsls	r3, r3, #8
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	051b      	lsls	r3, r3, #20
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a1a      	ldr	r2, [pc, #104]	; (8006ba0 <TIM_OC6_SetConfig+0xc0>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d013      	beq.n	8006b64 <TIM_OC6_SetConfig+0x84>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a19      	ldr	r2, [pc, #100]	; (8006ba4 <TIM_OC6_SetConfig+0xc4>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d00f      	beq.n	8006b64 <TIM_OC6_SetConfig+0x84>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a18      	ldr	r2, [pc, #96]	; (8006ba8 <TIM_OC6_SetConfig+0xc8>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d00b      	beq.n	8006b64 <TIM_OC6_SetConfig+0x84>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a17      	ldr	r2, [pc, #92]	; (8006bac <TIM_OC6_SetConfig+0xcc>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d007      	beq.n	8006b64 <TIM_OC6_SetConfig+0x84>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a16      	ldr	r2, [pc, #88]	; (8006bb0 <TIM_OC6_SetConfig+0xd0>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d003      	beq.n	8006b64 <TIM_OC6_SetConfig+0x84>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a15      	ldr	r2, [pc, #84]	; (8006bb4 <TIM_OC6_SetConfig+0xd4>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d109      	bne.n	8006b78 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	029b      	lsls	r3, r3, #10
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	621a      	str	r2, [r3, #32]
}
 8006b92:	bf00      	nop
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	40012c00 	.word	0x40012c00
 8006ba4:	40013400 	.word	0x40013400
 8006ba8:	40014000 	.word	0x40014000
 8006bac:	40014400 	.word	0x40014400
 8006bb0:	40014800 	.word	0x40014800
 8006bb4:	40015000 	.word	0x40015000

08006bb8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	f023 0201 	bic.w	r2, r3, #1
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4a26      	ldr	r2, [pc, #152]	; (8006c7c <TIM_TI1_SetConfig+0xc4>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d017      	beq.n	8006c16 <TIM_TI1_SetConfig+0x5e>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bec:	d013      	beq.n	8006c16 <TIM_TI1_SetConfig+0x5e>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	4a23      	ldr	r2, [pc, #140]	; (8006c80 <TIM_TI1_SetConfig+0xc8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d00f      	beq.n	8006c16 <TIM_TI1_SetConfig+0x5e>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	4a22      	ldr	r2, [pc, #136]	; (8006c84 <TIM_TI1_SetConfig+0xcc>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00b      	beq.n	8006c16 <TIM_TI1_SetConfig+0x5e>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	4a21      	ldr	r2, [pc, #132]	; (8006c88 <TIM_TI1_SetConfig+0xd0>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d007      	beq.n	8006c16 <TIM_TI1_SetConfig+0x5e>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4a20      	ldr	r2, [pc, #128]	; (8006c8c <TIM_TI1_SetConfig+0xd4>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d003      	beq.n	8006c16 <TIM_TI1_SetConfig+0x5e>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4a1f      	ldr	r2, [pc, #124]	; (8006c90 <TIM_TI1_SetConfig+0xd8>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d101      	bne.n	8006c1a <TIM_TI1_SetConfig+0x62>
 8006c16:	2301      	movs	r3, #1
 8006c18:	e000      	b.n	8006c1c <TIM_TI1_SetConfig+0x64>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d008      	beq.n	8006c32 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f023 0303 	bic.w	r3, r3, #3
 8006c26:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	617b      	str	r3, [r7, #20]
 8006c30:	e003      	b.n	8006c3a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f043 0301 	orr.w	r3, r3, #1
 8006c38:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	011b      	lsls	r3, r3, #4
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f023 030a 	bic.w	r3, r3, #10
 8006c54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	f003 030a 	and.w	r3, r3, #10
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	621a      	str	r2, [r3, #32]
}
 8006c6e:	bf00      	nop
 8006c70:	371c      	adds	r7, #28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	40012c00 	.word	0x40012c00
 8006c80:	40000400 	.word	0x40000400
 8006c84:	40000800 	.word	0x40000800
 8006c88:	40013400 	.word	0x40013400
 8006c8c:	40014000 	.word	0x40014000
 8006c90:	40015000 	.word	0x40015000

08006c94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	f023 0201 	bic.w	r2, r3, #1
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	011b      	lsls	r3, r3, #4
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f023 030a 	bic.w	r3, r3, #10
 8006cd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	621a      	str	r2, [r3, #32]
}
 8006ce6:	bf00      	nop
 8006ce8:	371c      	adds	r7, #28
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b087      	sub	sp, #28
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	60f8      	str	r0, [r7, #12]
 8006cfa:	60b9      	str	r1, [r7, #8]
 8006cfc:	607a      	str	r2, [r7, #4]
 8006cfe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	f023 0210 	bic.w	r2, r3, #16
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	021b      	lsls	r3, r3, #8
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	031b      	lsls	r3, r3, #12
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d44:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	011b      	lsls	r3, r3, #4
 8006d4a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	621a      	str	r2, [r3, #32]
}
 8006d60:	bf00      	nop
 8006d62:	371c      	adds	r7, #28
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	f023 0210 	bic.w	r2, r3, #16
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	031b      	lsls	r3, r3, #12
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006da8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	011b      	lsls	r3, r3, #4
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	621a      	str	r2, [r3, #32]
}
 8006dc0:	bf00      	nop
 8006dc2:	371c      	adds	r7, #28
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
 8006dd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f023 0303 	bic.w	r3, r3, #3
 8006df8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	011b      	lsls	r3, r3, #4
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006e1c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	021b      	lsls	r3, r3, #8
 8006e22:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	621a      	str	r2, [r3, #32]
}
 8006e38:	bf00      	nop
 8006e3a:	371c      	adds	r7, #28
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	021b      	lsls	r3, r3, #8
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e82:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	031b      	lsls	r3, r3, #12
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006e96:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	031b      	lsls	r3, r3, #12
 8006e9c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	621a      	str	r2, [r3, #32]
}
 8006eb2:	bf00      	nop
 8006eb4:	371c      	adds	r7, #28
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b085      	sub	sp, #20
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	f043 0307 	orr.w	r3, r3, #7
 8006ee0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	609a      	str	r2, [r3, #8]
}
 8006ee8:	bf00      	nop
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
 8006f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	021a      	lsls	r2, r3, #8
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	431a      	orrs	r2, r3
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	697a      	ldr	r2, [r7, #20]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	609a      	str	r2, [r3, #8]
}
 8006f28:	bf00      	nop
 8006f2a:	371c      	adds	r7, #28
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f003 031f 	and.w	r3, r3, #31
 8006f46:	2201      	movs	r2, #1
 8006f48:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6a1a      	ldr	r2, [r3, #32]
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	43db      	mvns	r3, r3
 8006f56:	401a      	ands	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6a1a      	ldr	r2, [r3, #32]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f003 031f 	and.w	r3, r3, #31
 8006f66:	6879      	ldr	r1, [r7, #4]
 8006f68:	fa01 f303 	lsl.w	r3, r1, r3
 8006f6c:	431a      	orrs	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	621a      	str	r2, [r3, #32]
}
 8006f72:	bf00      	nop
 8006f74:	371c      	adds	r7, #28
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
	...

08006f80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d101      	bne.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f94:	2302      	movs	r3, #2
 8006f96:	e06d      	b.n	8007074 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a30      	ldr	r2, [pc, #192]	; (8007080 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d009      	beq.n	8006fd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a2f      	ldr	r2, [pc, #188]	; (8007084 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d004      	beq.n	8006fd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a2d      	ldr	r2, [pc, #180]	; (8007088 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d108      	bne.n	8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006fdc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a1e      	ldr	r2, [pc, #120]	; (8007080 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d01d      	beq.n	8007048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007014:	d018      	beq.n	8007048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a1c      	ldr	r2, [pc, #112]	; (800708c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d013      	beq.n	8007048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a1a      	ldr	r2, [pc, #104]	; (8007090 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d00e      	beq.n	8007048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a15      	ldr	r2, [pc, #84]	; (8007084 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d009      	beq.n	8007048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a16      	ldr	r2, [pc, #88]	; (8007094 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d004      	beq.n	8007048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a11      	ldr	r2, [pc, #68]	; (8007088 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d10c      	bne.n	8007062 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800704e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	4313      	orrs	r3, r2
 8007058:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	40012c00 	.word	0x40012c00
 8007084:	40013400 	.word	0x40013400
 8007088:	40015000 	.word	0x40015000
 800708c:	40000400 	.word	0x40000400
 8007090:	40000800 	.word	0x40000800
 8007094:	40014000 	.word	0x40014000

08007098 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070a2:	2300      	movs	r3, #0
 80070a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d101      	bne.n	80070b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070b0:	2302      	movs	r3, #2
 80070b2:	e06a      	b.n	800718a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	4313      	orrs	r3, r2
 8007100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	4313      	orrs	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711a:	4313      	orrs	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	041b      	lsls	r3, r3, #16
 800712a:	4313      	orrs	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a19      	ldr	r2, [pc, #100]	; (8007198 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d009      	beq.n	800714c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a17      	ldr	r2, [pc, #92]	; (800719c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d004      	beq.n	800714c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a16      	ldr	r2, [pc, #88]	; (80071a0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d115      	bne.n	8007178 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007156:	051b      	lsls	r3, r3, #20
 8007158:	4313      	orrs	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	4313      	orrs	r3, r2
 8007168:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	4313      	orrs	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	40012c00 	.word	0x40012c00
 800719c:	40013400 	.word	0x40013400
 80071a0:	40015000 	.word	0x40015000

080071a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e040      	b.n	8007274 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d106      	bne.n	8007208 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7fa fd3a 	bl	8001c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2224      	movs	r2, #36	; 0x24
 800720c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f022 0201 	bic.w	r2, r2, #1
 800721c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f82c 	bl	800727c <UART_SetConfig>
 8007224:	4603      	mov	r3, r0
 8007226:	2b01      	cmp	r3, #1
 8007228:	d101      	bne.n	800722e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e022      	b.n	8007274 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007232:	2b00      	cmp	r3, #0
 8007234:	d002      	beq.n	800723c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f9f6 	bl	8007628 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800724a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689a      	ldr	r2, [r3, #8]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800725a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f042 0201 	orr.w	r2, r2, #1
 800726a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fa7d 	bl	800776c <UART_CheckIdleState>
 8007272:	4603      	mov	r3, r0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b088      	sub	sp, #32
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689a      	ldr	r2, [r3, #8]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	431a      	orrs	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	431a      	orrs	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	69db      	ldr	r3, [r3, #28]
 800729c:	4313      	orrs	r3, r2
 800729e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	4b92      	ldr	r3, [pc, #584]	; (80074f0 <UART_SetConfig+0x274>)
 80072a8:	4013      	ands	r3, r2
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	6812      	ldr	r2, [r2, #0]
 80072ae:	6979      	ldr	r1, [r7, #20]
 80072b0:	430b      	orrs	r3, r1
 80072b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a80      	ldr	r2, [pc, #512]	; (80074f4 <UART_SetConfig+0x278>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d120      	bne.n	800733a <UART_SetConfig+0xbe>
 80072f8:	4b7f      	ldr	r3, [pc, #508]	; (80074f8 <UART_SetConfig+0x27c>)
 80072fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fc:	f003 0303 	and.w	r3, r3, #3
 8007300:	2b03      	cmp	r3, #3
 8007302:	d817      	bhi.n	8007334 <UART_SetConfig+0xb8>
 8007304:	a201      	add	r2, pc, #4	; (adr r2, 800730c <UART_SetConfig+0x90>)
 8007306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730a:	bf00      	nop
 800730c:	0800731d 	.word	0x0800731d
 8007310:	08007329 	.word	0x08007329
 8007314:	0800732f 	.word	0x0800732f
 8007318:	08007323 	.word	0x08007323
 800731c:	2301      	movs	r3, #1
 800731e:	77fb      	strb	r3, [r7, #31]
 8007320:	e0b5      	b.n	800748e <UART_SetConfig+0x212>
 8007322:	2302      	movs	r3, #2
 8007324:	77fb      	strb	r3, [r7, #31]
 8007326:	e0b2      	b.n	800748e <UART_SetConfig+0x212>
 8007328:	2304      	movs	r3, #4
 800732a:	77fb      	strb	r3, [r7, #31]
 800732c:	e0af      	b.n	800748e <UART_SetConfig+0x212>
 800732e:	2308      	movs	r3, #8
 8007330:	77fb      	strb	r3, [r7, #31]
 8007332:	e0ac      	b.n	800748e <UART_SetConfig+0x212>
 8007334:	2310      	movs	r3, #16
 8007336:	77fb      	strb	r3, [r7, #31]
 8007338:	e0a9      	b.n	800748e <UART_SetConfig+0x212>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a6f      	ldr	r2, [pc, #444]	; (80074fc <UART_SetConfig+0x280>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d124      	bne.n	800738e <UART_SetConfig+0x112>
 8007344:	4b6c      	ldr	r3, [pc, #432]	; (80074f8 <UART_SetConfig+0x27c>)
 8007346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007348:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800734c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007350:	d011      	beq.n	8007376 <UART_SetConfig+0xfa>
 8007352:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007356:	d817      	bhi.n	8007388 <UART_SetConfig+0x10c>
 8007358:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800735c:	d011      	beq.n	8007382 <UART_SetConfig+0x106>
 800735e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007362:	d811      	bhi.n	8007388 <UART_SetConfig+0x10c>
 8007364:	2b00      	cmp	r3, #0
 8007366:	d003      	beq.n	8007370 <UART_SetConfig+0xf4>
 8007368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800736c:	d006      	beq.n	800737c <UART_SetConfig+0x100>
 800736e:	e00b      	b.n	8007388 <UART_SetConfig+0x10c>
 8007370:	2300      	movs	r3, #0
 8007372:	77fb      	strb	r3, [r7, #31]
 8007374:	e08b      	b.n	800748e <UART_SetConfig+0x212>
 8007376:	2302      	movs	r3, #2
 8007378:	77fb      	strb	r3, [r7, #31]
 800737a:	e088      	b.n	800748e <UART_SetConfig+0x212>
 800737c:	2304      	movs	r3, #4
 800737e:	77fb      	strb	r3, [r7, #31]
 8007380:	e085      	b.n	800748e <UART_SetConfig+0x212>
 8007382:	2308      	movs	r3, #8
 8007384:	77fb      	strb	r3, [r7, #31]
 8007386:	e082      	b.n	800748e <UART_SetConfig+0x212>
 8007388:	2310      	movs	r3, #16
 800738a:	77fb      	strb	r3, [r7, #31]
 800738c:	e07f      	b.n	800748e <UART_SetConfig+0x212>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a5b      	ldr	r2, [pc, #364]	; (8007500 <UART_SetConfig+0x284>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d124      	bne.n	80073e2 <UART_SetConfig+0x166>
 8007398:	4b57      	ldr	r3, [pc, #348]	; (80074f8 <UART_SetConfig+0x27c>)
 800739a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80073a0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80073a4:	d011      	beq.n	80073ca <UART_SetConfig+0x14e>
 80073a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80073aa:	d817      	bhi.n	80073dc <UART_SetConfig+0x160>
 80073ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80073b0:	d011      	beq.n	80073d6 <UART_SetConfig+0x15a>
 80073b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80073b6:	d811      	bhi.n	80073dc <UART_SetConfig+0x160>
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d003      	beq.n	80073c4 <UART_SetConfig+0x148>
 80073bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80073c0:	d006      	beq.n	80073d0 <UART_SetConfig+0x154>
 80073c2:	e00b      	b.n	80073dc <UART_SetConfig+0x160>
 80073c4:	2300      	movs	r3, #0
 80073c6:	77fb      	strb	r3, [r7, #31]
 80073c8:	e061      	b.n	800748e <UART_SetConfig+0x212>
 80073ca:	2302      	movs	r3, #2
 80073cc:	77fb      	strb	r3, [r7, #31]
 80073ce:	e05e      	b.n	800748e <UART_SetConfig+0x212>
 80073d0:	2304      	movs	r3, #4
 80073d2:	77fb      	strb	r3, [r7, #31]
 80073d4:	e05b      	b.n	800748e <UART_SetConfig+0x212>
 80073d6:	2308      	movs	r3, #8
 80073d8:	77fb      	strb	r3, [r7, #31]
 80073da:	e058      	b.n	800748e <UART_SetConfig+0x212>
 80073dc:	2310      	movs	r3, #16
 80073de:	77fb      	strb	r3, [r7, #31]
 80073e0:	e055      	b.n	800748e <UART_SetConfig+0x212>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a47      	ldr	r2, [pc, #284]	; (8007504 <UART_SetConfig+0x288>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d124      	bne.n	8007436 <UART_SetConfig+0x1ba>
 80073ec:	4b42      	ldr	r3, [pc, #264]	; (80074f8 <UART_SetConfig+0x27c>)
 80073ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80073f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073f8:	d011      	beq.n	800741e <UART_SetConfig+0x1a2>
 80073fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073fe:	d817      	bhi.n	8007430 <UART_SetConfig+0x1b4>
 8007400:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007404:	d011      	beq.n	800742a <UART_SetConfig+0x1ae>
 8007406:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800740a:	d811      	bhi.n	8007430 <UART_SetConfig+0x1b4>
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <UART_SetConfig+0x19c>
 8007410:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007414:	d006      	beq.n	8007424 <UART_SetConfig+0x1a8>
 8007416:	e00b      	b.n	8007430 <UART_SetConfig+0x1b4>
 8007418:	2300      	movs	r3, #0
 800741a:	77fb      	strb	r3, [r7, #31]
 800741c:	e037      	b.n	800748e <UART_SetConfig+0x212>
 800741e:	2302      	movs	r3, #2
 8007420:	77fb      	strb	r3, [r7, #31]
 8007422:	e034      	b.n	800748e <UART_SetConfig+0x212>
 8007424:	2304      	movs	r3, #4
 8007426:	77fb      	strb	r3, [r7, #31]
 8007428:	e031      	b.n	800748e <UART_SetConfig+0x212>
 800742a:	2308      	movs	r3, #8
 800742c:	77fb      	strb	r3, [r7, #31]
 800742e:	e02e      	b.n	800748e <UART_SetConfig+0x212>
 8007430:	2310      	movs	r3, #16
 8007432:	77fb      	strb	r3, [r7, #31]
 8007434:	e02b      	b.n	800748e <UART_SetConfig+0x212>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a33      	ldr	r2, [pc, #204]	; (8007508 <UART_SetConfig+0x28c>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d124      	bne.n	800748a <UART_SetConfig+0x20e>
 8007440:	4b2d      	ldr	r3, [pc, #180]	; (80074f8 <UART_SetConfig+0x27c>)
 8007442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007444:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007448:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800744c:	d011      	beq.n	8007472 <UART_SetConfig+0x1f6>
 800744e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007452:	d817      	bhi.n	8007484 <UART_SetConfig+0x208>
 8007454:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007458:	d011      	beq.n	800747e <UART_SetConfig+0x202>
 800745a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800745e:	d811      	bhi.n	8007484 <UART_SetConfig+0x208>
 8007460:	2b00      	cmp	r3, #0
 8007462:	d003      	beq.n	800746c <UART_SetConfig+0x1f0>
 8007464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007468:	d006      	beq.n	8007478 <UART_SetConfig+0x1fc>
 800746a:	e00b      	b.n	8007484 <UART_SetConfig+0x208>
 800746c:	2300      	movs	r3, #0
 800746e:	77fb      	strb	r3, [r7, #31]
 8007470:	e00d      	b.n	800748e <UART_SetConfig+0x212>
 8007472:	2302      	movs	r3, #2
 8007474:	77fb      	strb	r3, [r7, #31]
 8007476:	e00a      	b.n	800748e <UART_SetConfig+0x212>
 8007478:	2304      	movs	r3, #4
 800747a:	77fb      	strb	r3, [r7, #31]
 800747c:	e007      	b.n	800748e <UART_SetConfig+0x212>
 800747e:	2308      	movs	r3, #8
 8007480:	77fb      	strb	r3, [r7, #31]
 8007482:	e004      	b.n	800748e <UART_SetConfig+0x212>
 8007484:	2310      	movs	r3, #16
 8007486:	77fb      	strb	r3, [r7, #31]
 8007488:	e001      	b.n	800748e <UART_SetConfig+0x212>
 800748a:	2310      	movs	r3, #16
 800748c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007496:	d16c      	bne.n	8007572 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8007498:	7ffb      	ldrb	r3, [r7, #31]
 800749a:	2b08      	cmp	r3, #8
 800749c:	d838      	bhi.n	8007510 <UART_SetConfig+0x294>
 800749e:	a201      	add	r2, pc, #4	; (adr r2, 80074a4 <UART_SetConfig+0x228>)
 80074a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a4:	080074c9 	.word	0x080074c9
 80074a8:	080074d1 	.word	0x080074d1
 80074ac:	080074d9 	.word	0x080074d9
 80074b0:	08007511 	.word	0x08007511
 80074b4:	080074df 	.word	0x080074df
 80074b8:	08007511 	.word	0x08007511
 80074bc:	08007511 	.word	0x08007511
 80074c0:	08007511 	.word	0x08007511
 80074c4:	080074e7 	.word	0x080074e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074c8:	f7fd fdc0 	bl	800504c <HAL_RCC_GetPCLK1Freq>
 80074cc:	61b8      	str	r0, [r7, #24]
        break;
 80074ce:	e024      	b.n	800751a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074d0:	f7fd fdde 	bl	8005090 <HAL_RCC_GetPCLK2Freq>
 80074d4:	61b8      	str	r0, [r7, #24]
        break;
 80074d6:	e020      	b.n	800751a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074d8:	4b0c      	ldr	r3, [pc, #48]	; (800750c <UART_SetConfig+0x290>)
 80074da:	61bb      	str	r3, [r7, #24]
        break;
 80074dc:	e01d      	b.n	800751a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074de:	f7fd fd3f 	bl	8004f60 <HAL_RCC_GetSysClockFreq>
 80074e2:	61b8      	str	r0, [r7, #24]
        break;
 80074e4:	e019      	b.n	800751a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ea:	61bb      	str	r3, [r7, #24]
        break;
 80074ec:	e015      	b.n	800751a <UART_SetConfig+0x29e>
 80074ee:	bf00      	nop
 80074f0:	efff69f3 	.word	0xefff69f3
 80074f4:	40013800 	.word	0x40013800
 80074f8:	40021000 	.word	0x40021000
 80074fc:	40004400 	.word	0x40004400
 8007500:	40004800 	.word	0x40004800
 8007504:	40004c00 	.word	0x40004c00
 8007508:	40005000 	.word	0x40005000
 800750c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	77bb      	strb	r3, [r7, #30]
        break;
 8007518:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d075      	beq.n	800760c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	005a      	lsls	r2, r3, #1
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	085b      	lsrs	r3, r3, #1
 800752a:	441a      	add	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	fbb2 f3f3 	udiv	r3, r2, r3
 8007534:	b29b      	uxth	r3, r3
 8007536:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	2b0f      	cmp	r3, #15
 800753c:	d916      	bls.n	800756c <UART_SetConfig+0x2f0>
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007544:	d212      	bcs.n	800756c <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	b29b      	uxth	r3, r3
 800754a:	f023 030f 	bic.w	r3, r3, #15
 800754e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	085b      	lsrs	r3, r3, #1
 8007554:	b29b      	uxth	r3, r3
 8007556:	f003 0307 	and.w	r3, r3, #7
 800755a:	b29a      	uxth	r2, r3
 800755c:	89fb      	ldrh	r3, [r7, #14]
 800755e:	4313      	orrs	r3, r2
 8007560:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	89fa      	ldrh	r2, [r7, #14]
 8007568:	60da      	str	r2, [r3, #12]
 800756a:	e04f      	b.n	800760c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	77bb      	strb	r3, [r7, #30]
 8007570:	e04c      	b.n	800760c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007572:	7ffb      	ldrb	r3, [r7, #31]
 8007574:	2b08      	cmp	r3, #8
 8007576:	d828      	bhi.n	80075ca <UART_SetConfig+0x34e>
 8007578:	a201      	add	r2, pc, #4	; (adr r2, 8007580 <UART_SetConfig+0x304>)
 800757a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757e:	bf00      	nop
 8007580:	080075a5 	.word	0x080075a5
 8007584:	080075ad 	.word	0x080075ad
 8007588:	080075b5 	.word	0x080075b5
 800758c:	080075cb 	.word	0x080075cb
 8007590:	080075bb 	.word	0x080075bb
 8007594:	080075cb 	.word	0x080075cb
 8007598:	080075cb 	.word	0x080075cb
 800759c:	080075cb 	.word	0x080075cb
 80075a0:	080075c3 	.word	0x080075c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075a4:	f7fd fd52 	bl	800504c <HAL_RCC_GetPCLK1Freq>
 80075a8:	61b8      	str	r0, [r7, #24]
        break;
 80075aa:	e013      	b.n	80075d4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075ac:	f7fd fd70 	bl	8005090 <HAL_RCC_GetPCLK2Freq>
 80075b0:	61b8      	str	r0, [r7, #24]
        break;
 80075b2:	e00f      	b.n	80075d4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075b4:	4b1b      	ldr	r3, [pc, #108]	; (8007624 <UART_SetConfig+0x3a8>)
 80075b6:	61bb      	str	r3, [r7, #24]
        break;
 80075b8:	e00c      	b.n	80075d4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075ba:	f7fd fcd1 	bl	8004f60 <HAL_RCC_GetSysClockFreq>
 80075be:	61b8      	str	r0, [r7, #24]
        break;
 80075c0:	e008      	b.n	80075d4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075c6:	61bb      	str	r3, [r7, #24]
        break;
 80075c8:	e004      	b.n	80075d4 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80075ca:	2300      	movs	r3, #0
 80075cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	77bb      	strb	r3, [r7, #30]
        break;
 80075d2:	bf00      	nop
    }

    if (pclk != 0U)
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d018      	beq.n	800760c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	085a      	lsrs	r2, r3, #1
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	441a      	add	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	2b0f      	cmp	r3, #15
 80075f4:	d908      	bls.n	8007608 <UART_SetConfig+0x38c>
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075fc:	d204      	bcs.n	8007608 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	693a      	ldr	r2, [r7, #16]
 8007604:	60da      	str	r2, [r3, #12]
 8007606:	e001      	b.n	800760c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007618:	7fbb      	ldrb	r3, [r7, #30]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3720      	adds	r7, #32
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	007a1200 	.word	0x007a1200

08007628 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00a      	beq.n	8007652 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007656:	f003 0302 	and.w	r3, r3, #2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	430a      	orrs	r2, r1
 8007672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	f003 0304 	and.w	r3, r3, #4
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00a      	beq.n	8007696 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769a:	f003 0308 	and.w	r3, r3, #8
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	f003 0310 	and.w	r3, r3, #16
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00a      	beq.n	80076da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007704:	2b00      	cmp	r3, #0
 8007706:	d01a      	beq.n	800773e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007726:	d10a      	bne.n	800773e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00a      	beq.n	8007760 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	430a      	orrs	r2, r1
 800775e:	605a      	str	r2, [r3, #4]
  }
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af02      	add	r7, sp, #8
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800777c:	f7fa fca4 	bl	80020c8 <HAL_GetTick>
 8007780:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0308 	and.w	r3, r3, #8
 800778c:	2b08      	cmp	r3, #8
 800778e:	d10e      	bne.n	80077ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007790:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f82d 	bl	80077fe <UART_WaitOnFlagUntilTimeout>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e023      	b.n	80077f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0304 	and.w	r3, r3, #4
 80077b8:	2b04      	cmp	r3, #4
 80077ba:	d10e      	bne.n	80077da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f817 	bl	80077fe <UART_WaitOnFlagUntilTimeout>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e00d      	b.n	80077f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2220      	movs	r2, #32
 80077de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2220      	movs	r2, #32
 80077e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b09c      	sub	sp, #112	; 0x70
 8007802:	af00      	add	r7, sp, #0
 8007804:	60f8      	str	r0, [r7, #12]
 8007806:	60b9      	str	r1, [r7, #8]
 8007808:	603b      	str	r3, [r7, #0]
 800780a:	4613      	mov	r3, r2
 800780c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800780e:	e0a5      	b.n	800795c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007816:	f000 80a1 	beq.w	800795c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800781a:	f7fa fc55 	bl	80020c8 <HAL_GetTick>
 800781e:	4602      	mov	r2, r0
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007826:	429a      	cmp	r2, r3
 8007828:	d302      	bcc.n	8007830 <UART_WaitOnFlagUntilTimeout+0x32>
 800782a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800782c:	2b00      	cmp	r3, #0
 800782e:	d13e      	bne.n	80078ae <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007838:	e853 3f00 	ldrex	r3, [r3]
 800783c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800783e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007840:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007844:	667b      	str	r3, [r7, #100]	; 0x64
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	461a      	mov	r2, r3
 800784c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800784e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007850:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007852:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007854:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007856:	e841 2300 	strex	r3, r2, [r1]
 800785a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800785c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1e6      	bne.n	8007830 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3308      	adds	r3, #8
 8007868:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800786c:	e853 3f00 	ldrex	r3, [r3]
 8007870:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007874:	f023 0301 	bic.w	r3, r3, #1
 8007878:	663b      	str	r3, [r7, #96]	; 0x60
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	3308      	adds	r3, #8
 8007880:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007882:	64ba      	str	r2, [r7, #72]	; 0x48
 8007884:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007886:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007888:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800788a:	e841 2300 	strex	r3, r2, [r1]
 800788e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1e5      	bne.n	8007862 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2220      	movs	r2, #32
 800789a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2220      	movs	r2, #32
 80078a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e067      	b.n	800797e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0304 	and.w	r3, r3, #4
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d04f      	beq.n	800795c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078ca:	d147      	bne.n	800795c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078de:	e853 3f00 	ldrex	r3, [r3]
 80078e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	461a      	mov	r2, r3
 80078f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078f4:	637b      	str	r3, [r7, #52]	; 0x34
 80078f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078fc:	e841 2300 	strex	r3, r2, [r1]
 8007900:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1e6      	bne.n	80078d6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	3308      	adds	r3, #8
 800790e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	e853 3f00 	ldrex	r3, [r3]
 8007916:	613b      	str	r3, [r7, #16]
   return(result);
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	f023 0301 	bic.w	r3, r3, #1
 800791e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3308      	adds	r3, #8
 8007926:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007928:	623a      	str	r2, [r7, #32]
 800792a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792c:	69f9      	ldr	r1, [r7, #28]
 800792e:	6a3a      	ldr	r2, [r7, #32]
 8007930:	e841 2300 	strex	r3, r2, [r1]
 8007934:	61bb      	str	r3, [r7, #24]
   return(result);
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1e5      	bne.n	8007908 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2220      	movs	r2, #32
 8007940:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2220      	movs	r2, #32
 8007946:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2220      	movs	r2, #32
 800794c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	e010      	b.n	800797e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	69da      	ldr	r2, [r3, #28]
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	4013      	ands	r3, r2
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	429a      	cmp	r2, r3
 800796a:	bf0c      	ite	eq
 800796c:	2301      	moveq	r3, #1
 800796e:	2300      	movne	r3, #0
 8007970:	b2db      	uxtb	r3, r3
 8007972:	461a      	mov	r2, r3
 8007974:	79fb      	ldrb	r3, [r7, #7]
 8007976:	429a      	cmp	r2, r3
 8007978:	f43f af4a 	beq.w	8007810 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3770      	adds	r7, #112	; 0x70
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
	...

08007988 <__libc_init_array>:
 8007988:	b570      	push	{r4, r5, r6, lr}
 800798a:	4d0d      	ldr	r5, [pc, #52]	; (80079c0 <__libc_init_array+0x38>)
 800798c:	4c0d      	ldr	r4, [pc, #52]	; (80079c4 <__libc_init_array+0x3c>)
 800798e:	1b64      	subs	r4, r4, r5
 8007990:	10a4      	asrs	r4, r4, #2
 8007992:	2600      	movs	r6, #0
 8007994:	42a6      	cmp	r6, r4
 8007996:	d109      	bne.n	80079ac <__libc_init_array+0x24>
 8007998:	4d0b      	ldr	r5, [pc, #44]	; (80079c8 <__libc_init_array+0x40>)
 800799a:	4c0c      	ldr	r4, [pc, #48]	; (80079cc <__libc_init_array+0x44>)
 800799c:	f000 f820 	bl	80079e0 <_init>
 80079a0:	1b64      	subs	r4, r4, r5
 80079a2:	10a4      	asrs	r4, r4, #2
 80079a4:	2600      	movs	r6, #0
 80079a6:	42a6      	cmp	r6, r4
 80079a8:	d105      	bne.n	80079b6 <__libc_init_array+0x2e>
 80079aa:	bd70      	pop	{r4, r5, r6, pc}
 80079ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b0:	4798      	blx	r3
 80079b2:	3601      	adds	r6, #1
 80079b4:	e7ee      	b.n	8007994 <__libc_init_array+0xc>
 80079b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ba:	4798      	blx	r3
 80079bc:	3601      	adds	r6, #1
 80079be:	e7f2      	b.n	80079a6 <__libc_init_array+0x1e>
 80079c0:	08007a30 	.word	0x08007a30
 80079c4:	08007a30 	.word	0x08007a30
 80079c8:	08007a30 	.word	0x08007a30
 80079cc:	08007a34 	.word	0x08007a34

080079d0 <memset>:
 80079d0:	4402      	add	r2, r0
 80079d2:	4603      	mov	r3, r0
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d100      	bne.n	80079da <memset+0xa>
 80079d8:	4770      	bx	lr
 80079da:	f803 1b01 	strb.w	r1, [r3], #1
 80079de:	e7f9      	b.n	80079d4 <memset+0x4>

080079e0 <_init>:
 80079e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e2:	bf00      	nop
 80079e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079e6:	bc08      	pop	{r3}
 80079e8:	469e      	mov	lr, r3
 80079ea:	4770      	bx	lr

080079ec <_fini>:
 80079ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ee:	bf00      	nop
 80079f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079f2:	bc08      	pop	{r3}
 80079f4:	469e      	mov	lr, r3
 80079f6:	4770      	bx	lr
