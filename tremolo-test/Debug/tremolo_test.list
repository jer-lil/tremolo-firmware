
tremolo_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071c0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007354  08007354  00017354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800738c  0800738c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800738c  0800738c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800738c  0800738c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800738c  0800738c  0001738c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007390  08007390  00017390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000bc8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bd4  20000bd4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001379a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029f3  00000000  00000000  000337d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  000361d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ef0  00000000  00000000  000371e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e79  00000000  00000000  000380d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000163ea  00000000  00000000  00059f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d01ed  00000000  00000000  0007033b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140528  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004290  00000000  00000000  00140578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800733c 	.word	0x0800733c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800733c 	.word	0x0800733c

080001d4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08a      	sub	sp, #40	; 0x28
 80001d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80001da:	f107 031c 	add.w	r3, r7, #28
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	2200      	movs	r2, #0
 80001ea:	601a      	str	r2, [r3, #0]
 80001ec:	605a      	str	r2, [r3, #4]
 80001ee:	609a      	str	r2, [r3, #8]
 80001f0:	60da      	str	r2, [r3, #12]
 80001f2:	611a      	str	r2, [r3, #16]
 80001f4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001f6:	4b66      	ldr	r3, [pc, #408]	; (8000390 <MX_ADC1_Init+0x1bc>)
 80001f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80001fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001fe:	4b64      	ldr	r3, [pc, #400]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000200:	2200      	movs	r2, #0
 8000202:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000204:	4b62      	ldr	r3, [pc, #392]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000206:	2208      	movs	r2, #8
 8000208:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800020a:	4b61      	ldr	r3, [pc, #388]	; (8000390 <MX_ADC1_Init+0x1bc>)
 800020c:	2201      	movs	r2, #1
 800020e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000210:	4b5f      	ldr	r3, [pc, #380]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000212:	2201      	movs	r2, #1
 8000214:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000216:	4b5e      	ldr	r3, [pc, #376]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000218:	2200      	movs	r2, #0
 800021a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800021e:	4b5c      	ldr	r3, [pc, #368]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000220:	2200      	movs	r2, #0
 8000222:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000224:	4b5a      	ldr	r3, [pc, #360]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000226:	2201      	movs	r2, #1
 8000228:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800022a:	4b59      	ldr	r3, [pc, #356]	; (8000390 <MX_ADC1_Init+0x1bc>)
 800022c:	2200      	movs	r2, #0
 800022e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 8000230:	4b57      	ldr	r3, [pc, #348]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000232:	2209      	movs	r2, #9
 8000234:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000236:	4b56      	ldr	r3, [pc, #344]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000238:	2201      	movs	r2, #1
 800023a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800023e:	4b54      	ldr	r3, [pc, #336]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000240:	2208      	movs	r2, #8
 8000242:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000244:	4b52      	ldr	r3, [pc, #328]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000246:	2200      	movs	r2, #0
 8000248:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800024a:	4b51      	ldr	r3, [pc, #324]	; (8000390 <MX_ADC1_Init+0x1bc>)
 800024c:	2200      	movs	r2, #0
 800024e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000250:	484f      	ldr	r0, [pc, #316]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000252:	f001 fca7 	bl	8001ba4 <HAL_ADC_Init>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800025c:	f000 fcae 	bl	8000bbc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000260:	2300      	movs	r3, #0
 8000262:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000264:	f107 031c 	add.w	r3, r7, #28
 8000268:	4619      	mov	r1, r3
 800026a:	4849      	ldr	r0, [pc, #292]	; (8000390 <MX_ADC1_Init+0x1bc>)
 800026c:	f002 fa9c 	bl	80027a8 <HAL_ADCEx_MultiModeConfigChannel>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000276:	f000 fca1 	bl	8000bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800027a:	2301      	movs	r3, #1
 800027c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800027e:	2301      	movs	r3, #1
 8000280:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000282:	2300      	movs	r3, #0
 8000284:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000286:	2300      	movs	r3, #0
 8000288:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800028e:	2300      	movs	r3, #0
 8000290:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	4619      	mov	r1, r3
 8000296:	483e      	ldr	r0, [pc, #248]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000298:	f001 ff9a 	bl	80021d0 <HAL_ADC_ConfigChannel>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80002a2:	f000 fc8b 	bl	8000bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80002a6:	2302      	movs	r3, #2
 80002a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002aa:	2302      	movs	r3, #2
 80002ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	4619      	mov	r1, r3
 80002b2:	4837      	ldr	r0, [pc, #220]	; (8000390 <MX_ADC1_Init+0x1bc>)
 80002b4:	f001 ff8c 	bl	80021d0 <HAL_ADC_ConfigChannel>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80002be:	f000 fc7d 	bl	8000bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002c2:	2303      	movs	r3, #3
 80002c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002c6:	2303      	movs	r3, #3
 80002c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4619      	mov	r1, r3
 80002ce:	4830      	ldr	r0, [pc, #192]	; (8000390 <MX_ADC1_Init+0x1bc>)
 80002d0:	f001 ff7e 	bl	80021d0 <HAL_ADC_ConfigChannel>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 80002da:	f000 fc6f 	bl	8000bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80002de:	2304      	movs	r3, #4
 80002e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80002e2:	2304      	movs	r3, #4
 80002e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4619      	mov	r1, r3
 80002ea:	4829      	ldr	r0, [pc, #164]	; (8000390 <MX_ADC1_Init+0x1bc>)
 80002ec:	f001 ff70 	bl	80021d0 <HAL_ADC_ConfigChannel>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80002f6:	f000 fc61 	bl	8000bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80002fa:	2306      	movs	r3, #6
 80002fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80002fe:	2305      	movs	r3, #5
 8000300:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	4619      	mov	r1, r3
 8000306:	4822      	ldr	r0, [pc, #136]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000308:	f001 ff62 	bl	80021d0 <HAL_ADC_ConfigChannel>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 8000312:	f000 fc53 	bl	8000bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000316:	2307      	movs	r3, #7
 8000318:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800031a:	2306      	movs	r3, #6
 800031c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	4619      	mov	r1, r3
 8000322:	481b      	ldr	r0, [pc, #108]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000324:	f001 ff54 	bl	80021d0 <HAL_ADC_ConfigChannel>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 800032e:	f000 fc45 	bl	8000bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000332:	2308      	movs	r3, #8
 8000334:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000336:	2307      	movs	r3, #7
 8000338:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	4619      	mov	r1, r3
 800033e:	4814      	ldr	r0, [pc, #80]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000340:	f001 ff46 	bl	80021d0 <HAL_ADC_ConfigChannel>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 800034a:	f000 fc37 	bl	8000bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800034e:	2309      	movs	r3, #9
 8000350:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000352:	2308      	movs	r3, #8
 8000354:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4619      	mov	r1, r3
 800035a:	480d      	ldr	r0, [pc, #52]	; (8000390 <MX_ADC1_Init+0x1bc>)
 800035c:	f001 ff38 	bl	80021d0 <HAL_ADC_ConfigChannel>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 8000366:	f000 fc29 	bl	8000bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800036a:	230e      	movs	r3, #14
 800036c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800036e:	2309      	movs	r3, #9
 8000370:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	4619      	mov	r1, r3
 8000376:	4806      	ldr	r0, [pc, #24]	; (8000390 <MX_ADC1_Init+0x1bc>)
 8000378:	f001 ff2a 	bl	80021d0 <HAL_ADC_ConfigChannel>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_ADC1_Init+0x1b2>
  {
    Error_Handler();
 8000382:	f000 fc1b 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000386:	bf00      	nop
 8000388:	3728      	adds	r7, #40	; 0x28
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000028 	.word	0x20000028

08000394 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b08c      	sub	sp, #48	; 0x30
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039c:	f107 031c 	add.w	r3, r7, #28
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
 80003aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80003b4:	d17e      	bne.n	80004b4 <HAL_ADC_MspInit+0x120>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80003b6:	4b41      	ldr	r3, [pc, #260]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a40      	ldr	r2, [pc, #256]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c0:	6153      	str	r3, [r2, #20]
 80003c2:	4b3e      	ldr	r3, [pc, #248]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ca:	61bb      	str	r3, [r7, #24]
 80003cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ce:	4b3b      	ldr	r3, [pc, #236]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	4a3a      	ldr	r2, [pc, #232]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003d8:	6153      	str	r3, [r2, #20]
 80003da:	4b38      	ldr	r3, [pc, #224]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003e2:	617b      	str	r3, [r7, #20]
 80003e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e6:	4b35      	ldr	r3, [pc, #212]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a34      	ldr	r2, [pc, #208]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003f0:	6153      	str	r3, [r2, #20]
 80003f2:	4b32      	ldr	r3, [pc, #200]	; (80004bc <HAL_ADC_MspInit+0x128>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003fa:	613b      	str	r3, [r7, #16]
 80003fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fe:	4b2f      	ldr	r3, [pc, #188]	; (80004bc <HAL_ADC_MspInit+0x128>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a2e      	ldr	r2, [pc, #184]	; (80004bc <HAL_ADC_MspInit+0x128>)
 8000404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000408:	6153      	str	r3, [r2, #20]
 800040a:	4b2c      	ldr	r3, [pc, #176]	; (80004bc <HAL_ADC_MspInit+0x128>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB11     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = pAIN_SUBDIV_Pin|pAIN_EXP_Pin|pAIN_TRIM_1_Pin|pAIN_TRIM_2_Pin;
 8000416:	230f      	movs	r3, #15
 8000418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800041a:	2303      	movs	r3, #3
 800041c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041e:	2300      	movs	r3, #0
 8000420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000422:	f107 031c 	add.w	r3, r7, #28
 8000426:	4619      	mov	r1, r3
 8000428:	4825      	ldr	r0, [pc, #148]	; (80004c0 <HAL_ADC_MspInit+0x12c>)
 800042a:	f002 fea3 	bl	8003174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = pAIN_RATE_Pin|pAIN_DEPTH_Pin|pAIN_SHAPE_Pin|pAIN_OFFSET_Pin;
 800042e:	230f      	movs	r3, #15
 8000430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000432:	2303      	movs	r3, #3
 8000434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000436:	2300      	movs	r3, #0
 8000438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043a:	f107 031c 	add.w	r3, r7, #28
 800043e:	4619      	mov	r1, r3
 8000440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000444:	f002 fe96 	bl	8003174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = pAIN_VOL_Pin;
 8000448:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800044c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800044e:	2303      	movs	r3, #3
 8000450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000452:	2300      	movs	r3, #0
 8000454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(pAIN_VOL_GPIO_Port, &GPIO_InitStruct);
 8000456:	f107 031c 	add.w	r3, r7, #28
 800045a:	4619      	mov	r1, r3
 800045c:	4819      	ldr	r0, [pc, #100]	; (80004c4 <HAL_ADC_MspInit+0x130>)
 800045e:	f002 fe89 	bl	8003174 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000462:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 8000464:	4a19      	ldr	r2, [pc, #100]	; (80004cc <HAL_ADC_MspInit+0x138>)
 8000466:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000468:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 800046a:	2200      	movs	r2, #0
 800046c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800046e:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000474:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 8000476:	2280      	movs	r2, #128	; 0x80
 8000478:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800047a:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 800047c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000480:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000482:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 8000484:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000488:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 800048c:	2220      	movs	r2, #32
 800048e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000490:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 8000492:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000496:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000498:	480b      	ldr	r0, [pc, #44]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 800049a:	f002 fcb8 	bl	8002e0e <HAL_DMA_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 80004a4:	f000 fb8a 	bl	8000bbc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a07      	ldr	r2, [pc, #28]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 80004ac:	639a      	str	r2, [r3, #56]	; 0x38
 80004ae:	4a06      	ldr	r2, [pc, #24]	; (80004c8 <HAL_ADC_MspInit+0x134>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80004b4:	bf00      	nop
 80004b6:	3730      	adds	r7, #48	; 0x30
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40021000 	.word	0x40021000
 80004c0:	48000800 	.word	0x48000800
 80004c4:	48000400 	.word	0x48000400
 80004c8:	20000078 	.word	0x20000078
 80004cc:	40020008 	.word	0x40020008

080004d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d6:	4b26      	ldr	r3, [pc, #152]	; (8000570 <MX_DMA_Init+0xa0>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a25      	ldr	r2, [pc, #148]	; (8000570 <MX_DMA_Init+0xa0>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	4b23      	ldr	r3, [pc, #140]	; (8000570 <MX_DMA_Init+0xa0>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004ee:	4b20      	ldr	r3, [pc, #128]	; (8000570 <MX_DMA_Init+0xa0>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a1f      	ldr	r2, [pc, #124]	; (8000570 <MX_DMA_Init+0xa0>)
 80004f4:	f043 0302 	orr.w	r3, r3, #2
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <MX_DMA_Init+0xa0>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f003 0302 	and.w	r3, r3, #2
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 4, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2104      	movs	r1, #4
 800050a:	200b      	movs	r0, #11
 800050c:	f002 fc49 	bl	8002da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000510:	200b      	movs	r0, #11
 8000512:	f002 fc62 	bl	8002dda <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 4, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	2104      	movs	r1, #4
 800051a:	200e      	movs	r0, #14
 800051c:	f002 fc41 	bl	8002da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000520:	200e      	movs	r0, #14
 8000522:	f002 fc5a 	bl	8002dda <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2100      	movs	r1, #0
 800052a:	2038      	movs	r0, #56	; 0x38
 800052c:	f002 fc39 	bl	8002da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000530:	2038      	movs	r0, #56	; 0x38
 8000532:	f002 fc52 	bl	8002dda <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2100      	movs	r1, #0
 800053a:	2039      	movs	r0, #57	; 0x39
 800053c:	f002 fc31 	bl	8002da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000540:	2039      	movs	r0, #57	; 0x39
 8000542:	f002 fc4a 	bl	8002dda <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	203a      	movs	r0, #58	; 0x3a
 800054c:	f002 fc29 	bl	8002da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000550:	203a      	movs	r0, #58	; 0x3a
 8000552:	f002 fc42 	bl	8002dda <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2100      	movs	r1, #0
 800055a:	203c      	movs	r0, #60	; 0x3c
 800055c:	f002 fc21 	bl	8002da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000560:	203c      	movs	r0, #60	; 0x3c
 8000562:	f002 fc3a 	bl	8002dda <HAL_NVIC_EnableIRQ>

}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000

08000574 <MX_GPIO_Init>:
        * EXTI
     PC0   ------> ADCx_IN6
     PC1   ------> ADCx_IN7
*/
void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058a:	4b66      	ldr	r3, [pc, #408]	; (8000724 <MX_GPIO_Init+0x1b0>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	4a65      	ldr	r2, [pc, #404]	; (8000724 <MX_GPIO_Init+0x1b0>)
 8000590:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000594:	6153      	str	r3, [r2, #20]
 8000596:	4b63      	ldr	r3, [pc, #396]	; (8000724 <MX_GPIO_Init+0x1b0>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005a2:	4b60      	ldr	r3, [pc, #384]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	4a5f      	ldr	r2, [pc, #380]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005ac:	6153      	str	r3, [r2, #20]
 80005ae:	4b5d      	ldr	r3, [pc, #372]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b5a      	ldr	r3, [pc, #360]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a59      	ldr	r2, [pc, #356]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c4:	6153      	str	r3, [r2, #20]
 80005c6:	4b57      	ldr	r3, [pc, #348]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	4b54      	ldr	r3, [pc, #336]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4a53      	ldr	r2, [pc, #332]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005dc:	6153      	str	r3, [r2, #20]
 80005de:	4b51      	ldr	r3, [pc, #324]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ea:	4b4e      	ldr	r3, [pc, #312]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a4d      	ldr	r2, [pc, #308]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f4:	6153      	str	r3, [r2, #20]
 80005f6:	4b4b      	ldr	r3, [pc, #300]	; (8000724 <MX_GPIO_Init+0x1b0>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, pDOUT_MUTE_1_Pin|pDOUT_MUTE_2_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000608:	4847      	ldr	r0, [pc, #284]	; (8000728 <MX_GPIO_Init+0x1b4>)
 800060a:	f002 ff55 	bl	80034b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pDOUT_RLY_SET_GPIO_Port, pDOUT_RLY_SET_Pin, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000618:	f002 ff4e 	bl	80034b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pDOUT_LED1_B_GPIO_Port, pDOUT_LED1_B_Pin, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000622:	4841      	ldr	r0, [pc, #260]	; (8000728 <MX_GPIO_Init+0x1b4>)
 8000624:	f002 ff48 	bl	80034b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pDOUT_LED1_G_GPIO_Port, pDOUT_LED1_G_Pin, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2104      	movs	r1, #4
 800062c:	483f      	ldr	r0, [pc, #252]	; (800072c <MX_GPIO_Init+0x1b8>)
 800062e:	f002 ff43 	bl	80034b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, pDOUT_LED1_R_Pin|pDOUT_LED2_B_Pin|pDOUT_LED2_G_Pin|pDOUT_LED2_R_Pin, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	21f0      	movs	r1, #240	; 0xf0
 8000636:	483e      	ldr	r0, [pc, #248]	; (8000730 <MX_GPIO_Init+0x1bc>)
 8000638:	f002 ff3e 	bl	80034b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = pDOUT_MUTE_1_Pin|pDOUT_MUTE_2_Pin|pDOUT_LED1_B_Pin;
 800063c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	4834      	ldr	r0, [pc, #208]	; (8000728 <MX_GPIO_Init+0x1b4>)
 8000656:	f002 fd8d 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = pAIN_SUBDIV_Pin|pAIN_EXP_Pin;
 800065a:	2303      	movs	r3, #3
 800065c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800065e:	2303      	movs	r3, #3
 8000660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	482e      	ldr	r0, [pc, #184]	; (8000728 <MX_GPIO_Init+0x1b4>)
 800066e:	f002 fd81 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = pDIN_PAN_MODE_1_Pin|pDIN_EXP_Pin|pDIN_DIP_4_Pin;
 8000672:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800067c:	2301      	movs	r3, #1
 800067e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4619      	mov	r1, r3
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f002 fd73 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = pDIN_DIP_1_Pin|pDIN_DIP_2_Pin|pDIN_DIP_3_Pin|pDIN_HARM_MODE_2_Pin
 800068e:	f247 6307 	movw	r3, #30215	; 0x7607
 8000692:	617b      	str	r3, [r7, #20]
                          |pDIN_PAN_MODE_2_Pin|pDIN_ENV_MODE_1_Pin|pDIN_ENV_MODE_2_Pin|pDIN_HARM_MODE_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000698:	2301      	movs	r3, #1
 800069a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	4823      	ldr	r0, [pc, #140]	; (8000730 <MX_GPIO_Init+0x1bc>)
 80006a4:	f002 fd66 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = pDOUT_RLY_SET_Pin;
 80006a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(pDOUT_RLY_SET_GPIO_Port, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f002 fd56 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = pDIN_JACK_SW_1_Pin|pDIN_JACK_SW_2_Pin;
 80006c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d2:	2301      	movs	r3, #1
 80006d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	4812      	ldr	r0, [pc, #72]	; (8000728 <MX_GPIO_Init+0x1b4>)
 80006de:	f002 fd49 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = pDOUT_LED1_G_Pin;
 80006e2:	2304      	movs	r3, #4
 80006e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	2300      	movs	r3, #0
 80006f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(pDOUT_LED1_G_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <MX_GPIO_Init+0x1b8>)
 80006fa:	f002 fd3b 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = pDOUT_LED1_R_Pin|pDOUT_LED2_B_Pin|pDOUT_LED2_G_Pin|pDOUT_LED2_R_Pin;
 80006fe:	23f0      	movs	r3, #240	; 0xf0
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	2301      	movs	r3, #1
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2300      	movs	r3, #0
 800070c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4619      	mov	r1, r3
 8000714:	4806      	ldr	r0, [pc, #24]	; (8000730 <MX_GPIO_Init+0x1bc>)
 8000716:	f002 fd2d 	bl	8003174 <HAL_GPIO_Init>

}
 800071a:	bf00      	nop
 800071c:	3728      	adds	r7, #40	; 0x28
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000
 8000728:	48000800 	.word	0x48000800
 800072c:	48000c00 	.word	0x48000c00
 8000730:	48000400 	.word	0x48000400

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073a:	f001 f995 	bl	8001a68 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* Iniitalize state machines */
  StateBypassSw state_bypass_sw = STATE_IDLE;
 800073e:	2300      	movs	r3, #0
 8000740:	71fb      	strb	r3, [r7, #7]
  StateEffect state_effect = STATE_BYPASS;
 8000742:	2301      	movs	r3, #1
 8000744:	71bb      	strb	r3, [r7, #6]
  StateRelayMute state_relay_mute = STATE_BYPASS_UNMUTE;
 8000746:	2302      	movs	r3, #2
 8000748:	717b      	strb	r3, [r7, #5]
  /* Initialize wavetable into RAM (TODO) */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074a:	f000 f909 	bl	8000960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //TODO make DMA_Init happen before TIM init even after code generation
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 800074e:	f7ff febf 	bl	80004d0 <MX_DMA_Init>
  MX_GPIO_Init();
 8000752:	f7ff ff0f 	bl	8000574 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000756:	f7ff fd3d 	bl	80001d4 <MX_ADC1_Init>
  MX_TIM2_Init();
 800075a:	f000 fb1d 	bl	8000d98 <MX_TIM2_Init>
  MX_TIM3_Init();
 800075e:	f000 fb9d 	bl	8000e9c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000762:	f000 ff85 	bl	8001670 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000766:	f000 fc15 	bl	8000f94 <MX_TIM4_Init>
  MX_TIM8_Init();
 800076a:	f000 fc7f 	bl	800106c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  // TODO clean up and move to function
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_raw,
 800076e:	2209      	movs	r2, #9
 8000770:	68b9      	ldr	r1, [r7, #8]
 8000772:	486d      	ldr	r0, [pc, #436]	; (8000928 <main+0x1f4>)
 8000774:	f001 fc10 	bl	8001f98 <HAL_ADC_Start_DMA>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <main+0x4e>
		  ADC_DMA_BUF_LENGTH) != HAL_OK)
  {
	  Error_Handler();
 800077e:	f000 fa1d 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
 8000782:	2100      	movs	r1, #0
 8000784:	4869      	ldr	r0, [pc, #420]	; (800092c <main+0x1f8>)
 8000786:	f004 fd83 	bl	8005290 <HAL_TIM_PWM_Start>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <main+0x60>
  {
	  Error_Handler();
 8000790:	f000 fa14 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK)
 8000794:	2104      	movs	r1, #4
 8000796:	4865      	ldr	r0, [pc, #404]	; (800092c <main+0x1f8>)
 8000798:	f004 fd7a 	bl	8005290 <HAL_TIM_PWM_Start>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <main+0x72>
  {
	  Error_Handler();
 80007a2:	f000 fa0b 	bl	8000bbc <Error_Handler>
  }

  // TIM8 CH1-4 updates the capture/compare regs of TIM3 CH1-4 for PWM output
  if (HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_1) != HAL_OK)
 80007a6:	2100      	movs	r1, #0
 80007a8:	4861      	ldr	r0, [pc, #388]	; (8000930 <main+0x1fc>)
 80007aa:	f004 fc0d 	bl	8004fc8 <HAL_TIM_OC_Start>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <main+0x84>
  {
	  Error_Handler();
 80007b4:	f000 fa02 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_2) != HAL_OK)
 80007b8:	2104      	movs	r1, #4
 80007ba:	485d      	ldr	r0, [pc, #372]	; (8000930 <main+0x1fc>)
 80007bc:	f004 fc04 	bl	8004fc8 <HAL_TIM_OC_Start>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <main+0x96>
  {
	  Error_Handler();
 80007c6:	f000 f9f9 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_3) != HAL_OK)
 80007ca:	2108      	movs	r1, #8
 80007cc:	4858      	ldr	r0, [pc, #352]	; (8000930 <main+0x1fc>)
 80007ce:	f004 fbfb 	bl	8004fc8 <HAL_TIM_OC_Start>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <main+0xa8>
  {
	  Error_Handler();
 80007d8:	f000 f9f0 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_4) != HAL_OK)
 80007dc:	210c      	movs	r1, #12
 80007de:	4854      	ldr	r0, [pc, #336]	; (8000930 <main+0x1fc>)
 80007e0:	f004 fbf2 	bl	8004fc8 <HAL_TIM_OC_Start>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <main+0xba>
  {
	  Error_Handler();
 80007ea:	f000 f9e7 	bl	8000bbc <Error_Handler>
  }
  //TIM3 CH1-4 are used for treble/bass channels of both stereo channels
  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 80007ee:	2100      	movs	r1, #0
 80007f0:	4850      	ldr	r0, [pc, #320]	; (8000934 <main+0x200>)
 80007f2:	f004 fd4d 	bl	8005290 <HAL_TIM_PWM_Start>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <main+0xcc>
  {
	  Error_Handler();
 80007fc:	f000 f9de 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK)
 8000800:	2104      	movs	r1, #4
 8000802:	484c      	ldr	r0, [pc, #304]	; (8000934 <main+0x200>)
 8000804:	f004 fd44 	bl	8005290 <HAL_TIM_PWM_Start>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <main+0xde>
  {
	  Error_Handler();
 800080e:	f000 f9d5 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK)
 8000812:	2108      	movs	r1, #8
 8000814:	4847      	ldr	r0, [pc, #284]	; (8000934 <main+0x200>)
 8000816:	f004 fd3b 	bl	8005290 <HAL_TIM_PWM_Start>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <main+0xf0>
  {
	  Error_Handler();
 8000820:	f000 f9cc 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) != HAL_OK)
 8000824:	210c      	movs	r1, #12
 8000826:	4843      	ldr	r0, [pc, #268]	; (8000934 <main+0x200>)
 8000828:	f004 fd32 	bl	8005290 <HAL_TIM_PWM_Start>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <main+0x102>
  {
	  Error_Handler();
 8000832:	f000 f9c3 	bl	8000bbc <Error_Handler>
  }
  // First just setting all 4 channels synced to same wavetable
  // TODO figure out best way to have different phases per channel
  HAL_DMA_Start_IT(&hdma_tim8_ch1, (uint32_t)dma_wavetable, (uint32_t)&(TIM3->CCR1), WAVETABLE_WIDTH);
 8000836:	4940      	ldr	r1, [pc, #256]	; (8000938 <main+0x204>)
 8000838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800083c:	4a3f      	ldr	r2, [pc, #252]	; (800093c <main+0x208>)
 800083e:	4840      	ldr	r0, [pc, #256]	; (8000940 <main+0x20c>)
 8000840:	f002 fb2c 	bl	8002e9c <HAL_DMA_Start_IT>
  HAL_DMA_Start_IT(&hdma_tim8_ch2, (uint32_t)dma_wavetable, (uint32_t)&(TIM3->CCR2), WAVETABLE_WIDTH);
 8000844:	493c      	ldr	r1, [pc, #240]	; (8000938 <main+0x204>)
 8000846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084a:	4a3e      	ldr	r2, [pc, #248]	; (8000944 <main+0x210>)
 800084c:	483e      	ldr	r0, [pc, #248]	; (8000948 <main+0x214>)
 800084e:	f002 fb25 	bl	8002e9c <HAL_DMA_Start_IT>
  HAL_DMA_Start_IT(&hdma_tim8_ch3_up, (uint32_t)dma_wavetable, (uint32_t)&(TIM3->CCR3), WAVETABLE_WIDTH);
 8000852:	4939      	ldr	r1, [pc, #228]	; (8000938 <main+0x204>)
 8000854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000858:	4a3c      	ldr	r2, [pc, #240]	; (800094c <main+0x218>)
 800085a:	483d      	ldr	r0, [pc, #244]	; (8000950 <main+0x21c>)
 800085c:	f002 fb1e 	bl	8002e9c <HAL_DMA_Start_IT>
  HAL_DMA_Start_IT(&hdma_tim8_ch4_trig_com, (uint32_t)dma_wavetable, (uint32_t)&(TIM3->CCR4), WAVETABLE_WIDTH);
 8000860:	4935      	ldr	r1, [pc, #212]	; (8000938 <main+0x204>)
 8000862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000866:	4a3b      	ldr	r2, [pc, #236]	; (8000954 <main+0x220>)
 8000868:	483b      	ldr	r0, [pc, #236]	; (8000958 <main+0x224>)
 800086a:	f002 fb17 	bl	8002e9c <HAL_DMA_Start_IT>
  __HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 800086e:	4b30      	ldr	r3, [pc, #192]	; (8000930 <main+0x1fc>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	68da      	ldr	r2, [r3, #12]
 8000874:	4b2e      	ldr	r3, [pc, #184]	; (8000930 <main+0x1fc>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800087c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 800087e:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <main+0x1fc>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	68da      	ldr	r2, [r3, #12]
 8000884:	4b2a      	ldr	r3, [pc, #168]	; (8000930 <main+0x1fc>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800088c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 800088e:	4b28      	ldr	r3, [pc, #160]	; (8000930 <main+0x1fc>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	68da      	ldr	r2, [r3, #12]
 8000894:	4b26      	ldr	r3, [pc, #152]	; (8000930 <main+0x1fc>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800089c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC4);
 800089e:	4b24      	ldr	r3, [pc, #144]	; (8000930 <main+0x1fc>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	68da      	ldr	r2, [r3, #12]
 80008a4:	4b22      	ldr	r3, [pc, #136]	; (8000930 <main+0x1fc>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80008ac:	60da      	str	r2, [r3, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin);
 80008ae:	2180      	movs	r1, #128	; 0x80
 80008b0:	482a      	ldr	r0, [pc, #168]	; (800095c <main+0x228>)
 80008b2:	f002 fe19 	bl	80034e8 <HAL_GPIO_TogglePin>


	  // Toggle heartbeat LED
	  led_toggle_tick(HEARTBEAT_MS, pDOUT_LED1_R_GPIO_Port, pDOUT_LED1_R_Pin);
 80008b6:	2210      	movs	r2, #16
 80008b8:	4928      	ldr	r1, [pc, #160]	; (800095c <main+0x228>)
 80008ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008be:	f000 f901 	bl	8000ac4 <led_toggle_tick>

	  // Check for bypass switch state and run state machine
	  EventBypassSw event_bypass_sw = EVENT_RELEASED;
 80008c2:	2301      	movs	r3, #1
 80008c4:	73fb      	strb	r3, [r7, #15]
	  if (!HAL_GPIO_ReadPin(pDIN_BYP_GPIO_Port, pDIN_BYP_Pin)){
 80008c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ce:	f002 fddb 	bl	8003488 <HAL_GPIO_ReadPin>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d101      	bne.n	80008dc <main+0x1a8>
		  event_bypass_sw = EVENT_PRESSED;
 80008d8:	2300      	movs	r3, #0
 80008da:	73fb      	strb	r3, [r7, #15]
	  }
	  sm_bypass_sw(&state_bypass_sw, event_bypass_sw, &state_effect);
 80008dc:	1dba      	adds	r2, r7, #6
 80008de:	7bf9      	ldrb	r1, [r7, #15]
 80008e0:	1dfb      	adds	r3, r7, #7
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 ff38 	bl	8001758 <sm_bypass_sw>

	  EventRelayMute event_relay_mute = EVENT_BYPASS;
 80008e8:	2301      	movs	r3, #1
 80008ea:	73bb      	strb	r3, [r7, #14]
	  if (state_effect == STATE_EFFECT){
 80008ec:	79bb      	ldrb	r3, [r7, #6]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d101      	bne.n	80008f6 <main+0x1c2>
		  event_relay_mute = EVENT_EFFECT;
 80008f2:	2300      	movs	r3, #0
 80008f4:	73bb      	strb	r3, [r7, #14]
	  }

	  sm_relay_mute(&state_relay_mute, event_relay_mute);
 80008f6:	7bba      	ldrb	r2, [r7, #14]
 80008f8:	1d7b      	adds	r3, r7, #5
 80008fa:	4611      	mov	r1, r2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 ffb3 	bl	8001868 <sm_relay_mute>

	  // Generate new triangle wave based on latest depth input
	  generate_triangle_wave_fixedpoint((uint32_t)adc_raw->Depth, (uint32_t)adc_raw->Offset);
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	885b      	ldrh	r3, [r3, #2]
 8000906:	b29b      	uxth	r3, r3
 8000908:	461a      	mov	r2, r3
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	88db      	ldrh	r3, [r3, #6]
 800090e:	b29b      	uxth	r3, r3
 8000910:	4619      	mov	r1, r3
 8000912:	4610      	mov	r0, r2
 8000914:	f000 f8f6 	bl	8000b04 <generate_triangle_wave_fixedpoint>

	  set_rate(adc_raw->Rate);
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	b29b      	uxth	r3, r3
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f89e 	bl	8000a60 <set_rate>
  {
 8000924:	e7c3      	b.n	80008ae <main+0x17a>
 8000926:	bf00      	nop
 8000928:	20000028 	.word	0x20000028
 800092c:	200008c0 	.word	0x200008c0
 8000930:	200009a4 	.word	0x200009a4
 8000934:	2000090c 	.word	0x2000090c
 8000938:	200000bc 	.word	0x200000bc
 800093c:	40000434 	.word	0x40000434
 8000940:	20000a34 	.word	0x20000a34
 8000944:	40000438 	.word	0x40000438
 8000948:	20000a78 	.word	0x20000a78
 800094c:	4000043c 	.word	0x4000043c
 8000950:	20000abc 	.word	0x20000abc
 8000954:	40000440 	.word	0x40000440
 8000958:	20000b00 	.word	0x20000b00
 800095c:	48000400 	.word	0x48000400

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b0a6      	sub	sp, #152	; 0x98
 8000964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000966:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800096a:	2228      	movs	r2, #40	; 0x28
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f006 fcdc 	bl	800732c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000974:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2258      	movs	r2, #88	; 0x58
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f006 fcce 	bl	800732c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000990:	2301      	movs	r3, #1
 8000992:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000994:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000998:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800099a:	2301      	movs	r3, #1
 800099c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099e:	2302      	movs	r3, #2
 80009a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80009ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80009b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80009be:	4618      	mov	r0, r3
 80009c0:	f002 fdac 	bl	800351c <HAL_RCC_OscConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009ca:	f000 f8f7 	bl	8000bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ce:	230f      	movs	r3, #15
 80009d0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d2:	2302      	movs	r3, #2
 80009d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009e6:	2101      	movs	r1, #1
 80009e8:	4618      	mov	r0, r3
 80009ea:	f003 fdeb 	bl	80045c4 <HAL_RCC_ClockConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009f4:	f000 f8e2 	bl	8000bbc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM8
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <SystemClock_Config+0xd4>)
 80009fa:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV8;
 8000a00:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_PLLCLK;
 8000a06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a0a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_PLLCLK;
 8000a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a10:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_PLLCLK;
 8000a12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a16:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f004 f808 	bl	8004a30 <HAL_RCCEx_PeriphCLKConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a26:	f000 f8c9 	bl	8000bbc <Error_Handler>
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	3798      	adds	r7, #152	; 0x98
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	00302081 	.word	0x00302081

08000a38 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <set_rate>:
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, vol);
}

// TODO implement with tap and external sync
// TODO add subdivision
void set_rate(uint16_t rate_knob){
 8000a60:	b480      	push	{r7}
 8000a62:	b087      	sub	sp, #28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	80fb      	strh	r3, [r7, #6]
	float fl_rate = (float)(ADC_RESOLUTION - rate_knob);
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
 8000a6c:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8000a70:	3303      	adds	r3, #3
 8000a72:	ee07 3a90 	vmov	s15, r3
 8000a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a7a:	edc7 7a05 	vstr	s15, [r7, #20]
	float fl_rate_arr = fl_rate * (RATE_ARR_MAX - RATE_ARR_MIN) / ADC_RESOLUTION;
 8000a7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a82:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000ab8 <set_rate+0x58>
 8000a86:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a8a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000abc <set_rate+0x5c>
 8000a8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a92:	edc7 7a04 	vstr	s15, [r7, #16]
	uint16_t rate_arr = (uint16_t)fl_rate_arr;
 8000a96:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a9e:	ee17 3a90 	vmov	r3, s15
 8000aa2:	81fb      	strh	r3, [r7, #14]
	//uint16_t rate_arr = 1+rate_knob;
	//__HAL_TIM_SET_AUTORELOAD(&htim8, rate_arr);
	__HAL_TIM_SET_PRESCALER(&htim8, rate_arr);
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <set_rate+0x60>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	89fa      	ldrh	r2, [r7, #14]
 8000aaa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000aac:	bf00      	nop
 8000aae:	371c      	adds	r7, #28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	42c80000 	.word	0x42c80000
 8000abc:	447fc000 	.word	0x447fc000
 8000ac0:	200009a4 	.word	0x200009a4

08000ac4 <led_toggle_tick>:


/* Toggles LED if it's been longer than timout_ms since last toggle*/
void led_toggle_tick(uint32_t timeout_ms, GPIO_TypeDef* LED_Port, uint16_t LED_Pin){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	80fb      	strh	r3, [r7, #6]
	static uint32_t last_toggle_ms = 0;
	uint32_t tick = HAL_GetTick();
 8000ad2:	f001 f823 	bl	8001b1c <HAL_GetTick>
 8000ad6:	6178      	str	r0, [r7, #20]

	if (tick - last_toggle_ms >= timeout_ms){
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <led_toggle_tick+0x3c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d807      	bhi.n	8000af6 <led_toggle_tick+0x32>
		HAL_GPIO_TogglePin(LED_Port, LED_Pin);
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	68b8      	ldr	r0, [r7, #8]
 8000aec:	f002 fcfc 	bl	80034e8 <HAL_GPIO_TogglePin>
		last_toggle_ms = tick;
 8000af0:	4a03      	ldr	r2, [pc, #12]	; (8000b00 <led_toggle_tick+0x3c>)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	6013      	str	r3, [r2, #0]
	}
}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200008bc 	.word	0x200008bc

08000b04 <generate_triangle_wave_fixedpoint>:


// TODO move to library
void generate_triangle_wave_fixedpoint(uint32_t depth, uint32_t offset){
 8000b04:	b480      	push	{r7}
 8000b06:	b08b      	sub	sp, #44	; 0x2c
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]

	uint32_t f_depth = depth << SHIFT_AMOUNT;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	041b      	lsls	r3, r3, #16
 8000b12:	61bb      	str	r3, [r7, #24]
	uint32_t f_max = WAVETABLE_DEPTH << SHIFT_AMOUNT;
 8000b14:	4b27      	ldr	r3, [pc, #156]	; (8000bb4 <generate_triangle_wave_fixedpoint+0xb0>)
 8000b16:	617b      	str	r3, [r7, #20]
	uint32_t f_min = (WAVETABLE_DEPTH - depth) << SHIFT_AMOUNT;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8000b1e:	3303      	adds	r3, #3
 8000b20:	041b      	lsls	r3, r3, #16
 8000b22:	613b      	str	r3, [r7, #16]
	// TODO don't divide by zero
	uint32_t f_step_up = f_depth / offset++;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	1c5a      	adds	r2, r3, #1
 8000b28:	603a      	str	r2, [r7, #0]
 8000b2a:	69ba      	ldr	r2, [r7, #24]
 8000b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b30:	60fb      	str	r3, [r7, #12]
	uint32_t f_step_down = f_depth / (WAVETABLE_WIDTH-offset);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3e:	60bb      	str	r3, [r7, #8]
	uint32_t f_val = f_min;
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
	//uint32_t val;

	for (int i=0; i<offset; i++){
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
 8000b48:	e00d      	b.n	8000b66 <generate_triangle_wave_fixedpoint+0x62>
		//val = f_val >> SHIFT_AMOUNT;
		//HAL_GPIO_WritePin(pDOUT_LED2_B_GPIO_Port, pDOUT_LED2_B_Pin, GPIO_PIN_SET);
		//HAL_GPIO_WritePin(pDOUT_LED2_G_GPIO_Port, pDOUT_LED2_G_Pin, GPIO_PIN_SET);
		dma_wavetable[i] = f_val >> SHIFT_AMOUNT;
 8000b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4c:	0c1b      	lsrs	r3, r3, #16
 8000b4e:	b299      	uxth	r1, r3
 8000b50:	4a19      	ldr	r2, [pc, #100]	; (8000bb8 <generate_triangle_wave_fixedpoint+0xb4>)
 8000b52:	6a3b      	ldr	r3, [r7, #32]
 8000b54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		//HAL_GPIO_WritePin(pDOUT_LED2_G_GPIO_Port, pDOUT_LED2_G_Pin, GPIO_PIN_RESET);
		f_val = f_val+f_step_up;
 8000b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i=0; i<offset; i++){
 8000b60:	6a3b      	ldr	r3, [r7, #32]
 8000b62:	3301      	adds	r3, #1
 8000b64:	623b      	str	r3, [r7, #32]
 8000b66:	6a3b      	ldr	r3, [r7, #32]
 8000b68:	683a      	ldr	r2, [r7, #0]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d8ed      	bhi.n	8000b4a <generate_triangle_wave_fixedpoint+0x46>
		//HAL_GPIO_WritePin(pDOUT_LED2_B_GPIO_Port, pDOUT_LED2_B_Pin, GPIO_PIN_RESET);
	}

	dma_wavetable[offset] = f_max >> SHIFT_AMOUNT;
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	0c1b      	lsrs	r3, r3, #16
 8000b72:	b299      	uxth	r1, r3
 8000b74:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <generate_triangle_wave_fixedpoint+0xb4>)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	for (int i=offset+1; i<WAVETABLE_WIDTH; i++){
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	61fb      	str	r3, [r7, #28]
 8000b82:	e00d      	b.n	8000ba0 <generate_triangle_wave_fixedpoint+0x9c>
		//val = f_val >> SHIFT_AMOUNT;
		dma_wavetable[i] = f_val >> SHIFT_AMOUNT;
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	0c1b      	lsrs	r3, r3, #16
 8000b88:	b299      	uxth	r1, r3
 8000b8a:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <generate_triangle_wave_fixedpoint+0xb4>)
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		f_val = f_val-f_step_down;
 8000b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i=offset+1; i<WAVETABLE_WIDTH; i++){
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	61fb      	str	r3, [r7, #28]
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ba6:	dbed      	blt.n	8000b84 <generate_triangle_wave_fixedpoint+0x80>
	}
	return;
 8000ba8:	bf00      	nop
}
 8000baa:	372c      	adds	r7, #44	; 0x2c
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	03ff0000 	.word	0x03ff0000
 8000bb8:	200000bc 	.word	0x200000bc

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  HAL_GPIO_WritePin(pDOUT_LED2_B_GPIO_Port, pDOUT_LED2_B_Pin, LED_PIN_SET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	481c      	ldr	r0, [pc, #112]	; (8000c3c <Error_Handler+0x80>)
 8000bca:	f002 fc75 	bl	80034b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin, LED_PIN_SET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2180      	movs	r1, #128	; 0x80
 8000bd2:	481a      	ldr	r0, [pc, #104]	; (8000c3c <Error_Handler+0x80>)
 8000bd4:	f002 fc70 	bl	80034b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(pDOUT_LED2_G_GPIO_Port, pDOUT_LED2_G_Pin, LED_PIN_SET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2140      	movs	r1, #64	; 0x40
 8000bdc:	4817      	ldr	r0, [pc, #92]	; (8000c3c <Error_Handler+0x80>)
 8000bde:	f002 fc6b 	bl	80034b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(pDOUT_LED1_B_GPIO_Port, pDOUT_LED1_B_Pin, LED_PIN_SET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000be8:	4815      	ldr	r0, [pc, #84]	; (8000c40 <Error_Handler+0x84>)
 8000bea:	f002 fc65 	bl	80034b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(pDOUT_LED1_R_GPIO_Port, pDOUT_LED1_R_Pin, LED_PIN_SET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2110      	movs	r1, #16
 8000bf2:	4812      	ldr	r0, [pc, #72]	; (8000c3c <Error_Handler+0x80>)
 8000bf4:	f002 fc60 	bl	80034b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(pDOUT_LED1_G_GPIO_Port, pDOUT_LED1_G_Pin, LED_PIN_SET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	4811      	ldr	r0, [pc, #68]	; (8000c44 <Error_Handler+0x88>)
 8000bfe:	f002 fc5b 	bl	80034b8 <HAL_GPIO_WritePin>

  while (1)
  {
	  HAL_Delay(250);
 8000c02:	20fa      	movs	r0, #250	; 0xfa
 8000c04:	f000 ff96 	bl	8001b34 <HAL_Delay>

	  HAL_GPIO_TogglePin(pDOUT_LED2_B_GPIO_Port, pDOUT_LED2_B_Pin);
 8000c08:	2120      	movs	r1, #32
 8000c0a:	480c      	ldr	r0, [pc, #48]	; (8000c3c <Error_Handler+0x80>)
 8000c0c:	f002 fc6c 	bl	80034e8 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin);
 8000c10:	2180      	movs	r1, #128	; 0x80
 8000c12:	480a      	ldr	r0, [pc, #40]	; (8000c3c <Error_Handler+0x80>)
 8000c14:	f002 fc68 	bl	80034e8 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(pDOUT_LED2_G_GPIO_Port, pDOUT_LED2_G_Pin);
 8000c18:	2140      	movs	r1, #64	; 0x40
 8000c1a:	4808      	ldr	r0, [pc, #32]	; (8000c3c <Error_Handler+0x80>)
 8000c1c:	f002 fc64 	bl	80034e8 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(pDOUT_LED1_B_GPIO_Port, pDOUT_LED1_B_Pin);
 8000c20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c24:	4806      	ldr	r0, [pc, #24]	; (8000c40 <Error_Handler+0x84>)
 8000c26:	f002 fc5f 	bl	80034e8 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(pDOUT_LED1_R_GPIO_Port, pDOUT_LED1_R_Pin);
 8000c2a:	2110      	movs	r1, #16
 8000c2c:	4803      	ldr	r0, [pc, #12]	; (8000c3c <Error_Handler+0x80>)
 8000c2e:	f002 fc5b 	bl	80034e8 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(pDOUT_LED1_G_GPIO_Port, pDOUT_LED1_G_Pin);
 8000c32:	2104      	movs	r1, #4
 8000c34:	4803      	ldr	r0, [pc, #12]	; (8000c44 <Error_Handler+0x88>)
 8000c36:	f002 fc57 	bl	80034e8 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8000c3a:	e7e2      	b.n	8000c02 <Error_Handler+0x46>
 8000c3c:	48000400 	.word	0x48000400
 8000c40:	48000800 	.word	0x48000800
 8000c44:	48000c00 	.word	0x48000c00

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <HAL_MspInit+0x44>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <HAL_MspInit+0x44>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6193      	str	r3, [r2, #24]
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <HAL_MspInit+0x44>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_MspInit+0x44>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <HAL_MspInit+0x44>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	61d3      	str	r3, [r2, #28]
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_MspInit+0x44>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f000 ff0a 	bl	8001af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <DMA1_Channel1_IRQHandler+0x10>)
 8000cea:	f002 f936 	bl	8002f5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000078 	.word	0x20000078

08000cf8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <DMA1_Channel4_IRQHandler+0x10>)
 8000cfe:	f002 f92c 	bl	8002f5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200009f0 	.word	0x200009f0

08000d0c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d10:	4803      	ldr	r0, [pc, #12]	; (8000d20 <TIM4_IRQHandler+0x14>)
 8000d12:	f004 fc20 	bl	8005556 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  HAL_TIM_IC_CaptureCallback(&htim4);
 8000d16:	4802      	ldr	r0, [pc, #8]	; (8000d20 <TIM4_IRQHandler+0x14>)
 8000d18:	f7ff fe8e 	bl	8000a38 <HAL_TIM_IC_CaptureCallback>

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000958 	.word	0x20000958

08000d24 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3_up);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <DMA2_Channel1_IRQHandler+0x10>)
 8000d2a:	f002 f916 	bl	8002f5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000abc 	.word	0x20000abc

08000d38 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch4_trig_com);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <DMA2_Channel2_IRQHandler+0x10>)
 8000d3e:	f002 f90c 	bl	8002f5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000b00 	.word	0x20000b00

08000d4c <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <DMA2_Channel3_IRQHandler+0x10>)
 8000d52:	f002 f902 	bl	8002f5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000a34 	.word	0x20000a34

08000d60 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <DMA2_Channel5_IRQHandler+0x10>)
 8000d66:	f002 f8f8 	bl	8002f5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000a78 	.word	0x20000a78

08000d74 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <SystemInit+0x20>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <SystemInit+0x20>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim8_ch3_up;
DMA_HandleTypeDef hdma_tim8_ch4_trig_com;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08e      	sub	sp, #56	; 0x38
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db8:	463b      	mov	r3, r7
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]
 8000dc6:	615a      	str	r2, [r3, #20]
 8000dc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dca:	4b33      	ldr	r3, [pc, #204]	; (8000e98 <MX_TIM2_Init+0x100>)
 8000dcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dd0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dd2:	4b31      	ldr	r3, [pc, #196]	; (8000e98 <MX_TIM2_Init+0x100>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd8:	4b2f      	ldr	r3, [pc, #188]	; (8000e98 <MX_TIM2_Init+0x100>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_PERIOD;
 8000dde:	4b2e      	ldr	r3, [pc, #184]	; (8000e98 <MX_TIM2_Init+0x100>)
 8000de0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000de4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de6:	4b2c      	ldr	r3, [pc, #176]	; (8000e98 <MX_TIM2_Init+0x100>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dec:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <MX_TIM2_Init+0x100>)
 8000dee:	2280      	movs	r2, #128	; 0x80
 8000df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000df2:	4829      	ldr	r0, [pc, #164]	; (8000e98 <MX_TIM2_Init+0x100>)
 8000df4:	f004 f83a 	bl	8004e6c <HAL_TIM_Base_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000dfe:	f7ff fedd 	bl	8000bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4822      	ldr	r0, [pc, #136]	; (8000e98 <MX_TIM2_Init+0x100>)
 8000e10:	f004 feea 	bl	8005be8 <HAL_TIM_ConfigClockSource>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000e1a:	f7ff fecf 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e1e:	481e      	ldr	r0, [pc, #120]	; (8000e98 <MX_TIM2_Init+0x100>)
 8000e20:	f004 f9de 	bl	80051e0 <HAL_TIM_PWM_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000e2a:	f7ff fec7 	bl	8000bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4816      	ldr	r0, [pc, #88]	; (8000e98 <MX_TIM2_Init+0x100>)
 8000e3e:	f005 fd4d 	bl	80068dc <HAL_TIMEx_MasterConfigSynchronization>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000e48:	f7ff feb8 	bl	8000bbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e4c:	2360      	movs	r3, #96	; 0x60
 8000e4e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	2200      	movs	r2, #0
 8000e60:	4619      	mov	r1, r3
 8000e62:	480d      	ldr	r0, [pc, #52]	; (8000e98 <MX_TIM2_Init+0x100>)
 8000e64:	f004 fdac 	bl	80059c0 <HAL_TIM_PWM_ConfigChannel>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000e6e:	f7ff fea5 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e72:	463b      	mov	r3, r7
 8000e74:	2204      	movs	r2, #4
 8000e76:	4619      	mov	r1, r3
 8000e78:	4807      	ldr	r0, [pc, #28]	; (8000e98 <MX_TIM2_Init+0x100>)
 8000e7a:	f004 fda1 	bl	80059c0 <HAL_TIM_PWM_ConfigChannel>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000e84:	f7ff fe9a 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e88:	4803      	ldr	r0, [pc, #12]	; (8000e98 <MX_TIM2_Init+0x100>)
 8000e8a:	f000 fb5b 	bl	8001544 <HAL_TIM_MspPostInit>

}
 8000e8e:	bf00      	nop
 8000e90:	3738      	adds	r7, #56	; 0x38
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200008c0 	.word	0x200008c0

08000e9c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	; 0x28
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
 8000ebc:	615a      	str	r2, [r3, #20]
 8000ebe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ec0:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <MX_TIM3_Init+0xf0>)
 8000ec2:	4a33      	ldr	r2, [pc, #204]	; (8000f90 <MX_TIM3_Init+0xf4>)
 8000ec4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ec6:	4b31      	ldr	r3, [pc, #196]	; (8000f8c <MX_TIM3_Init+0xf0>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ecc:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <MX_TIM3_Init+0xf0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_PERIOD;
 8000ed2:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <MX_TIM3_Init+0xf0>)
 8000ed4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000ed8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eda:	4b2c      	ldr	r3, [pc, #176]	; (8000f8c <MX_TIM3_Init+0xf0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee0:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <MX_TIM3_Init+0xf0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ee6:	4829      	ldr	r0, [pc, #164]	; (8000f8c <MX_TIM3_Init+0xf0>)
 8000ee8:	f004 f97a 	bl	80051e0 <HAL_TIM_PWM_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000ef2:	f7ff fe63 	bl	8000bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	4619      	mov	r1, r3
 8000f04:	4821      	ldr	r0, [pc, #132]	; (8000f8c <MX_TIM3_Init+0xf0>)
 8000f06:	f005 fce9 	bl	80068dc <HAL_TIMEx_MasterConfigSynchronization>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000f10:	f7ff fe54 	bl	8000bbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f14:	2360      	movs	r3, #96	; 0x60
 8000f16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f24:	463b      	mov	r3, r7
 8000f26:	2200      	movs	r2, #0
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4818      	ldr	r0, [pc, #96]	; (8000f8c <MX_TIM3_Init+0xf0>)
 8000f2c:	f004 fd48 	bl	80059c0 <HAL_TIM_PWM_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000f36:	f7ff fe41 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4812      	ldr	r0, [pc, #72]	; (8000f8c <MX_TIM3_Init+0xf0>)
 8000f42:	f004 fd3d 	bl	80059c0 <HAL_TIM_PWM_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000f4c:	f7ff fe36 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f50:	463b      	mov	r3, r7
 8000f52:	2208      	movs	r2, #8
 8000f54:	4619      	mov	r1, r3
 8000f56:	480d      	ldr	r0, [pc, #52]	; (8000f8c <MX_TIM3_Init+0xf0>)
 8000f58:	f004 fd32 	bl	80059c0 <HAL_TIM_PWM_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8000f62:	f7ff fe2b 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f66:	463b      	mov	r3, r7
 8000f68:	220c      	movs	r2, #12
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4807      	ldr	r0, [pc, #28]	; (8000f8c <MX_TIM3_Init+0xf0>)
 8000f6e:	f004 fd27 	bl	80059c0 <HAL_TIM_PWM_ConfigChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000f78:	f7ff fe20 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <MX_TIM3_Init+0xf0>)
 8000f7e:	f000 fae1 	bl	8001544 <HAL_TIM_MspPostInit>

}
 8000f82:	bf00      	nop
 8000f84:	3728      	adds	r7, #40	; 0x28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000090c 	.word	0x2000090c
 8000f90:	40000400 	.word	0x40000400

08000f94 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fb2:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <MX_TIM4_Init+0xd0>)
 8000fb4:	4a2c      	ldr	r2, [pc, #176]	; (8001068 <MX_TIM4_Init+0xd4>)
 8000fb6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1023;
 8000fb8:	4b2a      	ldr	r3, [pc, #168]	; (8001064 <MX_TIM4_Init+0xd0>)
 8000fba:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000fbe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc0:	4b28      	ldr	r3, [pc, #160]	; (8001064 <MX_TIM4_Init+0xd0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000fc6:	4b27      	ldr	r3, [pc, #156]	; (8001064 <MX_TIM4_Init+0xd0>)
 8000fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fcc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fce:	4b25      	ldr	r3, [pc, #148]	; (8001064 <MX_TIM4_Init+0xd0>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd4:	4b23      	ldr	r3, [pc, #140]	; (8001064 <MX_TIM4_Init+0xd0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000fda:	4822      	ldr	r0, [pc, #136]	; (8001064 <MX_TIM4_Init+0xd0>)
 8000fdc:	f004 fa64 	bl	80054a8 <HAL_TIM_IC_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000fe6:	f7ff fde9 	bl	8000bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	481a      	ldr	r0, [pc, #104]	; (8001064 <MX_TIM4_Init+0xd0>)
 8000ffa:	f005 fc6f 	bl	80068dc <HAL_TIMEx_MasterConfigSynchronization>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001004:	f7ff fdda 	bl	8000bbc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001008:	2302      	movs	r3, #2
 800100a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800100c:	2301      	movs	r3, #1
 800100e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 8001014:	230f      	movs	r3, #15
 8001016:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2200      	movs	r2, #0
 800101c:	4619      	mov	r1, r3
 800101e:	4811      	ldr	r0, [pc, #68]	; (8001064 <MX_TIM4_Init+0xd0>)
 8001020:	f004 fc32 	bl	8005888 <HAL_TIM_IC_ConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800102a:	f7ff fdc7 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2204      	movs	r2, #4
 8001032:	4619      	mov	r1, r3
 8001034:	480b      	ldr	r0, [pc, #44]	; (8001064 <MX_TIM4_Init+0xd0>)
 8001036:	f004 fc27 	bl	8005888 <HAL_TIM_IC_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001040:	f7ff fdbc 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2208      	movs	r2, #8
 8001048:	4619      	mov	r1, r3
 800104a:	4806      	ldr	r0, [pc, #24]	; (8001064 <MX_TIM4_Init+0xd0>)
 800104c:	f004 fc1c 	bl	8005888 <HAL_TIM_IC_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8001056:	f7ff fdb1 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	3720      	adds	r7, #32
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000958 	.word	0x20000958
 8001068:	40000800 	.word	0x40000800

0800106c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b096      	sub	sp, #88	; 0x58
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001072:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800107e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]
 800108e:	615a      	str	r2, [r3, #20]
 8001090:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	222c      	movs	r2, #44	; 0x2c
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f006 f947 	bl	800732c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800109e:	4b4a      	ldr	r3, [pc, #296]	; (80011c8 <MX_TIM8_Init+0x15c>)
 80010a0:	4a4a      	ldr	r2, [pc, #296]	; (80011cc <MX_TIM8_Init+0x160>)
 80010a2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80010a4:	4b48      	ldr	r3, [pc, #288]	; (80011c8 <MX_TIM8_Init+0x15c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010aa:	4b47      	ldr	r3, [pc, #284]	; (80011c8 <MX_TIM8_Init+0x15c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1023;
 80010b0:	4b45      	ldr	r3, [pc, #276]	; (80011c8 <MX_TIM8_Init+0x15c>)
 80010b2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80010b6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80010b8:	4b43      	ldr	r3, [pc, #268]	; (80011c8 <MX_TIM8_Init+0x15c>)
 80010ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010be:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80010c0:	4b41      	ldr	r3, [pc, #260]	; (80011c8 <MX_TIM8_Init+0x15c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c6:	4b40      	ldr	r3, [pc, #256]	; (80011c8 <MX_TIM8_Init+0x15c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80010cc:	483e      	ldr	r0, [pc, #248]	; (80011c8 <MX_TIM8_Init+0x15c>)
 80010ce:	f003 ff24 	bl	8004f1a <HAL_TIM_OC_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM8_Init+0x70>
  {
    Error_Handler();
 80010d8:	f7ff fd70 	bl	8000bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80010e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010ec:	4619      	mov	r1, r3
 80010ee:	4836      	ldr	r0, [pc, #216]	; (80011c8 <MX_TIM8_Init+0x15c>)
 80010f0:	f005 fbf4 	bl	80068dc <HAL_TIMEx_MasterConfigSynchronization>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 80010fa:	f7ff fd5f 	bl	8000bbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80010fe:	2300      	movs	r3, #0
 8001100:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001106:	2300      	movs	r3, #0
 8001108:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800110a:	2300      	movs	r3, #0
 800110c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001116:	2300      	movs	r3, #0
 8001118:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800111a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800111e:	2200      	movs	r2, #0
 8001120:	4619      	mov	r1, r3
 8001122:	4829      	ldr	r0, [pc, #164]	; (80011c8 <MX_TIM8_Init+0x15c>)
 8001124:	f004 fb36 	bl	8005794 <HAL_TIM_OC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 800112e:	f7ff fd45 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001132:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001136:	2204      	movs	r2, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4823      	ldr	r0, [pc, #140]	; (80011c8 <MX_TIM8_Init+0x15c>)
 800113c:	f004 fb2a 	bl	8005794 <HAL_TIM_OC_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 8001146:	f7ff fd39 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800114a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800114e:	2208      	movs	r2, #8
 8001150:	4619      	mov	r1, r3
 8001152:	481d      	ldr	r0, [pc, #116]	; (80011c8 <MX_TIM8_Init+0x15c>)
 8001154:	f004 fb1e 	bl	8005794 <HAL_TIM_OC_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800115e:	f7ff fd2d 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001162:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001166:	220c      	movs	r2, #12
 8001168:	4619      	mov	r1, r3
 800116a:	4817      	ldr	r0, [pc, #92]	; (80011c8 <MX_TIM8_Init+0x15c>)
 800116c:	f004 fb12 	bl	8005794 <HAL_TIM_OC_ConfigChannel>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001176:	f7ff fd21 	bl	8000bbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800118e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001192:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800119c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <MX_TIM8_Init+0x15c>)
 80011b0:	f005 fc20 	bl	80069f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM8_Init+0x152>
  {
    Error_Handler();
 80011ba:	f7ff fcff 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3758      	adds	r7, #88	; 0x58
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200009a4 	.word	0x200009a4
 80011cc:	40013400 	.word	0x40013400

080011d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011e0:	d10b      	bne.n	80011fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_TIM_Base_MspInit+0x38>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_TIM_Base_MspInit+0x38>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	61d3      	str	r3, [r2, #28]
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_TIM_Base_MspInit+0x38>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40021000 	.word	0x40021000

0800120c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <HAL_TIM_PWM_MspInit+0x38>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d10b      	bne.n	8001236 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_TIM_PWM_MspInit+0x3c>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	4a09      	ldr	r2, [pc, #36]	; (8001248 <HAL_TIM_PWM_MspInit+0x3c>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	61d3      	str	r3, [r2, #28]
 800122a:	4b07      	ldr	r3, [pc, #28]	; (8001248 <HAL_TIM_PWM_MspInit+0x3c>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001236:	bf00      	nop
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40000400 	.word	0x40000400
 8001248:	40021000 	.word	0x40021000

0800124c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM4)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a3f      	ldr	r2, [pc, #252]	; (8001368 <HAL_TIM_IC_MspInit+0x11c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d177      	bne.n	800135e <HAL_TIM_IC_MspInit+0x112>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800126e:	4b3f      	ldr	r3, [pc, #252]	; (800136c <HAL_TIM_IC_MspInit+0x120>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	4a3e      	ldr	r2, [pc, #248]	; (800136c <HAL_TIM_IC_MspInit+0x120>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	61d3      	str	r3, [r2, #28]
 800127a:	4b3c      	ldr	r3, [pc, #240]	; (800136c <HAL_TIM_IC_MspInit+0x120>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b39      	ldr	r3, [pc, #228]	; (800136c <HAL_TIM_IC_MspInit+0x120>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	4a38      	ldr	r2, [pc, #224]	; (800136c <HAL_TIM_IC_MspInit+0x120>)
 800128c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001290:	6153      	str	r3, [r2, #20]
 8001292:	4b36      	ldr	r3, [pc, #216]	; (800136c <HAL_TIM_IC_MspInit+0x120>)
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	4b33      	ldr	r3, [pc, #204]	; (800136c <HAL_TIM_IC_MspInit+0x120>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	4a32      	ldr	r2, [pc, #200]	; (800136c <HAL_TIM_IC_MspInit+0x120>)
 80012a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a8:	6153      	str	r3, [r2, #20]
 80012aa:	4b30      	ldr	r3, [pc, #192]	; (800136c <HAL_TIM_IC_MspInit+0x120>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = pDIN_BYP_Pin|pDIN_TAP_Pin;
 80012b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80012c8:	230a      	movs	r3, #10
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d6:	f001 ff4d 	bl	8003174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = pDIN_TAP_EXT_Pin;
 80012da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012ec:	2302      	movs	r3, #2
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(pDIN_TAP_EXT_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	481e      	ldr	r0, [pc, #120]	; (8001370 <HAL_TIM_IC_MspInit+0x124>)
 80012f8:	f001 ff3c 	bl	8003174 <HAL_GPIO_Init>

    /* TIM4 DMA Init */
    /* TIM4_CH2 Init */
    hdma_tim4_ch2.Instance = DMA1_Channel4;
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_TIM_IC_MspInit+0x128>)
 80012fe:	4a1e      	ldr	r2, [pc, #120]	; (8001378 <HAL_TIM_IC_MspInit+0x12c>)
 8001300:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <HAL_TIM_IC_MspInit+0x128>)
 8001304:	2200      	movs	r2, #0
 8001306:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <HAL_TIM_IC_MspInit+0x128>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_TIM_IC_MspInit+0x128>)
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001314:	4b17      	ldr	r3, [pc, #92]	; (8001374 <HAL_TIM_IC_MspInit+0x128>)
 8001316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800131a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <HAL_TIM_IC_MspInit+0x128>)
 800131e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001322:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <HAL_TIM_IC_MspInit+0x128>)
 8001326:	2220      	movs	r2, #32
 8001328:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_TIM_IC_MspInit+0x128>)
 800132c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001330:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 8001332:	4810      	ldr	r0, [pc, #64]	; (8001374 <HAL_TIM_IC_MspInit+0x128>)
 8001334:	f001 fd6b 	bl	8002e0e <HAL_DMA_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_TIM_IC_MspInit+0xf6>
    {
      Error_Handler();
 800133e:	f7ff fc3d 	bl	8000bbc <Error_Handler>
    }

    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <HAL_TIM_IC_MspInit+0x128>)
 8001346:	629a      	str	r2, [r3, #40]	; 0x28
 8001348:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <HAL_TIM_IC_MspInit+0x128>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2106      	movs	r1, #6
 8001352:	201e      	movs	r0, #30
 8001354:	f001 fd25 	bl	8002da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001358:	201e      	movs	r0, #30
 800135a:	f001 fd3e 	bl	8002dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800135e:	bf00      	nop
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40000800 	.word	0x40000800
 800136c:	40021000 	.word	0x40021000
 8001370:	48000400 	.word	0x48000400
 8001374:	200009f0 	.word	0x200009f0
 8001378:	40020044 	.word	0x40020044

0800137c <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM8)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a64      	ldr	r2, [pc, #400]	; (800151c <HAL_TIM_OC_MspInit+0x1a0>)
 800138a:	4293      	cmp	r3, r2
 800138c:	f040 80c2 	bne.w	8001514 <HAL_TIM_OC_MspInit+0x198>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001390:	4b63      	ldr	r3, [pc, #396]	; (8001520 <HAL_TIM_OC_MspInit+0x1a4>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a62      	ldr	r2, [pc, #392]	; (8001520 <HAL_TIM_OC_MspInit+0x1a4>)
 8001396:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b60      	ldr	r3, [pc, #384]	; (8001520 <HAL_TIM_OC_MspInit+0x1a4>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* TIM8_CH1 Init */
    hdma_tim8_ch1.Instance = DMA2_Channel3;
 80013a8:	4b5e      	ldr	r3, [pc, #376]	; (8001524 <HAL_TIM_OC_MspInit+0x1a8>)
 80013aa:	4a5f      	ldr	r2, [pc, #380]	; (8001528 <HAL_TIM_OC_MspInit+0x1ac>)
 80013ac:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013ae:	4b5d      	ldr	r3, [pc, #372]	; (8001524 <HAL_TIM_OC_MspInit+0x1a8>)
 80013b0:	2210      	movs	r2, #16
 80013b2:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b4:	4b5b      	ldr	r3, [pc, #364]	; (8001524 <HAL_TIM_OC_MspInit+0x1a8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80013ba:	4b5a      	ldr	r3, [pc, #360]	; (8001524 <HAL_TIM_OC_MspInit+0x1a8>)
 80013bc:	2280      	movs	r2, #128	; 0x80
 80013be:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013c0:	4b58      	ldr	r3, [pc, #352]	; (8001524 <HAL_TIM_OC_MspInit+0x1a8>)
 80013c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c6:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013c8:	4b56      	ldr	r3, [pc, #344]	; (8001524 <HAL_TIM_OC_MspInit+0x1a8>)
 80013ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ce:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 80013d0:	4b54      	ldr	r3, [pc, #336]	; (8001524 <HAL_TIM_OC_MspInit+0x1a8>)
 80013d2:	2220      	movs	r2, #32
 80013d4:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80013d6:	4b53      	ldr	r3, [pc, #332]	; (8001524 <HAL_TIM_OC_MspInit+0x1a8>)
 80013d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 80013de:	4851      	ldr	r0, [pc, #324]	; (8001524 <HAL_TIM_OC_MspInit+0x1a8>)
 80013e0:	f001 fd15 	bl	8002e0e <HAL_DMA_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_TIM_OC_MspInit+0x72>
    {
      Error_Handler();
 80013ea:	f7ff fbe7 	bl	8000bbc <Error_Handler>
    }

    __HAL_LINKDMA(tim_ocHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4c      	ldr	r2, [pc, #304]	; (8001524 <HAL_TIM_OC_MspInit+0x1a8>)
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24
 80013f4:	4a4b      	ldr	r2, [pc, #300]	; (8001524 <HAL_TIM_OC_MspInit+0x1a8>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM8_CH2 Init */
    hdma_tim8_ch2.Instance = DMA2_Channel5;
 80013fa:	4b4c      	ldr	r3, [pc, #304]	; (800152c <HAL_TIM_OC_MspInit+0x1b0>)
 80013fc:	4a4c      	ldr	r2, [pc, #304]	; (8001530 <HAL_TIM_OC_MspInit+0x1b4>)
 80013fe:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001400:	4b4a      	ldr	r3, [pc, #296]	; (800152c <HAL_TIM_OC_MspInit+0x1b0>)
 8001402:	2210      	movs	r2, #16
 8001404:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001406:	4b49      	ldr	r3, [pc, #292]	; (800152c <HAL_TIM_OC_MspInit+0x1b0>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800140c:	4b47      	ldr	r3, [pc, #284]	; (800152c <HAL_TIM_OC_MspInit+0x1b0>)
 800140e:	2280      	movs	r2, #128	; 0x80
 8001410:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001412:	4b46      	ldr	r3, [pc, #280]	; (800152c <HAL_TIM_OC_MspInit+0x1b0>)
 8001414:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001418:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800141a:	4b44      	ldr	r3, [pc, #272]	; (800152c <HAL_TIM_OC_MspInit+0x1b0>)
 800141c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001420:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.Mode = DMA_CIRCULAR;
 8001422:	4b42      	ldr	r3, [pc, #264]	; (800152c <HAL_TIM_OC_MspInit+0x1b0>)
 8001424:	2220      	movs	r2, #32
 8001426:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001428:	4b40      	ldr	r3, [pc, #256]	; (800152c <HAL_TIM_OC_MspInit+0x1b0>)
 800142a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800142e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 8001430:	483e      	ldr	r0, [pc, #248]	; (800152c <HAL_TIM_OC_MspInit+0x1b0>)
 8001432:	f001 fcec 	bl	8002e0e <HAL_DMA_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_TIM_OC_MspInit+0xc4>
    {
      Error_Handler();
 800143c:	f7ff fbbe 	bl	8000bbc <Error_Handler>
    }

    __HAL_LINKDMA(tim_ocHandle,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a3a      	ldr	r2, [pc, #232]	; (800152c <HAL_TIM_OC_MspInit+0x1b0>)
 8001444:	629a      	str	r2, [r3, #40]	; 0x28
 8001446:	4a39      	ldr	r2, [pc, #228]	; (800152c <HAL_TIM_OC_MspInit+0x1b0>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM8_CH3_UP Init */
    hdma_tim8_ch3_up.Instance = DMA2_Channel1;
 800144c:	4b39      	ldr	r3, [pc, #228]	; (8001534 <HAL_TIM_OC_MspInit+0x1b8>)
 800144e:	4a3a      	ldr	r2, [pc, #232]	; (8001538 <HAL_TIM_OC_MspInit+0x1bc>)
 8001450:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001452:	4b38      	ldr	r3, [pc, #224]	; (8001534 <HAL_TIM_OC_MspInit+0x1b8>)
 8001454:	2210      	movs	r2, #16
 8001456:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001458:	4b36      	ldr	r3, [pc, #216]	; (8001534 <HAL_TIM_OC_MspInit+0x1b8>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 800145e:	4b35      	ldr	r3, [pc, #212]	; (8001534 <HAL_TIM_OC_MspInit+0x1b8>)
 8001460:	2280      	movs	r2, #128	; 0x80
 8001462:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001464:	4b33      	ldr	r3, [pc, #204]	; (8001534 <HAL_TIM_OC_MspInit+0x1b8>)
 8001466:	f44f 7280 	mov.w	r2, #256	; 0x100
 800146a:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800146c:	4b31      	ldr	r3, [pc, #196]	; (8001534 <HAL_TIM_OC_MspInit+0x1b8>)
 800146e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001472:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3_up.Init.Mode = DMA_CIRCULAR;
 8001474:	4b2f      	ldr	r3, [pc, #188]	; (8001534 <HAL_TIM_OC_MspInit+0x1b8>)
 8001476:	2220      	movs	r2, #32
 8001478:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 800147a:	4b2e      	ldr	r3, [pc, #184]	; (8001534 <HAL_TIM_OC_MspInit+0x1b8>)
 800147c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001480:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim8_ch3_up) != HAL_OK)
 8001482:	482c      	ldr	r0, [pc, #176]	; (8001534 <HAL_TIM_OC_MspInit+0x1b8>)
 8001484:	f001 fcc3 	bl	8002e0e <HAL_DMA_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_TIM_OC_MspInit+0x116>
    {
      Error_Handler();
 800148e:	f7ff fb95 	bl	8000bbc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_ocHandle,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3_up);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a27      	ldr	r2, [pc, #156]	; (8001534 <HAL_TIM_OC_MspInit+0x1b8>)
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c
 8001498:	4a26      	ldr	r2, [pc, #152]	; (8001534 <HAL_TIM_OC_MspInit+0x1b8>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_ocHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim8_ch3_up);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a24      	ldr	r2, [pc, #144]	; (8001534 <HAL_TIM_OC_MspInit+0x1b8>)
 80014a2:	621a      	str	r2, [r3, #32]
 80014a4:	4a23      	ldr	r2, [pc, #140]	; (8001534 <HAL_TIM_OC_MspInit+0x1b8>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM8_CH4_TRIG_COM Init */
    hdma_tim8_ch4_trig_com.Instance = DMA2_Channel2;
 80014aa:	4b24      	ldr	r3, [pc, #144]	; (800153c <HAL_TIM_OC_MspInit+0x1c0>)
 80014ac:	4a24      	ldr	r2, [pc, #144]	; (8001540 <HAL_TIM_OC_MspInit+0x1c4>)
 80014ae:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014b0:	4b22      	ldr	r3, [pc, #136]	; (800153c <HAL_TIM_OC_MspInit+0x1c0>)
 80014b2:	2210      	movs	r2, #16
 80014b4:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b6:	4b21      	ldr	r3, [pc, #132]	; (800153c <HAL_TIM_OC_MspInit+0x1c0>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80014bc:	4b1f      	ldr	r3, [pc, #124]	; (800153c <HAL_TIM_OC_MspInit+0x1c0>)
 80014be:	2280      	movs	r2, #128	; 0x80
 80014c0:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014c2:	4b1e      	ldr	r3, [pc, #120]	; (800153c <HAL_TIM_OC_MspInit+0x1c0>)
 80014c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c8:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014ca:	4b1c      	ldr	r3, [pc, #112]	; (800153c <HAL_TIM_OC_MspInit+0x1c0>)
 80014cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014d0:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 80014d2:	4b1a      	ldr	r3, [pc, #104]	; (800153c <HAL_TIM_OC_MspInit+0x1c0>)
 80014d4:	2220      	movs	r2, #32
 80014d6:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_TIM_OC_MspInit+0x1c0>)
 80014da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim8_ch4_trig_com) != HAL_OK)
 80014e0:	4816      	ldr	r0, [pc, #88]	; (800153c <HAL_TIM_OC_MspInit+0x1c0>)
 80014e2:	f001 fc94 	bl	8002e0e <HAL_DMA_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <HAL_TIM_OC_MspInit+0x174>
    {
      Error_Handler();
 80014ec:	f7ff fb66 	bl	8000bbc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_ocHandle,hdma[TIM_DMA_ID_CC4],hdma_tim8_ch4_trig_com);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a12      	ldr	r2, [pc, #72]	; (800153c <HAL_TIM_OC_MspInit+0x1c0>)
 80014f4:	631a      	str	r2, [r3, #48]	; 0x30
 80014f6:	4a11      	ldr	r2, [pc, #68]	; (800153c <HAL_TIM_OC_MspInit+0x1c0>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_ocHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim8_ch4_trig_com);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a0f      	ldr	r2, [pc, #60]	; (800153c <HAL_TIM_OC_MspInit+0x1c0>)
 8001500:	639a      	str	r2, [r3, #56]	; 0x38
 8001502:	4a0e      	ldr	r2, [pc, #56]	; (800153c <HAL_TIM_OC_MspInit+0x1c0>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_ocHandle,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim8_ch4_trig_com);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a0c      	ldr	r2, [pc, #48]	; (800153c <HAL_TIM_OC_MspInit+0x1c0>)
 800150c:	635a      	str	r2, [r3, #52]	; 0x34
 800150e:	4a0b      	ldr	r2, [pc, #44]	; (800153c <HAL_TIM_OC_MspInit+0x1c0>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40013400 	.word	0x40013400
 8001520:	40021000 	.word	0x40021000
 8001524:	20000a34 	.word	0x20000a34
 8001528:	40020430 	.word	0x40020430
 800152c:	20000a78 	.word	0x20000a78
 8001530:	40020458 	.word	0x40020458
 8001534:	20000abc 	.word	0x20000abc
 8001538:	40020408 	.word	0x40020408
 800153c:	20000b00 	.word	0x20000b00
 8001540:	4002041c 	.word	0x4002041c

08001544 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08c      	sub	sp, #48	; 0x30
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001564:	d139      	bne.n	80015da <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	4b3e      	ldr	r3, [pc, #248]	; (8001660 <HAL_TIM_MspPostInit+0x11c>)
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	4a3d      	ldr	r2, [pc, #244]	; (8001660 <HAL_TIM_MspPostInit+0x11c>)
 800156c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001570:	6153      	str	r3, [r2, #20]
 8001572:	4b3b      	ldr	r3, [pc, #236]	; (8001660 <HAL_TIM_MspPostInit+0x11c>)
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	61bb      	str	r3, [r7, #24]
 800157c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	4b38      	ldr	r3, [pc, #224]	; (8001660 <HAL_TIM_MspPostInit+0x11c>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	4a37      	ldr	r2, [pc, #220]	; (8001660 <HAL_TIM_MspPostInit+0x11c>)
 8001584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001588:	6153      	str	r3, [r2, #20]
 800158a:	4b35      	ldr	r3, [pc, #212]	; (8001660 <HAL_TIM_MspPostInit+0x11c>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = pPWM_VOL_1_Pin;
 8001596:	2320      	movs	r3, #32
 8001598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015a6:	2301      	movs	r3, #1
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(pPWM_VOL_1_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	4619      	mov	r1, r3
 80015b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b4:	f001 fdde 	bl	8003174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = pPWM_VOL_2_Pin;
 80015b8:	2308      	movs	r3, #8
 80015ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015c8:	2301      	movs	r3, #1
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(pPWM_VOL_2_GPIO_Port, &GPIO_InitStruct);
 80015cc:	f107 031c 	add.w	r3, r7, #28
 80015d0:	4619      	mov	r1, r3
 80015d2:	4824      	ldr	r0, [pc, #144]	; (8001664 <HAL_TIM_MspPostInit+0x120>)
 80015d4:	f001 fdce 	bl	8003174 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015d8:	e03e      	b.n	8001658 <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM3)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a22      	ldr	r2, [pc, #136]	; (8001668 <HAL_TIM_MspPostInit+0x124>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d139      	bne.n	8001658 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e4:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <HAL_TIM_MspPostInit+0x11c>)
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <HAL_TIM_MspPostInit+0x11c>)
 80015ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ee:	6153      	str	r3, [r2, #20]
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <HAL_TIM_MspPostInit+0x11c>)
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <HAL_TIM_MspPostInit+0x11c>)
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	4a17      	ldr	r2, [pc, #92]	; (8001660 <HAL_TIM_MspPostInit+0x11c>)
 8001602:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001606:	6153      	str	r3, [r2, #20]
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_TIM_MspPostInit+0x11c>)
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = pPWM_2_Pin|pPWM_1_Pin;
 8001614:	2350      	movs	r3, #80	; 0x50
 8001616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001624:	2302      	movs	r3, #2
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	4619      	mov	r1, r3
 800162e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001632:	f001 fd9f 	bl	8003174 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = pPWM_3_Pin|pPWM_4_Pin;
 8001636:	f44f 7340 	mov.w	r3, #768	; 0x300
 800163a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001648:	2302      	movs	r3, #2
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	4806      	ldr	r0, [pc, #24]	; (800166c <HAL_TIM_MspPostInit+0x128>)
 8001654:	f001 fd8e 	bl	8003174 <HAL_GPIO_Init>
}
 8001658:	bf00      	nop
 800165a:	3730      	adds	r7, #48	; 0x30
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40021000 	.word	0x40021000
 8001664:	48000400 	.word	0x48000400
 8001668:	40000400 	.word	0x40000400
 800166c:	48000800 	.word	0x48000800

08001670 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <MX_USART1_UART_Init+0x58>)
 8001676:	4a15      	ldr	r2, [pc, #84]	; (80016cc <MX_USART1_UART_Init+0x5c>)
 8001678:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800167a:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <MX_USART1_UART_Init+0x58>)
 800167c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001680:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_USART1_UART_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <MX_USART1_UART_Init+0x58>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <MX_USART1_UART_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <MX_USART1_UART_Init+0x58>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <MX_USART1_UART_Init+0x58>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <MX_USART1_UART_Init+0x58>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <MX_USART1_UART_Init+0x58>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <MX_USART1_UART_Init+0x58>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_USART1_UART_Init+0x58>)
 80016b4:	f005 fa42 	bl	8006b3c <HAL_UART_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016be:	f7ff fa7d 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000b44 	.word	0x20000b44
 80016cc:	40013800 	.word	0x40013800

080016d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a17      	ldr	r2, [pc, #92]	; (800174c <HAL_UART_MspInit+0x7c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d127      	bne.n	8001742 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_UART_MspInit+0x80>)
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	4a16      	ldr	r2, [pc, #88]	; (8001750 <HAL_UART_MspInit+0x80>)
 80016f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fc:	6193      	str	r3, [r2, #24]
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <HAL_UART_MspInit+0x80>)
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <HAL_UART_MspInit+0x80>)
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	4a10      	ldr	r2, [pc, #64]	; (8001750 <HAL_UART_MspInit+0x80>)
 8001710:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001714:	6153      	str	r3, [r2, #20]
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_UART_MspInit+0x80>)
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001722:	2330      	movs	r3, #48	; 0x30
 8001724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001732:	2307      	movs	r3, #7
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	; (8001754 <HAL_UART_MspInit+0x84>)
 800173e:	f001 fd19 	bl	8003174 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	; 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40013800 	.word	0x40013800
 8001750:	40021000 	.word	0x40021000
 8001754:	48000800 	.word	0x48000800

08001758 <sm_bypass_sw>:

#include "lib/sm_bypass.h"
#include "stm32f3xx_hal.h"
#include "main.h"

void sm_bypass_sw(StateBypassSw *state_switch, EventBypassSw event, StateEffect *state_effect){
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	460b      	mov	r3, r1
 8001762:	607a      	str	r2, [r7, #4]
 8001764:	72fb      	strb	r3, [r7, #11]

	static uint32_t debounce_start = 0;
	const uint32_t debounce_time_ms = 100;
 8001766:	2364      	movs	r3, #100	; 0x64
 8001768:	617b      	str	r3, [r7, #20]

	switch (*state_switch) {
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b03      	cmp	r3, #3
 8001770:	d840      	bhi.n	80017f4 <sm_bypass_sw+0x9c>
 8001772:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <sm_bypass_sw+0x20>)
 8001774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001778:	08001789 	.word	0x08001789
 800177c:	080017c3 	.word	0x080017c3
 8001780:	080017a9 	.word	0x080017a9
 8001784:	080017db 	.word	0x080017db
		case STATE_IDLE:
			if (event == EVENT_PRESSED) {
 8001788:	7afb      	ldrb	r3, [r7, #11]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d136      	bne.n	80017fc <sm_bypass_sw+0xa4>
				*state_switch = STATE_DEBOUNCE_PRESS;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2202      	movs	r2, #2
 8001792:	701a      	strb	r2, [r3, #0]
				sm_effect(state_effect, EVENT_TOGGLE);
 8001794:	2100      	movs	r1, #0
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f83e 	bl	8001818 <sm_effect>
				debounce_start = HAL_GetTick();
 800179c:	f000 f9be 	bl	8001b1c <HAL_GetTick>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4a1c      	ldr	r2, [pc, #112]	; (8001814 <sm_bypass_sw+0xbc>)
 80017a4:	6013      	str	r3, [r2, #0]
			}
			break;
 80017a6:	e029      	b.n	80017fc <sm_bypass_sw+0xa4>

		case STATE_DEBOUNCE_PRESS:
			if (HAL_GetTick() - debounce_start >= debounce_time_ms) {
 80017a8:	f000 f9b8 	bl	8001b1c <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	4b19      	ldr	r3, [pc, #100]	; (8001814 <sm_bypass_sw+0xbc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d822      	bhi.n	8001800 <sm_bypass_sw+0xa8>
				*state_switch = STATE_WAIT_RELEASE;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
			}
			break;
 80017c0:	e01e      	b.n	8001800 <sm_bypass_sw+0xa8>

		case STATE_WAIT_RELEASE:
			if (event == EVENT_RELEASED) {
 80017c2:	7afb      	ldrb	r3, [r7, #11]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d11d      	bne.n	8001804 <sm_bypass_sw+0xac>
				debounce_start = HAL_GetTick();
 80017c8:	f000 f9a8 	bl	8001b1c <HAL_GetTick>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4a11      	ldr	r2, [pc, #68]	; (8001814 <sm_bypass_sw+0xbc>)
 80017d0:	6013      	str	r3, [r2, #0]

				*state_switch = STATE_DEBOUNCE_RELEASE;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2203      	movs	r2, #3
 80017d6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80017d8:	e014      	b.n	8001804 <sm_bypass_sw+0xac>

		case STATE_DEBOUNCE_RELEASE:
			if (HAL_GetTick() - debounce_start >= debounce_time_ms) {
 80017da:	f000 f99f 	bl	8001b1c <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <sm_bypass_sw+0xbc>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d80d      	bhi.n	8001808 <sm_bypass_sw+0xb0>
				*state_switch = STATE_IDLE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80017f2:	e009      	b.n	8001808 <sm_bypass_sw+0xb0>

		default:
			*state_switch = STATE_IDLE;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
			break;
 80017fa:	e006      	b.n	800180a <sm_bypass_sw+0xb2>
			break;
 80017fc:	bf00      	nop
 80017fe:	e004      	b.n	800180a <sm_bypass_sw+0xb2>
			break;
 8001800:	bf00      	nop
 8001802:	e002      	b.n	800180a <sm_bypass_sw+0xb2>
			break;
 8001804:	bf00      	nop
 8001806:	e000      	b.n	800180a <sm_bypass_sw+0xb2>
			break;
 8001808:	bf00      	nop
	}
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000bc8 	.word	0x20000bc8

08001818 <sm_effect>:

void sm_effect(StateEffect *state, EventEffect event){
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	70fb      	strb	r3, [r7, #3]
	switch (*state) {
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d008      	beq.n	800183e <sm_effect+0x26>
 800182c:	2b01      	cmp	r3, #1
 800182e:	d10d      	bne.n	800184c <sm_effect+0x34>
		case STATE_BYPASS:
			if (event == EVENT_TOGGLE){
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10e      	bne.n	8001854 <sm_effect+0x3c>
				*state = STATE_EFFECT;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]

			}
			break;
 800183c:	e00a      	b.n	8001854 <sm_effect+0x3c>
		case STATE_EFFECT:
			if (event == EVENT_TOGGLE){
 800183e:	78fb      	ldrb	r3, [r7, #3]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d109      	bne.n	8001858 <sm_effect+0x40>
				*state = STATE_BYPASS;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]
			}
			break;
 800184a:	e005      	b.n	8001858 <sm_effect+0x40>

		default:
			*state = STATE_BYPASS;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
			break;
 8001852:	e002      	b.n	800185a <sm_effect+0x42>
			break;
 8001854:	bf00      	nop
 8001856:	e000      	b.n	800185a <sm_effect+0x42>
			break;
 8001858:	bf00      	nop
	}
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <sm_relay_mute>:

void sm_relay_mute(StateRelayMute *state, EventRelayMute event) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
	static uint32_t mute_start = 0;
	const uint32_t mute_time_ms = 10;
 8001874:	230a      	movs	r3, #10
 8001876:	60fb      	str	r3, [r7, #12]

	switch (*state) {
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b03      	cmp	r3, #3
 800187e:	f200 80b3 	bhi.w	80019e8 <sm_relay_mute+0x180>
 8001882:	a201      	add	r2, pc, #4	; (adr r2, 8001888 <sm_relay_mute+0x20>)
 8001884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001888:	080019af 	.word	0x080019af
 800188c:	08001943 	.word	0x08001943
 8001890:	08001899 	.word	0x08001899
 8001894:	080018d5 	.word	0x080018d5
		case STATE_BYPASS_UNMUTE:
			if (event == EVENT_EFFECT){
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	2b00      	cmp	r3, #0
 800189c:	f040 80a8 	bne.w	80019f0 <sm_relay_mute+0x188>
				*state = STATE_BYPASS_MUTE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2203      	movs	r2, #3
 80018a4:	701a      	strb	r2, [r3, #0]
				mute_start = HAL_GetTick();
 80018a6:	f000 f939 	bl	8001b1c <HAL_GetTick>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4a56      	ldr	r2, [pc, #344]	; (8001a08 <sm_relay_mute+0x1a0>)
 80018ae:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(pDOUT_MUTE_1_GPIO_Port, pDOUT_MUTE_1_Pin,
 80018b0:	2201      	movs	r2, #1
 80018b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b6:	4855      	ldr	r0, [pc, #340]	; (8001a0c <sm_relay_mute+0x1a4>)
 80018b8:	f001 fdfe 	bl	80034b8 <HAL_GPIO_WritePin>
					GPIO_PIN_SET);
				HAL_GPIO_WritePin(pDOUT_MUTE_2_GPIO_Port, pDOUT_MUTE_2_Pin,
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018c2:	4852      	ldr	r0, [pc, #328]	; (8001a0c <sm_relay_mute+0x1a4>)
 80018c4:	f001 fdf8 	bl	80034b8 <HAL_GPIO_WritePin>
					GPIO_PIN_SET);
				HAL_GPIO_WritePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin,
 80018c8:	2200      	movs	r2, #0
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	4850      	ldr	r0, [pc, #320]	; (8001a10 <sm_relay_mute+0x1a8>)
 80018ce:	f001 fdf3 	bl	80034b8 <HAL_GPIO_WritePin>
					LED_PIN_SET);
			}
			break;
 80018d2:	e08d      	b.n	80019f0 <sm_relay_mute+0x188>
		case STATE_BYPASS_MUTE:
			if (HAL_GetTick() - mute_start >= mute_time_ms){
 80018d4:	f000 f922 	bl	8001b1c <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	4b4b      	ldr	r3, [pc, #300]	; (8001a08 <sm_relay_mute+0x1a0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	f200 8086 	bhi.w	80019f4 <sm_relay_mute+0x18c>
				if (event == EVENT_BYPASS){
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d114      	bne.n	8001918 <sm_relay_mute+0xb0>
					*state = STATE_BYPASS_UNMUTE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2202      	movs	r2, #2
 80018f2:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(pDOUT_MUTE_1_GPIO_Port, pDOUT_MUTE_1_Pin,
 80018f4:	2200      	movs	r2, #0
 80018f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018fa:	4844      	ldr	r0, [pc, #272]	; (8001a0c <sm_relay_mute+0x1a4>)
 80018fc:	f001 fddc 	bl	80034b8 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
					HAL_GPIO_WritePin(pDOUT_MUTE_2_GPIO_Port, pDOUT_MUTE_2_Pin,
 8001900:	2200      	movs	r2, #0
 8001902:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001906:	4841      	ldr	r0, [pc, #260]	; (8001a0c <sm_relay_mute+0x1a4>)
 8001908:	f001 fdd6 	bl	80034b8 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
					HAL_GPIO_WritePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin,
 800190c:	2201      	movs	r2, #1
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	483f      	ldr	r0, [pc, #252]	; (8001a10 <sm_relay_mute+0x1a8>)
 8001912:	f001 fdd1 	bl	80034b8 <HAL_GPIO_WritePin>
						GPIO_PIN_SET);
					HAL_GPIO_WritePin(pDOUT_LED2_B_GPIO_Port, pDOUT_LED2_B_Pin,
						LED_PIN_SET);
				}
			}
			break;
 8001916:	e06d      	b.n	80019f4 <sm_relay_mute+0x18c>
					*state = STATE_EFFECT_MUTE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
					mute_start = HAL_GetTick();
 800191e:	f000 f8fd 	bl	8001b1c <HAL_GetTick>
 8001922:	4603      	mov	r3, r0
 8001924:	4a38      	ldr	r2, [pc, #224]	; (8001a08 <sm_relay_mute+0x1a0>)
 8001926:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(pDOUT_RLY_SET_GPIO_Port, pDOUT_RLY_SET_Pin,
 8001928:	2201      	movs	r2, #1
 800192a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800192e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001932:	f001 fdc1 	bl	80034b8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(pDOUT_LED2_B_GPIO_Port, pDOUT_LED2_B_Pin,
 8001936:	2200      	movs	r2, #0
 8001938:	2120      	movs	r1, #32
 800193a:	4835      	ldr	r0, [pc, #212]	; (8001a10 <sm_relay_mute+0x1a8>)
 800193c:	f001 fdbc 	bl	80034b8 <HAL_GPIO_WritePin>
			break;
 8001940:	e058      	b.n	80019f4 <sm_relay_mute+0x18c>
		case STATE_EFFECT_MUTE:
			if (HAL_GetTick() - mute_start >= mute_time_ms){
 8001942:	f000 f8eb 	bl	8001b1c <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	4b2f      	ldr	r3, [pc, #188]	; (8001a08 <sm_relay_mute+0x1a0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	429a      	cmp	r2, r3
 8001952:	d851      	bhi.n	80019f8 <sm_relay_mute+0x190>
				if (event == EVENT_BYPASS){
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d114      	bne.n	8001984 <sm_relay_mute+0x11c>
					*state = STATE_BYPASS_MUTE;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2203      	movs	r2, #3
 800195e:	701a      	strb	r2, [r3, #0]
					mute_start = HAL_GetTick();
 8001960:	f000 f8dc 	bl	8001b1c <HAL_GetTick>
 8001964:	4603      	mov	r3, r0
 8001966:	4a28      	ldr	r2, [pc, #160]	; (8001a08 <sm_relay_mute+0x1a0>)
 8001968:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(pDOUT_RLY_SET_GPIO_Port, pDOUT_RLY_SET_Pin,
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001974:	f001 fda0 	bl	80034b8 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
					HAL_GPIO_WritePin(pDOUT_LED2_B_GPIO_Port, pDOUT_LED2_B_Pin,
 8001978:	2201      	movs	r2, #1
 800197a:	2120      	movs	r1, #32
 800197c:	4824      	ldr	r0, [pc, #144]	; (8001a10 <sm_relay_mute+0x1a8>)
 800197e:	f001 fd9b 	bl	80034b8 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
					HAL_GPIO_WritePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin,
						LED_PIN_RESET);
				}
			}
			break;
 8001982:	e039      	b.n	80019f8 <sm_relay_mute+0x190>
					*state = STATE_EFFECT_UNMUTE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(pDOUT_MUTE_1_GPIO_Port, pDOUT_MUTE_1_Pin,
 800198a:	2200      	movs	r2, #0
 800198c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001990:	481e      	ldr	r0, [pc, #120]	; (8001a0c <sm_relay_mute+0x1a4>)
 8001992:	f001 fd91 	bl	80034b8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(pDOUT_MUTE_2_GPIO_Port, pDOUT_MUTE_2_Pin,
 8001996:	2200      	movs	r2, #0
 8001998:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800199c:	481b      	ldr	r0, [pc, #108]	; (8001a0c <sm_relay_mute+0x1a4>)
 800199e:	f001 fd8b 	bl	80034b8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin,
 80019a2:	2201      	movs	r2, #1
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	481a      	ldr	r0, [pc, #104]	; (8001a10 <sm_relay_mute+0x1a8>)
 80019a8:	f001 fd86 	bl	80034b8 <HAL_GPIO_WritePin>
			break;
 80019ac:	e024      	b.n	80019f8 <sm_relay_mute+0x190>
		case STATE_EFFECT_UNMUTE:
			if (event == EVENT_BYPASS){
 80019ae:	78fb      	ldrb	r3, [r7, #3]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d123      	bne.n	80019fc <sm_relay_mute+0x194>
				*state = STATE_EFFECT_MUTE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]
				mute_start = HAL_GetTick();
 80019ba:	f000 f8af 	bl	8001b1c <HAL_GetTick>
 80019be:	4603      	mov	r3, r0
 80019c0:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <sm_relay_mute+0x1a0>)
 80019c2:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(pDOUT_MUTE_1_GPIO_Port, pDOUT_MUTE_1_Pin,
 80019c4:	2201      	movs	r2, #1
 80019c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ca:	4810      	ldr	r0, [pc, #64]	; (8001a0c <sm_relay_mute+0x1a4>)
 80019cc:	f001 fd74 	bl	80034b8 <HAL_GPIO_WritePin>
					GPIO_PIN_SET);
				HAL_GPIO_WritePin(pDOUT_MUTE_2_GPIO_Port, pDOUT_MUTE_2_Pin,
 80019d0:	2201      	movs	r2, #1
 80019d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019d6:	480d      	ldr	r0, [pc, #52]	; (8001a0c <sm_relay_mute+0x1a4>)
 80019d8:	f001 fd6e 	bl	80034b8 <HAL_GPIO_WritePin>
					GPIO_PIN_SET);
				HAL_GPIO_WritePin(pDOUT_LED2_R_GPIO_Port, pDOUT_LED2_R_Pin,
 80019dc:	2200      	movs	r2, #0
 80019de:	2180      	movs	r1, #128	; 0x80
 80019e0:	480b      	ldr	r0, [pc, #44]	; (8001a10 <sm_relay_mute+0x1a8>)
 80019e2:	f001 fd69 	bl	80034b8 <HAL_GPIO_WritePin>
					LED_PIN_SET);
			}
			break;
 80019e6:	e009      	b.n	80019fc <sm_relay_mute+0x194>
		default:
			*state = STATE_BYPASS;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	701a      	strb	r2, [r3, #0]
			break;
 80019ee:	e006      	b.n	80019fe <sm_relay_mute+0x196>
			break;
 80019f0:	bf00      	nop
 80019f2:	e004      	b.n	80019fe <sm_relay_mute+0x196>
			break;
 80019f4:	bf00      	nop
 80019f6:	e002      	b.n	80019fe <sm_relay_mute+0x196>
			break;
 80019f8:	bf00      	nop
 80019fa:	e000      	b.n	80019fe <sm_relay_mute+0x196>
			break;
 80019fc:	bf00      	nop
	}
}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000bcc 	.word	0x20000bcc
 8001a0c:	48000800 	.word	0x48000800
 8001a10:	48000400 	.word	0x48000400

08001a14 <Reset_Handler>:
 8001a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a4c <LoopForever+0x2>
 8001a18:	480d      	ldr	r0, [pc, #52]	; (8001a50 <LoopForever+0x6>)
 8001a1a:	490e      	ldr	r1, [pc, #56]	; (8001a54 <LoopForever+0xa>)
 8001a1c:	4a0e      	ldr	r2, [pc, #56]	; (8001a58 <LoopForever+0xe>)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e002      	b.n	8001a28 <LoopCopyDataInit>

08001a22 <CopyDataInit>:
 8001a22:	58d4      	ldr	r4, [r2, r3]
 8001a24:	50c4      	str	r4, [r0, r3]
 8001a26:	3304      	adds	r3, #4

08001a28 <LoopCopyDataInit>:
 8001a28:	18c4      	adds	r4, r0, r3
 8001a2a:	428c      	cmp	r4, r1
 8001a2c:	d3f9      	bcc.n	8001a22 <CopyDataInit>
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <LoopForever+0x12>)
 8001a30:	4c0b      	ldr	r4, [pc, #44]	; (8001a60 <LoopForever+0x16>)
 8001a32:	2300      	movs	r3, #0
 8001a34:	e001      	b.n	8001a3a <LoopFillZerobss>

08001a36 <FillZerobss>:
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	3204      	adds	r2, #4

08001a3a <LoopFillZerobss>:
 8001a3a:	42a2      	cmp	r2, r4
 8001a3c:	d3fb      	bcc.n	8001a36 <FillZerobss>
 8001a3e:	f7ff f999 	bl	8000d74 <SystemInit>
 8001a42:	f005 fc4f 	bl	80072e4 <__libc_init_array>
 8001a46:	f7fe fe75 	bl	8000734 <main>

08001a4a <LoopForever>:
 8001a4a:	e7fe      	b.n	8001a4a <LoopForever>
 8001a4c:	20010000 	.word	0x20010000
 8001a50:	20000000 	.word	0x20000000
 8001a54:	2000000c 	.word	0x2000000c
 8001a58:	08007394 	.word	0x08007394
 8001a5c:	2000000c 	.word	0x2000000c
 8001a60:	20000bd4 	.word	0x20000bd4

08001a64 <ADC1_2_IRQHandler>:
 8001a64:	e7fe      	b.n	8001a64 <ADC1_2_IRQHandler>
	...

08001a68 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <HAL_Init+0x28>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a07      	ldr	r2, [pc, #28]	; (8001a90 <HAL_Init+0x28>)
 8001a72:	f043 0310 	orr.w	r3, r3, #16
 8001a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a78:	2003      	movs	r0, #3
 8001a7a:	f001 f987 	bl	8002d8c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a7e:	200f      	movs	r0, #15
 8001a80:	f000 f808 	bl	8001a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a84:	f7ff f8e0 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40022000 	.word	0x40022000

08001a94 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_InitTick+0x54>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_InitTick+0x58>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f001 f99f 	bl	8002df6 <HAL_SYSTICK_Config>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e00e      	b.n	8001ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b0f      	cmp	r3, #15
 8001ac6:	d80a      	bhi.n	8001ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad0:	f001 f967 	bl	8002da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad4:	4a06      	ldr	r2, [pc, #24]	; (8001af0 <HAL_InitTick+0x5c>)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	e000      	b.n	8001ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	20000008 	.word	0x20000008
 8001af0:	20000004 	.word	0x20000004

08001af4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_IncTick+0x20>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_IncTick+0x24>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4413      	add	r3, r2
 8001b04:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <HAL_IncTick+0x24>)
 8001b06:	6013      	str	r3, [r2, #0]
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000008 	.word	0x20000008
 8001b18:	20000bd0 	.word	0x20000bd0

08001b1c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_GetTick+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000bd0 	.word	0x20000bd0

08001b34 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b3c:	f7ff ffee 	bl	8001b1c <HAL_GetTick>
 8001b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4c:	d005      	beq.n	8001b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_Delay+0x44>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b5a:	bf00      	nop
 8001b5c:	f7ff ffde 	bl	8001b1c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d8f7      	bhi.n	8001b5c <HAL_Delay+0x28>
  {
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000008 	.word	0x20000008

08001b7c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b09a      	sub	sp, #104	; 0x68
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e1e3      	b.n	8001f8c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d176      	bne.n	8001cc4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d152      	bne.n	8001c84 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7fe fbcb 	bl	8000394 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d13b      	bne.n	8001c84 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 ff87 	bl	8002b20 <ADC_Disable>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	f003 0310 	and.w	r3, r3, #16
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d12f      	bne.n	8001c84 <HAL_ADC_Init+0xe0>
 8001c24:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d12b      	bne.n	8001c84 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c34:	f023 0302 	bic.w	r3, r3, #2
 8001c38:	f043 0202 	orr.w	r2, r3, #2
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c4e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c5e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c60:	4b92      	ldr	r3, [pc, #584]	; (8001eac <HAL_ADC_Init+0x308>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a92      	ldr	r2, [pc, #584]	; (8001eb0 <HAL_ADC_Init+0x30c>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	0c9a      	lsrs	r2, r3, #18
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c76:	e002      	b.n	8001c7e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f9      	bne.n	8001c78 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d007      	beq.n	8001ca2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ca0:	d110      	bne.n	8001cc4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f023 0312 	bic.w	r3, r3, #18
 8001caa:	f043 0210 	orr.w	r2, r3, #16
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f043 0201 	orr.w	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	f003 0310 	and.w	r3, r3, #16
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f040 8150 	bne.w	8001f72 <HAL_ADC_Init+0x3ce>
 8001cd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f040 814b 	bne.w	8001f72 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f040 8143 	bne.w	8001f72 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cf4:	f043 0202 	orr.w	r2, r3, #2
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d04:	d004      	beq.n	8001d10 <HAL_ADC_Init+0x16c>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a6a      	ldr	r2, [pc, #424]	; (8001eb4 <HAL_ADC_Init+0x310>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d101      	bne.n	8001d14 <HAL_ADC_Init+0x170>
 8001d10:	4b69      	ldr	r3, [pc, #420]	; (8001eb8 <HAL_ADC_Init+0x314>)
 8001d12:	e000      	b.n	8001d16 <HAL_ADC_Init+0x172>
 8001d14:	4b69      	ldr	r3, [pc, #420]	; (8001ebc <HAL_ADC_Init+0x318>)
 8001d16:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d20:	d102      	bne.n	8001d28 <HAL_ADC_Init+0x184>
 8001d22:	4b64      	ldr	r3, [pc, #400]	; (8001eb4 <HAL_ADC_Init+0x310>)
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	e01a      	b.n	8001d5e <HAL_ADC_Init+0x1ba>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a61      	ldr	r2, [pc, #388]	; (8001eb4 <HAL_ADC_Init+0x310>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d103      	bne.n	8001d3a <HAL_ADC_Init+0x196>
 8001d32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	e011      	b.n	8001d5e <HAL_ADC_Init+0x1ba>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a60      	ldr	r2, [pc, #384]	; (8001ec0 <HAL_ADC_Init+0x31c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d102      	bne.n	8001d4a <HAL_ADC_Init+0x1a6>
 8001d44:	4b5f      	ldr	r3, [pc, #380]	; (8001ec4 <HAL_ADC_Init+0x320>)
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	e009      	b.n	8001d5e <HAL_ADC_Init+0x1ba>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a5d      	ldr	r2, [pc, #372]	; (8001ec4 <HAL_ADC_Init+0x320>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d102      	bne.n	8001d5a <HAL_ADC_Init+0x1b6>
 8001d54:	4b5a      	ldr	r3, [pc, #360]	; (8001ec0 <HAL_ADC_Init+0x31c>)
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	e001      	b.n	8001d5e <HAL_ADC_Init+0x1ba>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d108      	bne.n	8001d7e <HAL_ADC_Init+0x1da>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d101      	bne.n	8001d7e <HAL_ADC_Init+0x1da>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_ADC_Init+0x1dc>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d11c      	bne.n	8001dbe <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d84:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d010      	beq.n	8001dac <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d107      	bne.n	8001da6 <HAL_ADC_Init+0x202>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d101      	bne.n	8001da6 <HAL_ADC_Init+0x202>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <HAL_ADC_Init+0x204>
 8001da6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d108      	bne.n	8001dbe <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001dac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	431a      	orrs	r2, r3
 8001dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dbc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7e5b      	ldrb	r3, [r3, #25]
 8001dc2:	035b      	lsls	r3, r3, #13
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dc8:	2a01      	cmp	r2, #1
 8001dca:	d002      	beq.n	8001dd2 <HAL_ADC_Init+0x22e>
 8001dcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dd0:	e000      	b.n	8001dd4 <HAL_ADC_Init+0x230>
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001de4:	4313      	orrs	r3, r2
 8001de6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d11b      	bne.n	8001e2a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	7e5b      	ldrb	r3, [r3, #25]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d109      	bne.n	8001e0e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	045a      	lsls	r2, r3, #17
 8001e02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e04:	4313      	orrs	r3, r2
 8001e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e0a:	663b      	str	r3, [r7, #96]	; 0x60
 8001e0c:	e00d      	b.n	8001e2a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001e16:	f043 0220 	orr.w	r2, r3, #32
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f043 0201 	orr.w	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d054      	beq.n	8001edc <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a22      	ldr	r2, [pc, #136]	; (8001ec0 <HAL_ADC_Init+0x31c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d004      	beq.n	8001e46 <HAL_ADC_Init+0x2a2>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a20      	ldr	r2, [pc, #128]	; (8001ec4 <HAL_ADC_Init+0x320>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d140      	bne.n	8001ec8 <HAL_ADC_Init+0x324>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001e4e:	d02a      	beq.n	8001ea6 <HAL_ADC_Init+0x302>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e58:	d022      	beq.n	8001ea0 <HAL_ADC_Init+0x2fc>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001e62:	d01a      	beq.n	8001e9a <HAL_ADC_Init+0x2f6>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001e6c:	d012      	beq.n	8001e94 <HAL_ADC_Init+0x2f0>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001e76:	d00a      	beq.n	8001e8e <HAL_ADC_Init+0x2ea>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001e80:	d002      	beq.n	8001e88 <HAL_ADC_Init+0x2e4>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e86:	e023      	b.n	8001ed0 <HAL_ADC_Init+0x32c>
 8001e88:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001e8c:	e020      	b.n	8001ed0 <HAL_ADC_Init+0x32c>
 8001e8e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001e92:	e01d      	b.n	8001ed0 <HAL_ADC_Init+0x32c>
 8001e94:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001e98:	e01a      	b.n	8001ed0 <HAL_ADC_Init+0x32c>
 8001e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e9e:	e017      	b.n	8001ed0 <HAL_ADC_Init+0x32c>
 8001ea0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001ea4:	e014      	b.n	8001ed0 <HAL_ADC_Init+0x32c>
 8001ea6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001eaa:	e011      	b.n	8001ed0 <HAL_ADC_Init+0x32c>
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	431bde83 	.word	0x431bde83
 8001eb4:	50000100 	.word	0x50000100
 8001eb8:	50000300 	.word	0x50000300
 8001ebc:	50000700 	.word	0x50000700
 8001ec0:	50000400 	.word	0x50000400
 8001ec4:	50000500 	.word	0x50000500
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d114      	bne.n	8001f14 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ef8:	f023 0302 	bic.w	r3, r3, #2
 8001efc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	7e1b      	ldrb	r3, [r3, #24]
 8001f02:	039a      	lsls	r2, r3, #14
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f10:	4313      	orrs	r3, r2
 8001f12:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <HAL_ADC_Init+0x3f0>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001f24:	430b      	orrs	r3, r1
 8001f26:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d10c      	bne.n	8001f4a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f023 010f 	bic.w	r1, r3, #15
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	1e5a      	subs	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	631a      	str	r2, [r3, #48]	; 0x30
 8001f48:	e007      	b.n	8001f5a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 020f 	bic.w	r2, r2, #15
 8001f58:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f023 0303 	bic.w	r3, r3, #3
 8001f68:	f043 0201 	orr.w	r2, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	641a      	str	r2, [r3, #64]	; 0x40
 8001f70:	e00a      	b.n	8001f88 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f023 0312 	bic.w	r3, r3, #18
 8001f7a:	f043 0210 	orr.w	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001f82:	2301      	movs	r3, #1
 8001f84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001f88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3768      	adds	r7, #104	; 0x68
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	fff0c007 	.word	0xfff0c007

08001f98 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f040 80f7 	bne.w	80021a6 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_ADC_Start_DMA+0x2e>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e0f2      	b.n	80021ac <HAL_ADC_Start_DMA+0x214>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fd6:	d004      	beq.n	8001fe2 <HAL_ADC_Start_DMA+0x4a>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a75      	ldr	r2, [pc, #468]	; (80021b4 <HAL_ADC_Start_DMA+0x21c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d109      	bne.n	8001ff6 <HAL_ADC_Start_DMA+0x5e>
 8001fe2:	4b75      	ldr	r3, [pc, #468]	; (80021b8 <HAL_ADC_Start_DMA+0x220>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 031f 	and.w	r3, r3, #31
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	bf0c      	ite	eq
 8001fee:	2301      	moveq	r3, #1
 8001ff0:	2300      	movne	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	e008      	b.n	8002008 <HAL_ADC_Start_DMA+0x70>
 8001ff6:	4b71      	ldr	r3, [pc, #452]	; (80021bc <HAL_ADC_Start_DMA+0x224>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 031f 	and.w	r3, r3, #31
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	bf0c      	ite	eq
 8002002:	2301      	moveq	r3, #1
 8002004:	2300      	movne	r3, #0
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 80c5 	beq.w	8002198 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 fd22 	bl	8002a58 <ADC_Enable>
 8002014:	4603      	mov	r3, r0
 8002016:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002018:	7dfb      	ldrb	r3, [r7, #23]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f040 80b7 	bne.w	800218e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002028:	f023 0301 	bic.w	r3, r3, #1
 800202c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800203c:	d004      	beq.n	8002048 <HAL_ADC_Start_DMA+0xb0>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a5c      	ldr	r2, [pc, #368]	; (80021b4 <HAL_ADC_Start_DMA+0x21c>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d106      	bne.n	8002056 <HAL_ADC_Start_DMA+0xbe>
 8002048:	4b5b      	ldr	r3, [pc, #364]	; (80021b8 <HAL_ADC_Start_DMA+0x220>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	2b00      	cmp	r3, #0
 8002052:	d010      	beq.n	8002076 <HAL_ADC_Start_DMA+0xde>
 8002054:	e005      	b.n	8002062 <HAL_ADC_Start_DMA+0xca>
 8002056:	4b59      	ldr	r3, [pc, #356]	; (80021bc <HAL_ADC_Start_DMA+0x224>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 031f 	and.w	r3, r3, #31
 800205e:	2b00      	cmp	r3, #0
 8002060:	d009      	beq.n	8002076 <HAL_ADC_Start_DMA+0xde>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800206a:	d004      	beq.n	8002076 <HAL_ADC_Start_DMA+0xde>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a53      	ldr	r2, [pc, #332]	; (80021c0 <HAL_ADC_Start_DMA+0x228>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d115      	bne.n	80020a2 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d036      	beq.n	80020fe <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002098:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80020a0:	e02d      	b.n	80020fe <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020b6:	d004      	beq.n	80020c2 <HAL_ADC_Start_DMA+0x12a>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a3d      	ldr	r2, [pc, #244]	; (80021b4 <HAL_ADC_Start_DMA+0x21c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d10a      	bne.n	80020d8 <HAL_ADC_Start_DMA+0x140>
 80020c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	bf14      	ite	ne
 80020d0:	2301      	movne	r3, #1
 80020d2:	2300      	moveq	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	e008      	b.n	80020ea <HAL_ADC_Start_DMA+0x152>
 80020d8:	4b39      	ldr	r3, [pc, #228]	; (80021c0 <HAL_ADC_Start_DMA+0x228>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	bf14      	ite	ne
 80020e4:	2301      	movne	r3, #1
 80020e6:	2300      	moveq	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800210a:	d106      	bne.n	800211a <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002110:	f023 0206 	bic.w	r2, r3, #6
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	645a      	str	r2, [r3, #68]	; 0x44
 8002118:	e002      	b.n	8002120 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212c:	4a25      	ldr	r2, [pc, #148]	; (80021c4 <HAL_ADC_Start_DMA+0x22c>)
 800212e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002134:	4a24      	ldr	r2, [pc, #144]	; (80021c8 <HAL_ADC_Start_DMA+0x230>)
 8002136:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213c:	4a23      	ldr	r2, [pc, #140]	; (80021cc <HAL_ADC_Start_DMA+0x234>)
 800213e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	221c      	movs	r2, #28
 8002146:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0210 	orr.w	r2, r2, #16
 8002156:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0201 	orr.w	r2, r2, #1
 8002166:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	3340      	adds	r3, #64	; 0x40
 8002172:	4619      	mov	r1, r3
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f000 fe90 	bl	8002e9c <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0204 	orr.w	r2, r2, #4
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	e00d      	b.n	80021aa <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002196:	e008      	b.n	80021aa <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80021a4:	e001      	b.n	80021aa <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021a6:	2302      	movs	r3, #2
 80021a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	50000100 	.word	0x50000100
 80021b8:	50000300 	.word	0x50000300
 80021bc:	50000700 	.word	0x50000700
 80021c0:	50000400 	.word	0x50000400
 80021c4:	0800298d 	.word	0x0800298d
 80021c8:	08002a07 	.word	0x08002a07
 80021cc:	08002a23 	.word	0x08002a23

080021d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b09b      	sub	sp, #108	; 0x6c
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x22>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e2ca      	b.n	8002788 <HAL_ADC_ConfigChannel+0x5b8>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	f040 82ae 	bne.w	8002766 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b04      	cmp	r3, #4
 8002210:	d81c      	bhi.n	800224c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4413      	add	r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	461a      	mov	r2, r3
 8002226:	231f      	movs	r3, #31
 8002228:	4093      	lsls	r3, r2
 800222a:	43db      	mvns	r3, r3
 800222c:	4019      	ands	r1, r3
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	fa00 f203 	lsl.w	r2, r0, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	631a      	str	r2, [r3, #48]	; 0x30
 800224a:	e063      	b.n	8002314 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b09      	cmp	r3, #9
 8002252:	d81e      	bhi.n	8002292 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	3b1e      	subs	r3, #30
 8002268:	221f      	movs	r2, #31
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	4019      	ands	r1, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4413      	add	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	3b1e      	subs	r3, #30
 8002284:	fa00 f203 	lsl.w	r2, r0, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	635a      	str	r2, [r3, #52]	; 0x34
 8002290:	e040      	b.n	8002314 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b0e      	cmp	r3, #14
 8002298:	d81e      	bhi.n	80022d8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	4413      	add	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	3b3c      	subs	r3, #60	; 0x3c
 80022ae:	221f      	movs	r2, #31
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	4019      	ands	r1, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	4413      	add	r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	3b3c      	subs	r3, #60	; 0x3c
 80022ca:	fa00 f203 	lsl.w	r2, r0, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	639a      	str	r2, [r3, #56]	; 0x38
 80022d6:	e01d      	b.n	8002314 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4413      	add	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	3b5a      	subs	r3, #90	; 0x5a
 80022ec:	221f      	movs	r2, #31
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	4019      	ands	r1, r3
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4413      	add	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	3b5a      	subs	r3, #90	; 0x5a
 8002308:	fa00 f203 	lsl.w	r2, r0, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b00      	cmp	r3, #0
 8002320:	f040 80e5 	bne.w	80024ee <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b09      	cmp	r3, #9
 800232a:	d91c      	bls.n	8002366 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6999      	ldr	r1, [r3, #24]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	4613      	mov	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4413      	add	r3, r2
 800233c:	3b1e      	subs	r3, #30
 800233e:	2207      	movs	r2, #7
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	4019      	ands	r1, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	6898      	ldr	r0, [r3, #8]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4613      	mov	r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	3b1e      	subs	r3, #30
 8002358:	fa00 f203 	lsl.w	r2, r0, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	619a      	str	r2, [r3, #24]
 8002364:	e019      	b.n	800239a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6959      	ldr	r1, [r3, #20]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	2207      	movs	r2, #7
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	4019      	ands	r1, r3
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	6898      	ldr	r0, [r3, #8]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4613      	mov	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4413      	add	r3, r2
 800238e:	fa00 f203 	lsl.w	r2, r0, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	08db      	lsrs	r3, r3, #3
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d84f      	bhi.n	800245c <HAL_ADC_ConfigChannel+0x28c>
 80023bc:	a201      	add	r2, pc, #4	; (adr r2, 80023c4 <HAL_ADC_ConfigChannel+0x1f4>)
 80023be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c2:	bf00      	nop
 80023c4:	080023d5 	.word	0x080023d5
 80023c8:	080023f7 	.word	0x080023f7
 80023cc:	08002419 	.word	0x08002419
 80023d0:	0800243b 	.word	0x0800243b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023da:	4b9a      	ldr	r3, [pc, #616]	; (8002644 <HAL_ADC_ConfigChannel+0x474>)
 80023dc:	4013      	ands	r3, r2
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	0691      	lsls	r1, r2, #26
 80023e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023e6:	430a      	orrs	r2, r1
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023f2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80023f4:	e07e      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023fc:	4b91      	ldr	r3, [pc, #580]	; (8002644 <HAL_ADC_ConfigChannel+0x474>)
 80023fe:	4013      	ands	r3, r2
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	0691      	lsls	r1, r2, #26
 8002406:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002408:	430a      	orrs	r2, r1
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002414:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002416:	e06d      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800241e:	4b89      	ldr	r3, [pc, #548]	; (8002644 <HAL_ADC_ConfigChannel+0x474>)
 8002420:	4013      	ands	r3, r2
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	0691      	lsls	r1, r2, #26
 8002428:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800242a:	430a      	orrs	r2, r1
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002436:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002438:	e05c      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002440:	4b80      	ldr	r3, [pc, #512]	; (8002644 <HAL_ADC_ConfigChannel+0x474>)
 8002442:	4013      	ands	r3, r2
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	0691      	lsls	r1, r2, #26
 800244a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800244c:	430a      	orrs	r2, r1
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002458:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800245a:	e04b      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002462:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	069b      	lsls	r3, r3, #26
 800246c:	429a      	cmp	r2, r3
 800246e:	d107      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800247e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002486:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	069b      	lsls	r3, r3, #26
 8002490:	429a      	cmp	r2, r3
 8002492:	d107      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024a2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	069b      	lsls	r3, r3, #26
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d107      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024c6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	069b      	lsls	r3, r3, #26
 80024d8:	429a      	cmp	r2, r3
 80024da:	d10a      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024ea:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80024ec:	e001      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80024ee:	bf00      	nop
 80024f0:	e000      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80024f2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d108      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x344>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x344>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <HAL_ADC_ConfigChannel+0x346>
 8002514:	2300      	movs	r3, #0
 8002516:	2b00      	cmp	r3, #0
 8002518:	f040 8130 	bne.w	800277c <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d00f      	beq.n	8002544 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2201      	movs	r2, #1
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43da      	mvns	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	400a      	ands	r2, r1
 800253e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002542:	e049      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2201      	movs	r2, #1
 8002552:	409a      	lsls	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b09      	cmp	r3, #9
 8002564:	d91c      	bls.n	80025a0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6999      	ldr	r1, [r3, #24]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4613      	mov	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	3b1b      	subs	r3, #27
 8002578:	2207      	movs	r2, #7
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	4019      	ands	r1, r3
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6898      	ldr	r0, [r3, #8]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	4613      	mov	r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	4413      	add	r3, r2
 8002590:	3b1b      	subs	r3, #27
 8002592:	fa00 f203 	lsl.w	r2, r0, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	619a      	str	r2, [r3, #24]
 800259e:	e01b      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6959      	ldr	r1, [r3, #20]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	4613      	mov	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4413      	add	r3, r2
 80025b2:	2207      	movs	r2, #7
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	4019      	ands	r1, r3
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	6898      	ldr	r0, [r3, #8]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	4613      	mov	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	fa00 f203 	lsl.w	r2, r0, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025e0:	d004      	beq.n	80025ec <HAL_ADC_ConfigChannel+0x41c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a18      	ldr	r2, [pc, #96]	; (8002648 <HAL_ADC_ConfigChannel+0x478>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d101      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x420>
 80025ec:	4b17      	ldr	r3, [pc, #92]	; (800264c <HAL_ADC_ConfigChannel+0x47c>)
 80025ee:	e000      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x422>
 80025f0:	4b17      	ldr	r3, [pc, #92]	; (8002650 <HAL_ADC_ConfigChannel+0x480>)
 80025f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b10      	cmp	r3, #16
 80025fa:	d105      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80025fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002604:	2b00      	cmp	r3, #0
 8002606:	d015      	beq.n	8002634 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800260c:	2b11      	cmp	r3, #17
 800260e:	d105      	bne.n	800261c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00b      	beq.n	8002634 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002620:	2b12      	cmp	r3, #18
 8002622:	f040 80ab 	bne.w	800277c <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800262e:	2b00      	cmp	r3, #0
 8002630:	f040 80a4 	bne.w	800277c <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800263c:	d10a      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x484>
 800263e:	4b02      	ldr	r3, [pc, #8]	; (8002648 <HAL_ADC_ConfigChannel+0x478>)
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	e022      	b.n	800268a <HAL_ADC_ConfigChannel+0x4ba>
 8002644:	83fff000 	.word	0x83fff000
 8002648:	50000100 	.word	0x50000100
 800264c:	50000300 	.word	0x50000300
 8002650:	50000700 	.word	0x50000700
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a4e      	ldr	r2, [pc, #312]	; (8002794 <HAL_ADC_ConfigChannel+0x5c4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d103      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x496>
 800265e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	e011      	b.n	800268a <HAL_ADC_ConfigChannel+0x4ba>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a4b      	ldr	r2, [pc, #300]	; (8002798 <HAL_ADC_ConfigChannel+0x5c8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d102      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x4a6>
 8002670:	4b4a      	ldr	r3, [pc, #296]	; (800279c <HAL_ADC_ConfigChannel+0x5cc>)
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	e009      	b.n	800268a <HAL_ADC_ConfigChannel+0x4ba>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a48      	ldr	r2, [pc, #288]	; (800279c <HAL_ADC_ConfigChannel+0x5cc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d102      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x4b6>
 8002680:	4b45      	ldr	r3, [pc, #276]	; (8002798 <HAL_ADC_ConfigChannel+0x5c8>)
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	e001      	b.n	800268a <HAL_ADC_ConfigChannel+0x4ba>
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d108      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x4da>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x4da>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <HAL_ADC_ConfigChannel+0x4dc>
 80026aa:	2300      	movs	r3, #0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d150      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80026b0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d010      	beq.n	80026d8 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d107      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x502>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x502>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x504>
 80026d2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d13c      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b10      	cmp	r3, #16
 80026de:	d11d      	bne.n	800271c <HAL_ADC_ConfigChannel+0x54c>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026e8:	d118      	bne.n	800271c <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80026ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026f4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026f6:	4b2a      	ldr	r3, [pc, #168]	; (80027a0 <HAL_ADC_ConfigChannel+0x5d0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a2a      	ldr	r2, [pc, #168]	; (80027a4 <HAL_ADC_ConfigChannel+0x5d4>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	0c9a      	lsrs	r2, r3, #18
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800270c:	e002      	b.n	8002714 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	3b01      	subs	r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f9      	bne.n	800270e <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800271a:	e02e      	b.n	800277a <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b11      	cmp	r3, #17
 8002722:	d10b      	bne.n	800273c <HAL_ADC_ConfigChannel+0x56c>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800272c:	d106      	bne.n	800273c <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800272e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002738:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800273a:	e01e      	b.n	800277a <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b12      	cmp	r3, #18
 8002742:	d11a      	bne.n	800277a <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800274c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800274e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002750:	e013      	b.n	800277a <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f043 0220 	orr.w	r2, r3, #32
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002764:	e00a      	b.n	800277c <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f043 0220 	orr.w	r2, r3, #32
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002778:	e000      	b.n	800277c <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800277a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002784:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002788:	4618      	mov	r0, r3
 800278a:	376c      	adds	r7, #108	; 0x6c
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	50000100 	.word	0x50000100
 8002798:	50000400 	.word	0x50000400
 800279c:	50000500 	.word	0x50000500
 80027a0:	20000000 	.word	0x20000000
 80027a4:	431bde83 	.word	0x431bde83

080027a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b099      	sub	sp, #100	; 0x64
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027c0:	d102      	bne.n	80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80027c2:	4b6d      	ldr	r3, [pc, #436]	; (8002978 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	e01a      	b.n	80027fe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a6a      	ldr	r2, [pc, #424]	; (8002978 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d103      	bne.n	80027da <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80027d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	e011      	b.n	80027fe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a67      	ldr	r2, [pc, #412]	; (800297c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d102      	bne.n	80027ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80027e4:	4b66      	ldr	r3, [pc, #408]	; (8002980 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	e009      	b.n	80027fe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a64      	ldr	r2, [pc, #400]	; (8002980 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d102      	bne.n	80027fa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80027f4:	4b61      	ldr	r3, [pc, #388]	; (800297c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	e001      	b.n	80027fe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0b0      	b.n	800296a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002812:	2302      	movs	r3, #2
 8002814:	e0a9      	b.n	800296a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	f040 808d 	bne.w	8002948 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b00      	cmp	r3, #0
 8002838:	f040 8086 	bne.w	8002948 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002844:	d004      	beq.n	8002850 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a4b      	ldr	r2, [pc, #300]	; (8002978 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d101      	bne.n	8002854 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002850:	4b4c      	ldr	r3, [pc, #304]	; (8002984 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002852:	e000      	b.n	8002856 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002854:	4b4c      	ldr	r3, [pc, #304]	; (8002988 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002856:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d040      	beq.n	80028e2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002860:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	6859      	ldr	r1, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002872:	035b      	lsls	r3, r3, #13
 8002874:	430b      	orrs	r3, r1
 8002876:	431a      	orrs	r2, r3
 8002878:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800287a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b01      	cmp	r3, #1
 8002888:	d108      	bne.n	800289c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800289c:	2300      	movs	r3, #0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d15c      	bne.n	800295c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d107      	bne.n	80028be <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80028be:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d14b      	bne.n	800295c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80028c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028cc:	f023 030f 	bic.w	r3, r3, #15
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	6811      	ldr	r1, [r2, #0]
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	6892      	ldr	r2, [r2, #8]
 80028d8:	430a      	orrs	r2, r1
 80028da:	431a      	orrs	r2, r3
 80028dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028de:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80028e0:	e03c      	b.n	800295c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80028e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ec:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d108      	bne.n	800290e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800290e:	2300      	movs	r3, #0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d123      	bne.n	800295c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d107      	bne.n	8002930 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002930:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002932:	2b00      	cmp	r3, #0
 8002934:	d112      	bne.n	800295c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002936:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800293e:	f023 030f 	bic.w	r3, r3, #15
 8002942:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002944:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002946:	e009      	b.n	800295c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	f043 0220 	orr.w	r2, r3, #32
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800295a:	e000      	b.n	800295e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800295c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002966:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800296a:	4618      	mov	r0, r3
 800296c:	3764      	adds	r7, #100	; 0x64
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	50000100 	.word	0x50000100
 800297c:	50000400 	.word	0x50000400
 8002980:	50000500 	.word	0x50000500
 8002984:	50000300 	.word	0x50000300
 8002988:	50000700 	.word	0x50000700

0800298c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d126      	bne.n	80029f4 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d115      	bne.n	80029ec <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d111      	bne.n	80029ec <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d105      	bne.n	80029ec <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	f043 0201 	orr.w	r2, r3, #1
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f7fe f82d 	bl	8000a4c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80029f2:	e004      	b.n	80029fe <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	4798      	blx	r3
}
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f7ff f8b1 	bl	8001b7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b084      	sub	sp, #16
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a40:	f043 0204 	orr.w	r2, r3, #4
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f7ff f8a1 	bl	8001b90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a4e:	bf00      	nop
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d108      	bne.n	8002a84 <ADC_Enable+0x2c>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <ADC_Enable+0x2c>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <ADC_Enable+0x2e>
 8002a84:	2300      	movs	r3, #0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d143      	bne.n	8002b12 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	4b22      	ldr	r3, [pc, #136]	; (8002b1c <ADC_Enable+0xc4>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00d      	beq.n	8002ab4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	f043 0210 	orr.w	r2, r3, #16
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa8:	f043 0201 	orr.w	r2, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e02f      	b.n	8002b14 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002ac4:	f7ff f82a 	bl	8001b1c <HAL_GetTick>
 8002ac8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002aca:	e01b      	b.n	8002b04 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002acc:	f7ff f826 	bl	8001b1c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d914      	bls.n	8002b04 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d00d      	beq.n	8002b04 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	f043 0210 	orr.w	r2, r3, #16
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af8:	f043 0201 	orr.w	r2, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e007      	b.n	8002b14 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d1dc      	bne.n	8002acc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	8000003f 	.word	0x8000003f

08002b20 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d108      	bne.n	8002b4c <ADC_Disable+0x2c>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <ADC_Disable+0x2c>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <ADC_Disable+0x2e>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d047      	beq.n	8002be2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 030d 	and.w	r3, r3, #13
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d10f      	bne.n	8002b80 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0202 	orr.w	r2, r2, #2
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2203      	movs	r2, #3
 8002b76:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002b78:	f7fe ffd0 	bl	8001b1c <HAL_GetTick>
 8002b7c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002b7e:	e029      	b.n	8002bd4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	f043 0210 	orr.w	r2, r3, #16
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e023      	b.n	8002be4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b9c:	f7fe ffbe 	bl	8001b1c <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d914      	bls.n	8002bd4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d10d      	bne.n	8002bd4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	f043 0210 	orr.w	r2, r3, #16
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc8:	f043 0201 	orr.w	r2, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e007      	b.n	8002be4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d0dc      	beq.n	8002b9c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <__NVIC_SetPriorityGrouping+0x44>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c08:	4013      	ands	r3, r2
 8002c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c1e:	4a04      	ldr	r2, [pc, #16]	; (8002c30 <__NVIC_SetPriorityGrouping+0x44>)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	60d3      	str	r3, [r2, #12]
}
 8002c24:	bf00      	nop
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <__NVIC_GetPriorityGrouping+0x18>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	0a1b      	lsrs	r3, r3, #8
 8002c3e:	f003 0307 	and.w	r3, r3, #7
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	db0b      	blt.n	8002c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	f003 021f 	and.w	r2, r3, #31
 8002c68:	4907      	ldr	r1, [pc, #28]	; (8002c88 <__NVIC_EnableIRQ+0x38>)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	2001      	movs	r0, #1
 8002c72:	fa00 f202 	lsl.w	r2, r0, r2
 8002c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	e000e100 	.word	0xe000e100

08002c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	6039      	str	r1, [r7, #0]
 8002c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	db0a      	blt.n	8002cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	490c      	ldr	r1, [pc, #48]	; (8002cd8 <__NVIC_SetPriority+0x4c>)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	0112      	lsls	r2, r2, #4
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	440b      	add	r3, r1
 8002cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb4:	e00a      	b.n	8002ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	4908      	ldr	r1, [pc, #32]	; (8002cdc <__NVIC_SetPriority+0x50>)
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	3b04      	subs	r3, #4
 8002cc4:	0112      	lsls	r2, r2, #4
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	440b      	add	r3, r1
 8002cca:	761a      	strb	r2, [r3, #24]
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000e100 	.word	0xe000e100
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b089      	sub	sp, #36	; 0x24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f1c3 0307 	rsb	r3, r3, #7
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	bf28      	it	cs
 8002cfe:	2304      	movcs	r3, #4
 8002d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	3304      	adds	r3, #4
 8002d06:	2b06      	cmp	r3, #6
 8002d08:	d902      	bls.n	8002d10 <NVIC_EncodePriority+0x30>
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	3b03      	subs	r3, #3
 8002d0e:	e000      	b.n	8002d12 <NVIC_EncodePriority+0x32>
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d14:	f04f 32ff 	mov.w	r2, #4294967295
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43da      	mvns	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	401a      	ands	r2, r3
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d28:	f04f 31ff 	mov.w	r1, #4294967295
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d32:	43d9      	mvns	r1, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d38:	4313      	orrs	r3, r2
         );
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3724      	adds	r7, #36	; 0x24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
	...

08002d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d58:	d301      	bcc.n	8002d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e00f      	b.n	8002d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	; (8002d88 <SysTick_Config+0x40>)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d66:	210f      	movs	r1, #15
 8002d68:	f04f 30ff 	mov.w	r0, #4294967295
 8002d6c:	f7ff ff8e 	bl	8002c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <SysTick_Config+0x40>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d76:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <SysTick_Config+0x40>)
 8002d78:	2207      	movs	r2, #7
 8002d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	e000e010 	.word	0xe000e010

08002d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff ff29 	bl	8002bec <__NVIC_SetPriorityGrouping>
}
 8002d9a:	bf00      	nop
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b086      	sub	sp, #24
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	4603      	mov	r3, r0
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002db4:	f7ff ff3e 	bl	8002c34 <__NVIC_GetPriorityGrouping>
 8002db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	6978      	ldr	r0, [r7, #20]
 8002dc0:	f7ff ff8e 	bl	8002ce0 <NVIC_EncodePriority>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff5d 	bl	8002c8c <__NVIC_SetPriority>
}
 8002dd2:	bf00      	nop
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	4603      	mov	r3, r0
 8002de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ff31 	bl	8002c50 <__NVIC_EnableIRQ>
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff ffa2 	bl	8002d48 <SysTick_Config>
 8002e04:	4603      	mov	r3, r0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e037      	b.n	8002e94 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e3a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002e3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f940 	bl	80030fc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}  
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_DMA_Start_IT+0x20>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e04a      	b.n	8002f52 <HAL_DMA_Start_IT+0xb6>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d13a      	bne.n	8002f44 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0201 	bic.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f8d4 	bl	80030a0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 020e 	orr.w	r2, r2, #14
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	e00f      	b.n	8002f32 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 020a 	orr.w	r2, r2, #10
 8002f20:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0204 	bic.w	r2, r2, #4
 8002f30:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0201 	orr.w	r2, r2, #1
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	e005      	b.n	8002f50 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b084      	sub	sp, #16
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	2204      	movs	r2, #4
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d024      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x72>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d01f      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d107      	bne.n	8002faa <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0204 	bic.w	r2, r2, #4
 8002fa8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb2:	2104      	movs	r1, #4
 8002fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d06a      	beq.n	8003098 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002fca:	e065      	b.n	8003098 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d02c      	beq.n	8003036 <HAL_DMA_IRQHandler+0xdc>
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d027      	beq.n	8003036 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10b      	bne.n	800300c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 020a 	bic.w	r2, r2, #10
 8003002:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003014:	2102      	movs	r1, #2
 8003016:	fa01 f202 	lsl.w	r2, r1, r2
 800301a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	2b00      	cmp	r3, #0
 800302a:	d035      	beq.n	8003098 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003034:	e030      	b.n	8003098 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	2208      	movs	r2, #8
 800303c:	409a      	lsls	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4013      	ands	r3, r2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d028      	beq.n	8003098 <HAL_DMA_IRQHandler+0x13e>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	2b00      	cmp	r3, #0
 800304e:	d023      	beq.n	8003098 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 020e 	bic.w	r2, r2, #14
 800305e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003068:	2101      	movs	r1, #1
 800306a:	fa01 f202 	lsl.w	r2, r1, r2
 800306e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	2b00      	cmp	r3, #0
 800308c:	d004      	beq.n	8003098 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	4798      	blx	r3
    }
  }
}  
 8003096:	e7ff      	b.n	8003098 <HAL_DMA_IRQHandler+0x13e>
 8003098:	bf00      	nop
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b6:	2101      	movs	r1, #1
 80030b8:	fa01 f202 	lsl.w	r2, r1, r2
 80030bc:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b10      	cmp	r3, #16
 80030cc:	d108      	bne.n	80030e0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030de:	e007      	b.n	80030f0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	60da      	str	r2, [r3, #12]
}
 80030f0:	bf00      	nop
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	4b14      	ldr	r3, [pc, #80]	; (800315c <DMA_CalcBaseAndBitshift+0x60>)
 800310c:	429a      	cmp	r2, r3
 800310e:	d80f      	bhi.n	8003130 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	4b12      	ldr	r3, [pc, #72]	; (8003160 <DMA_CalcBaseAndBitshift+0x64>)
 8003118:	4413      	add	r3, r2
 800311a:	4a12      	ldr	r2, [pc, #72]	; (8003164 <DMA_CalcBaseAndBitshift+0x68>)
 800311c:	fba2 2303 	umull	r2, r3, r2, r3
 8003120:	091b      	lsrs	r3, r3, #4
 8003122:	009a      	lsls	r2, r3, #2
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a0f      	ldr	r2, [pc, #60]	; (8003168 <DMA_CalcBaseAndBitshift+0x6c>)
 800312c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800312e:	e00e      	b.n	800314e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	461a      	mov	r2, r3
 8003136:	4b0d      	ldr	r3, [pc, #52]	; (800316c <DMA_CalcBaseAndBitshift+0x70>)
 8003138:	4413      	add	r3, r2
 800313a:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <DMA_CalcBaseAndBitshift+0x68>)
 800313c:	fba2 2303 	umull	r2, r3, r2, r3
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	009a      	lsls	r2, r3, #2
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a09      	ldr	r2, [pc, #36]	; (8003170 <DMA_CalcBaseAndBitshift+0x74>)
 800314c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40020407 	.word	0x40020407
 8003160:	bffdfff8 	.word	0xbffdfff8
 8003164:	cccccccd 	.word	0xcccccccd
 8003168:	40020000 	.word	0x40020000
 800316c:	bffdfbf8 	.word	0xbffdfbf8
 8003170:	40020400 	.word	0x40020400

08003174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003182:	e160      	b.n	8003446 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	2101      	movs	r1, #1
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	fa01 f303 	lsl.w	r3, r1, r3
 8003190:	4013      	ands	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 8152 	beq.w	8003440 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d005      	beq.n	80031b4 <HAL_GPIO_Init+0x40>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d130      	bne.n	8003216 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	2203      	movs	r2, #3
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4013      	ands	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031ea:	2201      	movs	r2, #1
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43db      	mvns	r3, r3
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4013      	ands	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	091b      	lsrs	r3, r3, #4
 8003200:	f003 0201 	and.w	r2, r3, #1
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	2b03      	cmp	r3, #3
 8003220:	d017      	beq.n	8003252 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	2203      	movs	r2, #3
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	43db      	mvns	r3, r3
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4013      	ands	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d123      	bne.n	80032a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	08da      	lsrs	r2, r3, #3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3208      	adds	r2, #8
 8003266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800326a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	220f      	movs	r2, #15
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43db      	mvns	r3, r3
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	4013      	ands	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	08da      	lsrs	r2, r3, #3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3208      	adds	r2, #8
 80032a0:	6939      	ldr	r1, [r7, #16]
 80032a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	2203      	movs	r2, #3
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4013      	ands	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 0203 	and.w	r2, r3, #3
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 80ac 	beq.w	8003440 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e8:	4b5e      	ldr	r3, [pc, #376]	; (8003464 <HAL_GPIO_Init+0x2f0>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	4a5d      	ldr	r2, [pc, #372]	; (8003464 <HAL_GPIO_Init+0x2f0>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6193      	str	r3, [r2, #24]
 80032f4:	4b5b      	ldr	r3, [pc, #364]	; (8003464 <HAL_GPIO_Init+0x2f0>)
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003300:	4a59      	ldr	r2, [pc, #356]	; (8003468 <HAL_GPIO_Init+0x2f4>)
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	089b      	lsrs	r3, r3, #2
 8003306:	3302      	adds	r3, #2
 8003308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	220f      	movs	r2, #15
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4013      	ands	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800332a:	d025      	beq.n	8003378 <HAL_GPIO_Init+0x204>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a4f      	ldr	r2, [pc, #316]	; (800346c <HAL_GPIO_Init+0x2f8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d01f      	beq.n	8003374 <HAL_GPIO_Init+0x200>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a4e      	ldr	r2, [pc, #312]	; (8003470 <HAL_GPIO_Init+0x2fc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d019      	beq.n	8003370 <HAL_GPIO_Init+0x1fc>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a4d      	ldr	r2, [pc, #308]	; (8003474 <HAL_GPIO_Init+0x300>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d013      	beq.n	800336c <HAL_GPIO_Init+0x1f8>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a4c      	ldr	r2, [pc, #304]	; (8003478 <HAL_GPIO_Init+0x304>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d00d      	beq.n	8003368 <HAL_GPIO_Init+0x1f4>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a4b      	ldr	r2, [pc, #300]	; (800347c <HAL_GPIO_Init+0x308>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d007      	beq.n	8003364 <HAL_GPIO_Init+0x1f0>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a4a      	ldr	r2, [pc, #296]	; (8003480 <HAL_GPIO_Init+0x30c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d101      	bne.n	8003360 <HAL_GPIO_Init+0x1ec>
 800335c:	2306      	movs	r3, #6
 800335e:	e00c      	b.n	800337a <HAL_GPIO_Init+0x206>
 8003360:	2307      	movs	r3, #7
 8003362:	e00a      	b.n	800337a <HAL_GPIO_Init+0x206>
 8003364:	2305      	movs	r3, #5
 8003366:	e008      	b.n	800337a <HAL_GPIO_Init+0x206>
 8003368:	2304      	movs	r3, #4
 800336a:	e006      	b.n	800337a <HAL_GPIO_Init+0x206>
 800336c:	2303      	movs	r3, #3
 800336e:	e004      	b.n	800337a <HAL_GPIO_Init+0x206>
 8003370:	2302      	movs	r3, #2
 8003372:	e002      	b.n	800337a <HAL_GPIO_Init+0x206>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <HAL_GPIO_Init+0x206>
 8003378:	2300      	movs	r3, #0
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	f002 0203 	and.w	r2, r2, #3
 8003380:	0092      	lsls	r2, r2, #2
 8003382:	4093      	lsls	r3, r2
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800338a:	4937      	ldr	r1, [pc, #220]	; (8003468 <HAL_GPIO_Init+0x2f4>)
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	089b      	lsrs	r3, r3, #2
 8003390:	3302      	adds	r3, #2
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003398:	4b3a      	ldr	r3, [pc, #232]	; (8003484 <HAL_GPIO_Init+0x310>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80033bc:	4a31      	ldr	r2, [pc, #196]	; (8003484 <HAL_GPIO_Init+0x310>)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033c2:	4b30      	ldr	r3, [pc, #192]	; (8003484 <HAL_GPIO_Init+0x310>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4013      	ands	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80033e6:	4a27      	ldr	r2, [pc, #156]	; (8003484 <HAL_GPIO_Init+0x310>)
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ec:	4b25      	ldr	r3, [pc, #148]	; (8003484 <HAL_GPIO_Init+0x310>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	43db      	mvns	r3, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003410:	4a1c      	ldr	r2, [pc, #112]	; (8003484 <HAL_GPIO_Init+0x310>)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003416:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <HAL_GPIO_Init+0x310>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	43db      	mvns	r3, r3
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800343a:	4a12      	ldr	r2, [pc, #72]	; (8003484 <HAL_GPIO_Init+0x310>)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	3301      	adds	r3, #1
 8003444:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	f47f ae97 	bne.w	8003184 <HAL_GPIO_Init+0x10>
  }
}
 8003456:	bf00      	nop
 8003458:	bf00      	nop
 800345a:	371c      	adds	r7, #28
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	40021000 	.word	0x40021000
 8003468:	40010000 	.word	0x40010000
 800346c:	48000400 	.word	0x48000400
 8003470:	48000800 	.word	0x48000800
 8003474:	48000c00 	.word	0x48000c00
 8003478:	48001000 	.word	0x48001000
 800347c:	48001400 	.word	0x48001400
 8003480:	48001800 	.word	0x48001800
 8003484:	40010400 	.word	0x40010400

08003488 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	460b      	mov	r3, r1
 8003492:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	887b      	ldrh	r3, [r7, #2]
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034a0:	2301      	movs	r3, #1
 80034a2:	73fb      	strb	r3, [r7, #15]
 80034a4:	e001      	b.n	80034aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034a6:	2300      	movs	r3, #0
 80034a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	807b      	strh	r3, [r7, #2]
 80034c4:	4613      	mov	r3, r2
 80034c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034c8:	787b      	ldrb	r3, [r7, #1]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034ce:	887a      	ldrh	r2, [r7, #2]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034d4:	e002      	b.n	80034dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034d6:	887a      	ldrh	r2, [r7, #2]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	460b      	mov	r3, r1
 80034f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034fa:	887a      	ldrh	r2, [r7, #2]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4013      	ands	r3, r2
 8003500:	041a      	lsls	r2, r3, #16
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	43d9      	mvns	r1, r3
 8003506:	887b      	ldrh	r3, [r7, #2]
 8003508:	400b      	ands	r3, r1
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	619a      	str	r2, [r3, #24]
}
 8003510:	bf00      	nop
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003522:	af00      	add	r7, sp, #0
 8003524:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003528:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800352c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800352e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003532:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d102      	bne.n	8003542 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	f001 b83a 	b.w	80045b6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003542:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003546:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 816f 	beq.w	8003836 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003558:	4bb5      	ldr	r3, [pc, #724]	; (8003830 <HAL_RCC_OscConfig+0x314>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 030c 	and.w	r3, r3, #12
 8003560:	2b04      	cmp	r3, #4
 8003562:	d00c      	beq.n	800357e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003564:	4bb2      	ldr	r3, [pc, #712]	; (8003830 <HAL_RCC_OscConfig+0x314>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 030c 	and.w	r3, r3, #12
 800356c:	2b08      	cmp	r3, #8
 800356e:	d15c      	bne.n	800362a <HAL_RCC_OscConfig+0x10e>
 8003570:	4baf      	ldr	r3, [pc, #700]	; (8003830 <HAL_RCC_OscConfig+0x314>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357c:	d155      	bne.n	800362a <HAL_RCC_OscConfig+0x10e>
 800357e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003582:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003586:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800358a:	fa93 f3a3 	rbit	r3, r3
 800358e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003592:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003596:	fab3 f383 	clz	r3, r3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	095b      	lsrs	r3, r3, #5
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d102      	bne.n	80035b0 <HAL_RCC_OscConfig+0x94>
 80035aa:	4ba1      	ldr	r3, [pc, #644]	; (8003830 <HAL_RCC_OscConfig+0x314>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	e015      	b.n	80035dc <HAL_RCC_OscConfig+0xc0>
 80035b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035b4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80035bc:	fa93 f3a3 	rbit	r3, r3
 80035c0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80035c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035c8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80035cc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80035d0:	fa93 f3a3 	rbit	r3, r3
 80035d4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80035d8:	4b95      	ldr	r3, [pc, #596]	; (8003830 <HAL_RCC_OscConfig+0x314>)
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035e0:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80035e4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80035e8:	fa92 f2a2 	rbit	r2, r2
 80035ec:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80035f0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80035f4:	fab2 f282 	clz	r2, r2
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	f042 0220 	orr.w	r2, r2, #32
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	f002 021f 	and.w	r2, r2, #31
 8003604:	2101      	movs	r1, #1
 8003606:	fa01 f202 	lsl.w	r2, r1, r2
 800360a:	4013      	ands	r3, r2
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 8111 	beq.w	8003834 <HAL_RCC_OscConfig+0x318>
 8003612:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003616:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	f040 8108 	bne.w	8003834 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	f000 bfc6 	b.w	80045b6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800362a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800362e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363a:	d106      	bne.n	800364a <HAL_RCC_OscConfig+0x12e>
 800363c:	4b7c      	ldr	r3, [pc, #496]	; (8003830 <HAL_RCC_OscConfig+0x314>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a7b      	ldr	r2, [pc, #492]	; (8003830 <HAL_RCC_OscConfig+0x314>)
 8003642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	e036      	b.n	80036b8 <HAL_RCC_OscConfig+0x19c>
 800364a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800364e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10c      	bne.n	8003674 <HAL_RCC_OscConfig+0x158>
 800365a:	4b75      	ldr	r3, [pc, #468]	; (8003830 <HAL_RCC_OscConfig+0x314>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a74      	ldr	r2, [pc, #464]	; (8003830 <HAL_RCC_OscConfig+0x314>)
 8003660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	4b72      	ldr	r3, [pc, #456]	; (8003830 <HAL_RCC_OscConfig+0x314>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a71      	ldr	r2, [pc, #452]	; (8003830 <HAL_RCC_OscConfig+0x314>)
 800366c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	e021      	b.n	80036b8 <HAL_RCC_OscConfig+0x19c>
 8003674:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003678:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003684:	d10c      	bne.n	80036a0 <HAL_RCC_OscConfig+0x184>
 8003686:	4b6a      	ldr	r3, [pc, #424]	; (8003830 <HAL_RCC_OscConfig+0x314>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a69      	ldr	r2, [pc, #420]	; (8003830 <HAL_RCC_OscConfig+0x314>)
 800368c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	4b67      	ldr	r3, [pc, #412]	; (8003830 <HAL_RCC_OscConfig+0x314>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a66      	ldr	r2, [pc, #408]	; (8003830 <HAL_RCC_OscConfig+0x314>)
 8003698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	e00b      	b.n	80036b8 <HAL_RCC_OscConfig+0x19c>
 80036a0:	4b63      	ldr	r3, [pc, #396]	; (8003830 <HAL_RCC_OscConfig+0x314>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a62      	ldr	r2, [pc, #392]	; (8003830 <HAL_RCC_OscConfig+0x314>)
 80036a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	4b60      	ldr	r3, [pc, #384]	; (8003830 <HAL_RCC_OscConfig+0x314>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a5f      	ldr	r2, [pc, #380]	; (8003830 <HAL_RCC_OscConfig+0x314>)
 80036b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036b6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d059      	beq.n	800377c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c8:	f7fe fa28 	bl	8001b1c <HAL_GetTick>
 80036cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d0:	e00a      	b.n	80036e8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036d2:	f7fe fa23 	bl	8001b1c <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b64      	cmp	r3, #100	; 0x64
 80036e0:	d902      	bls.n	80036e8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	f000 bf67 	b.w	80045b6 <HAL_RCC_OscConfig+0x109a>
 80036e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036ec:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80036fc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003700:	fab3 f383 	clz	r3, r3
 8003704:	b2db      	uxtb	r3, r3
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	b2db      	uxtb	r3, r3
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b01      	cmp	r3, #1
 8003712:	d102      	bne.n	800371a <HAL_RCC_OscConfig+0x1fe>
 8003714:	4b46      	ldr	r3, [pc, #280]	; (8003830 <HAL_RCC_OscConfig+0x314>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	e015      	b.n	8003746 <HAL_RCC_OscConfig+0x22a>
 800371a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800371e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003726:	fa93 f3a3 	rbit	r3, r3
 800372a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800372e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003732:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003736:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800373a:	fa93 f3a3 	rbit	r3, r3
 800373e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003742:	4b3b      	ldr	r3, [pc, #236]	; (8003830 <HAL_RCC_OscConfig+0x314>)
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800374a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800374e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003752:	fa92 f2a2 	rbit	r2, r2
 8003756:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800375a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800375e:	fab2 f282 	clz	r2, r2
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	f042 0220 	orr.w	r2, r2, #32
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	f002 021f 	and.w	r2, r2, #31
 800376e:	2101      	movs	r1, #1
 8003770:	fa01 f202 	lsl.w	r2, r1, r2
 8003774:	4013      	ands	r3, r2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0ab      	beq.n	80036d2 <HAL_RCC_OscConfig+0x1b6>
 800377a:	e05c      	b.n	8003836 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377c:	f7fe f9ce 	bl	8001b1c <HAL_GetTick>
 8003780:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003784:	e00a      	b.n	800379c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003786:	f7fe f9c9 	bl	8001b1c <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b64      	cmp	r3, #100	; 0x64
 8003794:	d902      	bls.n	800379c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	f000 bf0d 	b.w	80045b6 <HAL_RCC_OscConfig+0x109a>
 800379c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037a0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80037b0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037b4:	fab3 f383 	clz	r3, r3
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	095b      	lsrs	r3, r3, #5
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d102      	bne.n	80037ce <HAL_RCC_OscConfig+0x2b2>
 80037c8:	4b19      	ldr	r3, [pc, #100]	; (8003830 <HAL_RCC_OscConfig+0x314>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	e015      	b.n	80037fa <HAL_RCC_OscConfig+0x2de>
 80037ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037d2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80037da:	fa93 f3a3 	rbit	r3, r3
 80037de:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80037e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037e6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80037ea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037ee:	fa93 f3a3 	rbit	r3, r3
 80037f2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80037f6:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <HAL_RCC_OscConfig+0x314>)
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037fe:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003802:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003806:	fa92 f2a2 	rbit	r2, r2
 800380a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800380e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003812:	fab2 f282 	clz	r2, r2
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	f042 0220 	orr.w	r2, r2, #32
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	f002 021f 	and.w	r2, r2, #31
 8003822:	2101      	movs	r1, #1
 8003824:	fa01 f202 	lsl.w	r2, r1, r2
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1ab      	bne.n	8003786 <HAL_RCC_OscConfig+0x26a>
 800382e:	e002      	b.n	8003836 <HAL_RCC_OscConfig+0x31a>
 8003830:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800383a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 817f 	beq.w	8003b4a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800384c:	4ba7      	ldr	r3, [pc, #668]	; (8003aec <HAL_RCC_OscConfig+0x5d0>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 030c 	and.w	r3, r3, #12
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00c      	beq.n	8003872 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003858:	4ba4      	ldr	r3, [pc, #656]	; (8003aec <HAL_RCC_OscConfig+0x5d0>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 030c 	and.w	r3, r3, #12
 8003860:	2b08      	cmp	r3, #8
 8003862:	d173      	bne.n	800394c <HAL_RCC_OscConfig+0x430>
 8003864:	4ba1      	ldr	r3, [pc, #644]	; (8003aec <HAL_RCC_OscConfig+0x5d0>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800386c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003870:	d16c      	bne.n	800394c <HAL_RCC_OscConfig+0x430>
 8003872:	2302      	movs	r3, #2
 8003874:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003878:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800387c:	fa93 f3a3 	rbit	r3, r3
 8003880:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003884:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003888:	fab3 f383 	clz	r3, r3
 800388c:	b2db      	uxtb	r3, r3
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	b2db      	uxtb	r3, r3
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	d102      	bne.n	80038a2 <HAL_RCC_OscConfig+0x386>
 800389c:	4b93      	ldr	r3, [pc, #588]	; (8003aec <HAL_RCC_OscConfig+0x5d0>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	e013      	b.n	80038ca <HAL_RCC_OscConfig+0x3ae>
 80038a2:	2302      	movs	r3, #2
 80038a4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80038ac:	fa93 f3a3 	rbit	r3, r3
 80038b0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80038b4:	2302      	movs	r3, #2
 80038b6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80038ba:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80038be:	fa93 f3a3 	rbit	r3, r3
 80038c2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80038c6:	4b89      	ldr	r3, [pc, #548]	; (8003aec <HAL_RCC_OscConfig+0x5d0>)
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	2202      	movs	r2, #2
 80038cc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80038d0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80038d4:	fa92 f2a2 	rbit	r2, r2
 80038d8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80038dc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80038e0:	fab2 f282 	clz	r2, r2
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	f042 0220 	orr.w	r2, r2, #32
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	f002 021f 	and.w	r2, r2, #31
 80038f0:	2101      	movs	r1, #1
 80038f2:	fa01 f202 	lsl.w	r2, r1, r2
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <HAL_RCC_OscConfig+0x3f6>
 80038fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003900:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d002      	beq.n	8003912 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	f000 be52 	b.w	80045b6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003912:	4b76      	ldr	r3, [pc, #472]	; (8003aec <HAL_RCC_OscConfig+0x5d0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800391a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800391e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	21f8      	movs	r1, #248	; 0xf8
 8003928:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003930:	fa91 f1a1 	rbit	r1, r1
 8003934:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003938:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800393c:	fab1 f181 	clz	r1, r1
 8003940:	b2c9      	uxtb	r1, r1
 8003942:	408b      	lsls	r3, r1
 8003944:	4969      	ldr	r1, [pc, #420]	; (8003aec <HAL_RCC_OscConfig+0x5d0>)
 8003946:	4313      	orrs	r3, r2
 8003948:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800394a:	e0fe      	b.n	8003b4a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800394c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003950:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 8088 	beq.w	8003a6e <HAL_RCC_OscConfig+0x552>
 800395e:	2301      	movs	r3, #1
 8003960:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003964:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003968:	fa93 f3a3 	rbit	r3, r3
 800396c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003970:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003974:	fab3 f383 	clz	r3, r3
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800397e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	461a      	mov	r2, r3
 8003986:	2301      	movs	r3, #1
 8003988:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398a:	f7fe f8c7 	bl	8001b1c <HAL_GetTick>
 800398e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003992:	e00a      	b.n	80039aa <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003994:	f7fe f8c2 	bl	8001b1c <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d902      	bls.n	80039aa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	f000 be06 	b.w	80045b6 <HAL_RCC_OscConfig+0x109a>
 80039aa:	2302      	movs	r3, #2
 80039ac:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80039b4:	fa93 f3a3 	rbit	r3, r3
 80039b8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80039bc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c0:	fab3 f383 	clz	r3, r3
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d102      	bne.n	80039da <HAL_RCC_OscConfig+0x4be>
 80039d4:	4b45      	ldr	r3, [pc, #276]	; (8003aec <HAL_RCC_OscConfig+0x5d0>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	e013      	b.n	8003a02 <HAL_RCC_OscConfig+0x4e6>
 80039da:	2302      	movs	r3, #2
 80039dc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80039e4:	fa93 f3a3 	rbit	r3, r3
 80039e8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80039ec:	2302      	movs	r3, #2
 80039ee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80039f2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80039f6:	fa93 f3a3 	rbit	r3, r3
 80039fa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80039fe:	4b3b      	ldr	r3, [pc, #236]	; (8003aec <HAL_RCC_OscConfig+0x5d0>)
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	2202      	movs	r2, #2
 8003a04:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003a08:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003a0c:	fa92 f2a2 	rbit	r2, r2
 8003a10:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003a14:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003a18:	fab2 f282 	clz	r2, r2
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	f042 0220 	orr.w	r2, r2, #32
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	f002 021f 	and.w	r2, r2, #31
 8003a28:	2101      	movs	r1, #1
 8003a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0af      	beq.n	8003994 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a34:	4b2d      	ldr	r3, [pc, #180]	; (8003aec <HAL_RCC_OscConfig+0x5d0>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	21f8      	movs	r1, #248	; 0xf8
 8003a4a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003a52:	fa91 f1a1 	rbit	r1, r1
 8003a56:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003a5a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003a5e:	fab1 f181 	clz	r1, r1
 8003a62:	b2c9      	uxtb	r1, r1
 8003a64:	408b      	lsls	r3, r1
 8003a66:	4921      	ldr	r1, [pc, #132]	; (8003aec <HAL_RCC_OscConfig+0x5d0>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	600b      	str	r3, [r1, #0]
 8003a6c:	e06d      	b.n	8003b4a <HAL_RCC_OscConfig+0x62e>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a74:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003a78:	fa93 f3a3 	rbit	r3, r3
 8003a7c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003a80:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a84:	fab3 f383 	clz	r3, r3
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a8e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	461a      	mov	r2, r3
 8003a96:	2300      	movs	r3, #0
 8003a98:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9a:	f7fe f83f 	bl	8001b1c <HAL_GetTick>
 8003a9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa2:	e00a      	b.n	8003aba <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aa4:	f7fe f83a 	bl	8001b1c <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d902      	bls.n	8003aba <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	f000 bd7e 	b.w	80045b6 <HAL_RCC_OscConfig+0x109a>
 8003aba:	2302      	movs	r3, #2
 8003abc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003ac4:	fa93 f3a3 	rbit	r3, r3
 8003ac8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003acc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad0:	fab3 f383 	clz	r3, r3
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	095b      	lsrs	r3, r3, #5
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	f043 0301 	orr.w	r3, r3, #1
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d105      	bne.n	8003af0 <HAL_RCC_OscConfig+0x5d4>
 8003ae4:	4b01      	ldr	r3, [pc, #4]	; (8003aec <HAL_RCC_OscConfig+0x5d0>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	e016      	b.n	8003b18 <HAL_RCC_OscConfig+0x5fc>
 8003aea:	bf00      	nop
 8003aec:	40021000 	.word	0x40021000
 8003af0:	2302      	movs	r3, #2
 8003af2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003afa:	fa93 f3a3 	rbit	r3, r3
 8003afe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003b02:	2302      	movs	r3, #2
 8003b04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003b08:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003b0c:	fa93 f3a3 	rbit	r3, r3
 8003b10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003b14:	4bbf      	ldr	r3, [pc, #764]	; (8003e14 <HAL_RCC_OscConfig+0x8f8>)
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	2202      	movs	r2, #2
 8003b1a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003b1e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003b22:	fa92 f2a2 	rbit	r2, r2
 8003b26:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003b2a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003b2e:	fab2 f282 	clz	r2, r2
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	f042 0220 	orr.w	r2, r2, #32
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	f002 021f 	and.w	r2, r2, #31
 8003b3e:	2101      	movs	r1, #1
 8003b40:	fa01 f202 	lsl.w	r2, r1, r2
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1ac      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b4e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 8113 	beq.w	8003d86 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d07c      	beq.n	8003c6a <HAL_RCC_OscConfig+0x74e>
 8003b70:	2301      	movs	r3, #1
 8003b72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b7a:	fa93 f3a3 	rbit	r3, r3
 8003b7e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003b82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b86:	fab3 f383 	clz	r3, r3
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4ba2      	ldr	r3, [pc, #648]	; (8003e18 <HAL_RCC_OscConfig+0x8fc>)
 8003b90:	4413      	add	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	461a      	mov	r2, r3
 8003b96:	2301      	movs	r3, #1
 8003b98:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b9a:	f7fd ffbf 	bl	8001b1c <HAL_GetTick>
 8003b9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba2:	e00a      	b.n	8003bba <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ba4:	f7fd ffba 	bl	8001b1c <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d902      	bls.n	8003bba <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	f000 bcfe 	b.w	80045b6 <HAL_RCC_OscConfig+0x109a>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bc4:	fa93 f2a3 	rbit	r2, r3
 8003bc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bcc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003bda:	2202      	movs	r2, #2
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003be2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	fa93 f2a3 	rbit	r2, r3
 8003bec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bfa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003bfe:	2202      	movs	r2, #2
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	fa93 f2a3 	rbit	r2, r3
 8003c10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c14:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003c18:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c1a:	4b7e      	ldr	r3, [pc, #504]	; (8003e14 <HAL_RCC_OscConfig+0x8f8>)
 8003c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c22:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003c26:	2102      	movs	r1, #2
 8003c28:	6019      	str	r1, [r3, #0]
 8003c2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	fa93 f1a3 	rbit	r1, r3
 8003c38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c3c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003c40:	6019      	str	r1, [r3, #0]
  return result;
 8003c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c46:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	fab3 f383 	clz	r3, r3
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d09d      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x688>
 8003c68:	e08d      	b.n	8003d86 <HAL_RCC_OscConfig+0x86a>
 8003c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c6e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003c72:	2201      	movs	r2, #1
 8003c74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c7a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	fa93 f2a3 	rbit	r2, r3
 8003c84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c88:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003c8c:	601a      	str	r2, [r3, #0]
  return result;
 8003c8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c92:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003c96:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c98:	fab3 f383 	clz	r3, r3
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	4b5d      	ldr	r3, [pc, #372]	; (8003e18 <HAL_RCC_OscConfig+0x8fc>)
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	2300      	movs	r3, #0
 8003caa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cac:	f7fd ff36 	bl	8001b1c <HAL_GetTick>
 8003cb0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb4:	e00a      	b.n	8003ccc <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cb6:	f7fd ff31 	bl	8001b1c <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d902      	bls.n	8003ccc <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	f000 bc75 	b.w	80045b6 <HAL_RCC_OscConfig+0x109a>
 8003ccc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cd0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cdc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	fa93 f2a3 	rbit	r2, r3
 8003ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	fa93 f2a3 	rbit	r2, r3
 8003d0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d18:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d24:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	fa93 f2a3 	rbit	r2, r3
 8003d2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d32:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003d36:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d38:	4b36      	ldr	r3, [pc, #216]	; (8003e14 <HAL_RCC_OscConfig+0x8f8>)
 8003d3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d40:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003d44:	2102      	movs	r1, #2
 8003d46:	6019      	str	r1, [r3, #0]
 8003d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d4c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	fa93 f1a3 	rbit	r1, r3
 8003d56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d5a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003d5e:	6019      	str	r1, [r3, #0]
  return result;
 8003d60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d64:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	fab3 f383 	clz	r3, r3
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	f003 031f 	and.w	r3, r3, #31
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d80:	4013      	ands	r3, r2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d197      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 81a5 	beq.w	80040e6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da2:	4b1c      	ldr	r3, [pc, #112]	; (8003e14 <HAL_RCC_OscConfig+0x8f8>)
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d116      	bne.n	8003ddc <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dae:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <HAL_RCC_OscConfig+0x8f8>)
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	4a18      	ldr	r2, [pc, #96]	; (8003e14 <HAL_RCC_OscConfig+0x8f8>)
 8003db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db8:	61d3      	str	r3, [r2, #28]
 8003dba:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <HAL_RCC_OscConfig+0x8f8>)
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003dc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dd4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ddc:	4b0f      	ldr	r3, [pc, #60]	; (8003e1c <HAL_RCC_OscConfig+0x900>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d121      	bne.n	8003e2c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003de8:	4b0c      	ldr	r3, [pc, #48]	; (8003e1c <HAL_RCC_OscConfig+0x900>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a0b      	ldr	r2, [pc, #44]	; (8003e1c <HAL_RCC_OscConfig+0x900>)
 8003dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df4:	f7fd fe92 	bl	8001b1c <HAL_GetTick>
 8003df8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfc:	e010      	b.n	8003e20 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfe:	f7fd fe8d 	bl	8001b1c <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b64      	cmp	r3, #100	; 0x64
 8003e0c:	d908      	bls.n	8003e20 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e3d1      	b.n	80045b6 <HAL_RCC_OscConfig+0x109a>
 8003e12:	bf00      	nop
 8003e14:	40021000 	.word	0x40021000
 8003e18:	10908120 	.word	0x10908120
 8003e1c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e20:	4b8d      	ldr	r3, [pc, #564]	; (8004058 <HAL_RCC_OscConfig+0xb3c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0e8      	beq.n	8003dfe <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d106      	bne.n	8003e4a <HAL_RCC_OscConfig+0x92e>
 8003e3c:	4b87      	ldr	r3, [pc, #540]	; (800405c <HAL_RCC_OscConfig+0xb40>)
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	4a86      	ldr	r2, [pc, #536]	; (800405c <HAL_RCC_OscConfig+0xb40>)
 8003e42:	f043 0301 	orr.w	r3, r3, #1
 8003e46:	6213      	str	r3, [r2, #32]
 8003e48:	e035      	b.n	8003eb6 <HAL_RCC_OscConfig+0x99a>
 8003e4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e4e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x958>
 8003e5a:	4b80      	ldr	r3, [pc, #512]	; (800405c <HAL_RCC_OscConfig+0xb40>)
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	4a7f      	ldr	r2, [pc, #508]	; (800405c <HAL_RCC_OscConfig+0xb40>)
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	6213      	str	r3, [r2, #32]
 8003e66:	4b7d      	ldr	r3, [pc, #500]	; (800405c <HAL_RCC_OscConfig+0xb40>)
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	4a7c      	ldr	r2, [pc, #496]	; (800405c <HAL_RCC_OscConfig+0xb40>)
 8003e6c:	f023 0304 	bic.w	r3, r3, #4
 8003e70:	6213      	str	r3, [r2, #32]
 8003e72:	e020      	b.n	8003eb6 <HAL_RCC_OscConfig+0x99a>
 8003e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b05      	cmp	r3, #5
 8003e82:	d10c      	bne.n	8003e9e <HAL_RCC_OscConfig+0x982>
 8003e84:	4b75      	ldr	r3, [pc, #468]	; (800405c <HAL_RCC_OscConfig+0xb40>)
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	4a74      	ldr	r2, [pc, #464]	; (800405c <HAL_RCC_OscConfig+0xb40>)
 8003e8a:	f043 0304 	orr.w	r3, r3, #4
 8003e8e:	6213      	str	r3, [r2, #32]
 8003e90:	4b72      	ldr	r3, [pc, #456]	; (800405c <HAL_RCC_OscConfig+0xb40>)
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	4a71      	ldr	r2, [pc, #452]	; (800405c <HAL_RCC_OscConfig+0xb40>)
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	6213      	str	r3, [r2, #32]
 8003e9c:	e00b      	b.n	8003eb6 <HAL_RCC_OscConfig+0x99a>
 8003e9e:	4b6f      	ldr	r3, [pc, #444]	; (800405c <HAL_RCC_OscConfig+0xb40>)
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	4a6e      	ldr	r2, [pc, #440]	; (800405c <HAL_RCC_OscConfig+0xb40>)
 8003ea4:	f023 0301 	bic.w	r3, r3, #1
 8003ea8:	6213      	str	r3, [r2, #32]
 8003eaa:	4b6c      	ldr	r3, [pc, #432]	; (800405c <HAL_RCC_OscConfig+0xb40>)
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	4a6b      	ldr	r2, [pc, #428]	; (800405c <HAL_RCC_OscConfig+0xb40>)
 8003eb0:	f023 0304 	bic.w	r3, r3, #4
 8003eb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 8081 	beq.w	8003fca <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec8:	f7fd fe28 	bl	8001b1c <HAL_GetTick>
 8003ecc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed0:	e00b      	b.n	8003eea <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed2:	f7fd fe23 	bl	8001b1c <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e365      	b.n	80045b6 <HAL_RCC_OscConfig+0x109a>
 8003eea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003efa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	fa93 f2a3 	rbit	r2, r3
 8003f04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f08:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f12:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003f16:	2202      	movs	r2, #2
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f1e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	fa93 f2a3 	rbit	r2, r3
 8003f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f2c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003f30:	601a      	str	r2, [r3, #0]
  return result;
 8003f32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f36:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003f3a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3c:	fab3 f383 	clz	r3, r3
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	f043 0302 	orr.w	r3, r3, #2
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d102      	bne.n	8003f56 <HAL_RCC_OscConfig+0xa3a>
 8003f50:	4b42      	ldr	r3, [pc, #264]	; (800405c <HAL_RCC_OscConfig+0xb40>)
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	e013      	b.n	8003f7e <HAL_RCC_OscConfig+0xa62>
 8003f56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f5a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003f5e:	2202      	movs	r2, #2
 8003f60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f66:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	fa93 f2a3 	rbit	r2, r3
 8003f70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f74:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	4b38      	ldr	r3, [pc, #224]	; (800405c <HAL_RCC_OscConfig+0xb40>)
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f82:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003f86:	2102      	movs	r1, #2
 8003f88:	6011      	str	r1, [r2, #0]
 8003f8a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f8e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003f92:	6812      	ldr	r2, [r2, #0]
 8003f94:	fa92 f1a2 	rbit	r1, r2
 8003f98:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f9c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003fa0:	6011      	str	r1, [r2, #0]
  return result;
 8003fa2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fa6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	fab2 f282 	clz	r2, r2
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	f002 021f 	and.w	r2, r2, #31
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d084      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x9b6>
 8003fc8:	e083      	b.n	80040d2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fca:	f7fd fda7 	bl	8001b1c <HAL_GetTick>
 8003fce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd2:	e00b      	b.n	8003fec <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fd4:	f7fd fda2 	bl	8001b1c <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e2e4      	b.n	80045b6 <HAL_RCC_OscConfig+0x109a>
 8003fec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ff0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ffc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	fa93 f2a3 	rbit	r2, r3
 8004006:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800400a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004014:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004018:	2202      	movs	r2, #2
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004020:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	fa93 f2a3 	rbit	r2, r3
 800402a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800402e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004032:	601a      	str	r2, [r3, #0]
  return result;
 8004034:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004038:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800403c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800403e:	fab3 f383 	clz	r3, r3
 8004042:	b2db      	uxtb	r3, r3
 8004044:	095b      	lsrs	r3, r3, #5
 8004046:	b2db      	uxtb	r3, r3
 8004048:	f043 0302 	orr.w	r3, r3, #2
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d106      	bne.n	8004060 <HAL_RCC_OscConfig+0xb44>
 8004052:	4b02      	ldr	r3, [pc, #8]	; (800405c <HAL_RCC_OscConfig+0xb40>)
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	e017      	b.n	8004088 <HAL_RCC_OscConfig+0xb6c>
 8004058:	40007000 	.word	0x40007000
 800405c:	40021000 	.word	0x40021000
 8004060:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004064:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004068:	2202      	movs	r2, #2
 800406a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004070:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	fa93 f2a3 	rbit	r2, r3
 800407a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800407e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	4bb3      	ldr	r3, [pc, #716]	; (8004354 <HAL_RCC_OscConfig+0xe38>)
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800408c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004090:	2102      	movs	r1, #2
 8004092:	6011      	str	r1, [r2, #0]
 8004094:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004098:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800409c:	6812      	ldr	r2, [r2, #0]
 800409e:	fa92 f1a2 	rbit	r1, r2
 80040a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040a6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80040aa:	6011      	str	r1, [r2, #0]
  return result;
 80040ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040b0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	fab2 f282 	clz	r2, r2
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	f002 021f 	and.w	r2, r2, #31
 80040c6:	2101      	movs	r1, #1
 80040c8:	fa01 f202 	lsl.w	r2, r1, r2
 80040cc:	4013      	ands	r3, r2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d180      	bne.n	8003fd4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040d2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d105      	bne.n	80040e6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040da:	4b9e      	ldr	r3, [pc, #632]	; (8004354 <HAL_RCC_OscConfig+0xe38>)
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	4a9d      	ldr	r2, [pc, #628]	; (8004354 <HAL_RCC_OscConfig+0xe38>)
 80040e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040e4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 825e 	beq.w	80045b4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040f8:	4b96      	ldr	r3, [pc, #600]	; (8004354 <HAL_RCC_OscConfig+0xe38>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 030c 	and.w	r3, r3, #12
 8004100:	2b08      	cmp	r3, #8
 8004102:	f000 821f 	beq.w	8004544 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004106:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800410a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	2b02      	cmp	r3, #2
 8004114:	f040 8170 	bne.w	80043f8 <HAL_RCC_OscConfig+0xedc>
 8004118:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800411c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004120:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004124:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800412a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	fa93 f2a3 	rbit	r2, r3
 8004134:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004138:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800413c:	601a      	str	r2, [r3, #0]
  return result;
 800413e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004142:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004146:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004148:	fab3 f383 	clz	r3, r3
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004152:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	461a      	mov	r2, r3
 800415a:	2300      	movs	r3, #0
 800415c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415e:	f7fd fcdd 	bl	8001b1c <HAL_GetTick>
 8004162:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004166:	e009      	b.n	800417c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004168:	f7fd fcd8 	bl	8001b1c <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e21c      	b.n	80045b6 <HAL_RCC_OscConfig+0x109a>
 800417c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004180:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004184:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004188:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800418e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	fa93 f2a3 	rbit	r2, r3
 8004198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800419c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80041a0:	601a      	str	r2, [r3, #0]
  return result;
 80041a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041a6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80041aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ac:	fab3 f383 	clz	r3, r3
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d102      	bne.n	80041c6 <HAL_RCC_OscConfig+0xcaa>
 80041c0:	4b64      	ldr	r3, [pc, #400]	; (8004354 <HAL_RCC_OscConfig+0xe38>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	e027      	b.n	8004216 <HAL_RCC_OscConfig+0xcfa>
 80041c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041ca:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80041ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041d8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	fa93 f2a3 	rbit	r2, r3
 80041e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041e6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041f0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80041f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041fe:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	fa93 f2a3 	rbit	r2, r3
 8004208:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800420c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	4b50      	ldr	r3, [pc, #320]	; (8004354 <HAL_RCC_OscConfig+0xe38>)
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800421a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800421e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004222:	6011      	str	r1, [r2, #0]
 8004224:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004228:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	fa92 f1a2 	rbit	r1, r2
 8004232:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004236:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800423a:	6011      	str	r1, [r2, #0]
  return result;
 800423c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004240:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004244:	6812      	ldr	r2, [r2, #0]
 8004246:	fab2 f282 	clz	r2, r2
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	f042 0220 	orr.w	r2, r2, #32
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	f002 021f 	and.w	r2, r2, #31
 8004256:	2101      	movs	r1, #1
 8004258:	fa01 f202 	lsl.w	r2, r1, r2
 800425c:	4013      	ands	r3, r2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d182      	bne.n	8004168 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004262:	4b3c      	ldr	r3, [pc, #240]	; (8004354 <HAL_RCC_OscConfig+0xe38>)
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004266:	f023 020f 	bic.w	r2, r3, #15
 800426a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800426e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	4937      	ldr	r1, [pc, #220]	; (8004354 <HAL_RCC_OscConfig+0xe38>)
 8004278:	4313      	orrs	r3, r2
 800427a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800427c:	4b35      	ldr	r3, [pc, #212]	; (8004354 <HAL_RCC_OscConfig+0xe38>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004284:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004288:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6a19      	ldr	r1, [r3, #32]
 8004290:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004294:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	430b      	orrs	r3, r1
 800429e:	492d      	ldr	r1, [pc, #180]	; (8004354 <HAL_RCC_OscConfig+0xe38>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	604b      	str	r3, [r1, #4]
 80042a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042a8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80042ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042b6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	fa93 f2a3 	rbit	r2, r3
 80042c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042c4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80042c8:	601a      	str	r2, [r3, #0]
  return result;
 80042ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042ce:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80042d2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042d4:	fab3 f383 	clz	r3, r3
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80042de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	461a      	mov	r2, r3
 80042e6:	2301      	movs	r3, #1
 80042e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ea:	f7fd fc17 	bl	8001b1c <HAL_GetTick>
 80042ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042f2:	e009      	b.n	8004308 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f4:	f7fd fc12 	bl	8001b1c <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e156      	b.n	80045b6 <HAL_RCC_OscConfig+0x109a>
 8004308:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800430c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004310:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004314:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004316:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800431a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	fa93 f2a3 	rbit	r2, r3
 8004324:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004328:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800432c:	601a      	str	r2, [r3, #0]
  return result;
 800432e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004332:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004336:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004338:	fab3 f383 	clz	r3, r3
 800433c:	b2db      	uxtb	r3, r3
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	b2db      	uxtb	r3, r3
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b01      	cmp	r3, #1
 800434a:	d105      	bne.n	8004358 <HAL_RCC_OscConfig+0xe3c>
 800434c:	4b01      	ldr	r3, [pc, #4]	; (8004354 <HAL_RCC_OscConfig+0xe38>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	e02a      	b.n	80043a8 <HAL_RCC_OscConfig+0xe8c>
 8004352:	bf00      	nop
 8004354:	40021000 	.word	0x40021000
 8004358:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800435c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004360:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004364:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004366:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800436a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	fa93 f2a3 	rbit	r2, r3
 8004374:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004378:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004382:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004386:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004390:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	fa93 f2a3 	rbit	r2, r3
 800439a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800439e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	4b86      	ldr	r3, [pc, #536]	; (80045c0 <HAL_RCC_OscConfig+0x10a4>)
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80043ac:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80043b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043b4:	6011      	str	r1, [r2, #0]
 80043b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80043ba:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	fa92 f1a2 	rbit	r1, r2
 80043c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80043c8:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80043cc:	6011      	str	r1, [r2, #0]
  return result;
 80043ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80043d2:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	fab2 f282 	clz	r2, r2
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	f042 0220 	orr.w	r2, r2, #32
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	f002 021f 	and.w	r2, r2, #31
 80043e8:	2101      	movs	r1, #1
 80043ea:	fa01 f202 	lsl.w	r2, r1, r2
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f43f af7f 	beq.w	80042f4 <HAL_RCC_OscConfig+0xdd8>
 80043f6:	e0dd      	b.n	80045b4 <HAL_RCC_OscConfig+0x1098>
 80043f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043fc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004400:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004406:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800440a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	fa93 f2a3 	rbit	r2, r3
 8004414:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004418:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800441c:	601a      	str	r2, [r3, #0]
  return result;
 800441e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004422:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004426:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004428:	fab3 f383 	clz	r3, r3
 800442c:	b2db      	uxtb	r3, r3
 800442e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004432:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	461a      	mov	r2, r3
 800443a:	2300      	movs	r3, #0
 800443c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443e:	f7fd fb6d 	bl	8001b1c <HAL_GetTick>
 8004442:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004446:	e009      	b.n	800445c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004448:	f7fd fb68 	bl	8001b1c <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e0ac      	b.n	80045b6 <HAL_RCC_OscConfig+0x109a>
 800445c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004460:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004464:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004468:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800446e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	fa93 f2a3 	rbit	r2, r3
 8004478:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800447c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004480:	601a      	str	r2, [r3, #0]
  return result;
 8004482:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004486:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800448a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800448c:	fab3 f383 	clz	r3, r3
 8004490:	b2db      	uxtb	r3, r3
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	b2db      	uxtb	r3, r3
 8004496:	f043 0301 	orr.w	r3, r3, #1
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b01      	cmp	r3, #1
 800449e:	d102      	bne.n	80044a6 <HAL_RCC_OscConfig+0xf8a>
 80044a0:	4b47      	ldr	r3, [pc, #284]	; (80045c0 <HAL_RCC_OscConfig+0x10a4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	e027      	b.n	80044f6 <HAL_RCC_OscConfig+0xfda>
 80044a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044aa:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80044ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044b8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	fa93 f2a3 	rbit	r2, r3
 80044c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044c6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044d0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80044d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044de:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	fa93 f2a3 	rbit	r2, r3
 80044e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044ec:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	4b33      	ldr	r3, [pc, #204]	; (80045c0 <HAL_RCC_OscConfig+0x10a4>)
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80044fa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80044fe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004502:	6011      	str	r1, [r2, #0]
 8004504:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004508:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800450c:	6812      	ldr	r2, [r2, #0]
 800450e:	fa92 f1a2 	rbit	r1, r2
 8004512:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004516:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800451a:	6011      	str	r1, [r2, #0]
  return result;
 800451c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004520:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004524:	6812      	ldr	r2, [r2, #0]
 8004526:	fab2 f282 	clz	r2, r2
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	f042 0220 	orr.w	r2, r2, #32
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	f002 021f 	and.w	r2, r2, #31
 8004536:	2101      	movs	r1, #1
 8004538:	fa01 f202 	lsl.w	r2, r1, r2
 800453c:	4013      	ands	r3, r2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d182      	bne.n	8004448 <HAL_RCC_OscConfig+0xf2c>
 8004542:	e037      	b.n	80045b4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004544:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004548:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e02e      	b.n	80045b6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004558:	4b19      	ldr	r3, [pc, #100]	; (80045c0 <HAL_RCC_OscConfig+0x10a4>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004560:	4b17      	ldr	r3, [pc, #92]	; (80045c0 <HAL_RCC_OscConfig+0x10a4>)
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004568:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800456c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004570:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004574:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	429a      	cmp	r2, r3
 800457e:	d117      	bne.n	80045b0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004580:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004584:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004588:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800458c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004594:	429a      	cmp	r2, r3
 8004596:	d10b      	bne.n	80045b0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004598:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800459c:	f003 020f 	and.w	r2, r3, #15
 80045a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d001      	beq.n	80045b4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e000      	b.n	80045b6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40021000 	.word	0x40021000

080045c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b09e      	sub	sp, #120	; 0x78
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e162      	b.n	80048a2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045dc:	4b90      	ldr	r3, [pc, #576]	; (8004820 <HAL_RCC_ClockConfig+0x25c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d910      	bls.n	800460c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ea:	4b8d      	ldr	r3, [pc, #564]	; (8004820 <HAL_RCC_ClockConfig+0x25c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f023 0207 	bic.w	r2, r3, #7
 80045f2:	498b      	ldr	r1, [pc, #556]	; (8004820 <HAL_RCC_ClockConfig+0x25c>)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fa:	4b89      	ldr	r3, [pc, #548]	; (8004820 <HAL_RCC_ClockConfig+0x25c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	429a      	cmp	r2, r3
 8004606:	d001      	beq.n	800460c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e14a      	b.n	80048a2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d008      	beq.n	800462a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004618:	4b82      	ldr	r3, [pc, #520]	; (8004824 <HAL_RCC_ClockConfig+0x260>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	497f      	ldr	r1, [pc, #508]	; (8004824 <HAL_RCC_ClockConfig+0x260>)
 8004626:	4313      	orrs	r3, r2
 8004628:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 80dc 	beq.w	80047f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d13c      	bne.n	80046ba <HAL_RCC_ClockConfig+0xf6>
 8004640:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004644:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004648:	fa93 f3a3 	rbit	r3, r3
 800464c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800464e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004650:	fab3 f383 	clz	r3, r3
 8004654:	b2db      	uxtb	r3, r3
 8004656:	095b      	lsrs	r3, r3, #5
 8004658:	b2db      	uxtb	r3, r3
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	d102      	bne.n	800466a <HAL_RCC_ClockConfig+0xa6>
 8004664:	4b6f      	ldr	r3, [pc, #444]	; (8004824 <HAL_RCC_ClockConfig+0x260>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	e00f      	b.n	800468a <HAL_RCC_ClockConfig+0xc6>
 800466a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800466e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004670:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004672:	fa93 f3a3 	rbit	r3, r3
 8004676:	667b      	str	r3, [r7, #100]	; 0x64
 8004678:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800467c:	663b      	str	r3, [r7, #96]	; 0x60
 800467e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004680:	fa93 f3a3 	rbit	r3, r3
 8004684:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004686:	4b67      	ldr	r3, [pc, #412]	; (8004824 <HAL_RCC_ClockConfig+0x260>)
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800468e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004690:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004692:	fa92 f2a2 	rbit	r2, r2
 8004696:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004698:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800469a:	fab2 f282 	clz	r2, r2
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	f042 0220 	orr.w	r2, r2, #32
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	f002 021f 	and.w	r2, r2, #31
 80046aa:	2101      	movs	r1, #1
 80046ac:	fa01 f202 	lsl.w	r2, r1, r2
 80046b0:	4013      	ands	r3, r2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d17b      	bne.n	80047ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e0f3      	b.n	80048a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d13c      	bne.n	800473c <HAL_RCC_ClockConfig+0x178>
 80046c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ca:	fa93 f3a3 	rbit	r3, r3
 80046ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80046d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d2:	fab3 f383 	clz	r3, r3
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	095b      	lsrs	r3, r3, #5
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	f043 0301 	orr.w	r3, r3, #1
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d102      	bne.n	80046ec <HAL_RCC_ClockConfig+0x128>
 80046e6:	4b4f      	ldr	r3, [pc, #316]	; (8004824 <HAL_RCC_ClockConfig+0x260>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	e00f      	b.n	800470c <HAL_RCC_ClockConfig+0x148>
 80046ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046f4:	fa93 f3a3 	rbit	r3, r3
 80046f8:	647b      	str	r3, [r7, #68]	; 0x44
 80046fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004702:	fa93 f3a3 	rbit	r3, r3
 8004706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004708:	4b46      	ldr	r3, [pc, #280]	; (8004824 <HAL_RCC_ClockConfig+0x260>)
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004710:	63ba      	str	r2, [r7, #56]	; 0x38
 8004712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004714:	fa92 f2a2 	rbit	r2, r2
 8004718:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800471a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800471c:	fab2 f282 	clz	r2, r2
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	f042 0220 	orr.w	r2, r2, #32
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	f002 021f 	and.w	r2, r2, #31
 800472c:	2101      	movs	r1, #1
 800472e:	fa01 f202 	lsl.w	r2, r1, r2
 8004732:	4013      	ands	r3, r2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d13a      	bne.n	80047ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0b2      	b.n	80048a2 <HAL_RCC_ClockConfig+0x2de>
 800473c:	2302      	movs	r3, #2
 800473e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004742:	fa93 f3a3 	rbit	r3, r3
 8004746:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800474a:	fab3 f383 	clz	r3, r3
 800474e:	b2db      	uxtb	r3, r3
 8004750:	095b      	lsrs	r3, r3, #5
 8004752:	b2db      	uxtb	r3, r3
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b01      	cmp	r3, #1
 800475c:	d102      	bne.n	8004764 <HAL_RCC_ClockConfig+0x1a0>
 800475e:	4b31      	ldr	r3, [pc, #196]	; (8004824 <HAL_RCC_ClockConfig+0x260>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	e00d      	b.n	8004780 <HAL_RCC_ClockConfig+0x1bc>
 8004764:	2302      	movs	r3, #2
 8004766:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476a:	fa93 f3a3 	rbit	r3, r3
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
 8004770:	2302      	movs	r3, #2
 8004772:	623b      	str	r3, [r7, #32]
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	fa93 f3a3 	rbit	r3, r3
 800477a:	61fb      	str	r3, [r7, #28]
 800477c:	4b29      	ldr	r3, [pc, #164]	; (8004824 <HAL_RCC_ClockConfig+0x260>)
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	2202      	movs	r2, #2
 8004782:	61ba      	str	r2, [r7, #24]
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	fa92 f2a2 	rbit	r2, r2
 800478a:	617a      	str	r2, [r7, #20]
  return result;
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	fab2 f282 	clz	r2, r2
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	f042 0220 	orr.w	r2, r2, #32
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	f002 021f 	and.w	r2, r2, #31
 800479e:	2101      	movs	r1, #1
 80047a0:	fa01 f202 	lsl.w	r2, r1, r2
 80047a4:	4013      	ands	r3, r2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e079      	b.n	80048a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ae:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <HAL_RCC_ClockConfig+0x260>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f023 0203 	bic.w	r2, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	491a      	ldr	r1, [pc, #104]	; (8004824 <HAL_RCC_ClockConfig+0x260>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047c0:	f7fd f9ac 	bl	8001b1c <HAL_GetTick>
 80047c4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c6:	e00a      	b.n	80047de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c8:	f7fd f9a8 	bl	8001b1c <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e061      	b.n	80048a2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047de:	4b11      	ldr	r3, [pc, #68]	; (8004824 <HAL_RCC_ClockConfig+0x260>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f003 020c 	and.w	r2, r3, #12
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d1eb      	bne.n	80047c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047f0:	4b0b      	ldr	r3, [pc, #44]	; (8004820 <HAL_RCC_ClockConfig+0x25c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d214      	bcs.n	8004828 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fe:	4b08      	ldr	r3, [pc, #32]	; (8004820 <HAL_RCC_ClockConfig+0x25c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f023 0207 	bic.w	r2, r3, #7
 8004806:	4906      	ldr	r1, [pc, #24]	; (8004820 <HAL_RCC_ClockConfig+0x25c>)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	4313      	orrs	r3, r2
 800480c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800480e:	4b04      	ldr	r3, [pc, #16]	; (8004820 <HAL_RCC_ClockConfig+0x25c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d005      	beq.n	8004828 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e040      	b.n	80048a2 <HAL_RCC_ClockConfig+0x2de>
 8004820:	40022000 	.word	0x40022000
 8004824:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	d008      	beq.n	8004846 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004834:	4b1d      	ldr	r3, [pc, #116]	; (80048ac <HAL_RCC_ClockConfig+0x2e8>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	491a      	ldr	r1, [pc, #104]	; (80048ac <HAL_RCC_ClockConfig+0x2e8>)
 8004842:	4313      	orrs	r3, r2
 8004844:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	2b00      	cmp	r3, #0
 8004850:	d009      	beq.n	8004866 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004852:	4b16      	ldr	r3, [pc, #88]	; (80048ac <HAL_RCC_ClockConfig+0x2e8>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	4912      	ldr	r1, [pc, #72]	; (80048ac <HAL_RCC_ClockConfig+0x2e8>)
 8004862:	4313      	orrs	r3, r2
 8004864:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004866:	f000 f829 	bl	80048bc <HAL_RCC_GetSysClockFreq>
 800486a:	4601      	mov	r1, r0
 800486c:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <HAL_RCC_ClockConfig+0x2e8>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004874:	22f0      	movs	r2, #240	; 0xf0
 8004876:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	fa92 f2a2 	rbit	r2, r2
 800487e:	60fa      	str	r2, [r7, #12]
  return result;
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	fab2 f282 	clz	r2, r2
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	40d3      	lsrs	r3, r2
 800488a:	4a09      	ldr	r2, [pc, #36]	; (80048b0 <HAL_RCC_ClockConfig+0x2ec>)
 800488c:	5cd3      	ldrb	r3, [r2, r3]
 800488e:	fa21 f303 	lsr.w	r3, r1, r3
 8004892:	4a08      	ldr	r2, [pc, #32]	; (80048b4 <HAL_RCC_ClockConfig+0x2f0>)
 8004894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004896:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <HAL_RCC_ClockConfig+0x2f4>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f7fd f8fa 	bl	8001a94 <HAL_InitTick>
  
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3778      	adds	r7, #120	; 0x78
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	40021000 	.word	0x40021000
 80048b0:	08007354 	.word	0x08007354
 80048b4:	20000000 	.word	0x20000000
 80048b8:	20000004 	.word	0x20000004

080048bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	b08b      	sub	sp, #44	; 0x2c
 80048c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	61fb      	str	r3, [r7, #28]
 80048c6:	2300      	movs	r3, #0
 80048c8:	61bb      	str	r3, [r7, #24]
 80048ca:	2300      	movs	r3, #0
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80048d6:	4b2a      	ldr	r3, [pc, #168]	; (8004980 <HAL_RCC_GetSysClockFreq+0xc4>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f003 030c 	and.w	r3, r3, #12
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d002      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0x30>
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d003      	beq.n	80048f2 <HAL_RCC_GetSysClockFreq+0x36>
 80048ea:	e03f      	b.n	800496c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048ec:	4b25      	ldr	r3, [pc, #148]	; (8004984 <HAL_RCC_GetSysClockFreq+0xc8>)
 80048ee:	623b      	str	r3, [r7, #32]
      break;
 80048f0:	e03f      	b.n	8004972 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80048f8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80048fc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	fa92 f2a2 	rbit	r2, r2
 8004904:	607a      	str	r2, [r7, #4]
  return result;
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	fab2 f282 	clz	r2, r2
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	40d3      	lsrs	r3, r2
 8004910:	4a1d      	ldr	r2, [pc, #116]	; (8004988 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004912:	5cd3      	ldrb	r3, [r2, r3]
 8004914:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004916:	4b1a      	ldr	r3, [pc, #104]	; (8004980 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	220f      	movs	r2, #15
 8004920:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	fa92 f2a2 	rbit	r2, r2
 8004928:	60fa      	str	r2, [r7, #12]
  return result;
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	fab2 f282 	clz	r2, r2
 8004930:	b2d2      	uxtb	r2, r2
 8004932:	40d3      	lsrs	r3, r2
 8004934:	4a15      	ldr	r2, [pc, #84]	; (800498c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004936:	5cd3      	ldrb	r3, [r2, r3]
 8004938:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004944:	4a0f      	ldr	r2, [pc, #60]	; (8004984 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	fbb2 f2f3 	udiv	r2, r2, r3
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	fb02 f303 	mul.w	r3, r2, r3
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
 8004954:	e007      	b.n	8004966 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004956:	4a0b      	ldr	r2, [pc, #44]	; (8004984 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	fbb2 f2f3 	udiv	r2, r2, r3
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	fb02 f303 	mul.w	r3, r2, r3
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	623b      	str	r3, [r7, #32]
      break;
 800496a:	e002      	b.n	8004972 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <HAL_RCC_GetSysClockFreq+0xc8>)
 800496e:	623b      	str	r3, [r7, #32]
      break;
 8004970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004972:	6a3b      	ldr	r3, [r7, #32]
}
 8004974:	4618      	mov	r0, r3
 8004976:	372c      	adds	r7, #44	; 0x2c
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	40021000 	.word	0x40021000
 8004984:	007a1200 	.word	0x007a1200
 8004988:	0800736c 	.word	0x0800736c
 800498c:	0800737c 	.word	0x0800737c

08004990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004994:	4b03      	ldr	r3, [pc, #12]	; (80049a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004996:	681b      	ldr	r3, [r3, #0]
}
 8004998:	4618      	mov	r0, r3
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	20000000 	.word	0x20000000

080049a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80049ae:	f7ff ffef 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 80049b2:	4601      	mov	r1, r0
 80049b4:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049bc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80049c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	fa92 f2a2 	rbit	r2, r2
 80049c8:	603a      	str	r2, [r7, #0]
  return result;
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	fab2 f282 	clz	r2, r2
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	40d3      	lsrs	r3, r2
 80049d4:	4a04      	ldr	r2, [pc, #16]	; (80049e8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80049d6:	5cd3      	ldrb	r3, [r2, r3]
 80049d8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80049dc:	4618      	mov	r0, r3
 80049de:	3708      	adds	r7, #8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40021000 	.word	0x40021000
 80049e8:	08007364 	.word	0x08007364

080049ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80049f2:	f7ff ffcd 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 80049f6:	4601      	mov	r1, r0
 80049f8:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004a00:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004a04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	fa92 f2a2 	rbit	r2, r2
 8004a0c:	603a      	str	r2, [r7, #0]
  return result;
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	fab2 f282 	clz	r2, r2
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	40d3      	lsrs	r3, r2
 8004a18:	4a04      	ldr	r2, [pc, #16]	; (8004a2c <HAL_RCC_GetPCLK2Freq+0x40>)
 8004a1a:	5cd3      	ldrb	r3, [r2, r3]
 8004a1c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004a20:	4618      	mov	r0, r3
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	08007364 	.word	0x08007364

08004a30 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b092      	sub	sp, #72	; 0x48
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004a40:	2300      	movs	r3, #0
 8004a42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 80d4 	beq.w	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a54:	4b4e      	ldr	r3, [pc, #312]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10e      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a60:	4b4b      	ldr	r3, [pc, #300]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	4a4a      	ldr	r2, [pc, #296]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a6a:	61d3      	str	r3, [r2, #28]
 8004a6c:	4b48      	ldr	r3, [pc, #288]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a74:	60bb      	str	r3, [r7, #8]
 8004a76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a7e:	4b45      	ldr	r3, [pc, #276]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d118      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a8a:	4b42      	ldr	r3, [pc, #264]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a41      	ldr	r2, [pc, #260]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a96:	f7fd f841 	bl	8001b1c <HAL_GetTick>
 8004a9a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a9e:	f7fd f83d 	bl	8001b1c <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b64      	cmp	r3, #100	; 0x64
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e1d6      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab0:	4b38      	ldr	r3, [pc, #224]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0f0      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004abc:	4b34      	ldr	r3, [pc, #208]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 8084 	beq.w	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d07c      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004adc:	4b2c      	ldr	r3, [pc, #176]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ae6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004aea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aee:	fa93 f3a3 	rbit	r3, r3
 8004af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004af6:	fab3 f383 	clz	r3, r3
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	461a      	mov	r2, r3
 8004afe:	4b26      	ldr	r3, [pc, #152]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	461a      	mov	r2, r3
 8004b06:	2301      	movs	r3, #1
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b12:	fa93 f3a3 	rbit	r3, r3
 8004b16:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b1a:	fab3 f383 	clz	r3, r3
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	461a      	mov	r2, r3
 8004b22:	4b1d      	ldr	r3, [pc, #116]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	461a      	mov	r2, r3
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b2e:	4a18      	ldr	r2, [pc, #96]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b32:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d04b      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3e:	f7fc ffed 	bl	8001b1c <HAL_GetTick>
 8004b42:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b44:	e00a      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b46:	f7fc ffe9 	bl	8001b1c <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e180      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	fa93 f3a3 	rbit	r3, r3
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24
 8004b68:	2302      	movs	r3, #2
 8004b6a:	623b      	str	r3, [r7, #32]
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	fa93 f3a3 	rbit	r3, r3
 8004b72:	61fb      	str	r3, [r7, #28]
  return result;
 8004b74:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b76:	fab3 f383 	clz	r3, r3
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	f043 0302 	orr.w	r3, r3, #2
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d108      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004b8a:	4b01      	ldr	r3, [pc, #4]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	e00d      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004b90:	40021000 	.word	0x40021000
 8004b94:	40007000 	.word	0x40007000
 8004b98:	10908100 	.word	0x10908100
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	fa93 f3a3 	rbit	r3, r3
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	4b9a      	ldr	r3, [pc, #616]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	2202      	movs	r2, #2
 8004bae:	613a      	str	r2, [r7, #16]
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	fa92 f2a2 	rbit	r2, r2
 8004bb6:	60fa      	str	r2, [r7, #12]
  return result;
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	fab2 f282 	clz	r2, r2
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	f002 021f 	and.w	r2, r2, #31
 8004bca:	2101      	movs	r1, #1
 8004bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0b7      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004bd6:	4b8f      	ldr	r3, [pc, #572]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	498c      	ldr	r1, [pc, #560]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004be8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d105      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bf0:	4b88      	ldr	r3, [pc, #544]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	4a87      	ldr	r2, [pc, #540]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bfa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c08:	4b82      	ldr	r3, [pc, #520]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0c:	f023 0203 	bic.w	r2, r3, #3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	497f      	ldr	r1, [pc, #508]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d008      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c26:	4b7b      	ldr	r3, [pc, #492]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	4978      	ldr	r1, [pc, #480]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d008      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c44:	4b73      	ldr	r3, [pc, #460]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	4970      	ldr	r1, [pc, #448]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d008      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c62:	4b6c      	ldr	r3, [pc, #432]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c66:	f023 0210 	bic.w	r2, r3, #16
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	4969      	ldr	r1, [pc, #420]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d008      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004c80:	4b64      	ldr	r3, [pc, #400]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8c:	4961      	ldr	r1, [pc, #388]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d008      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c9e:	4b5d      	ldr	r3, [pc, #372]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca2:	f023 0220 	bic.w	r2, r3, #32
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	495a      	ldr	r1, [pc, #360]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d008      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cbc:	4b55      	ldr	r3, [pc, #340]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	4952      	ldr	r1, [pc, #328]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d008      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cda:	4b4e      	ldr	r3, [pc, #312]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	494b      	ldr	r1, [pc, #300]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d008      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cf8:	4b46      	ldr	r3, [pc, #280]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	4943      	ldr	r1, [pc, #268]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d008      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d16:	4b3f      	ldr	r3, [pc, #252]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	493c      	ldr	r1, [pc, #240]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d008      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d34:	4b37      	ldr	r3, [pc, #220]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d40:	4934      	ldr	r1, [pc, #208]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d008      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004d52:	4b30      	ldr	r3, [pc, #192]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5e:	492d      	ldr	r1, [pc, #180]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d008      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004d70:	4b28      	ldr	r3, [pc, #160]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7c:	4925      	ldr	r1, [pc, #148]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d008      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004d8e:	4b21      	ldr	r3, [pc, #132]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	491e      	ldr	r1, [pc, #120]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d008      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004dac:	4b19      	ldr	r3, [pc, #100]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	4916      	ldr	r1, [pc, #88]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d008      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004dca:	4b12      	ldr	r3, [pc, #72]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd6:	490f      	ldr	r1, [pc, #60]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d008      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004de8:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df4:	4907      	ldr	r1, [pc, #28]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00c      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004e06:	4b03      	ldr	r3, [pc, #12]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	e002      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004e12:	bf00      	nop
 8004e14:	40021000 	.word	0x40021000
 8004e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e1a:	4913      	ldr	r1, [pc, #76]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d008      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004e2c:	4b0e      	ldr	r3, [pc, #56]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e38:	490b      	ldr	r1, [pc, #44]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d008      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004e4a:	4b07      	ldr	r3, [pc, #28]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e56:	4904      	ldr	r1, [pc, #16]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3748      	adds	r7, #72	; 0x48
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40021000 	.word	0x40021000

08004e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e049      	b.n	8004f12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fc f99c 	bl	80011d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4610      	mov	r0, r2
 8004eac:	f000 ff8e 	bl	8005dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b082      	sub	sp, #8
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e049      	b.n	8004fc0 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d106      	bne.n	8004f46 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7fc fa1b 	bl	800137c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	3304      	adds	r3, #4
 8004f56:	4619      	mov	r1, r3
 8004f58:	4610      	mov	r0, r2
 8004f5a:	f000 ff37 	bl	8005dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d109      	bne.n	8004fec <HAL_TIM_OC_Start+0x24>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	bf14      	ite	ne
 8004fe4:	2301      	movne	r3, #1
 8004fe6:	2300      	moveq	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	e03c      	b.n	8005066 <HAL_TIM_OC_Start+0x9e>
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d109      	bne.n	8005006 <HAL_TIM_OC_Start+0x3e>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	bf14      	ite	ne
 8004ffe:	2301      	movne	r3, #1
 8005000:	2300      	moveq	r3, #0
 8005002:	b2db      	uxtb	r3, r3
 8005004:	e02f      	b.n	8005066 <HAL_TIM_OC_Start+0x9e>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b08      	cmp	r3, #8
 800500a:	d109      	bne.n	8005020 <HAL_TIM_OC_Start+0x58>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b01      	cmp	r3, #1
 8005016:	bf14      	ite	ne
 8005018:	2301      	movne	r3, #1
 800501a:	2300      	moveq	r3, #0
 800501c:	b2db      	uxtb	r3, r3
 800501e:	e022      	b.n	8005066 <HAL_TIM_OC_Start+0x9e>
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	2b0c      	cmp	r3, #12
 8005024:	d109      	bne.n	800503a <HAL_TIM_OC_Start+0x72>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b01      	cmp	r3, #1
 8005030:	bf14      	ite	ne
 8005032:	2301      	movne	r3, #1
 8005034:	2300      	moveq	r3, #0
 8005036:	b2db      	uxtb	r3, r3
 8005038:	e015      	b.n	8005066 <HAL_TIM_OC_Start+0x9e>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b10      	cmp	r3, #16
 800503e:	d109      	bne.n	8005054 <HAL_TIM_OC_Start+0x8c>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b01      	cmp	r3, #1
 800504a:	bf14      	ite	ne
 800504c:	2301      	movne	r3, #1
 800504e:	2300      	moveq	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	e008      	b.n	8005066 <HAL_TIM_OC_Start+0x9e>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b01      	cmp	r3, #1
 800505e:	bf14      	ite	ne
 8005060:	2301      	movne	r3, #1
 8005062:	2300      	moveq	r3, #0
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e0a1      	b.n	80051b2 <HAL_TIM_OC_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d104      	bne.n	800507e <HAL_TIM_OC_Start+0xb6>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800507c:	e023      	b.n	80050c6 <HAL_TIM_OC_Start+0xfe>
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b04      	cmp	r3, #4
 8005082:	d104      	bne.n	800508e <HAL_TIM_OC_Start+0xc6>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800508c:	e01b      	b.n	80050c6 <HAL_TIM_OC_Start+0xfe>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b08      	cmp	r3, #8
 8005092:	d104      	bne.n	800509e <HAL_TIM_OC_Start+0xd6>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800509c:	e013      	b.n	80050c6 <HAL_TIM_OC_Start+0xfe>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b0c      	cmp	r3, #12
 80050a2:	d104      	bne.n	80050ae <HAL_TIM_OC_Start+0xe6>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050ac:	e00b      	b.n	80050c6 <HAL_TIM_OC_Start+0xfe>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b10      	cmp	r3, #16
 80050b2:	d104      	bne.n	80050be <HAL_TIM_OC_Start+0xf6>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050bc:	e003      	b.n	80050c6 <HAL_TIM_OC_Start+0xfe>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2202      	movs	r2, #2
 80050c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2201      	movs	r2, #1
 80050cc:	6839      	ldr	r1, [r7, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f001 fbde 	bl	8006890 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a38      	ldr	r2, [pc, #224]	; (80051bc <HAL_TIM_OC_Start+0x1f4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d018      	beq.n	8005110 <HAL_TIM_OC_Start+0x148>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a37      	ldr	r2, [pc, #220]	; (80051c0 <HAL_TIM_OC_Start+0x1f8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d013      	beq.n	8005110 <HAL_TIM_OC_Start+0x148>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a35      	ldr	r2, [pc, #212]	; (80051c4 <HAL_TIM_OC_Start+0x1fc>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00e      	beq.n	8005110 <HAL_TIM_OC_Start+0x148>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a34      	ldr	r2, [pc, #208]	; (80051c8 <HAL_TIM_OC_Start+0x200>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d009      	beq.n	8005110 <HAL_TIM_OC_Start+0x148>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a32      	ldr	r2, [pc, #200]	; (80051cc <HAL_TIM_OC_Start+0x204>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d004      	beq.n	8005110 <HAL_TIM_OC_Start+0x148>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a31      	ldr	r2, [pc, #196]	; (80051d0 <HAL_TIM_OC_Start+0x208>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d101      	bne.n	8005114 <HAL_TIM_OC_Start+0x14c>
 8005110:	2301      	movs	r3, #1
 8005112:	e000      	b.n	8005116 <HAL_TIM_OC_Start+0x14e>
 8005114:	2300      	movs	r3, #0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d007      	beq.n	800512a <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005128:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a23      	ldr	r2, [pc, #140]	; (80051bc <HAL_TIM_OC_Start+0x1f4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d01d      	beq.n	8005170 <HAL_TIM_OC_Start+0x1a8>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800513c:	d018      	beq.n	8005170 <HAL_TIM_OC_Start+0x1a8>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a24      	ldr	r2, [pc, #144]	; (80051d4 <HAL_TIM_OC_Start+0x20c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d013      	beq.n	8005170 <HAL_TIM_OC_Start+0x1a8>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a22      	ldr	r2, [pc, #136]	; (80051d8 <HAL_TIM_OC_Start+0x210>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00e      	beq.n	8005170 <HAL_TIM_OC_Start+0x1a8>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a1a      	ldr	r2, [pc, #104]	; (80051c0 <HAL_TIM_OC_Start+0x1f8>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d009      	beq.n	8005170 <HAL_TIM_OC_Start+0x1a8>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a18      	ldr	r2, [pc, #96]	; (80051c4 <HAL_TIM_OC_Start+0x1fc>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d004      	beq.n	8005170 <HAL_TIM_OC_Start+0x1a8>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a19      	ldr	r2, [pc, #100]	; (80051d0 <HAL_TIM_OC_Start+0x208>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d115      	bne.n	800519c <HAL_TIM_OC_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689a      	ldr	r2, [r3, #8]
 8005176:	4b19      	ldr	r3, [pc, #100]	; (80051dc <HAL_TIM_OC_Start+0x214>)
 8005178:	4013      	ands	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b06      	cmp	r3, #6
 8005180:	d015      	beq.n	80051ae <HAL_TIM_OC_Start+0x1e6>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005188:	d011      	beq.n	80051ae <HAL_TIM_OC_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f042 0201 	orr.w	r2, r2, #1
 8005198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800519a:	e008      	b.n	80051ae <HAL_TIM_OC_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0201 	orr.w	r2, r2, #1
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	e000      	b.n	80051b0 <HAL_TIM_OC_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	40012c00 	.word	0x40012c00
 80051c0:	40013400 	.word	0x40013400
 80051c4:	40014000 	.word	0x40014000
 80051c8:	40014400 	.word	0x40014400
 80051cc:	40014800 	.word	0x40014800
 80051d0:	40015000 	.word	0x40015000
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40000800 	.word	0x40000800
 80051dc:	00010007 	.word	0x00010007

080051e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e049      	b.n	8005286 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fc f800 	bl	800120c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3304      	adds	r3, #4
 800521c:	4619      	mov	r1, r3
 800521e:	4610      	mov	r0, r2
 8005220:	f000 fdd4 	bl	8005dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d109      	bne.n	80052b4 <HAL_TIM_PWM_Start+0x24>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	bf14      	ite	ne
 80052ac:	2301      	movne	r3, #1
 80052ae:	2300      	moveq	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	e03c      	b.n	800532e <HAL_TIM_PWM_Start+0x9e>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d109      	bne.n	80052ce <HAL_TIM_PWM_Start+0x3e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	bf14      	ite	ne
 80052c6:	2301      	movne	r3, #1
 80052c8:	2300      	moveq	r3, #0
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	e02f      	b.n	800532e <HAL_TIM_PWM_Start+0x9e>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d109      	bne.n	80052e8 <HAL_TIM_PWM_Start+0x58>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	bf14      	ite	ne
 80052e0:	2301      	movne	r3, #1
 80052e2:	2300      	moveq	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	e022      	b.n	800532e <HAL_TIM_PWM_Start+0x9e>
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d109      	bne.n	8005302 <HAL_TIM_PWM_Start+0x72>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	bf14      	ite	ne
 80052fa:	2301      	movne	r3, #1
 80052fc:	2300      	moveq	r3, #0
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	e015      	b.n	800532e <HAL_TIM_PWM_Start+0x9e>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b10      	cmp	r3, #16
 8005306:	d109      	bne.n	800531c <HAL_TIM_PWM_Start+0x8c>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b01      	cmp	r3, #1
 8005312:	bf14      	ite	ne
 8005314:	2301      	movne	r3, #1
 8005316:	2300      	moveq	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	e008      	b.n	800532e <HAL_TIM_PWM_Start+0x9e>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b01      	cmp	r3, #1
 8005326:	bf14      	ite	ne
 8005328:	2301      	movne	r3, #1
 800532a:	2300      	moveq	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e0a1      	b.n	800547a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d104      	bne.n	8005346 <HAL_TIM_PWM_Start+0xb6>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005344:	e023      	b.n	800538e <HAL_TIM_PWM_Start+0xfe>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b04      	cmp	r3, #4
 800534a:	d104      	bne.n	8005356 <HAL_TIM_PWM_Start+0xc6>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005354:	e01b      	b.n	800538e <HAL_TIM_PWM_Start+0xfe>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b08      	cmp	r3, #8
 800535a:	d104      	bne.n	8005366 <HAL_TIM_PWM_Start+0xd6>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005364:	e013      	b.n	800538e <HAL_TIM_PWM_Start+0xfe>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b0c      	cmp	r3, #12
 800536a:	d104      	bne.n	8005376 <HAL_TIM_PWM_Start+0xe6>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005374:	e00b      	b.n	800538e <HAL_TIM_PWM_Start+0xfe>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b10      	cmp	r3, #16
 800537a:	d104      	bne.n	8005386 <HAL_TIM_PWM_Start+0xf6>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005384:	e003      	b.n	800538e <HAL_TIM_PWM_Start+0xfe>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2201      	movs	r2, #1
 8005394:	6839      	ldr	r1, [r7, #0]
 8005396:	4618      	mov	r0, r3
 8005398:	f001 fa7a 	bl	8006890 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a38      	ldr	r2, [pc, #224]	; (8005484 <HAL_TIM_PWM_Start+0x1f4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d018      	beq.n	80053d8 <HAL_TIM_PWM_Start+0x148>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a37      	ldr	r2, [pc, #220]	; (8005488 <HAL_TIM_PWM_Start+0x1f8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d013      	beq.n	80053d8 <HAL_TIM_PWM_Start+0x148>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a35      	ldr	r2, [pc, #212]	; (800548c <HAL_TIM_PWM_Start+0x1fc>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00e      	beq.n	80053d8 <HAL_TIM_PWM_Start+0x148>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a34      	ldr	r2, [pc, #208]	; (8005490 <HAL_TIM_PWM_Start+0x200>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d009      	beq.n	80053d8 <HAL_TIM_PWM_Start+0x148>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a32      	ldr	r2, [pc, #200]	; (8005494 <HAL_TIM_PWM_Start+0x204>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d004      	beq.n	80053d8 <HAL_TIM_PWM_Start+0x148>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a31      	ldr	r2, [pc, #196]	; (8005498 <HAL_TIM_PWM_Start+0x208>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d101      	bne.n	80053dc <HAL_TIM_PWM_Start+0x14c>
 80053d8:	2301      	movs	r3, #1
 80053da:	e000      	b.n	80053de <HAL_TIM_PWM_Start+0x14e>
 80053dc:	2300      	movs	r3, #0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d007      	beq.n	80053f2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a23      	ldr	r2, [pc, #140]	; (8005484 <HAL_TIM_PWM_Start+0x1f4>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d01d      	beq.n	8005438 <HAL_TIM_PWM_Start+0x1a8>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005404:	d018      	beq.n	8005438 <HAL_TIM_PWM_Start+0x1a8>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a24      	ldr	r2, [pc, #144]	; (800549c <HAL_TIM_PWM_Start+0x20c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d013      	beq.n	8005438 <HAL_TIM_PWM_Start+0x1a8>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a22      	ldr	r2, [pc, #136]	; (80054a0 <HAL_TIM_PWM_Start+0x210>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d00e      	beq.n	8005438 <HAL_TIM_PWM_Start+0x1a8>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a1a      	ldr	r2, [pc, #104]	; (8005488 <HAL_TIM_PWM_Start+0x1f8>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d009      	beq.n	8005438 <HAL_TIM_PWM_Start+0x1a8>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a18      	ldr	r2, [pc, #96]	; (800548c <HAL_TIM_PWM_Start+0x1fc>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d004      	beq.n	8005438 <HAL_TIM_PWM_Start+0x1a8>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a19      	ldr	r2, [pc, #100]	; (8005498 <HAL_TIM_PWM_Start+0x208>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d115      	bne.n	8005464 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	4b19      	ldr	r3, [pc, #100]	; (80054a4 <HAL_TIM_PWM_Start+0x214>)
 8005440:	4013      	ands	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b06      	cmp	r3, #6
 8005448:	d015      	beq.n	8005476 <HAL_TIM_PWM_Start+0x1e6>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005450:	d011      	beq.n	8005476 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f042 0201 	orr.w	r2, r2, #1
 8005460:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005462:	e008      	b.n	8005476 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0201 	orr.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	e000      	b.n	8005478 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005476:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	40012c00 	.word	0x40012c00
 8005488:	40013400 	.word	0x40013400
 800548c:	40014000 	.word	0x40014000
 8005490:	40014400 	.word	0x40014400
 8005494:	40014800 	.word	0x40014800
 8005498:	40015000 	.word	0x40015000
 800549c:	40000400 	.word	0x40000400
 80054a0:	40000800 	.word	0x40000800
 80054a4:	00010007 	.word	0x00010007

080054a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e049      	b.n	800554e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d106      	bne.n	80054d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7fb febc 	bl	800124c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3304      	adds	r3, #4
 80054e4:	4619      	mov	r1, r3
 80054e6:	4610      	mov	r0, r2
 80054e8:	f000 fc70 	bl	8005dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b082      	sub	sp, #8
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b02      	cmp	r3, #2
 800556a:	d122      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b02      	cmp	r3, #2
 8005578:	d11b      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f06f 0202 	mvn.w	r2, #2
 8005582:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	f003 0303 	and.w	r3, r3, #3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7fb fa4d 	bl	8000a38 <HAL_TIM_IC_CaptureCallback>
 800559e:	e005      	b.n	80055ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 fbf4 	bl	8005d8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fbfb 	bl	8005da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b04      	cmp	r3, #4
 80055be:	d122      	bne.n	8005606 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d11b      	bne.n	8005606 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f06f 0204 	mvn.w	r2, #4
 80055d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7fb fa23 	bl	8000a38 <HAL_TIM_IC_CaptureCallback>
 80055f2:	e005      	b.n	8005600 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fbca 	bl	8005d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 fbd1 	bl	8005da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b08      	cmp	r3, #8
 8005612:	d122      	bne.n	800565a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	2b08      	cmp	r3, #8
 8005620:	d11b      	bne.n	800565a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f06f 0208 	mvn.w	r2, #8
 800562a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2204      	movs	r2, #4
 8005630:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	f003 0303 	and.w	r3, r3, #3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7fb f9f9 	bl	8000a38 <HAL_TIM_IC_CaptureCallback>
 8005646:	e005      	b.n	8005654 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fba0 	bl	8005d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fba7 	bl	8005da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	f003 0310 	and.w	r3, r3, #16
 8005664:	2b10      	cmp	r3, #16
 8005666:	d122      	bne.n	80056ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f003 0310 	and.w	r3, r3, #16
 8005672:	2b10      	cmp	r3, #16
 8005674:	d11b      	bne.n	80056ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f06f 0210 	mvn.w	r2, #16
 800567e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2208      	movs	r2, #8
 8005684:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005690:	2b00      	cmp	r3, #0
 8005692:	d003      	beq.n	800569c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7fb f9cf 	bl	8000a38 <HAL_TIM_IC_CaptureCallback>
 800569a:	e005      	b.n	80056a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 fb76 	bl	8005d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fb7d 	bl	8005da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d10e      	bne.n	80056da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d107      	bne.n	80056da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f06f 0201 	mvn.w	r2, #1
 80056d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fb50 	bl	8005d7a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e4:	2b80      	cmp	r3, #128	; 0x80
 80056e6:	d10e      	bne.n	8005706 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f2:	2b80      	cmp	r3, #128	; 0x80
 80056f4:	d107      	bne.n	8005706 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f001 fa07 	bl	8006b14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005714:	d10e      	bne.n	8005734 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005720:	2b80      	cmp	r3, #128	; 0x80
 8005722:	d107      	bne.n	8005734 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800572c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f001 f9fa 	bl	8006b28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573e:	2b40      	cmp	r3, #64	; 0x40
 8005740:	d10e      	bne.n	8005760 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574c:	2b40      	cmp	r3, #64	; 0x40
 800574e:	d107      	bne.n	8005760 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fb2b 	bl	8005db6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b20      	cmp	r3, #32
 800576c:	d10e      	bne.n	800578c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f003 0320 	and.w	r3, r3, #32
 8005778:	2b20      	cmp	r3, #32
 800577a:	d107      	bne.n	800578c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f06f 0220 	mvn.w	r2, #32
 8005784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f001 f9ba 	bl	8006b00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800578c:	bf00      	nop
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e066      	b.n	8005880 <HAL_TIM_OC_ConfigChannel+0xec>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b14      	cmp	r3, #20
 80057be:	d857      	bhi.n	8005870 <HAL_TIM_OC_ConfigChannel+0xdc>
 80057c0:	a201      	add	r2, pc, #4	; (adr r2, 80057c8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80057c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c6:	bf00      	nop
 80057c8:	0800581d 	.word	0x0800581d
 80057cc:	08005871 	.word	0x08005871
 80057d0:	08005871 	.word	0x08005871
 80057d4:	08005871 	.word	0x08005871
 80057d8:	0800582b 	.word	0x0800582b
 80057dc:	08005871 	.word	0x08005871
 80057e0:	08005871 	.word	0x08005871
 80057e4:	08005871 	.word	0x08005871
 80057e8:	08005839 	.word	0x08005839
 80057ec:	08005871 	.word	0x08005871
 80057f0:	08005871 	.word	0x08005871
 80057f4:	08005871 	.word	0x08005871
 80057f8:	08005847 	.word	0x08005847
 80057fc:	08005871 	.word	0x08005871
 8005800:	08005871 	.word	0x08005871
 8005804:	08005871 	.word	0x08005871
 8005808:	08005855 	.word	0x08005855
 800580c:	08005871 	.word	0x08005871
 8005810:	08005871 	.word	0x08005871
 8005814:	08005871 	.word	0x08005871
 8005818:	08005863 	.word	0x08005863
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68b9      	ldr	r1, [r7, #8]
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fb70 	bl	8005f08 <TIM_OC1_SetConfig>
      break;
 8005828:	e025      	b.n	8005876 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68b9      	ldr	r1, [r7, #8]
 8005830:	4618      	mov	r0, r3
 8005832:	f000 fc03 	bl	800603c <TIM_OC2_SetConfig>
      break;
 8005836:	e01e      	b.n	8005876 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68b9      	ldr	r1, [r7, #8]
 800583e:	4618      	mov	r0, r3
 8005840:	f000 fc90 	bl	8006164 <TIM_OC3_SetConfig>
      break;
 8005844:	e017      	b.n	8005876 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fd1b 	bl	8006288 <TIM_OC4_SetConfig>
      break;
 8005852:	e010      	b.n	8005876 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68b9      	ldr	r1, [r7, #8]
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fd84 	bl	8006368 <TIM_OC5_SetConfig>
      break;
 8005860:	e009      	b.n	8005876 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	4618      	mov	r0, r3
 800586a:	f000 fde7 	bl	800643c <TIM_OC6_SetConfig>
      break;
 800586e:	e002      	b.n	8005876 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	75fb      	strb	r3, [r7, #23]
      break;
 8005874:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800587e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005894:	2300      	movs	r3, #0
 8005896:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d101      	bne.n	80058a6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80058a2:	2302      	movs	r3, #2
 80058a4:	e088      	b.n	80059b8 <HAL_TIM_IC_ConfigChannel+0x130>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d11b      	bne.n	80058ec <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6818      	ldr	r0, [r3, #0]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	6819      	ldr	r1, [r3, #0]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f000 fe26 	bl	8006514 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699a      	ldr	r2, [r3, #24]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 020c 	bic.w	r2, r2, #12
 80058d6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6999      	ldr	r1, [r3, #24]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	619a      	str	r2, [r3, #24]
 80058ea:	e060      	b.n	80059ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d11c      	bne.n	800592c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	6819      	ldr	r1, [r3, #0]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f000 fea4 	bl	800664e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	699a      	ldr	r2, [r3, #24]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005914:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6999      	ldr	r1, [r3, #24]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	021a      	lsls	r2, r3, #8
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	619a      	str	r2, [r3, #24]
 800592a:	e040      	b.n	80059ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b08      	cmp	r3, #8
 8005930:	d11b      	bne.n	800596a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6818      	ldr	r0, [r3, #0]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	6819      	ldr	r1, [r3, #0]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f000 fef1 	bl	8006728 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	69da      	ldr	r2, [r3, #28]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 020c 	bic.w	r2, r2, #12
 8005954:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	69d9      	ldr	r1, [r3, #28]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	61da      	str	r2, [r3, #28]
 8005968:	e021      	b.n	80059ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b0c      	cmp	r3, #12
 800596e:	d11c      	bne.n	80059aa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6818      	ldr	r0, [r3, #0]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	6819      	ldr	r1, [r3, #0]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f000 ff0e 	bl	80067a0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	69da      	ldr	r2, [r3, #28]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005992:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	69d9      	ldr	r1, [r3, #28]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	021a      	lsls	r2, r3, #8
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	61da      	str	r2, [r3, #28]
 80059a8:	e001      	b.n	80059ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d101      	bne.n	80059de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059da:	2302      	movs	r3, #2
 80059dc:	e0ff      	b.n	8005bde <HAL_TIM_PWM_ConfigChannel+0x21e>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b14      	cmp	r3, #20
 80059ea:	f200 80f0 	bhi.w	8005bce <HAL_TIM_PWM_ConfigChannel+0x20e>
 80059ee:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f4:	08005a49 	.word	0x08005a49
 80059f8:	08005bcf 	.word	0x08005bcf
 80059fc:	08005bcf 	.word	0x08005bcf
 8005a00:	08005bcf 	.word	0x08005bcf
 8005a04:	08005a89 	.word	0x08005a89
 8005a08:	08005bcf 	.word	0x08005bcf
 8005a0c:	08005bcf 	.word	0x08005bcf
 8005a10:	08005bcf 	.word	0x08005bcf
 8005a14:	08005acb 	.word	0x08005acb
 8005a18:	08005bcf 	.word	0x08005bcf
 8005a1c:	08005bcf 	.word	0x08005bcf
 8005a20:	08005bcf 	.word	0x08005bcf
 8005a24:	08005b0b 	.word	0x08005b0b
 8005a28:	08005bcf 	.word	0x08005bcf
 8005a2c:	08005bcf 	.word	0x08005bcf
 8005a30:	08005bcf 	.word	0x08005bcf
 8005a34:	08005b4d 	.word	0x08005b4d
 8005a38:	08005bcf 	.word	0x08005bcf
 8005a3c:	08005bcf 	.word	0x08005bcf
 8005a40:	08005bcf 	.word	0x08005bcf
 8005a44:	08005b8d 	.word	0x08005b8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68b9      	ldr	r1, [r7, #8]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 fa5a 	bl	8005f08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0208 	orr.w	r2, r2, #8
 8005a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699a      	ldr	r2, [r3, #24]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0204 	bic.w	r2, r2, #4
 8005a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6999      	ldr	r1, [r3, #24]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	691a      	ldr	r2, [r3, #16]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	619a      	str	r2, [r3, #24]
      break;
 8005a86:	e0a5      	b.n	8005bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 fad4 	bl	800603c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699a      	ldr	r2, [r3, #24]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699a      	ldr	r2, [r3, #24]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6999      	ldr	r1, [r3, #24]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	021a      	lsls	r2, r3, #8
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	619a      	str	r2, [r3, #24]
      break;
 8005ac8:	e084      	b.n	8005bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fb47 	bl	8006164 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69da      	ldr	r2, [r3, #28]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0208 	orr.w	r2, r2, #8
 8005ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69da      	ldr	r2, [r3, #28]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0204 	bic.w	r2, r2, #4
 8005af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69d9      	ldr	r1, [r3, #28]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	61da      	str	r2, [r3, #28]
      break;
 8005b08:	e064      	b.n	8005bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68b9      	ldr	r1, [r7, #8]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 fbb9 	bl	8006288 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69da      	ldr	r2, [r3, #28]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69da      	ldr	r2, [r3, #28]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69d9      	ldr	r1, [r3, #28]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	021a      	lsls	r2, r3, #8
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	61da      	str	r2, [r3, #28]
      break;
 8005b4a:	e043      	b.n	8005bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68b9      	ldr	r1, [r7, #8]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 fc08 	bl	8006368 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0208 	orr.w	r2, r2, #8
 8005b66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0204 	bic.w	r2, r2, #4
 8005b76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	691a      	ldr	r2, [r3, #16]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b8a:	e023      	b.n	8005bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68b9      	ldr	r1, [r7, #8]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fc52 	bl	800643c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ba6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	021a      	lsls	r2, r3, #8
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bcc:	e002      	b.n	8005bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	75fb      	strb	r3, [r7, #23]
      break;
 8005bd2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3718      	adds	r7, #24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop

08005be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_TIM_ConfigClockSource+0x1c>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e0b6      	b.n	8005d72 <HAL_TIM_ConfigClockSource+0x18a>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c40:	d03e      	beq.n	8005cc0 <HAL_TIM_ConfigClockSource+0xd8>
 8005c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c46:	f200 8087 	bhi.w	8005d58 <HAL_TIM_ConfigClockSource+0x170>
 8005c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4e:	f000 8086 	beq.w	8005d5e <HAL_TIM_ConfigClockSource+0x176>
 8005c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c56:	d87f      	bhi.n	8005d58 <HAL_TIM_ConfigClockSource+0x170>
 8005c58:	2b70      	cmp	r3, #112	; 0x70
 8005c5a:	d01a      	beq.n	8005c92 <HAL_TIM_ConfigClockSource+0xaa>
 8005c5c:	2b70      	cmp	r3, #112	; 0x70
 8005c5e:	d87b      	bhi.n	8005d58 <HAL_TIM_ConfigClockSource+0x170>
 8005c60:	2b60      	cmp	r3, #96	; 0x60
 8005c62:	d050      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x11e>
 8005c64:	2b60      	cmp	r3, #96	; 0x60
 8005c66:	d877      	bhi.n	8005d58 <HAL_TIM_ConfigClockSource+0x170>
 8005c68:	2b50      	cmp	r3, #80	; 0x50
 8005c6a:	d03c      	beq.n	8005ce6 <HAL_TIM_ConfigClockSource+0xfe>
 8005c6c:	2b50      	cmp	r3, #80	; 0x50
 8005c6e:	d873      	bhi.n	8005d58 <HAL_TIM_ConfigClockSource+0x170>
 8005c70:	2b40      	cmp	r3, #64	; 0x40
 8005c72:	d058      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0x13e>
 8005c74:	2b40      	cmp	r3, #64	; 0x40
 8005c76:	d86f      	bhi.n	8005d58 <HAL_TIM_ConfigClockSource+0x170>
 8005c78:	2b30      	cmp	r3, #48	; 0x30
 8005c7a:	d064      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x15e>
 8005c7c:	2b30      	cmp	r3, #48	; 0x30
 8005c7e:	d86b      	bhi.n	8005d58 <HAL_TIM_ConfigClockSource+0x170>
 8005c80:	2b20      	cmp	r3, #32
 8005c82:	d060      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x15e>
 8005c84:	2b20      	cmp	r3, #32
 8005c86:	d867      	bhi.n	8005d58 <HAL_TIM_ConfigClockSource+0x170>
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d05c      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x15e>
 8005c8c:	2b10      	cmp	r3, #16
 8005c8e:	d05a      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x15e>
 8005c90:	e062      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	6899      	ldr	r1, [r3, #8]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	f000 fdd5 	bl	8006850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	609a      	str	r2, [r3, #8]
      break;
 8005cbe:	e04f      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6818      	ldr	r0, [r3, #0]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	6899      	ldr	r1, [r3, #8]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f000 fdbe 	bl	8006850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ce2:	609a      	str	r2, [r3, #8]
      break;
 8005ce4:	e03c      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	6859      	ldr	r1, [r3, #4]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f000 fc7c 	bl	80065f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2150      	movs	r1, #80	; 0x50
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fd8b 	bl	800681a <TIM_ITRx_SetConfig>
      break;
 8005d04:	e02c      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	6859      	ldr	r1, [r3, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	461a      	mov	r2, r3
 8005d14:	f000 fcd8 	bl	80066c8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2160      	movs	r1, #96	; 0x60
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fd7b 	bl	800681a <TIM_ITRx_SetConfig>
      break;
 8005d24:	e01c      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	6859      	ldr	r1, [r3, #4]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	461a      	mov	r2, r3
 8005d34:	f000 fc5c 	bl	80065f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2140      	movs	r1, #64	; 0x40
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 fd6b 	bl	800681a <TIM_ITRx_SetConfig>
      break;
 8005d44:	e00c      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4619      	mov	r1, r3
 8005d50:	4610      	mov	r0, r2
 8005d52:	f000 fd62 	bl	800681a <TIM_ITRx_SetConfig>
      break;
 8005d56:	e003      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d5c:	e000      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005d5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b083      	sub	sp, #12
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d82:	bf00      	nop
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dbe:	bf00      	nop
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
	...

08005dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a42      	ldr	r2, [pc, #264]	; (8005ee8 <TIM_Base_SetConfig+0x11c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d013      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dea:	d00f      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a3f      	ldr	r2, [pc, #252]	; (8005eec <TIM_Base_SetConfig+0x120>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d00b      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a3e      	ldr	r2, [pc, #248]	; (8005ef0 <TIM_Base_SetConfig+0x124>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d007      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a3d      	ldr	r2, [pc, #244]	; (8005ef4 <TIM_Base_SetConfig+0x128>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d003      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a3c      	ldr	r2, [pc, #240]	; (8005ef8 <TIM_Base_SetConfig+0x12c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d108      	bne.n	8005e1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a31      	ldr	r2, [pc, #196]	; (8005ee8 <TIM_Base_SetConfig+0x11c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d01f      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e2c:	d01b      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a2e      	ldr	r2, [pc, #184]	; (8005eec <TIM_Base_SetConfig+0x120>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d017      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a2d      	ldr	r2, [pc, #180]	; (8005ef0 <TIM_Base_SetConfig+0x124>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d013      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a2c      	ldr	r2, [pc, #176]	; (8005ef4 <TIM_Base_SetConfig+0x128>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00f      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a2c      	ldr	r2, [pc, #176]	; (8005efc <TIM_Base_SetConfig+0x130>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00b      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a2b      	ldr	r2, [pc, #172]	; (8005f00 <TIM_Base_SetConfig+0x134>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d007      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a2a      	ldr	r2, [pc, #168]	; (8005f04 <TIM_Base_SetConfig+0x138>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d003      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a25      	ldr	r2, [pc, #148]	; (8005ef8 <TIM_Base_SetConfig+0x12c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d108      	bne.n	8005e78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	689a      	ldr	r2, [r3, #8]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a12      	ldr	r2, [pc, #72]	; (8005ee8 <TIM_Base_SetConfig+0x11c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d013      	beq.n	8005ecc <TIM_Base_SetConfig+0x100>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a13      	ldr	r2, [pc, #76]	; (8005ef4 <TIM_Base_SetConfig+0x128>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00f      	beq.n	8005ecc <TIM_Base_SetConfig+0x100>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a13      	ldr	r2, [pc, #76]	; (8005efc <TIM_Base_SetConfig+0x130>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00b      	beq.n	8005ecc <TIM_Base_SetConfig+0x100>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a12      	ldr	r2, [pc, #72]	; (8005f00 <TIM_Base_SetConfig+0x134>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d007      	beq.n	8005ecc <TIM_Base_SetConfig+0x100>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a11      	ldr	r2, [pc, #68]	; (8005f04 <TIM_Base_SetConfig+0x138>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d003      	beq.n	8005ecc <TIM_Base_SetConfig+0x100>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a0c      	ldr	r2, [pc, #48]	; (8005ef8 <TIM_Base_SetConfig+0x12c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d103      	bne.n	8005ed4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	691a      	ldr	r2, [r3, #16]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	615a      	str	r2, [r3, #20]
}
 8005eda:	bf00      	nop
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	40012c00 	.word	0x40012c00
 8005eec:	40000400 	.word	0x40000400
 8005ef0:	40000800 	.word	0x40000800
 8005ef4:	40013400 	.word	0x40013400
 8005ef8:	40015000 	.word	0x40015000
 8005efc:	40014000 	.word	0x40014000
 8005f00:	40014400 	.word	0x40014400
 8005f04:	40014800 	.word	0x40014800

08005f08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b087      	sub	sp, #28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	f023 0201 	bic.w	r2, r3, #1
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 0303 	bic.w	r3, r3, #3
 8005f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f023 0302 	bic.w	r3, r3, #2
 8005f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a30      	ldr	r2, [pc, #192]	; (8006024 <TIM_OC1_SetConfig+0x11c>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d013      	beq.n	8005f90 <TIM_OC1_SetConfig+0x88>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a2f      	ldr	r2, [pc, #188]	; (8006028 <TIM_OC1_SetConfig+0x120>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d00f      	beq.n	8005f90 <TIM_OC1_SetConfig+0x88>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a2e      	ldr	r2, [pc, #184]	; (800602c <TIM_OC1_SetConfig+0x124>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d00b      	beq.n	8005f90 <TIM_OC1_SetConfig+0x88>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a2d      	ldr	r2, [pc, #180]	; (8006030 <TIM_OC1_SetConfig+0x128>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d007      	beq.n	8005f90 <TIM_OC1_SetConfig+0x88>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a2c      	ldr	r2, [pc, #176]	; (8006034 <TIM_OC1_SetConfig+0x12c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d003      	beq.n	8005f90 <TIM_OC1_SetConfig+0x88>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a2b      	ldr	r2, [pc, #172]	; (8006038 <TIM_OC1_SetConfig+0x130>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d10c      	bne.n	8005faa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f023 0308 	bic.w	r3, r3, #8
 8005f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f023 0304 	bic.w	r3, r3, #4
 8005fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a1d      	ldr	r2, [pc, #116]	; (8006024 <TIM_OC1_SetConfig+0x11c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d013      	beq.n	8005fda <TIM_OC1_SetConfig+0xd2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a1c      	ldr	r2, [pc, #112]	; (8006028 <TIM_OC1_SetConfig+0x120>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d00f      	beq.n	8005fda <TIM_OC1_SetConfig+0xd2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a1b      	ldr	r2, [pc, #108]	; (800602c <TIM_OC1_SetConfig+0x124>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d00b      	beq.n	8005fda <TIM_OC1_SetConfig+0xd2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a1a      	ldr	r2, [pc, #104]	; (8006030 <TIM_OC1_SetConfig+0x128>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d007      	beq.n	8005fda <TIM_OC1_SetConfig+0xd2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a19      	ldr	r2, [pc, #100]	; (8006034 <TIM_OC1_SetConfig+0x12c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d003      	beq.n	8005fda <TIM_OC1_SetConfig+0xd2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a18      	ldr	r2, [pc, #96]	; (8006038 <TIM_OC1_SetConfig+0x130>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d111      	bne.n	8005ffe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	621a      	str	r2, [r3, #32]
}
 8006018:	bf00      	nop
 800601a:	371c      	adds	r7, #28
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	40012c00 	.word	0x40012c00
 8006028:	40013400 	.word	0x40013400
 800602c:	40014000 	.word	0x40014000
 8006030:	40014400 	.word	0x40014400
 8006034:	40014800 	.word	0x40014800
 8006038:	40015000 	.word	0x40015000

0800603c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	f023 0210 	bic.w	r2, r3, #16
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800606a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800606e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	021b      	lsls	r3, r3, #8
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4313      	orrs	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f023 0320 	bic.w	r3, r3, #32
 800608a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	011b      	lsls	r3, r3, #4
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	4313      	orrs	r3, r2
 8006096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a2c      	ldr	r2, [pc, #176]	; (800614c <TIM_OC2_SetConfig+0x110>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d007      	beq.n	80060b0 <TIM_OC2_SetConfig+0x74>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a2b      	ldr	r2, [pc, #172]	; (8006150 <TIM_OC2_SetConfig+0x114>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d003      	beq.n	80060b0 <TIM_OC2_SetConfig+0x74>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a2a      	ldr	r2, [pc, #168]	; (8006154 <TIM_OC2_SetConfig+0x118>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d10d      	bne.n	80060cc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	011b      	lsls	r3, r3, #4
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a1f      	ldr	r2, [pc, #124]	; (800614c <TIM_OC2_SetConfig+0x110>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d013      	beq.n	80060fc <TIM_OC2_SetConfig+0xc0>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a1e      	ldr	r2, [pc, #120]	; (8006150 <TIM_OC2_SetConfig+0x114>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00f      	beq.n	80060fc <TIM_OC2_SetConfig+0xc0>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a1e      	ldr	r2, [pc, #120]	; (8006158 <TIM_OC2_SetConfig+0x11c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d00b      	beq.n	80060fc <TIM_OC2_SetConfig+0xc0>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a1d      	ldr	r2, [pc, #116]	; (800615c <TIM_OC2_SetConfig+0x120>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d007      	beq.n	80060fc <TIM_OC2_SetConfig+0xc0>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a1c      	ldr	r2, [pc, #112]	; (8006160 <TIM_OC2_SetConfig+0x124>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d003      	beq.n	80060fc <TIM_OC2_SetConfig+0xc0>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a17      	ldr	r2, [pc, #92]	; (8006154 <TIM_OC2_SetConfig+0x118>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d113      	bne.n	8006124 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006102:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800610a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	621a      	str	r2, [r3, #32]
}
 800613e:	bf00      	nop
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	40012c00 	.word	0x40012c00
 8006150:	40013400 	.word	0x40013400
 8006154:	40015000 	.word	0x40015000
 8006158:	40014000 	.word	0x40014000
 800615c:	40014400 	.word	0x40014400
 8006160:	40014800 	.word	0x40014800

08006164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 0303 	bic.w	r3, r3, #3
 800619e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	021b      	lsls	r3, r3, #8
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a2b      	ldr	r2, [pc, #172]	; (8006270 <TIM_OC3_SetConfig+0x10c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d007      	beq.n	80061d6 <TIM_OC3_SetConfig+0x72>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a2a      	ldr	r2, [pc, #168]	; (8006274 <TIM_OC3_SetConfig+0x110>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d003      	beq.n	80061d6 <TIM_OC3_SetConfig+0x72>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a29      	ldr	r2, [pc, #164]	; (8006278 <TIM_OC3_SetConfig+0x114>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d10d      	bne.n	80061f2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	021b      	lsls	r3, r3, #8
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061f0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a1e      	ldr	r2, [pc, #120]	; (8006270 <TIM_OC3_SetConfig+0x10c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d013      	beq.n	8006222 <TIM_OC3_SetConfig+0xbe>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a1d      	ldr	r2, [pc, #116]	; (8006274 <TIM_OC3_SetConfig+0x110>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00f      	beq.n	8006222 <TIM_OC3_SetConfig+0xbe>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a1d      	ldr	r2, [pc, #116]	; (800627c <TIM_OC3_SetConfig+0x118>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00b      	beq.n	8006222 <TIM_OC3_SetConfig+0xbe>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a1c      	ldr	r2, [pc, #112]	; (8006280 <TIM_OC3_SetConfig+0x11c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d007      	beq.n	8006222 <TIM_OC3_SetConfig+0xbe>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a1b      	ldr	r2, [pc, #108]	; (8006284 <TIM_OC3_SetConfig+0x120>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d003      	beq.n	8006222 <TIM_OC3_SetConfig+0xbe>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a16      	ldr	r2, [pc, #88]	; (8006278 <TIM_OC3_SetConfig+0x114>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d113      	bne.n	800624a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	4313      	orrs	r3, r2
 8006248:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	621a      	str	r2, [r3, #32]
}
 8006264:	bf00      	nop
 8006266:	371c      	adds	r7, #28
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	40012c00 	.word	0x40012c00
 8006274:	40013400 	.word	0x40013400
 8006278:	40015000 	.word	0x40015000
 800627c:	40014000 	.word	0x40014000
 8006280:	40014400 	.word	0x40014400
 8006284:	40014800 	.word	0x40014800

08006288 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	021b      	lsls	r3, r3, #8
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	031b      	lsls	r3, r3, #12
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a1a      	ldr	r2, [pc, #104]	; (8006350 <TIM_OC4_SetConfig+0xc8>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d013      	beq.n	8006314 <TIM_OC4_SetConfig+0x8c>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a19      	ldr	r2, [pc, #100]	; (8006354 <TIM_OC4_SetConfig+0xcc>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d00f      	beq.n	8006314 <TIM_OC4_SetConfig+0x8c>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a18      	ldr	r2, [pc, #96]	; (8006358 <TIM_OC4_SetConfig+0xd0>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d00b      	beq.n	8006314 <TIM_OC4_SetConfig+0x8c>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a17      	ldr	r2, [pc, #92]	; (800635c <TIM_OC4_SetConfig+0xd4>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d007      	beq.n	8006314 <TIM_OC4_SetConfig+0x8c>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a16      	ldr	r2, [pc, #88]	; (8006360 <TIM_OC4_SetConfig+0xd8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d003      	beq.n	8006314 <TIM_OC4_SetConfig+0x8c>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a15      	ldr	r2, [pc, #84]	; (8006364 <TIM_OC4_SetConfig+0xdc>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d109      	bne.n	8006328 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800631a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	019b      	lsls	r3, r3, #6
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	621a      	str	r2, [r3, #32]
}
 8006342:	bf00      	nop
 8006344:	371c      	adds	r7, #28
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	40012c00 	.word	0x40012c00
 8006354:	40013400 	.word	0x40013400
 8006358:	40014000 	.word	0x40014000
 800635c:	40014400 	.word	0x40014400
 8006360:	40014800 	.word	0x40014800
 8006364:	40015000 	.word	0x40015000

08006368 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800638e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80063ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	041b      	lsls	r3, r3, #16
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a19      	ldr	r2, [pc, #100]	; (8006424 <TIM_OC5_SetConfig+0xbc>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d013      	beq.n	80063ea <TIM_OC5_SetConfig+0x82>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a18      	ldr	r2, [pc, #96]	; (8006428 <TIM_OC5_SetConfig+0xc0>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d00f      	beq.n	80063ea <TIM_OC5_SetConfig+0x82>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a17      	ldr	r2, [pc, #92]	; (800642c <TIM_OC5_SetConfig+0xc4>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00b      	beq.n	80063ea <TIM_OC5_SetConfig+0x82>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a16      	ldr	r2, [pc, #88]	; (8006430 <TIM_OC5_SetConfig+0xc8>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d007      	beq.n	80063ea <TIM_OC5_SetConfig+0x82>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a15      	ldr	r2, [pc, #84]	; (8006434 <TIM_OC5_SetConfig+0xcc>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d003      	beq.n	80063ea <TIM_OC5_SetConfig+0x82>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a14      	ldr	r2, [pc, #80]	; (8006438 <TIM_OC5_SetConfig+0xd0>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d109      	bne.n	80063fe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	021b      	lsls	r3, r3, #8
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685a      	ldr	r2, [r3, #4]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	621a      	str	r2, [r3, #32]
}
 8006418:	bf00      	nop
 800641a:	371c      	adds	r7, #28
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr
 8006424:	40012c00 	.word	0x40012c00
 8006428:	40013400 	.word	0x40013400
 800642c:	40014000 	.word	0x40014000
 8006430:	40014400 	.word	0x40014400
 8006434:	40014800 	.word	0x40014800
 8006438:	40015000 	.word	0x40015000

0800643c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800646a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800646e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	021b      	lsls	r3, r3, #8
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	4313      	orrs	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006482:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	051b      	lsls	r3, r3, #20
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	4313      	orrs	r3, r2
 800648e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a1a      	ldr	r2, [pc, #104]	; (80064fc <TIM_OC6_SetConfig+0xc0>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d013      	beq.n	80064c0 <TIM_OC6_SetConfig+0x84>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a19      	ldr	r2, [pc, #100]	; (8006500 <TIM_OC6_SetConfig+0xc4>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00f      	beq.n	80064c0 <TIM_OC6_SetConfig+0x84>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a18      	ldr	r2, [pc, #96]	; (8006504 <TIM_OC6_SetConfig+0xc8>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00b      	beq.n	80064c0 <TIM_OC6_SetConfig+0x84>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a17      	ldr	r2, [pc, #92]	; (8006508 <TIM_OC6_SetConfig+0xcc>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d007      	beq.n	80064c0 <TIM_OC6_SetConfig+0x84>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a16      	ldr	r2, [pc, #88]	; (800650c <TIM_OC6_SetConfig+0xd0>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d003      	beq.n	80064c0 <TIM_OC6_SetConfig+0x84>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a15      	ldr	r2, [pc, #84]	; (8006510 <TIM_OC6_SetConfig+0xd4>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d109      	bne.n	80064d4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	029b      	lsls	r3, r3, #10
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	621a      	str	r2, [r3, #32]
}
 80064ee:	bf00      	nop
 80064f0:	371c      	adds	r7, #28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	40012c00 	.word	0x40012c00
 8006500:	40013400 	.word	0x40013400
 8006504:	40014000 	.word	0x40014000
 8006508:	40014400 	.word	0x40014400
 800650c:	40014800 	.word	0x40014800
 8006510:	40015000 	.word	0x40015000

08006514 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	f023 0201 	bic.w	r2, r3, #1
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4a26      	ldr	r2, [pc, #152]	; (80065d8 <TIM_TI1_SetConfig+0xc4>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d017      	beq.n	8006572 <TIM_TI1_SetConfig+0x5e>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006548:	d013      	beq.n	8006572 <TIM_TI1_SetConfig+0x5e>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4a23      	ldr	r2, [pc, #140]	; (80065dc <TIM_TI1_SetConfig+0xc8>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00f      	beq.n	8006572 <TIM_TI1_SetConfig+0x5e>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	4a22      	ldr	r2, [pc, #136]	; (80065e0 <TIM_TI1_SetConfig+0xcc>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00b      	beq.n	8006572 <TIM_TI1_SetConfig+0x5e>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4a21      	ldr	r2, [pc, #132]	; (80065e4 <TIM_TI1_SetConfig+0xd0>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d007      	beq.n	8006572 <TIM_TI1_SetConfig+0x5e>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	4a20      	ldr	r2, [pc, #128]	; (80065e8 <TIM_TI1_SetConfig+0xd4>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d003      	beq.n	8006572 <TIM_TI1_SetConfig+0x5e>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4a1f      	ldr	r2, [pc, #124]	; (80065ec <TIM_TI1_SetConfig+0xd8>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d101      	bne.n	8006576 <TIM_TI1_SetConfig+0x62>
 8006572:	2301      	movs	r3, #1
 8006574:	e000      	b.n	8006578 <TIM_TI1_SetConfig+0x64>
 8006576:	2300      	movs	r3, #0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d008      	beq.n	800658e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f023 0303 	bic.w	r3, r3, #3
 8006582:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4313      	orrs	r3, r2
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	e003      	b.n	8006596 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f043 0301 	orr.w	r3, r3, #1
 8006594:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800659c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	011b      	lsls	r3, r3, #4
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f023 030a 	bic.w	r3, r3, #10
 80065b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	f003 030a 	and.w	r3, r3, #10
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	621a      	str	r2, [r3, #32]
}
 80065ca:	bf00      	nop
 80065cc:	371c      	adds	r7, #28
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	40012c00 	.word	0x40012c00
 80065dc:	40000400 	.word	0x40000400
 80065e0:	40000800 	.word	0x40000800
 80065e4:	40013400 	.word	0x40013400
 80065e8:	40014000 	.word	0x40014000
 80065ec:	40015000 	.word	0x40015000

080065f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	f023 0201 	bic.w	r2, r3, #1
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800661a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	011b      	lsls	r3, r3, #4
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	4313      	orrs	r3, r2
 8006624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f023 030a 	bic.w	r3, r3, #10
 800662c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	4313      	orrs	r3, r2
 8006634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	621a      	str	r2, [r3, #32]
}
 8006642:	bf00      	nop
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800664e:	b480      	push	{r7}
 8006650:	b087      	sub	sp, #28
 8006652:	af00      	add	r7, sp, #0
 8006654:	60f8      	str	r0, [r7, #12]
 8006656:	60b9      	str	r1, [r7, #8]
 8006658:	607a      	str	r2, [r7, #4]
 800665a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	f023 0210 	bic.w	r2, r3, #16
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800667a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	021b      	lsls	r3, r3, #8
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	4313      	orrs	r3, r2
 8006684:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800668c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	031b      	lsls	r3, r3, #12
 8006692:	b29b      	uxth	r3, r3
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	4313      	orrs	r3, r2
 8006698:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	011b      	lsls	r3, r3, #4
 80066a6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	621a      	str	r2, [r3, #32]
}
 80066bc:	bf00      	nop
 80066be:	371c      	adds	r7, #28
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	f023 0210 	bic.w	r2, r3, #16
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	031b      	lsls	r3, r3, #12
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006704:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	011b      	lsls	r3, r3, #4
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	4313      	orrs	r3, r2
 800670e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	621a      	str	r2, [r3, #32]
}
 800671c:	bf00      	nop
 800671e:	371c      	adds	r7, #28
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
 8006734:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f023 0303 	bic.w	r3, r3, #3
 8006754:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4313      	orrs	r3, r2
 800675c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006764:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	b2db      	uxtb	r3, r3
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	4313      	orrs	r3, r2
 8006770:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006778:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	021b      	lsls	r3, r3, #8
 800677e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	4313      	orrs	r3, r2
 8006786:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	621a      	str	r2, [r3, #32]
}
 8006794:	bf00      	nop
 8006796:	371c      	adds	r7, #28
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
 80067ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	021b      	lsls	r3, r3, #8
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067de:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	031b      	lsls	r3, r3, #12
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80067f2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	031b      	lsls	r3, r3, #12
 80067f8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	621a      	str	r2, [r3, #32]
}
 800680e:	bf00      	nop
 8006810:	371c      	adds	r7, #28
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800681a:	b480      	push	{r7}
 800681c:	b085      	sub	sp, #20
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4313      	orrs	r3, r2
 8006838:	f043 0307 	orr.w	r3, r3, #7
 800683c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	609a      	str	r2, [r3, #8]
}
 8006844:	bf00      	nop
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
 800685c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800686a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	021a      	lsls	r2, r3, #8
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	431a      	orrs	r2, r3
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	4313      	orrs	r3, r2
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	609a      	str	r2, [r3, #8]
}
 8006884:	bf00      	nop
 8006886:	371c      	adds	r7, #28
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006890:	b480      	push	{r7}
 8006892:	b087      	sub	sp, #28
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f003 031f 	and.w	r3, r3, #31
 80068a2:	2201      	movs	r2, #1
 80068a4:	fa02 f303 	lsl.w	r3, r2, r3
 80068a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6a1a      	ldr	r2, [r3, #32]
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	43db      	mvns	r3, r3
 80068b2:	401a      	ands	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6a1a      	ldr	r2, [r3, #32]
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f003 031f 	and.w	r3, r3, #31
 80068c2:	6879      	ldr	r1, [r7, #4]
 80068c4:	fa01 f303 	lsl.w	r3, r1, r3
 80068c8:	431a      	orrs	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	621a      	str	r2, [r3, #32]
}
 80068ce:	bf00      	nop
 80068d0:	371c      	adds	r7, #28
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
	...

080068dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d101      	bne.n	80068f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068f0:	2302      	movs	r3, #2
 80068f2:	e06d      	b.n	80069d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a30      	ldr	r2, [pc, #192]	; (80069dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d009      	beq.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a2f      	ldr	r2, [pc, #188]	; (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d004      	beq.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a2d      	ldr	r2, [pc, #180]	; (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d108      	bne.n	8006944 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006938:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	4313      	orrs	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	4313      	orrs	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a1e      	ldr	r2, [pc, #120]	; (80069dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d01d      	beq.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006970:	d018      	beq.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a1c      	ldr	r2, [pc, #112]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d013      	beq.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a1a      	ldr	r2, [pc, #104]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00e      	beq.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a15      	ldr	r2, [pc, #84]	; (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d009      	beq.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a16      	ldr	r2, [pc, #88]	; (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d004      	beq.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a11      	ldr	r2, [pc, #68]	; (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d10c      	bne.n	80069be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	40012c00 	.word	0x40012c00
 80069e0:	40013400 	.word	0x40013400
 80069e4:	40015000 	.word	0x40015000
 80069e8:	40000400 	.word	0x40000400
 80069ec:	40000800 	.word	0x40000800
 80069f0:	40014000 	.word	0x40014000

080069f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069fe:	2300      	movs	r3, #0
 8006a00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d101      	bne.n	8006a10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	e06a      	b.n	8006ae6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	041b      	lsls	r3, r3, #16
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a19      	ldr	r2, [pc, #100]	; (8006af4 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d009      	beq.n	8006aa8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a17      	ldr	r2, [pc, #92]	; (8006af8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d004      	beq.n	8006aa8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a16      	ldr	r2, [pc, #88]	; (8006afc <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d115      	bne.n	8006ad4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	051b      	lsls	r3, r3, #20
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	40012c00 	.word	0x40012c00
 8006af8:	40013400 	.word	0x40013400
 8006afc:	40015000 	.word	0x40015000

08006b00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e040      	b.n	8006bd0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d106      	bne.n	8006b64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fa fdb6 	bl	80016d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2224      	movs	r2, #36	; 0x24
 8006b68:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f022 0201 	bic.w	r2, r2, #1
 8006b78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f82c 	bl	8006bd8 <UART_SetConfig>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d101      	bne.n	8006b8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e022      	b.n	8006bd0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f9f6 	bl	8006f84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ba6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689a      	ldr	r2, [r3, #8]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f042 0201 	orr.w	r2, r2, #1
 8006bc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fa7d 	bl	80070c8 <UART_CheckIdleState>
 8006bce:	4603      	mov	r3, r0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b088      	sub	sp, #32
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	431a      	orrs	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	4b92      	ldr	r3, [pc, #584]	; (8006e4c <UART_SetConfig+0x274>)
 8006c04:	4013      	ands	r3, r2
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	6812      	ldr	r2, [r2, #0]
 8006c0a:	6979      	ldr	r1, [r7, #20]
 8006c0c:	430b      	orrs	r3, r1
 8006c0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68da      	ldr	r2, [r3, #12]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a80      	ldr	r2, [pc, #512]	; (8006e50 <UART_SetConfig+0x278>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d120      	bne.n	8006c96 <UART_SetConfig+0xbe>
 8006c54:	4b7f      	ldr	r3, [pc, #508]	; (8006e54 <UART_SetConfig+0x27c>)
 8006c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c58:	f003 0303 	and.w	r3, r3, #3
 8006c5c:	2b03      	cmp	r3, #3
 8006c5e:	d817      	bhi.n	8006c90 <UART_SetConfig+0xb8>
 8006c60:	a201      	add	r2, pc, #4	; (adr r2, 8006c68 <UART_SetConfig+0x90>)
 8006c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c66:	bf00      	nop
 8006c68:	08006c79 	.word	0x08006c79
 8006c6c:	08006c85 	.word	0x08006c85
 8006c70:	08006c8b 	.word	0x08006c8b
 8006c74:	08006c7f 	.word	0x08006c7f
 8006c78:	2301      	movs	r3, #1
 8006c7a:	77fb      	strb	r3, [r7, #31]
 8006c7c:	e0b5      	b.n	8006dea <UART_SetConfig+0x212>
 8006c7e:	2302      	movs	r3, #2
 8006c80:	77fb      	strb	r3, [r7, #31]
 8006c82:	e0b2      	b.n	8006dea <UART_SetConfig+0x212>
 8006c84:	2304      	movs	r3, #4
 8006c86:	77fb      	strb	r3, [r7, #31]
 8006c88:	e0af      	b.n	8006dea <UART_SetConfig+0x212>
 8006c8a:	2308      	movs	r3, #8
 8006c8c:	77fb      	strb	r3, [r7, #31]
 8006c8e:	e0ac      	b.n	8006dea <UART_SetConfig+0x212>
 8006c90:	2310      	movs	r3, #16
 8006c92:	77fb      	strb	r3, [r7, #31]
 8006c94:	e0a9      	b.n	8006dea <UART_SetConfig+0x212>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a6f      	ldr	r2, [pc, #444]	; (8006e58 <UART_SetConfig+0x280>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d124      	bne.n	8006cea <UART_SetConfig+0x112>
 8006ca0:	4b6c      	ldr	r3, [pc, #432]	; (8006e54 <UART_SetConfig+0x27c>)
 8006ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ca8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006cac:	d011      	beq.n	8006cd2 <UART_SetConfig+0xfa>
 8006cae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006cb2:	d817      	bhi.n	8006ce4 <UART_SetConfig+0x10c>
 8006cb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cb8:	d011      	beq.n	8006cde <UART_SetConfig+0x106>
 8006cba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cbe:	d811      	bhi.n	8006ce4 <UART_SetConfig+0x10c>
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d003      	beq.n	8006ccc <UART_SetConfig+0xf4>
 8006cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cc8:	d006      	beq.n	8006cd8 <UART_SetConfig+0x100>
 8006cca:	e00b      	b.n	8006ce4 <UART_SetConfig+0x10c>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	77fb      	strb	r3, [r7, #31]
 8006cd0:	e08b      	b.n	8006dea <UART_SetConfig+0x212>
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	77fb      	strb	r3, [r7, #31]
 8006cd6:	e088      	b.n	8006dea <UART_SetConfig+0x212>
 8006cd8:	2304      	movs	r3, #4
 8006cda:	77fb      	strb	r3, [r7, #31]
 8006cdc:	e085      	b.n	8006dea <UART_SetConfig+0x212>
 8006cde:	2308      	movs	r3, #8
 8006ce0:	77fb      	strb	r3, [r7, #31]
 8006ce2:	e082      	b.n	8006dea <UART_SetConfig+0x212>
 8006ce4:	2310      	movs	r3, #16
 8006ce6:	77fb      	strb	r3, [r7, #31]
 8006ce8:	e07f      	b.n	8006dea <UART_SetConfig+0x212>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a5b      	ldr	r2, [pc, #364]	; (8006e5c <UART_SetConfig+0x284>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d124      	bne.n	8006d3e <UART_SetConfig+0x166>
 8006cf4:	4b57      	ldr	r3, [pc, #348]	; (8006e54 <UART_SetConfig+0x27c>)
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006cfc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006d00:	d011      	beq.n	8006d26 <UART_SetConfig+0x14e>
 8006d02:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006d06:	d817      	bhi.n	8006d38 <UART_SetConfig+0x160>
 8006d08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006d0c:	d011      	beq.n	8006d32 <UART_SetConfig+0x15a>
 8006d0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006d12:	d811      	bhi.n	8006d38 <UART_SetConfig+0x160>
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d003      	beq.n	8006d20 <UART_SetConfig+0x148>
 8006d18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d1c:	d006      	beq.n	8006d2c <UART_SetConfig+0x154>
 8006d1e:	e00b      	b.n	8006d38 <UART_SetConfig+0x160>
 8006d20:	2300      	movs	r3, #0
 8006d22:	77fb      	strb	r3, [r7, #31]
 8006d24:	e061      	b.n	8006dea <UART_SetConfig+0x212>
 8006d26:	2302      	movs	r3, #2
 8006d28:	77fb      	strb	r3, [r7, #31]
 8006d2a:	e05e      	b.n	8006dea <UART_SetConfig+0x212>
 8006d2c:	2304      	movs	r3, #4
 8006d2e:	77fb      	strb	r3, [r7, #31]
 8006d30:	e05b      	b.n	8006dea <UART_SetConfig+0x212>
 8006d32:	2308      	movs	r3, #8
 8006d34:	77fb      	strb	r3, [r7, #31]
 8006d36:	e058      	b.n	8006dea <UART_SetConfig+0x212>
 8006d38:	2310      	movs	r3, #16
 8006d3a:	77fb      	strb	r3, [r7, #31]
 8006d3c:	e055      	b.n	8006dea <UART_SetConfig+0x212>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a47      	ldr	r2, [pc, #284]	; (8006e60 <UART_SetConfig+0x288>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d124      	bne.n	8006d92 <UART_SetConfig+0x1ba>
 8006d48:	4b42      	ldr	r3, [pc, #264]	; (8006e54 <UART_SetConfig+0x27c>)
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006d50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d54:	d011      	beq.n	8006d7a <UART_SetConfig+0x1a2>
 8006d56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d5a:	d817      	bhi.n	8006d8c <UART_SetConfig+0x1b4>
 8006d5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d60:	d011      	beq.n	8006d86 <UART_SetConfig+0x1ae>
 8006d62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d66:	d811      	bhi.n	8006d8c <UART_SetConfig+0x1b4>
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <UART_SetConfig+0x19c>
 8006d6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d70:	d006      	beq.n	8006d80 <UART_SetConfig+0x1a8>
 8006d72:	e00b      	b.n	8006d8c <UART_SetConfig+0x1b4>
 8006d74:	2300      	movs	r3, #0
 8006d76:	77fb      	strb	r3, [r7, #31]
 8006d78:	e037      	b.n	8006dea <UART_SetConfig+0x212>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	77fb      	strb	r3, [r7, #31]
 8006d7e:	e034      	b.n	8006dea <UART_SetConfig+0x212>
 8006d80:	2304      	movs	r3, #4
 8006d82:	77fb      	strb	r3, [r7, #31]
 8006d84:	e031      	b.n	8006dea <UART_SetConfig+0x212>
 8006d86:	2308      	movs	r3, #8
 8006d88:	77fb      	strb	r3, [r7, #31]
 8006d8a:	e02e      	b.n	8006dea <UART_SetConfig+0x212>
 8006d8c:	2310      	movs	r3, #16
 8006d8e:	77fb      	strb	r3, [r7, #31]
 8006d90:	e02b      	b.n	8006dea <UART_SetConfig+0x212>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a33      	ldr	r2, [pc, #204]	; (8006e64 <UART_SetConfig+0x28c>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d124      	bne.n	8006de6 <UART_SetConfig+0x20e>
 8006d9c:	4b2d      	ldr	r3, [pc, #180]	; (8006e54 <UART_SetConfig+0x27c>)
 8006d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006da4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006da8:	d011      	beq.n	8006dce <UART_SetConfig+0x1f6>
 8006daa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006dae:	d817      	bhi.n	8006de0 <UART_SetConfig+0x208>
 8006db0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006db4:	d011      	beq.n	8006dda <UART_SetConfig+0x202>
 8006db6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006dba:	d811      	bhi.n	8006de0 <UART_SetConfig+0x208>
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d003      	beq.n	8006dc8 <UART_SetConfig+0x1f0>
 8006dc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dc4:	d006      	beq.n	8006dd4 <UART_SetConfig+0x1fc>
 8006dc6:	e00b      	b.n	8006de0 <UART_SetConfig+0x208>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	77fb      	strb	r3, [r7, #31]
 8006dcc:	e00d      	b.n	8006dea <UART_SetConfig+0x212>
 8006dce:	2302      	movs	r3, #2
 8006dd0:	77fb      	strb	r3, [r7, #31]
 8006dd2:	e00a      	b.n	8006dea <UART_SetConfig+0x212>
 8006dd4:	2304      	movs	r3, #4
 8006dd6:	77fb      	strb	r3, [r7, #31]
 8006dd8:	e007      	b.n	8006dea <UART_SetConfig+0x212>
 8006dda:	2308      	movs	r3, #8
 8006ddc:	77fb      	strb	r3, [r7, #31]
 8006dde:	e004      	b.n	8006dea <UART_SetConfig+0x212>
 8006de0:	2310      	movs	r3, #16
 8006de2:	77fb      	strb	r3, [r7, #31]
 8006de4:	e001      	b.n	8006dea <UART_SetConfig+0x212>
 8006de6:	2310      	movs	r3, #16
 8006de8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006df2:	d16c      	bne.n	8006ece <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8006df4:	7ffb      	ldrb	r3, [r7, #31]
 8006df6:	2b08      	cmp	r3, #8
 8006df8:	d838      	bhi.n	8006e6c <UART_SetConfig+0x294>
 8006dfa:	a201      	add	r2, pc, #4	; (adr r2, 8006e00 <UART_SetConfig+0x228>)
 8006dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e00:	08006e25 	.word	0x08006e25
 8006e04:	08006e2d 	.word	0x08006e2d
 8006e08:	08006e35 	.word	0x08006e35
 8006e0c:	08006e6d 	.word	0x08006e6d
 8006e10:	08006e3b 	.word	0x08006e3b
 8006e14:	08006e6d 	.word	0x08006e6d
 8006e18:	08006e6d 	.word	0x08006e6d
 8006e1c:	08006e6d 	.word	0x08006e6d
 8006e20:	08006e43 	.word	0x08006e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e24:	f7fd fdc0 	bl	80049a8 <HAL_RCC_GetPCLK1Freq>
 8006e28:	61b8      	str	r0, [r7, #24]
        break;
 8006e2a:	e024      	b.n	8006e76 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e2c:	f7fd fdde 	bl	80049ec <HAL_RCC_GetPCLK2Freq>
 8006e30:	61b8      	str	r0, [r7, #24]
        break;
 8006e32:	e020      	b.n	8006e76 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e34:	4b0c      	ldr	r3, [pc, #48]	; (8006e68 <UART_SetConfig+0x290>)
 8006e36:	61bb      	str	r3, [r7, #24]
        break;
 8006e38:	e01d      	b.n	8006e76 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e3a:	f7fd fd3f 	bl	80048bc <HAL_RCC_GetSysClockFreq>
 8006e3e:	61b8      	str	r0, [r7, #24]
        break;
 8006e40:	e019      	b.n	8006e76 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e46:	61bb      	str	r3, [r7, #24]
        break;
 8006e48:	e015      	b.n	8006e76 <UART_SetConfig+0x29e>
 8006e4a:	bf00      	nop
 8006e4c:	efff69f3 	.word	0xefff69f3
 8006e50:	40013800 	.word	0x40013800
 8006e54:	40021000 	.word	0x40021000
 8006e58:	40004400 	.word	0x40004400
 8006e5c:	40004800 	.word	0x40004800
 8006e60:	40004c00 	.word	0x40004c00
 8006e64:	40005000 	.word	0x40005000
 8006e68:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	77bb      	strb	r3, [r7, #30]
        break;
 8006e74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d075      	beq.n	8006f68 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	005a      	lsls	r2, r3, #1
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	085b      	lsrs	r3, r3, #1
 8006e86:	441a      	add	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	2b0f      	cmp	r3, #15
 8006e98:	d916      	bls.n	8006ec8 <UART_SetConfig+0x2f0>
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea0:	d212      	bcs.n	8006ec8 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	f023 030f 	bic.w	r3, r3, #15
 8006eaa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	085b      	lsrs	r3, r3, #1
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	f003 0307 	and.w	r3, r3, #7
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	89fb      	ldrh	r3, [r7, #14]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	89fa      	ldrh	r2, [r7, #14]
 8006ec4:	60da      	str	r2, [r3, #12]
 8006ec6:	e04f      	b.n	8006f68 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	77bb      	strb	r3, [r7, #30]
 8006ecc:	e04c      	b.n	8006f68 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ece:	7ffb      	ldrb	r3, [r7, #31]
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d828      	bhi.n	8006f26 <UART_SetConfig+0x34e>
 8006ed4:	a201      	add	r2, pc, #4	; (adr r2, 8006edc <UART_SetConfig+0x304>)
 8006ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eda:	bf00      	nop
 8006edc:	08006f01 	.word	0x08006f01
 8006ee0:	08006f09 	.word	0x08006f09
 8006ee4:	08006f11 	.word	0x08006f11
 8006ee8:	08006f27 	.word	0x08006f27
 8006eec:	08006f17 	.word	0x08006f17
 8006ef0:	08006f27 	.word	0x08006f27
 8006ef4:	08006f27 	.word	0x08006f27
 8006ef8:	08006f27 	.word	0x08006f27
 8006efc:	08006f1f 	.word	0x08006f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f00:	f7fd fd52 	bl	80049a8 <HAL_RCC_GetPCLK1Freq>
 8006f04:	61b8      	str	r0, [r7, #24]
        break;
 8006f06:	e013      	b.n	8006f30 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f08:	f7fd fd70 	bl	80049ec <HAL_RCC_GetPCLK2Freq>
 8006f0c:	61b8      	str	r0, [r7, #24]
        break;
 8006f0e:	e00f      	b.n	8006f30 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f10:	4b1b      	ldr	r3, [pc, #108]	; (8006f80 <UART_SetConfig+0x3a8>)
 8006f12:	61bb      	str	r3, [r7, #24]
        break;
 8006f14:	e00c      	b.n	8006f30 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f16:	f7fd fcd1 	bl	80048bc <HAL_RCC_GetSysClockFreq>
 8006f1a:	61b8      	str	r0, [r7, #24]
        break;
 8006f1c:	e008      	b.n	8006f30 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f22:	61bb      	str	r3, [r7, #24]
        break;
 8006f24:	e004      	b.n	8006f30 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	77bb      	strb	r3, [r7, #30]
        break;
 8006f2e:	bf00      	nop
    }

    if (pclk != 0U)
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d018      	beq.n	8006f68 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	085a      	lsrs	r2, r3, #1
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	441a      	add	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	2b0f      	cmp	r3, #15
 8006f50:	d908      	bls.n	8006f64 <UART_SetConfig+0x38c>
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f58:	d204      	bcs.n	8006f64 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	60da      	str	r2, [r3, #12]
 8006f62:	e001      	b.n	8006f68 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006f74:	7fbb      	ldrb	r3, [r7, #30]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3720      	adds	r7, #32
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	007a1200 	.word	0x007a1200

08006f84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00a      	beq.n	8006fae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00a      	beq.n	8006ff2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	f003 0308 	and.w	r3, r3, #8
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00a      	beq.n	8007014 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	430a      	orrs	r2, r1
 8007012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007018:	f003 0310 	and.w	r3, r3, #16
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00a      	beq.n	8007036 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	f003 0320 	and.w	r3, r3, #32
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007060:	2b00      	cmp	r3, #0
 8007062:	d01a      	beq.n	800709a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	430a      	orrs	r2, r1
 8007078:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007082:	d10a      	bne.n	800709a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00a      	beq.n	80070bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	605a      	str	r2, [r3, #4]
  }
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af02      	add	r7, sp, #8
 80070ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070d8:	f7fa fd20 	bl	8001b1c <HAL_GetTick>
 80070dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0308 	and.w	r3, r3, #8
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d10e      	bne.n	800710a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f82d 	bl	800715a <UART_WaitOnFlagUntilTimeout>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e023      	b.n	8007152 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b04      	cmp	r3, #4
 8007116:	d10e      	bne.n	8007136 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007118:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f817 	bl	800715a <UART_WaitOnFlagUntilTimeout>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e00d      	b.n	8007152 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2220      	movs	r2, #32
 800713a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b09c      	sub	sp, #112	; 0x70
 800715e:	af00      	add	r7, sp, #0
 8007160:	60f8      	str	r0, [r7, #12]
 8007162:	60b9      	str	r1, [r7, #8]
 8007164:	603b      	str	r3, [r7, #0]
 8007166:	4613      	mov	r3, r2
 8007168:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800716a:	e0a5      	b.n	80072b8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800716c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800716e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007172:	f000 80a1 	beq.w	80072b8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007176:	f7fa fcd1 	bl	8001b1c <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007182:	429a      	cmp	r2, r3
 8007184:	d302      	bcc.n	800718c <UART_WaitOnFlagUntilTimeout+0x32>
 8007186:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007188:	2b00      	cmp	r3, #0
 800718a:	d13e      	bne.n	800720a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007194:	e853 3f00 	ldrex	r3, [r3]
 8007198:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800719a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800719c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071a0:	667b      	str	r3, [r7, #100]	; 0x64
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071b2:	e841 2300 	strex	r3, r2, [r1]
 80071b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80071b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1e6      	bne.n	800718c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3308      	adds	r3, #8
 80071c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071c8:	e853 3f00 	ldrex	r3, [r3]
 80071cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d0:	f023 0301 	bic.w	r3, r3, #1
 80071d4:	663b      	str	r3, [r7, #96]	; 0x60
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3308      	adds	r3, #8
 80071dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071de:	64ba      	str	r2, [r7, #72]	; 0x48
 80071e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071e6:	e841 2300 	strex	r3, r2, [r1]
 80071ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1e5      	bne.n	80071be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2220      	movs	r2, #32
 80071f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2220      	movs	r2, #32
 80071fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e067      	b.n	80072da <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0304 	and.w	r3, r3, #4
 8007214:	2b00      	cmp	r3, #0
 8007216:	d04f      	beq.n	80072b8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007226:	d147      	bne.n	80072b8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007230:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723a:	e853 3f00 	ldrex	r3, [r3]
 800723e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007246:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	461a      	mov	r2, r3
 800724e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007250:	637b      	str	r3, [r7, #52]	; 0x34
 8007252:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007254:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007258:	e841 2300 	strex	r3, r2, [r1]
 800725c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800725e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1e6      	bne.n	8007232 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3308      	adds	r3, #8
 800726a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	e853 3f00 	ldrex	r3, [r3]
 8007272:	613b      	str	r3, [r7, #16]
   return(result);
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	f023 0301 	bic.w	r3, r3, #1
 800727a:	66bb      	str	r3, [r7, #104]	; 0x68
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	3308      	adds	r3, #8
 8007282:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007284:	623a      	str	r2, [r7, #32]
 8007286:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007288:	69f9      	ldr	r1, [r7, #28]
 800728a:	6a3a      	ldr	r2, [r7, #32]
 800728c:	e841 2300 	strex	r3, r2, [r1]
 8007290:	61bb      	str	r3, [r7, #24]
   return(result);
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1e5      	bne.n	8007264 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2220      	movs	r2, #32
 800729c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2220      	movs	r2, #32
 80072a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2220      	movs	r2, #32
 80072a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e010      	b.n	80072da <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	69da      	ldr	r2, [r3, #28]
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	4013      	ands	r3, r2
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	bf0c      	ite	eq
 80072c8:	2301      	moveq	r3, #1
 80072ca:	2300      	movne	r3, #0
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	461a      	mov	r2, r3
 80072d0:	79fb      	ldrb	r3, [r7, #7]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	f43f af4a 	beq.w	800716c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3770      	adds	r7, #112	; 0x70
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
	...

080072e4 <__libc_init_array>:
 80072e4:	b570      	push	{r4, r5, r6, lr}
 80072e6:	4d0d      	ldr	r5, [pc, #52]	; (800731c <__libc_init_array+0x38>)
 80072e8:	4c0d      	ldr	r4, [pc, #52]	; (8007320 <__libc_init_array+0x3c>)
 80072ea:	1b64      	subs	r4, r4, r5
 80072ec:	10a4      	asrs	r4, r4, #2
 80072ee:	2600      	movs	r6, #0
 80072f0:	42a6      	cmp	r6, r4
 80072f2:	d109      	bne.n	8007308 <__libc_init_array+0x24>
 80072f4:	4d0b      	ldr	r5, [pc, #44]	; (8007324 <__libc_init_array+0x40>)
 80072f6:	4c0c      	ldr	r4, [pc, #48]	; (8007328 <__libc_init_array+0x44>)
 80072f8:	f000 f820 	bl	800733c <_init>
 80072fc:	1b64      	subs	r4, r4, r5
 80072fe:	10a4      	asrs	r4, r4, #2
 8007300:	2600      	movs	r6, #0
 8007302:	42a6      	cmp	r6, r4
 8007304:	d105      	bne.n	8007312 <__libc_init_array+0x2e>
 8007306:	bd70      	pop	{r4, r5, r6, pc}
 8007308:	f855 3b04 	ldr.w	r3, [r5], #4
 800730c:	4798      	blx	r3
 800730e:	3601      	adds	r6, #1
 8007310:	e7ee      	b.n	80072f0 <__libc_init_array+0xc>
 8007312:	f855 3b04 	ldr.w	r3, [r5], #4
 8007316:	4798      	blx	r3
 8007318:	3601      	adds	r6, #1
 800731a:	e7f2      	b.n	8007302 <__libc_init_array+0x1e>
 800731c:	0800738c 	.word	0x0800738c
 8007320:	0800738c 	.word	0x0800738c
 8007324:	0800738c 	.word	0x0800738c
 8007328:	08007390 	.word	0x08007390

0800732c <memset>:
 800732c:	4402      	add	r2, r0
 800732e:	4603      	mov	r3, r0
 8007330:	4293      	cmp	r3, r2
 8007332:	d100      	bne.n	8007336 <memset+0xa>
 8007334:	4770      	bx	lr
 8007336:	f803 1b01 	strb.w	r1, [r3], #1
 800733a:	e7f9      	b.n	8007330 <memset+0x4>

0800733c <_init>:
 800733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733e:	bf00      	nop
 8007340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007342:	bc08      	pop	{r3}
 8007344:	469e      	mov	lr, r3
 8007346:	4770      	bx	lr

08007348 <_fini>:
 8007348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734a:	bf00      	nop
 800734c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800734e:	bc08      	pop	{r3}
 8007350:	469e      	mov	lr, r3
 8007352:	4770      	bx	lr
