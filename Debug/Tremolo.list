
Tremolo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003810  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080038cc  080038cc  000138cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003904  08003904  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003904  08003904  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003904  08003904  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003904  08003904  00013904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003908  08003908  00013908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800390c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000000c  08003918  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08003918  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba64  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a20  00000000  00000000  0002ba98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd8  00000000  00000000  0002d4b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cf0  00000000  00000000  0002e290  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000dccd  00000000  00000000  0002ef80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a26c  00000000  00000000  0003cc4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005431a  00000000  00000000  00046eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009b1d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003244  00000000  00000000  0009b250  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080038b4 	.word	0x080038b4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080038b4 	.word	0x080038b4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000222:	f000 ff2f 	bl	8001084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 f849 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 fc0f 	bl	8000a4c <MX_GPIO_Init>
  MX_ADC_Init();
 800022e:	f000 f8ad 	bl	800038c <MX_ADC_Init>
  MX_SPI2_Init();
 8000232:	f000 f9a3 	bl	800057c <MX_SPI2_Init>
  MX_TIM3_Init();
 8000236:	f000 fa35 	bl	80006a4 <MX_TIM3_Init>
  MX_TIM16_Init();
 800023a:	f000 facf 	bl	80007dc <MX_TIM16_Init>
  MX_USART1_UART_Init();
 800023e:	f000 fbd5 	bl	80009ec <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000242:	f000 f9d9 	bl	80005f8 <MX_TIM1_Init>
  MX_TIM17_Init();
 8000246:	f000 fb4d 	bl	80008e4 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED_RGB_Red_GPIO_Port, LED_RGB_Red_Pin, GPIO_PIN_SET);
 800024a:	2380      	movs	r3, #128	; 0x80
 800024c:	00db      	lsls	r3, r3, #3
 800024e:	4819      	ldr	r0, [pc, #100]	; (80002b4 <main+0x98>)
 8000250:	2201      	movs	r2, #1
 8000252:	0019      	movs	r1, r3
 8000254:	f001 fbf1 	bl	8001a3a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RGB_Green_GPIO_Port, LED_RGB_Green_Pin, GPIO_PIN_SET);
 8000258:	2380      	movs	r3, #128	; 0x80
 800025a:	011b      	lsls	r3, r3, #4
 800025c:	4815      	ldr	r0, [pc, #84]	; (80002b4 <main+0x98>)
 800025e:	2201      	movs	r2, #1
 8000260:	0019      	movs	r1, r3
 8000262:	f001 fbea 	bl	8001a3a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RGB_Blue_GPIO_Port, LED_RGB_Blue_Pin, GPIO_PIN_SET);
 8000266:	2380      	movs	r3, #128	; 0x80
 8000268:	015b      	lsls	r3, r3, #5
 800026a:	4812      	ldr	r0, [pc, #72]	; (80002b4 <main+0x98>)
 800026c:	2201      	movs	r2, #1
 800026e:	0019      	movs	r1, r3
 8000270:	f001 fbe3 	bl	8001a3a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 8000274:	2380      	movs	r3, #128	; 0x80
 8000276:	01db      	lsls	r3, r3, #7
 8000278:	480e      	ldr	r0, [pc, #56]	; (80002b4 <main+0x98>)
 800027a:	2201      	movs	r2, #1
 800027c:	0019      	movs	r1, r3
 800027e:	f001 fbdc 	bl	8001a3a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);
 8000282:	2380      	movs	r3, #128	; 0x80
 8000284:	019b      	lsls	r3, r3, #6
 8000286:	480b      	ldr	r0, [pc, #44]	; (80002b4 <main+0x98>)
 8000288:	2201      	movs	r2, #1
 800028a:	0019      	movs	r1, r3
 800028c:	f001 fbd5 	bl	8001a3a <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  GPIO_PinState bypass_state = HAL_GPIO_ReadPin(BYPASS_GPIO_Port, BYPASS_Pin);
 8000290:	1dfc      	adds	r4, r7, #7
 8000292:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <main+0x9c>)
 8000294:	2101      	movs	r1, #1
 8000296:	0018      	movs	r0, r3
 8000298:	f001 fbb2 	bl	8001a00 <HAL_GPIO_ReadPin>
 800029c:	0003      	movs	r3, r0
 800029e:	7023      	strb	r3, [r4, #0]
	  HAL_GPIO_WritePin(LED_RGB_Red_GPIO_Port, LED_RGB_Red_Pin, bypass_state);
 80002a0:	1dfb      	adds	r3, r7, #7
 80002a2:	781a      	ldrb	r2, [r3, #0]
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	00db      	lsls	r3, r3, #3
 80002a8:	4802      	ldr	r0, [pc, #8]	; (80002b4 <main+0x98>)
 80002aa:	0019      	movs	r1, r3
 80002ac:	f001 fbc5 	bl	8001a3a <HAL_GPIO_WritePin>
  {
 80002b0:	e7ee      	b.n	8000290 <main+0x74>
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	48000800 	.word	0x48000800
 80002b8:	48000400 	.word	0x48000400

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b590      	push	{r4, r7, lr}
 80002be:	b095      	sub	sp, #84	; 0x54
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	2420      	movs	r4, #32
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	0018      	movs	r0, r3
 80002c8:	2330      	movs	r3, #48	; 0x30
 80002ca:	001a      	movs	r2, r3
 80002cc:	2100      	movs	r1, #0
 80002ce:	f003 fae9 	bl	80038a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d2:	2310      	movs	r3, #16
 80002d4:	18fb      	adds	r3, r7, r3
 80002d6:	0018      	movs	r0, r3
 80002d8:	2310      	movs	r3, #16
 80002da:	001a      	movs	r2, r3
 80002dc:	2100      	movs	r1, #0
 80002de:	f003 fae1 	bl	80038a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e2:	003b      	movs	r3, r7
 80002e4:	0018      	movs	r0, r3
 80002e6:	2310      	movs	r3, #16
 80002e8:	001a      	movs	r2, r3
 80002ea:	2100      	movs	r1, #0
 80002ec:	f003 fada 	bl	80038a4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002f0:	0021      	movs	r1, r4
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2212      	movs	r2, #18
 80002f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2201      	movs	r2, #1
 80002fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2201      	movs	r2, #1
 8000302:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2210      	movs	r2, #16
 8000308:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2210      	movs	r2, #16
 800030e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2202      	movs	r2, #2
 8000314:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2280      	movs	r2, #128	; 0x80
 800031a:	0212      	lsls	r2, r2, #8
 800031c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2280      	movs	r2, #128	; 0x80
 8000322:	0352      	lsls	r2, r2, #13
 8000324:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2200      	movs	r2, #0
 800032a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032c:	187b      	adds	r3, r7, r1
 800032e:	0018      	movs	r0, r3
 8000330:	f001 fba0 	bl	8001a74 <HAL_RCC_OscConfig>
 8000334:	1e03      	subs	r3, r0, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000338:	f000 fc1a 	bl	8000b70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033c:	2110      	movs	r1, #16
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2207      	movs	r2, #7
 8000342:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2202      	movs	r2, #2
 8000348:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2200      	movs	r2, #0
 8000354:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2101      	movs	r1, #1
 800035a:	0018      	movs	r0, r3
 800035c:	f001 fea8 	bl	80020b0 <HAL_RCC_ClockConfig>
 8000360:	1e03      	subs	r3, r0, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000364:	f000 fc04 	bl	8000b70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000368:	003b      	movs	r3, r7
 800036a:	2201      	movs	r2, #1
 800036c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800036e:	003b      	movs	r3, r7
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000374:	003b      	movs	r3, r7
 8000376:	0018      	movs	r0, r3
 8000378:	f001 ffee 	bl	8002358 <HAL_RCCEx_PeriphCLKConfig>
 800037c:	1e03      	subs	r3, r0, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000380:	f000 fbf6 	bl	8000b70 <Error_Handler>
  }
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b015      	add	sp, #84	; 0x54
 800038a:	bd90      	pop	{r4, r7, pc}

0800038c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b084      	sub	sp, #16
 8000390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	0018      	movs	r0, r3
 8000396:	230c      	movs	r3, #12
 8000398:	001a      	movs	r2, r3
 800039a:	2100      	movs	r1, #0
 800039c:	f003 fa82 	bl	80038a4 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 80003a0:	4b74      	ldr	r3, [pc, #464]	; (8000574 <MX_ADC_Init+0x1e8>)
 80003a2:	4a75      	ldr	r2, [pc, #468]	; (8000578 <MX_ADC_Init+0x1ec>)
 80003a4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003a6:	4b73      	ldr	r3, [pc, #460]	; (8000574 <MX_ADC_Init+0x1e8>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80003ac:	4b71      	ldr	r3, [pc, #452]	; (8000574 <MX_ADC_Init+0x1e8>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003b2:	4b70      	ldr	r3, [pc, #448]	; (8000574 <MX_ADC_Init+0x1e8>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80003b8:	4b6e      	ldr	r3, [pc, #440]	; (8000574 <MX_ADC_Init+0x1e8>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003be:	4b6d      	ldr	r3, [pc, #436]	; (8000574 <MX_ADC_Init+0x1e8>)
 80003c0:	2204      	movs	r2, #4
 80003c2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80003c4:	4b6b      	ldr	r3, [pc, #428]	; (8000574 <MX_ADC_Init+0x1e8>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003ca:	4b6a      	ldr	r3, [pc, #424]	; (8000574 <MX_ADC_Init+0x1e8>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80003d0:	4b68      	ldr	r3, [pc, #416]	; (8000574 <MX_ADC_Init+0x1e8>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003d6:	4b67      	ldr	r3, [pc, #412]	; (8000574 <MX_ADC_Init+0x1e8>)
 80003d8:	2200      	movs	r2, #0
 80003da:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003dc:	4b65      	ldr	r3, [pc, #404]	; (8000574 <MX_ADC_Init+0x1e8>)
 80003de:	22c2      	movs	r2, #194	; 0xc2
 80003e0:	32ff      	adds	r2, #255	; 0xff
 80003e2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003e4:	4b63      	ldr	r3, [pc, #396]	; (8000574 <MX_ADC_Init+0x1e8>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80003ea:	4b62      	ldr	r3, [pc, #392]	; (8000574 <MX_ADC_Init+0x1e8>)
 80003ec:	2224      	movs	r2, #36	; 0x24
 80003ee:	2100      	movs	r1, #0
 80003f0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003f2:	4b60      	ldr	r3, [pc, #384]	; (8000574 <MX_ADC_Init+0x1e8>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003f8:	4b5e      	ldr	r3, [pc, #376]	; (8000574 <MX_ADC_Init+0x1e8>)
 80003fa:	0018      	movs	r0, r3
 80003fc:	f000 fea6 	bl	800114c <HAL_ADC_Init>
 8000400:	1e03      	subs	r3, r0, #0
 8000402:	d001      	beq.n	8000408 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000404:	f000 fbb4 	bl	8000b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2280      	movs	r2, #128	; 0x80
 8000412:	0152      	lsls	r2, r2, #5
 8000414:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2280      	movs	r2, #128	; 0x80
 800041a:	0552      	lsls	r2, r2, #21
 800041c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800041e:	1d3a      	adds	r2, r7, #4
 8000420:	4b54      	ldr	r3, [pc, #336]	; (8000574 <MX_ADC_Init+0x1e8>)
 8000422:	0011      	movs	r1, r2
 8000424:	0018      	movs	r0, r3
 8000426:	f000 ffd1 	bl	80013cc <HAL_ADC_ConfigChannel>
 800042a:	1e03      	subs	r3, r0, #0
 800042c:	d001      	beq.n	8000432 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800042e:	f000 fb9f 	bl	8000b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	2201      	movs	r2, #1
 8000436:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000438:	1d3a      	adds	r2, r7, #4
 800043a:	4b4e      	ldr	r3, [pc, #312]	; (8000574 <MX_ADC_Init+0x1e8>)
 800043c:	0011      	movs	r1, r2
 800043e:	0018      	movs	r0, r3
 8000440:	f000 ffc4 	bl	80013cc <HAL_ADC_ConfigChannel>
 8000444:	1e03      	subs	r3, r0, #0
 8000446:	d001      	beq.n	800044c <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000448:	f000 fb92 	bl	8000b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	2202      	movs	r2, #2
 8000450:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000452:	1d3a      	adds	r2, r7, #4
 8000454:	4b47      	ldr	r3, [pc, #284]	; (8000574 <MX_ADC_Init+0x1e8>)
 8000456:	0011      	movs	r1, r2
 8000458:	0018      	movs	r0, r3
 800045a:	f000 ffb7 	bl	80013cc <HAL_ADC_ConfigChannel>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000462:	f000 fb85 	bl	8000b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	2203      	movs	r2, #3
 800046a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800046c:	1d3a      	adds	r2, r7, #4
 800046e:	4b41      	ldr	r3, [pc, #260]	; (8000574 <MX_ADC_Init+0x1e8>)
 8000470:	0011      	movs	r1, r2
 8000472:	0018      	movs	r0, r3
 8000474:	f000 ffaa 	bl	80013cc <HAL_ADC_ConfigChannel>
 8000478:	1e03      	subs	r3, r0, #0
 800047a:	d001      	beq.n	8000480 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 800047c:	f000 fb78 	bl	8000b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2204      	movs	r2, #4
 8000484:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000486:	1d3a      	adds	r2, r7, #4
 8000488:	4b3a      	ldr	r3, [pc, #232]	; (8000574 <MX_ADC_Init+0x1e8>)
 800048a:	0011      	movs	r1, r2
 800048c:	0018      	movs	r0, r3
 800048e:	f000 ff9d 	bl	80013cc <HAL_ADC_ConfigChannel>
 8000492:	1e03      	subs	r3, r0, #0
 8000494:	d001      	beq.n	800049a <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000496:	f000 fb6b 	bl	8000b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	2205      	movs	r2, #5
 800049e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004a0:	1d3a      	adds	r2, r7, #4
 80004a2:	4b34      	ldr	r3, [pc, #208]	; (8000574 <MX_ADC_Init+0x1e8>)
 80004a4:	0011      	movs	r1, r2
 80004a6:	0018      	movs	r0, r3
 80004a8:	f000 ff90 	bl	80013cc <HAL_ADC_ConfigChannel>
 80004ac:	1e03      	subs	r3, r0, #0
 80004ae:	d001      	beq.n	80004b4 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 80004b0:	f000 fb5e 	bl	8000b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2206      	movs	r2, #6
 80004b8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004ba:	1d3a      	adds	r2, r7, #4
 80004bc:	4b2d      	ldr	r3, [pc, #180]	; (8000574 <MX_ADC_Init+0x1e8>)
 80004be:	0011      	movs	r1, r2
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 ff83 	bl	80013cc <HAL_ADC_ConfigChannel>
 80004c6:	1e03      	subs	r3, r0, #0
 80004c8:	d001      	beq.n	80004ce <MX_ADC_Init+0x142>
  {
    Error_Handler();
 80004ca:	f000 fb51 	bl	8000b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2207      	movs	r2, #7
 80004d2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004d4:	1d3a      	adds	r2, r7, #4
 80004d6:	4b27      	ldr	r3, [pc, #156]	; (8000574 <MX_ADC_Init+0x1e8>)
 80004d8:	0011      	movs	r1, r2
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 ff76 	bl	80013cc <HAL_ADC_ConfigChannel>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 80004e4:	f000 fb44 	bl	8000b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	220a      	movs	r2, #10
 80004ec:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004ee:	1d3a      	adds	r2, r7, #4
 80004f0:	4b20      	ldr	r3, [pc, #128]	; (8000574 <MX_ADC_Init+0x1e8>)
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f000 ff69 	bl	80013cc <HAL_ADC_ConfigChannel>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_ADC_Init+0x176>
  {
    Error_Handler();
 80004fe:	f000 fb37 	bl	8000b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	220b      	movs	r2, #11
 8000506:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000508:	1d3a      	adds	r2, r7, #4
 800050a:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <MX_ADC_Init+0x1e8>)
 800050c:	0011      	movs	r1, r2
 800050e:	0018      	movs	r0, r3
 8000510:	f000 ff5c 	bl	80013cc <HAL_ADC_ConfigChannel>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8000518:	f000 fb2a 	bl	8000b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	220c      	movs	r2, #12
 8000520:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000522:	1d3a      	adds	r2, r7, #4
 8000524:	4b13      	ldr	r3, [pc, #76]	; (8000574 <MX_ADC_Init+0x1e8>)
 8000526:	0011      	movs	r1, r2
 8000528:	0018      	movs	r0, r3
 800052a:	f000 ff4f 	bl	80013cc <HAL_ADC_ConfigChannel>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8000532:	f000 fb1d 	bl	8000b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	220d      	movs	r2, #13
 800053a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800053c:	1d3a      	adds	r2, r7, #4
 800053e:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <MX_ADC_Init+0x1e8>)
 8000540:	0011      	movs	r1, r2
 8000542:	0018      	movs	r0, r3
 8000544:	f000 ff42 	bl	80013cc <HAL_ADC_ConfigChannel>
 8000548:	1e03      	subs	r3, r0, #0
 800054a:	d001      	beq.n	8000550 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 800054c:	f000 fb10 	bl	8000b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	220e      	movs	r2, #14
 8000554:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000556:	1d3a      	adds	r2, r7, #4
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_ADC_Init+0x1e8>)
 800055a:	0011      	movs	r1, r2
 800055c:	0018      	movs	r0, r3
 800055e:	f000 ff35 	bl	80013cc <HAL_ADC_ConfigChannel>
 8000562:	1e03      	subs	r3, r0, #0
 8000564:	d001      	beq.n	800056a <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8000566:	f000 fb03 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b004      	add	sp, #16
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	200001cc 	.word	0x200001cc
 8000578:	40012400 	.word	0x40012400

0800057c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000580:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <MX_SPI2_Init+0x74>)
 8000582:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <MX_SPI2_Init+0x78>)
 8000584:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000586:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <MX_SPI2_Init+0x74>)
 8000588:	2282      	movs	r2, #130	; 0x82
 800058a:	0052      	lsls	r2, r2, #1
 800058c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800058e:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <MX_SPI2_Init+0x74>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000594:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <MX_SPI2_Init+0x74>)
 8000596:	22c0      	movs	r2, #192	; 0xc0
 8000598:	0092      	lsls	r2, r2, #2
 800059a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <MX_SPI2_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <MX_SPI2_Init+0x74>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <MX_SPI2_Init+0x74>)
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	02d2      	lsls	r2, r2, #11
 80005ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <MX_SPI2_Init+0x74>)
 80005b2:	2210      	movs	r2, #16
 80005b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <MX_SPI2_Init+0x74>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <MX_SPI2_Init+0x74>)
 80005be:	2200      	movs	r2, #0
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <MX_SPI2_Init+0x74>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <MX_SPI2_Init+0x74>)
 80005ca:	2207      	movs	r2, #7
 80005cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <MX_SPI2_Init+0x74>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <MX_SPI2_Init+0x74>)
 80005d6:	2208      	movs	r2, #8
 80005d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <MX_SPI2_Init+0x74>)
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 ff89 	bl	80024f4 <HAL_SPI_Init>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80005e6:	f000 fac3 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000028 	.word	0x20000028
 80005f4:	40003800 	.word	0x40003800

080005f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005fe:	2308      	movs	r3, #8
 8000600:	18fb      	adds	r3, r7, r3
 8000602:	0018      	movs	r0, r3
 8000604:	2310      	movs	r3, #16
 8000606:	001a      	movs	r2, r3
 8000608:	2100      	movs	r1, #0
 800060a:	f003 f94b 	bl	80038a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800060e:	003b      	movs	r3, r7
 8000610:	0018      	movs	r0, r3
 8000612:	2308      	movs	r3, #8
 8000614:	001a      	movs	r2, r3
 8000616:	2100      	movs	r1, #0
 8000618:	f003 f944 	bl	80038a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <MX_TIM1_Init+0xa4>)
 800061e:	4a20      	ldr	r2, [pc, #128]	; (80006a0 <MX_TIM1_Init+0xa8>)
 8000620:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <MX_TIM1_Init+0xa4>)
 8000624:	2200      	movs	r2, #0
 8000626:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000628:	4b1c      	ldr	r3, [pc, #112]	; (800069c <MX_TIM1_Init+0xa4>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800062e:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_TIM1_Init+0xa4>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000634:	4b19      	ldr	r3, [pc, #100]	; (800069c <MX_TIM1_Init+0xa4>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800063a:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_TIM1_Init+0xa4>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000640:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_TIM1_Init+0xa4>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <MX_TIM1_Init+0xa4>)
 8000648:	0018      	movs	r0, r3
 800064a:	f001 ffed 	bl	8002628 <HAL_TIM_Base_Init>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000652:	f000 fa8d 	bl	8000b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000656:	2108      	movs	r1, #8
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	0152      	lsls	r2, r2, #5
 800065e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000660:	187a      	adds	r2, r7, r1
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_TIM1_Init+0xa4>)
 8000664:	0011      	movs	r1, r2
 8000666:	0018      	movs	r0, r3
 8000668:	f002 f8f6 	bl	8002858 <HAL_TIM_ConfigClockSource>
 800066c:	1e03      	subs	r3, r0, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000670:	f000 fa7e 	bl	8000b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000674:	003b      	movs	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067a:	003b      	movs	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000680:	003a      	movs	r2, r7
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_TIM1_Init+0xa4>)
 8000684:	0011      	movs	r1, r2
 8000686:	0018      	movs	r0, r3
 8000688:	f002 fcb0 	bl	8002fec <HAL_TIMEx_MasterConfigSynchronization>
 800068c:	1e03      	subs	r3, r0, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000690:	f000 fa6e 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	b006      	add	sp, #24
 800069a:	bd80      	pop	{r7, pc}
 800069c:	2000018c 	.word	0x2000018c
 80006a0:	40012c00 	.word	0x40012c00

080006a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08e      	sub	sp, #56	; 0x38
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006aa:	2328      	movs	r3, #40	; 0x28
 80006ac:	18fb      	adds	r3, r7, r3
 80006ae:	0018      	movs	r0, r3
 80006b0:	2310      	movs	r3, #16
 80006b2:	001a      	movs	r2, r3
 80006b4:	2100      	movs	r1, #0
 80006b6:	f003 f8f5 	bl	80038a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ba:	2320      	movs	r3, #32
 80006bc:	18fb      	adds	r3, r7, r3
 80006be:	0018      	movs	r0, r3
 80006c0:	2308      	movs	r3, #8
 80006c2:	001a      	movs	r2, r3
 80006c4:	2100      	movs	r1, #0
 80006c6:	f003 f8ed 	bl	80038a4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	0018      	movs	r0, r3
 80006ce:	231c      	movs	r3, #28
 80006d0:	001a      	movs	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	f003 f8e6 	bl	80038a4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006d8:	4b3e      	ldr	r3, [pc, #248]	; (80007d4 <MX_TIM3_Init+0x130>)
 80006da:	4a3f      	ldr	r2, [pc, #252]	; (80007d8 <MX_TIM3_Init+0x134>)
 80006dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006de:	4b3d      	ldr	r3, [pc, #244]	; (80007d4 <MX_TIM3_Init+0x130>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e4:	4b3b      	ldr	r3, [pc, #236]	; (80007d4 <MX_TIM3_Init+0x130>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80006ea:	4b3a      	ldr	r3, [pc, #232]	; (80007d4 <MX_TIM3_Init+0x130>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f0:	4b38      	ldr	r3, [pc, #224]	; (80007d4 <MX_TIM3_Init+0x130>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f6:	4b37      	ldr	r3, [pc, #220]	; (80007d4 <MX_TIM3_Init+0x130>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006fc:	4b35      	ldr	r3, [pc, #212]	; (80007d4 <MX_TIM3_Init+0x130>)
 80006fe:	0018      	movs	r0, r3
 8000700:	f001 ff92 	bl	8002628 <HAL_TIM_Base_Init>
 8000704:	1e03      	subs	r3, r0, #0
 8000706:	d001      	beq.n	800070c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000708:	f000 fa32 	bl	8000b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800070c:	2128      	movs	r1, #40	; 0x28
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	0152      	lsls	r2, r2, #5
 8000714:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000716:	187a      	adds	r2, r7, r1
 8000718:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <MX_TIM3_Init+0x130>)
 800071a:	0011      	movs	r1, r2
 800071c:	0018      	movs	r0, r3
 800071e:	f002 f89b 	bl	8002858 <HAL_TIM_ConfigClockSource>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d001      	beq.n	800072a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000726:	f000 fa23 	bl	8000b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800072a:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <MX_TIM3_Init+0x130>)
 800072c:	0018      	movs	r0, r3
 800072e:	f001 ffa7 	bl	8002680 <HAL_TIM_PWM_Init>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000736:	f000 fa1b 	bl	8000b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073a:	2120      	movs	r1, #32
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2200      	movs	r2, #0
 8000746:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000748:	187a      	adds	r2, r7, r1
 800074a:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <MX_TIM3_Init+0x130>)
 800074c:	0011      	movs	r1, r2
 800074e:	0018      	movs	r0, r3
 8000750:	f002 fc4c 	bl	8002fec <HAL_TIMEx_MasterConfigSynchronization>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000758:	f000 fa0a 	bl	8000b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2260      	movs	r2, #96	; 0x60
 8000760:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000774:	1d39      	adds	r1, r7, #4
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_TIM3_Init+0x130>)
 8000778:	2200      	movs	r2, #0
 800077a:	0018      	movs	r0, r3
 800077c:	f001 ffb4 	bl	80026e8 <HAL_TIM_PWM_ConfigChannel>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000784:	f000 f9f4 	bl	8000b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_TIM3_Init+0x130>)
 800078c:	2204      	movs	r2, #4
 800078e:	0018      	movs	r0, r3
 8000790:	f001 ffaa 	bl	80026e8 <HAL_TIM_PWM_ConfigChannel>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d001      	beq.n	800079c <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8000798:	f000 f9ea 	bl	8000b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800079c:	1d39      	adds	r1, r7, #4
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <MX_TIM3_Init+0x130>)
 80007a0:	2208      	movs	r2, #8
 80007a2:	0018      	movs	r0, r3
 80007a4:	f001 ffa0 	bl	80026e8 <HAL_TIM_PWM_ConfigChannel>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 80007ac:	f000 f9e0 	bl	8000b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007b0:	1d39      	adds	r1, r7, #4
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_TIM3_Init+0x130>)
 80007b4:	220c      	movs	r2, #12
 80007b6:	0018      	movs	r0, r3
 80007b8:	f001 ff96 	bl	80026e8 <HAL_TIM_PWM_ConfigChannel>
 80007bc:	1e03      	subs	r3, r0, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 80007c0:	f000 f9d6 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007c4:	4b03      	ldr	r3, [pc, #12]	; (80007d4 <MX_TIM3_Init+0x130>)
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 fb2a 	bl	8000e20 <HAL_TIM_MspPostInit>

}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b00e      	add	sp, #56	; 0x38
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000cc 	.word	0x200000cc
 80007d8:	40000400 	.word	0x40000400

080007dc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b090      	sub	sp, #64	; 0x40
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e2:	2324      	movs	r3, #36	; 0x24
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	0018      	movs	r0, r3
 80007e8:	231c      	movs	r3, #28
 80007ea:	001a      	movs	r2, r3
 80007ec:	2100      	movs	r1, #0
 80007ee:	f003 f859 	bl	80038a4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	0018      	movs	r0, r3
 80007f6:	2320      	movs	r3, #32
 80007f8:	001a      	movs	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f003 f852 	bl	80038a4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000800:	4b36      	ldr	r3, [pc, #216]	; (80008dc <MX_TIM16_Init+0x100>)
 8000802:	4a37      	ldr	r2, [pc, #220]	; (80008e0 <MX_TIM16_Init+0x104>)
 8000804:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000806:	4b35      	ldr	r3, [pc, #212]	; (80008dc <MX_TIM16_Init+0x100>)
 8000808:	2200      	movs	r2, #0
 800080a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080c:	4b33      	ldr	r3, [pc, #204]	; (80008dc <MX_TIM16_Init+0x100>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0;
 8000812:	4b32      	ldr	r3, [pc, #200]	; (80008dc <MX_TIM16_Init+0x100>)
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000818:	4b30      	ldr	r3, [pc, #192]	; (80008dc <MX_TIM16_Init+0x100>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800081e:	4b2f      	ldr	r3, [pc, #188]	; (80008dc <MX_TIM16_Init+0x100>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <MX_TIM16_Init+0x100>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800082a:	4b2c      	ldr	r3, [pc, #176]	; (80008dc <MX_TIM16_Init+0x100>)
 800082c:	0018      	movs	r0, r3
 800082e:	f001 fefb 	bl	8002628 <HAL_TIM_Base_Init>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000836:	f000 f99b 	bl	8000b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800083a:	4b28      	ldr	r3, [pc, #160]	; (80008dc <MX_TIM16_Init+0x100>)
 800083c:	0018      	movs	r0, r3
 800083e:	f001 ff1f 	bl	8002680 <HAL_TIM_PWM_Init>
 8000842:	1e03      	subs	r3, r0, #0
 8000844:	d001      	beq.n	800084a <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8000846:	f000 f993 	bl	8000b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800084a:	2124      	movs	r1, #36	; 0x24
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2260      	movs	r2, #96	; 0x60
 8000850:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000876:	1879      	adds	r1, r7, r1
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_TIM16_Init+0x100>)
 800087a:	2200      	movs	r2, #0
 800087c:	0018      	movs	r0, r3
 800087e:	f001 ff33 	bl	80026e8 <HAL_TIM_PWM_ConfigChannel>
 8000882:	1e03      	subs	r3, r0, #0
 8000884:	d001      	beq.n	800088a <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8000886:	f000 f973 	bl	8000b70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	0192      	lsls	r2, r2, #6
 80008ae:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80008b6:	1d3a      	adds	r2, r7, #4
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_TIM16_Init+0x100>)
 80008ba:	0011      	movs	r1, r2
 80008bc:	0018      	movs	r0, r3
 80008be:	f002 fbed 	bl	800309c <HAL_TIMEx_ConfigBreakDeadTime>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 80008c6:	f000 f953 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80008ca:	4b04      	ldr	r3, [pc, #16]	; (80008dc <MX_TIM16_Init+0x100>)
 80008cc:	0018      	movs	r0, r3
 80008ce:	f000 faa7 	bl	8000e20 <HAL_TIM_MspPostInit>

}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b010      	add	sp, #64	; 0x40
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	2000020c 	.word	0x2000020c
 80008e0:	40014400 	.word	0x40014400

080008e4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b090      	sub	sp, #64	; 0x40
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ea:	2324      	movs	r3, #36	; 0x24
 80008ec:	18fb      	adds	r3, r7, r3
 80008ee:	0018      	movs	r0, r3
 80008f0:	231c      	movs	r3, #28
 80008f2:	001a      	movs	r2, r3
 80008f4:	2100      	movs	r1, #0
 80008f6:	f002 ffd5 	bl	80038a4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	0018      	movs	r0, r3
 80008fe:	2320      	movs	r3, #32
 8000900:	001a      	movs	r2, r3
 8000902:	2100      	movs	r1, #0
 8000904:	f002 ffce 	bl	80038a4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000908:	4b36      	ldr	r3, [pc, #216]	; (80009e4 <MX_TIM17_Init+0x100>)
 800090a:	4a37      	ldr	r2, [pc, #220]	; (80009e8 <MX_TIM17_Init+0x104>)
 800090c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800090e:	4b35      	ldr	r3, [pc, #212]	; (80009e4 <MX_TIM17_Init+0x100>)
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000914:	4b33      	ldr	r3, [pc, #204]	; (80009e4 <MX_TIM17_Init+0x100>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 0;
 800091a:	4b32      	ldr	r3, [pc, #200]	; (80009e4 <MX_TIM17_Init+0x100>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000920:	4b30      	ldr	r3, [pc, #192]	; (80009e4 <MX_TIM17_Init+0x100>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000926:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <MX_TIM17_Init+0x100>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092c:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <MX_TIM17_Init+0x100>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000932:	4b2c      	ldr	r3, [pc, #176]	; (80009e4 <MX_TIM17_Init+0x100>)
 8000934:	0018      	movs	r0, r3
 8000936:	f001 fe77 	bl	8002628 <HAL_TIM_Base_Init>
 800093a:	1e03      	subs	r3, r0, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800093e:	f000 f917 	bl	8000b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000942:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <MX_TIM17_Init+0x100>)
 8000944:	0018      	movs	r0, r3
 8000946:	f001 fe9b 	bl	8002680 <HAL_TIM_PWM_Init>
 800094a:	1e03      	subs	r3, r0, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 800094e:	f000 f90f 	bl	8000b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000952:	2124      	movs	r1, #36	; 0x24
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2260      	movs	r2, #96	; 0x60
 8000958:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800097e:	1879      	adds	r1, r7, r1
 8000980:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_TIM17_Init+0x100>)
 8000982:	2200      	movs	r2, #0
 8000984:	0018      	movs	r0, r3
 8000986:	f001 feaf 	bl	80026e8 <HAL_TIM_PWM_ConfigChannel>
 800098a:	1e03      	subs	r3, r0, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 800098e:	f000 f8ef 	bl	8000b70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2200      	movs	r2, #0
 800099c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	0192      	lsls	r2, r2, #6
 80009b6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80009be:	1d3a      	adds	r2, r7, #4
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_TIM17_Init+0x100>)
 80009c2:	0011      	movs	r1, r2
 80009c4:	0018      	movs	r0, r3
 80009c6:	f002 fb69 	bl	800309c <HAL_TIMEx_ConfigBreakDeadTime>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM17_Init+0xee>
  {
    Error_Handler();
 80009ce:	f000 f8cf 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80009d2:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <MX_TIM17_Init+0x100>)
 80009d4:	0018      	movs	r0, r3
 80009d6:	f000 fa23 	bl	8000e20 <HAL_TIM_MspPostInit>

}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b010      	add	sp, #64	; 0x40
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	2000008c 	.word	0x2000008c
 80009e8:	40014800 	.word	0x40014800

080009ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_USART1_UART_Init+0x58>)
 80009f2:	4a15      	ldr	r2, [pc, #84]	; (8000a48 <MX_USART1_UART_Init+0x5c>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_USART1_UART_Init+0x58>)
 80009f8:	22e1      	movs	r2, #225	; 0xe1
 80009fa:	0252      	lsls	r2, r2, #9
 80009fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USART1_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_USART1_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USART1_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USART1_UART_Init+0x58>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USART1_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USART1_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USART1_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USART1_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <MX_USART1_UART_Init+0x58>)
 8000a30:	0018      	movs	r0, r3
 8000a32:	f002 fb91 	bl	8003158 <HAL_UART_Init>
 8000a36:	1e03      	subs	r3, r0, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a3a:	f000 f899 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	2000010c 	.word	0x2000010c
 8000a48:	40013800 	.word	0x40013800

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b089      	sub	sp, #36	; 0x24
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	240c      	movs	r4, #12
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	0018      	movs	r0, r3
 8000a58:	2314      	movs	r3, #20
 8000a5a:	001a      	movs	r2, r3
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	f002 ff21 	bl	80038a4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	4b3f      	ldr	r3, [pc, #252]	; (8000b60 <MX_GPIO_Init+0x114>)
 8000a64:	695a      	ldr	r2, [r3, #20]
 8000a66:	4b3e      	ldr	r3, [pc, #248]	; (8000b60 <MX_GPIO_Init+0x114>)
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	0309      	lsls	r1, r1, #12
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	615a      	str	r2, [r3, #20]
 8000a70:	4b3b      	ldr	r3, [pc, #236]	; (8000b60 <MX_GPIO_Init+0x114>)
 8000a72:	695a      	ldr	r2, [r3, #20]
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	031b      	lsls	r3, r3, #12
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	4b38      	ldr	r3, [pc, #224]	; (8000b60 <MX_GPIO_Init+0x114>)
 8000a80:	695a      	ldr	r2, [r3, #20]
 8000a82:	4b37      	ldr	r3, [pc, #220]	; (8000b60 <MX_GPIO_Init+0x114>)
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	0289      	lsls	r1, r1, #10
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	615a      	str	r2, [r3, #20]
 8000a8c:	4b34      	ldr	r3, [pc, #208]	; (8000b60 <MX_GPIO_Init+0x114>)
 8000a8e:	695a      	ldr	r2, [r3, #20]
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	029b      	lsls	r3, r3, #10
 8000a94:	4013      	ands	r3, r2
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <MX_GPIO_Init+0x114>)
 8000a9c:	695a      	ldr	r2, [r3, #20]
 8000a9e:	4b30      	ldr	r3, [pc, #192]	; (8000b60 <MX_GPIO_Init+0x114>)
 8000aa0:	2180      	movs	r1, #128	; 0x80
 8000aa2:	02c9      	lsls	r1, r1, #11
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	615a      	str	r2, [r3, #20]
 8000aa8:	4b2d      	ldr	r3, [pc, #180]	; (8000b60 <MX_GPIO_Init+0x114>)
 8000aaa:	695a      	ldr	r2, [r3, #20]
 8000aac:	2380      	movs	r3, #128	; 0x80
 8000aae:	02db      	lsls	r3, r3, #11
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Green_Pin|LED_Red_Pin|LED_RGB_Red_Pin|LED_RGB_Green_Pin 
 8000ab6:	23f8      	movs	r3, #248	; 0xf8
 8000ab8:	01db      	lsls	r3, r3, #7
 8000aba:	482a      	ldr	r0, [pc, #168]	; (8000b64 <MX_GPIO_Init+0x118>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	0019      	movs	r1, r3
 8000ac0:	f000 ffbb 	bl	8001a3a <HAL_GPIO_WritePin>
                          |LED_RGB_Blue_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Green_Pin LED_Red_Pin LED_RGB_Red_Pin LED_RGB_Green_Pin 
                           LED_RGB_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Red_Pin|LED_RGB_Red_Pin|LED_RGB_Green_Pin 
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	22f8      	movs	r2, #248	; 0xf8
 8000ac8:	01d2      	lsls	r2, r2, #7
 8000aca:	601a      	str	r2, [r3, #0]
                          |LED_RGB_Blue_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	2201      	movs	r2, #1
 8000ad0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	0021      	movs	r1, r4
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae0:	000c      	movs	r4, r1
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	4a1f      	ldr	r2, [pc, #124]	; (8000b64 <MX_GPIO_Init+0x118>)
 8000ae6:	0019      	movs	r1, r3
 8000ae8:	0010      	movs	r0, r2
 8000aea:	f000 fe19 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXP_SW_Pin */
  GPIO_InitStruct.Pin = EXP_SW_Pin;
 8000aee:	0021      	movs	r1, r4
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2220      	movs	r2, #32
 8000af4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2200      	movs	r2, #0
 8000afa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(EXP_SW_GPIO_Port, &GPIO_InitStruct);
 8000b02:	000c      	movs	r4, r1
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <MX_GPIO_Init+0x118>)
 8000b08:	0019      	movs	r1, r3
 8000b0a:	0010      	movs	r0, r2
 8000b0c:	f000 fe08 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : BYPASS_Pin TAP_Pin HARM_SW_Pin GPIO_1_Pin 
                           GPIO_2_Pin PAN_SW_Pin GP_SW_1_Pin GP_SW_2_Pin 
                           GP_SW_3_Pin GP_SW_4_Pin */
  GPIO_InitStruct.Pin = BYPASS_Pin|TAP_Pin|HARM_SW_Pin|GPIO_1_Pin 
 8000b10:	0021      	movs	r1, r4
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <MX_GPIO_Init+0x11c>)
 8000b16:	601a      	str	r2, [r3, #0]
                          |GPIO_2_Pin|PAN_SW_Pin|GP_SW_1_Pin|GP_SW_2_Pin 
                          |GP_SW_3_Pin|GP_SW_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2201      	movs	r2, #1
 8000b22:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	000c      	movs	r4, r1
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	4a10      	ldr	r2, [pc, #64]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000b2a:	0019      	movs	r1, r3
 8000b2c:	0010      	movs	r0, r2
 8000b2e:	f000 fdf7 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_3_Pin GPIO_4_Pin GPIO_5_Pin GPIO_6_Pin */
  GPIO_InitStruct.Pin = GPIO_3_Pin|GPIO_4_Pin|GPIO_5_Pin|GPIO_6_Pin;
 8000b32:	0021      	movs	r1, r4
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2299      	movs	r2, #153	; 0x99
 8000b38:	0212      	lsls	r2, r2, #8
 8000b3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2200      	movs	r2, #0
 8000b40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2201      	movs	r2, #1
 8000b46:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	187a      	adds	r2, r7, r1
 8000b4a:	2390      	movs	r3, #144	; 0x90
 8000b4c:	05db      	lsls	r3, r3, #23
 8000b4e:	0011      	movs	r1, r2
 8000b50:	0018      	movs	r0, r3
 8000b52:	f000 fde5 	bl	8001720 <HAL_GPIO_Init>

}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b009      	add	sp, #36	; 0x24
 8000b5c:	bd90      	pop	{r4, r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	40021000 	.word	0x40021000
 8000b64:	48000800 	.word	0x48000800
 8000b68:	00000cff 	.word	0x00000cff
 8000b6c:	48000400 	.word	0x48000400

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b84:	699a      	ldr	r2, [r3, #24]
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b88:	2101      	movs	r1, #1
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	619a      	str	r2, [r3, #24]
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	2201      	movs	r2, #1
 8000b94:	4013      	ands	r3, r2
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b9c:	69da      	ldr	r2, [r3, #28]
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_MspInit+0x44>)
 8000ba0:	2180      	movs	r1, #128	; 0x80
 8000ba2:	0549      	lsls	r1, r1, #21
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	61da      	str	r2, [r3, #28]
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_MspInit+0x44>)
 8000baa:	69da      	ldr	r2, [r3, #28]
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	055b      	lsls	r3, r3, #21
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b002      	add	sp, #8
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b08b      	sub	sp, #44	; 0x2c
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	2314      	movs	r3, #20
 8000bce:	18fb      	adds	r3, r7, r3
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	2314      	movs	r3, #20
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	f002 fe64 	bl	80038a4 <memset>
  if(hadc->Instance==ADC1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a29      	ldr	r2, [pc, #164]	; (8000c88 <HAL_ADC_MspInit+0xc4>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d14b      	bne.n	8000c7e <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000be6:	4b29      	ldr	r3, [pc, #164]	; (8000c8c <HAL_ADC_MspInit+0xc8>)
 8000be8:	699a      	ldr	r2, [r3, #24]
 8000bea:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <HAL_ADC_MspInit+0xc8>)
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	0089      	lsls	r1, r1, #2
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	619a      	str	r2, [r3, #24]
 8000bf4:	4b25      	ldr	r3, [pc, #148]	; (8000c8c <HAL_ADC_MspInit+0xc8>)
 8000bf6:	699a      	ldr	r2, [r3, #24]
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c02:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <HAL_ADC_MspInit+0xc8>)
 8000c04:	695a      	ldr	r2, [r3, #20]
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <HAL_ADC_MspInit+0xc8>)
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	0309      	lsls	r1, r1, #12
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	615a      	str	r2, [r3, #20]
 8000c10:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <HAL_ADC_MspInit+0xc8>)
 8000c12:	695a      	ldr	r2, [r3, #20]
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	031b      	lsls	r3, r3, #12
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <HAL_ADC_MspInit+0xc8>)
 8000c20:	695a      	ldr	r2, [r3, #20]
 8000c22:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <HAL_ADC_MspInit+0xc8>)
 8000c24:	2180      	movs	r1, #128	; 0x80
 8000c26:	0289      	lsls	r1, r1, #10
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	615a      	str	r2, [r3, #20]
 8000c2c:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <HAL_ADC_MspInit+0xc8>)
 8000c2e:	695a      	ldr	r2, [r3, #20]
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	029b      	lsls	r3, r3, #10
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PC4     ------> ADC_IN14 
    */
    GPIO_InitStruct.Pin = LDRV_1_Pin|LDRV_2_Pin|LDRV_3_Pin|LDRV_4_Pin 
 8000c3a:	2114      	movs	r1, #20
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	221f      	movs	r2, #31
 8000c40:	601a      	str	r2, [r3, #0]
                          |EXP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2203      	movs	r2, #3
 8000c46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4e:	000c      	movs	r4, r1
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	4a0f      	ldr	r2, [pc, #60]	; (8000c90 <HAL_ADC_MspInit+0xcc>)
 8000c54:	0019      	movs	r1, r3
 8000c56:	0010      	movs	r0, r2
 8000c58:	f000 fd62 	bl	8001720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RATE_Pin|DEPTH_Pin|SHAPE_Pin|OFFSET_Pin 
 8000c5c:	0021      	movs	r1, r4
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	22ff      	movs	r2, #255	; 0xff
 8000c62:	601a      	str	r2, [r3, #0]
                          |SUBDIV_Pin|TRIM_Pin|GP_AIN1_Pin|GP_AIN2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	2203      	movs	r2, #3
 8000c68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	187a      	adds	r2, r7, r1
 8000c72:	2390      	movs	r3, #144	; 0x90
 8000c74:	05db      	lsls	r3, r3, #23
 8000c76:	0011      	movs	r1, r2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f000 fd51 	bl	8001720 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b00b      	add	sp, #44	; 0x2c
 8000c84:	bd90      	pop	{r4, r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	40012400 	.word	0x40012400
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	48000800 	.word	0x48000800

08000c94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c94:	b590      	push	{r4, r7, lr}
 8000c96:	b08b      	sub	sp, #44	; 0x2c
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	2314      	movs	r3, #20
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	2314      	movs	r3, #20
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	f002 fdfc 	bl	80038a4 <memset>
  if(hspi->Instance==SPI2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a28      	ldr	r2, [pc, #160]	; (8000d54 <HAL_SPI_MspInit+0xc0>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d14a      	bne.n	8000d4c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cb6:	4b28      	ldr	r3, [pc, #160]	; (8000d58 <HAL_SPI_MspInit+0xc4>)
 8000cb8:	69da      	ldr	r2, [r3, #28]
 8000cba:	4b27      	ldr	r3, [pc, #156]	; (8000d58 <HAL_SPI_MspInit+0xc4>)
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	01c9      	lsls	r1, r1, #7
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	61da      	str	r2, [r3, #28]
 8000cc4:	4b24      	ldr	r3, [pc, #144]	; (8000d58 <HAL_SPI_MspInit+0xc4>)
 8000cc6:	69da      	ldr	r2, [r3, #28]
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	01db      	lsls	r3, r3, #7
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <HAL_SPI_MspInit+0xc4>)
 8000cd4:	695a      	ldr	r2, [r3, #20]
 8000cd6:	4b20      	ldr	r3, [pc, #128]	; (8000d58 <HAL_SPI_MspInit+0xc4>)
 8000cd8:	2180      	movs	r1, #128	; 0x80
 8000cda:	02c9      	lsls	r1, r1, #11
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	615a      	str	r2, [r3, #20]
 8000ce0:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <HAL_SPI_MspInit+0xc4>)
 8000ce2:	695a      	ldr	r2, [r3, #20]
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	02db      	lsls	r3, r3, #11
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cee:	2114      	movs	r1, #20
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2280      	movs	r2, #128	; 0x80
 8000cf4:	0152      	lsls	r2, r2, #5
 8000cf6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2201      	movs	r2, #1
 8000d02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2203      	movs	r2, #3
 8000d08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	000c      	movs	r4, r1
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	4a11      	ldr	r2, [pc, #68]	; (8000d5c <HAL_SPI_MspInit+0xc8>)
 8000d16:	0019      	movs	r1, r3
 8000d18:	0010      	movs	r0, r2
 8000d1a:	f000 fd01 	bl	8001720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d1e:	0021      	movs	r1, r4
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	22e0      	movs	r2, #224	; 0xe0
 8000d24:	0212      	lsls	r2, r2, #8
 8000d26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2203      	movs	r2, #3
 8000d38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	4a06      	ldr	r2, [pc, #24]	; (8000d5c <HAL_SPI_MspInit+0xc8>)
 8000d44:	0019      	movs	r1, r3
 8000d46:	0010      	movs	r0, r2
 8000d48:	f000 fcea 	bl	8001720 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b00b      	add	sp, #44	; 0x2c
 8000d52:	bd90      	pop	{r4, r7, pc}
 8000d54:	40003800 	.word	0x40003800
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	48000400 	.word	0x48000400

08000d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a27      	ldr	r2, [pc, #156]	; (8000e0c <HAL_TIM_Base_MspInit+0xac>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d10e      	bne.n	8000d90 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d72:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <HAL_TIM_Base_MspInit+0xb0>)
 8000d74:	699a      	ldr	r2, [r3, #24]
 8000d76:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <HAL_TIM_Base_MspInit+0xb0>)
 8000d78:	2180      	movs	r1, #128	; 0x80
 8000d7a:	0109      	lsls	r1, r1, #4
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	619a      	str	r2, [r3, #24]
 8000d80:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <HAL_TIM_Base_MspInit+0xb0>)
 8000d82:	699a      	ldr	r2, [r3, #24]
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	4013      	ands	r3, r2
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000d8e:	e038      	b.n	8000e02 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a1f      	ldr	r2, [pc, #124]	; (8000e14 <HAL_TIM_Base_MspInit+0xb4>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d10c      	bne.n	8000db4 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <HAL_TIM_Base_MspInit+0xb0>)
 8000d9c:	69da      	ldr	r2, [r3, #28]
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <HAL_TIM_Base_MspInit+0xb0>)
 8000da0:	2102      	movs	r1, #2
 8000da2:	430a      	orrs	r2, r1
 8000da4:	61da      	str	r2, [r3, #28]
 8000da6:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <HAL_TIM_Base_MspInit+0xb0>)
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	2202      	movs	r2, #2
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]
}
 8000db2:	e026      	b.n	8000e02 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a17      	ldr	r2, [pc, #92]	; (8000e18 <HAL_TIM_Base_MspInit+0xb8>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d10e      	bne.n	8000ddc <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000dbe:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <HAL_TIM_Base_MspInit+0xb0>)
 8000dc0:	699a      	ldr	r2, [r3, #24]
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <HAL_TIM_Base_MspInit+0xb0>)
 8000dc4:	2180      	movs	r1, #128	; 0x80
 8000dc6:	0289      	lsls	r1, r1, #10
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	619a      	str	r2, [r3, #24]
 8000dcc:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <HAL_TIM_Base_MspInit+0xb0>)
 8000dce:	699a      	ldr	r2, [r3, #24]
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	029b      	lsls	r3, r3, #10
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
}
 8000dda:	e012      	b.n	8000e02 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM17)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <HAL_TIM_Base_MspInit+0xbc>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d10d      	bne.n	8000e02 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_TIM_Base_MspInit+0xb0>)
 8000de8:	699a      	ldr	r2, [r3, #24]
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_TIM_Base_MspInit+0xb0>)
 8000dec:	2180      	movs	r1, #128	; 0x80
 8000dee:	02c9      	lsls	r1, r1, #11
 8000df0:	430a      	orrs	r2, r1
 8000df2:	619a      	str	r2, [r3, #24]
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_TIM_Base_MspInit+0xb0>)
 8000df6:	699a      	ldr	r2, [r3, #24]
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	02db      	lsls	r3, r3, #11
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b006      	add	sp, #24
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	40012c00 	.word	0x40012c00
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40000400 	.word	0x40000400
 8000e18:	40014400 	.word	0x40014400
 8000e1c:	40014800 	.word	0x40014800

08000e20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	2314      	movs	r3, #20
 8000e2a:	18fb      	adds	r3, r7, r3
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	2314      	movs	r3, #20
 8000e30:	001a      	movs	r2, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	f002 fd36 	bl	80038a4 <memset>
  if(htim->Instance==TIM3)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a40      	ldr	r2, [pc, #256]	; (8000f40 <HAL_TIM_MspPostInit+0x120>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d125      	bne.n	8000e8e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e42:	4b40      	ldr	r3, [pc, #256]	; (8000f44 <HAL_TIM_MspPostInit+0x124>)
 8000e44:	695a      	ldr	r2, [r3, #20]
 8000e46:	4b3f      	ldr	r3, [pc, #252]	; (8000f44 <HAL_TIM_MspPostInit+0x124>)
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	0309      	lsls	r1, r1, #12
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	615a      	str	r2, [r3, #20]
 8000e50:	4b3c      	ldr	r3, [pc, #240]	; (8000f44 <HAL_TIM_MspPostInit+0x124>)
 8000e52:	695a      	ldr	r2, [r3, #20]
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	031b      	lsls	r3, r3, #12
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin|GPIO_PIN_8|PWM4_Pin;
 8000e5e:	2114      	movs	r1, #20
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	22f0      	movs	r2, #240	; 0xf0
 8000e64:	0092      	lsls	r2, r2, #2
 8000e66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	4a31      	ldr	r2, [pc, #196]	; (8000f48 <HAL_TIM_MspPostInit+0x128>)
 8000e84:	0019      	movs	r1, r3
 8000e86:	0010      	movs	r0, r2
 8000e88:	f000 fc4a 	bl	8001720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000e8c:	e054      	b.n	8000f38 <HAL_TIM_MspPostInit+0x118>
  else if(htim->Instance==TIM16)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a2e      	ldr	r2, [pc, #184]	; (8000f4c <HAL_TIM_MspPostInit+0x12c>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d125      	bne.n	8000ee4 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e98:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <HAL_TIM_MspPostInit+0x124>)
 8000e9a:	695a      	ldr	r2, [r3, #20]
 8000e9c:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <HAL_TIM_MspPostInit+0x124>)
 8000e9e:	2180      	movs	r1, #128	; 0x80
 8000ea0:	02c9      	lsls	r1, r1, #11
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	615a      	str	r2, [r3, #20]
 8000ea6:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <HAL_TIM_MspPostInit+0x124>)
 8000ea8:	695a      	ldr	r2, [r3, #20]
 8000eaa:	2380      	movs	r3, #128	; 0x80
 8000eac:	02db      	lsls	r3, r3, #11
 8000eae:	4013      	ands	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GP_PWM_1_Pin;
 8000eb4:	2114      	movs	r1, #20
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	0052      	lsls	r2, r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GP_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	4a1d      	ldr	r2, [pc, #116]	; (8000f50 <HAL_TIM_MspPostInit+0x130>)
 8000eda:	0019      	movs	r1, r3
 8000edc:	0010      	movs	r0, r2
 8000ede:	f000 fc1f 	bl	8001720 <HAL_GPIO_Init>
}
 8000ee2:	e029      	b.n	8000f38 <HAL_TIM_MspPostInit+0x118>
  else if(htim->Instance==TIM17)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a1a      	ldr	r2, [pc, #104]	; (8000f54 <HAL_TIM_MspPostInit+0x134>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d124      	bne.n	8000f38 <HAL_TIM_MspPostInit+0x118>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_TIM_MspPostInit+0x124>)
 8000ef0:	695a      	ldr	r2, [r3, #20]
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <HAL_TIM_MspPostInit+0x124>)
 8000ef4:	2180      	movs	r1, #128	; 0x80
 8000ef6:	02c9      	lsls	r1, r1, #11
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	615a      	str	r2, [r3, #20]
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_TIM_MspPostInit+0x124>)
 8000efe:	695a      	ldr	r2, [r3, #20]
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	02db      	lsls	r3, r3, #11
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GP_PWM_2_Pin;
 8000f0a:	2114      	movs	r1, #20
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	0092      	lsls	r2, r2, #2
 8000f12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	2202      	movs	r2, #2
 8000f18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2202      	movs	r2, #2
 8000f2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GP_PWM_2_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	4a08      	ldr	r2, [pc, #32]	; (8000f50 <HAL_TIM_MspPostInit+0x130>)
 8000f30:	0019      	movs	r1, r3
 8000f32:	0010      	movs	r0, r2
 8000f34:	f000 fbf4 	bl	8001720 <HAL_GPIO_Init>
}
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b00a      	add	sp, #40	; 0x28
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40000400 	.word	0x40000400
 8000f44:	40021000 	.word	0x40021000
 8000f48:	48000800 	.word	0x48000800
 8000f4c:	40014400 	.word	0x40014400
 8000f50:	48000400 	.word	0x48000400
 8000f54:	40014800 	.word	0x40014800

08000f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	2314      	movs	r3, #20
 8000f62:	18fb      	adds	r3, r7, r3
 8000f64:	0018      	movs	r0, r3
 8000f66:	2314      	movs	r3, #20
 8000f68:	001a      	movs	r2, r3
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	f002 fc9a 	bl	80038a4 <memset>
  if(huart->Instance==USART1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <HAL_UART_MspInit+0x94>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d133      	bne.n	8000fe2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <HAL_UART_MspInit+0x98>)
 8000f7c:	699a      	ldr	r2, [r3, #24]
 8000f7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <HAL_UART_MspInit+0x98>)
 8000f80:	2180      	movs	r1, #128	; 0x80
 8000f82:	01c9      	lsls	r1, r1, #7
 8000f84:	430a      	orrs	r2, r1
 8000f86:	619a      	str	r2, [r3, #24]
 8000f88:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <HAL_UART_MspInit+0x98>)
 8000f8a:	699a      	ldr	r2, [r3, #24]
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	01db      	lsls	r3, r3, #7
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <HAL_UART_MspInit+0x98>)
 8000f98:	695a      	ldr	r2, [r3, #20]
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_UART_MspInit+0x98>)
 8000f9c:	2180      	movs	r1, #128	; 0x80
 8000f9e:	0289      	lsls	r1, r1, #10
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	615a      	str	r2, [r3, #20]
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_UART_MspInit+0x98>)
 8000fa6:	695a      	ldr	r2, [r3, #20]
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	029b      	lsls	r3, r3, #10
 8000fac:	4013      	ands	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fb2:	2114      	movs	r1, #20
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	22c0      	movs	r2, #192	; 0xc0
 8000fb8:	00d2      	lsls	r2, r2, #3
 8000fba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	187a      	adds	r2, r7, r1
 8000fd6:	2390      	movs	r3, #144	; 0x90
 8000fd8:	05db      	lsls	r3, r3, #23
 8000fda:	0011      	movs	r1, r2
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f000 fb9f 	bl	8001720 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b00a      	add	sp, #40	; 0x28
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	40013800 	.word	0x40013800
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <HardFault_Handler+0x4>

08001004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001008:	46c0      	nop			; (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101c:	f000 f87a 	bl	8001114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001020:	46c0      	nop			; (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001032:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <LoopForever+0x6>)
  ldr r1, =_edata
 8001036:	490e      	ldr	r1, [pc, #56]	; (8001070 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001038:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <LoopForever+0xe>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800103c:	e002      	b.n	8001044 <LoopCopyDataInit>

0800103e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001042:	3304      	adds	r3, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001048:	d3f9      	bcc.n	800103e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104a:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <LoopForever+0x12>)
  ldr r4, =_ebss
 800104c:	4c0b      	ldr	r4, [pc, #44]	; (800107c <LoopForever+0x16>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001050:	e001      	b.n	8001056 <LoopFillZerobss>

08001052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001054:	3204      	adds	r2, #4

08001056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001058:	d3fb      	bcc.n	8001052 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800105a:	f7ff ffe4 	bl	8001026 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800105e:	f002 fbfd 	bl	800385c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001062:	f7ff f8db 	bl	800021c <main>

08001066 <LoopForever>:

LoopForever:
    b LoopForever
 8001066:	e7fe      	b.n	8001066 <LoopForever>
  ldr   r0, =_estack
 8001068:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001074:	0800390c 	.word	0x0800390c
  ldr r2, =_sbss
 8001078:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800107c:	20000250 	.word	0x20000250

08001080 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC1_IRQHandler>
	...

08001084 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <HAL_Init+0x24>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_Init+0x24>)
 800108e:	2110      	movs	r1, #16
 8001090:	430a      	orrs	r2, r1
 8001092:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001094:	2000      	movs	r0, #0
 8001096:	f000 f809 	bl	80010ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109a:	f7ff fd6f 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	40022000 	.word	0x40022000

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <HAL_InitTick+0x5c>)
 80010b6:	681c      	ldr	r4, [r3, #0]
 80010b8:	4b14      	ldr	r3, [pc, #80]	; (800110c <HAL_InitTick+0x60>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	0019      	movs	r1, r3
 80010be:	23fa      	movs	r3, #250	; 0xfa
 80010c0:	0098      	lsls	r0, r3, #2
 80010c2:	f7ff f81f 	bl	8000104 <__udivsi3>
 80010c6:	0003      	movs	r3, r0
 80010c8:	0019      	movs	r1, r3
 80010ca:	0020      	movs	r0, r4
 80010cc:	f7ff f81a 	bl	8000104 <__udivsi3>
 80010d0:	0003      	movs	r3, r0
 80010d2:	0018      	movs	r0, r3
 80010d4:	f000 fb17 	bl	8001706 <HAL_SYSTICK_Config>
 80010d8:	1e03      	subs	r3, r0, #0
 80010da:	d001      	beq.n	80010e0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e00f      	b.n	8001100 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	d80b      	bhi.n	80010fe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	2301      	movs	r3, #1
 80010ea:	425b      	negs	r3, r3
 80010ec:	2200      	movs	r2, #0
 80010ee:	0018      	movs	r0, r3
 80010f0:	f000 faf4 	bl	80016dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_InitTick+0x64>)
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e000      	b.n	8001100 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	0018      	movs	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	b003      	add	sp, #12
 8001106:	bd90      	pop	{r4, r7, pc}
 8001108:	20000000 	.word	0x20000000
 800110c:	20000008 	.word	0x20000008
 8001110:	20000004 	.word	0x20000004

08001114 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <HAL_IncTick+0x1c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	001a      	movs	r2, r3
 800111e:	4b05      	ldr	r3, [pc, #20]	; (8001134 <HAL_IncTick+0x20>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	18d2      	adds	r2, r2, r3
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_IncTick+0x20>)
 8001126:	601a      	str	r2, [r3, #0]
}
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	20000008 	.word	0x20000008
 8001134:	2000024c 	.word	0x2000024c

08001138 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  return uwTick;
 800113c:	4b02      	ldr	r3, [pc, #8]	; (8001148 <HAL_GetTick+0x10>)
 800113e:	681b      	ldr	r3, [r3, #0]
}
 8001140:	0018      	movs	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	2000024c 	.word	0x2000024c

0800114c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001154:	230f      	movs	r3, #15
 8001156:	18fb      	adds	r3, r7, r3
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e125      	b.n	80013b6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10a      	bne.n	8001188 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2234      	movs	r2, #52	; 0x34
 800117c:	2100      	movs	r1, #0
 800117e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	0018      	movs	r0, r3
 8001184:	f7ff fd1e 	bl	8000bc4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800118c:	2210      	movs	r2, #16
 800118e:	4013      	ands	r3, r2
 8001190:	d000      	beq.n	8001194 <HAL_ADC_Init+0x48>
 8001192:	e103      	b.n	800139c <HAL_ADC_Init+0x250>
 8001194:	230f      	movs	r3, #15
 8001196:	18fb      	adds	r3, r7, r3
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d000      	beq.n	80011a0 <HAL_ADC_Init+0x54>
 800119e:	e0fd      	b.n	800139c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2204      	movs	r2, #4
 80011a8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80011aa:	d000      	beq.n	80011ae <HAL_ADC_Init+0x62>
 80011ac:	e0f6      	b.n	800139c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b2:	4a83      	ldr	r2, [pc, #524]	; (80013c0 <HAL_ADC_Init+0x274>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	2202      	movs	r2, #2
 80011b8:	431a      	orrs	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	2203      	movs	r2, #3
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d112      	bne.n	80011f2 <HAL_ADC_Init+0xa6>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2201      	movs	r2, #1
 80011d4:	4013      	ands	r3, r2
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d009      	beq.n	80011ee <HAL_ADC_Init+0xa2>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	401a      	ands	r2, r3
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d101      	bne.n	80011f2 <HAL_ADC_Init+0xa6>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_ADC_Init+0xa8>
 80011f2:	2300      	movs	r3, #0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d116      	bne.n	8001226 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2218      	movs	r2, #24
 8001200:	4393      	bics	r3, r2
 8001202:	0019      	movs	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	430a      	orrs	r2, r1
 800120e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	0899      	lsrs	r1, r3, #2
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	430a      	orrs	r2, r1
 8001224:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4964      	ldr	r1, [pc, #400]	; (80013c4 <HAL_ADC_Init+0x278>)
 8001232:	400a      	ands	r2, r1
 8001234:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	7e1b      	ldrb	r3, [r3, #24]
 800123a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	7e5b      	ldrb	r3, [r3, #25]
 8001240:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001242:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7e9b      	ldrb	r3, [r3, #26]
 8001248:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800124a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	2b01      	cmp	r3, #1
 8001252:	d002      	beq.n	800125a <HAL_ADC_Init+0x10e>
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	015b      	lsls	r3, r3, #5
 8001258:	e000      	b.n	800125c <HAL_ADC_Init+0x110>
 800125a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800125c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001262:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d101      	bne.n	8001270 <HAL_ADC_Init+0x124>
 800126c:	2304      	movs	r3, #4
 800126e:	e000      	b.n	8001272 <HAL_ADC_Init+0x126>
 8001270:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001272:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2124      	movs	r1, #36	; 0x24
 8001278:	5c5b      	ldrb	r3, [r3, r1]
 800127a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800127c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	4313      	orrs	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	7edb      	ldrb	r3, [r3, #27]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d115      	bne.n	80012b8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7e9b      	ldrb	r3, [r3, #26]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d105      	bne.n	80012a0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	0252      	lsls	r2, r2, #9
 800129a:	4313      	orrs	r3, r2
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	e00b      	b.n	80012b8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a4:	2220      	movs	r2, #32
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012b0:	2201      	movs	r2, #1
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69da      	ldr	r2, [r3, #28]
 80012bc:	23c2      	movs	r3, #194	; 0xc2
 80012be:	33ff      	adds	r3, #255	; 0xff
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d007      	beq.n	80012d4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80012cc:	4313      	orrs	r3, r2
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68d9      	ldr	r1, [r3, #12]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	055b      	lsls	r3, r3, #21
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d01b      	beq.n	8001328 <HAL_ADC_Init+0x1dc>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d017      	beq.n	8001328 <HAL_ADC_Init+0x1dc>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d013      	beq.n	8001328 <HAL_ADC_Init+0x1dc>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001304:	2b03      	cmp	r3, #3
 8001306:	d00f      	beq.n	8001328 <HAL_ADC_Init+0x1dc>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130c:	2b04      	cmp	r3, #4
 800130e:	d00b      	beq.n	8001328 <HAL_ADC_Init+0x1dc>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001314:	2b05      	cmp	r3, #5
 8001316:	d007      	beq.n	8001328 <HAL_ADC_Init+0x1dc>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131c:	2b06      	cmp	r3, #6
 800131e:	d003      	beq.n	8001328 <HAL_ADC_Init+0x1dc>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001324:	2b07      	cmp	r3, #7
 8001326:	d112      	bne.n	800134e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	695a      	ldr	r2, [r3, #20]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2107      	movs	r1, #7
 8001334:	438a      	bics	r2, r1
 8001336:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6959      	ldr	r1, [r3, #20]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001342:	2207      	movs	r2, #7
 8001344:	401a      	ands	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <HAL_ADC_Init+0x27c>)
 8001356:	4013      	ands	r3, r2
 8001358:	68ba      	ldr	r2, [r7, #8]
 800135a:	429a      	cmp	r2, r3
 800135c:	d10b      	bne.n	8001376 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001368:	2203      	movs	r2, #3
 800136a:	4393      	bics	r3, r2
 800136c:	2201      	movs	r2, #1
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001374:	e01c      	b.n	80013b0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137a:	2212      	movs	r2, #18
 800137c:	4393      	bics	r3, r2
 800137e:	2210      	movs	r2, #16
 8001380:	431a      	orrs	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800138a:	2201      	movs	r2, #1
 800138c:	431a      	orrs	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001392:	230f      	movs	r3, #15
 8001394:	18fb      	adds	r3, r7, r3
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800139a:	e009      	b.n	80013b0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a0:	2210      	movs	r2, #16
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80013a8:	230f      	movs	r3, #15
 80013aa:	18fb      	adds	r3, r7, r3
 80013ac:	2201      	movs	r2, #1
 80013ae:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013b0:	230f      	movs	r3, #15
 80013b2:	18fb      	adds	r3, r7, r3
 80013b4:	781b      	ldrb	r3, [r3, #0]
}
 80013b6:	0018      	movs	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b004      	add	sp, #16
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	fffffefd 	.word	0xfffffefd
 80013c4:	fffe0219 	.word	0xfffe0219
 80013c8:	833fffe7 	.word	0x833fffe7

080013cc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d6:	230f      	movs	r3, #15
 80013d8:	18fb      	adds	r3, r7, r3
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	055b      	lsls	r3, r3, #21
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d011      	beq.n	8001412 <HAL_ADC_ConfigChannel+0x46>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d00d      	beq.n	8001412 <HAL_ADC_ConfigChannel+0x46>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d009      	beq.n	8001412 <HAL_ADC_ConfigChannel+0x46>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001402:	2b03      	cmp	r3, #3
 8001404:	d005      	beq.n	8001412 <HAL_ADC_ConfigChannel+0x46>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140a:	2b04      	cmp	r3, #4
 800140c:	d001      	beq.n	8001412 <HAL_ADC_ConfigChannel+0x46>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2234      	movs	r2, #52	; 0x34
 8001416:	5c9b      	ldrb	r3, [r3, r2]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d101      	bne.n	8001420 <HAL_ADC_ConfigChannel+0x54>
 800141c:	2302      	movs	r3, #2
 800141e:	e0bb      	b.n	8001598 <HAL_ADC_ConfigChannel+0x1cc>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2234      	movs	r2, #52	; 0x34
 8001424:	2101      	movs	r1, #1
 8001426:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2204      	movs	r2, #4
 8001430:	4013      	ands	r3, r2
 8001432:	d000      	beq.n	8001436 <HAL_ADC_ConfigChannel+0x6a>
 8001434:	e09f      	b.n	8001576 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	4a59      	ldr	r2, [pc, #356]	; (80015a0 <HAL_ADC_ConfigChannel+0x1d4>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d100      	bne.n	8001442 <HAL_ADC_ConfigChannel+0x76>
 8001440:	e077      	b.n	8001532 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2201      	movs	r2, #1
 800144e:	409a      	lsls	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	055b      	lsls	r3, r3, #21
 8001460:	429a      	cmp	r2, r3
 8001462:	d037      	beq.n	80014d4 <HAL_ADC_ConfigChannel+0x108>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	2b01      	cmp	r3, #1
 800146a:	d033      	beq.n	80014d4 <HAL_ADC_ConfigChannel+0x108>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	2b02      	cmp	r3, #2
 8001472:	d02f      	beq.n	80014d4 <HAL_ADC_ConfigChannel+0x108>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001478:	2b03      	cmp	r3, #3
 800147a:	d02b      	beq.n	80014d4 <HAL_ADC_ConfigChannel+0x108>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001480:	2b04      	cmp	r3, #4
 8001482:	d027      	beq.n	80014d4 <HAL_ADC_ConfigChannel+0x108>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001488:	2b05      	cmp	r3, #5
 800148a:	d023      	beq.n	80014d4 <HAL_ADC_ConfigChannel+0x108>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	2b06      	cmp	r3, #6
 8001492:	d01f      	beq.n	80014d4 <HAL_ADC_ConfigChannel+0x108>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001498:	2b07      	cmp	r3, #7
 800149a:	d01b      	beq.n	80014d4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	2107      	movs	r1, #7
 80014a8:	400b      	ands	r3, r1
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d012      	beq.n	80014d4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	695a      	ldr	r2, [r3, #20]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2107      	movs	r1, #7
 80014ba:	438a      	bics	r2, r1
 80014bc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6959      	ldr	r1, [r3, #20]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2207      	movs	r2, #7
 80014ca:	401a      	ands	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b10      	cmp	r3, #16
 80014da:	d003      	beq.n	80014e4 <HAL_ADC_ConfigChannel+0x118>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b11      	cmp	r3, #17
 80014e2:	d152      	bne.n	800158a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80014e4:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <HAL_ADC_ConfigChannel+0x1d8>)
 80014e6:	6819      	ldr	r1, [r3, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b10      	cmp	r3, #16
 80014ee:	d102      	bne.n	80014f6 <HAL_ADC_ConfigChannel+0x12a>
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	041b      	lsls	r3, r3, #16
 80014f4:	e001      	b.n	80014fa <HAL_ADC_ConfigChannel+0x12e>
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	03db      	lsls	r3, r3, #15
 80014fa:	4a2a      	ldr	r2, [pc, #168]	; (80015a4 <HAL_ADC_ConfigChannel+0x1d8>)
 80014fc:	430b      	orrs	r3, r1
 80014fe:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b10      	cmp	r3, #16
 8001506:	d140      	bne.n	800158a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001508:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <HAL_ADC_ConfigChannel+0x1dc>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4927      	ldr	r1, [pc, #156]	; (80015ac <HAL_ADC_ConfigChannel+0x1e0>)
 800150e:	0018      	movs	r0, r3
 8001510:	f7fe fdf8 	bl	8000104 <__udivsi3>
 8001514:	0003      	movs	r3, r0
 8001516:	001a      	movs	r2, r3
 8001518:	0013      	movs	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	189b      	adds	r3, r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001522:	e002      	b.n	800152a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	3b01      	subs	r3, #1
 8001528:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f9      	bne.n	8001524 <HAL_ADC_ConfigChannel+0x158>
 8001530:	e02b      	b.n	800158a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2101      	movs	r1, #1
 800153e:	4099      	lsls	r1, r3
 8001540:	000b      	movs	r3, r1
 8001542:	43d9      	mvns	r1, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	400a      	ands	r2, r1
 800154a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b10      	cmp	r3, #16
 8001552:	d003      	beq.n	800155c <HAL_ADC_ConfigChannel+0x190>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b11      	cmp	r3, #17
 800155a:	d116      	bne.n	800158a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_ADC_ConfigChannel+0x1d8>)
 800155e:	6819      	ldr	r1, [r3, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b10      	cmp	r3, #16
 8001566:	d101      	bne.n	800156c <HAL_ADC_ConfigChannel+0x1a0>
 8001568:	4a11      	ldr	r2, [pc, #68]	; (80015b0 <HAL_ADC_ConfigChannel+0x1e4>)
 800156a:	e000      	b.n	800156e <HAL_ADC_ConfigChannel+0x1a2>
 800156c:	4a11      	ldr	r2, [pc, #68]	; (80015b4 <HAL_ADC_ConfigChannel+0x1e8>)
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <HAL_ADC_ConfigChannel+0x1d8>)
 8001570:	400a      	ands	r2, r1
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	e009      	b.n	800158a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157a:	2220      	movs	r2, #32
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001582:	230f      	movs	r3, #15
 8001584:	18fb      	adds	r3, r7, r3
 8001586:	2201      	movs	r2, #1
 8001588:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2234      	movs	r2, #52	; 0x34
 800158e:	2100      	movs	r1, #0
 8001590:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001592:	230f      	movs	r3, #15
 8001594:	18fb      	adds	r3, r7, r3
 8001596:	781b      	ldrb	r3, [r3, #0]
}
 8001598:	0018      	movs	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	b004      	add	sp, #16
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	00001001 	.word	0x00001001
 80015a4:	40012708 	.word	0x40012708
 80015a8:	20000000 	.word	0x20000000
 80015ac:	000f4240 	.word	0x000f4240
 80015b0:	ff7fffff 	.word	0xff7fffff
 80015b4:	ffbfffff 	.word	0xffbfffff

080015b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	0002      	movs	r2, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	1dfb      	adds	r3, r7, #7
 80015c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b7f      	cmp	r3, #127	; 0x7f
 80015cc:	d828      	bhi.n	8001620 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015ce:	4a2f      	ldr	r2, [pc, #188]	; (800168c <__NVIC_SetPriority+0xd4>)
 80015d0:	1dfb      	adds	r3, r7, #7
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	b25b      	sxtb	r3, r3
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	33c0      	adds	r3, #192	; 0xc0
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	589b      	ldr	r3, [r3, r2]
 80015de:	1dfa      	adds	r2, r7, #7
 80015e0:	7812      	ldrb	r2, [r2, #0]
 80015e2:	0011      	movs	r1, r2
 80015e4:	2203      	movs	r2, #3
 80015e6:	400a      	ands	r2, r1
 80015e8:	00d2      	lsls	r2, r2, #3
 80015ea:	21ff      	movs	r1, #255	; 0xff
 80015ec:	4091      	lsls	r1, r2
 80015ee:	000a      	movs	r2, r1
 80015f0:	43d2      	mvns	r2, r2
 80015f2:	401a      	ands	r2, r3
 80015f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	019b      	lsls	r3, r3, #6
 80015fa:	22ff      	movs	r2, #255	; 0xff
 80015fc:	401a      	ands	r2, r3
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	0018      	movs	r0, r3
 8001604:	2303      	movs	r3, #3
 8001606:	4003      	ands	r3, r0
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800160c:	481f      	ldr	r0, [pc, #124]	; (800168c <__NVIC_SetPriority+0xd4>)
 800160e:	1dfb      	adds	r3, r7, #7
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b25b      	sxtb	r3, r3
 8001614:	089b      	lsrs	r3, r3, #2
 8001616:	430a      	orrs	r2, r1
 8001618:	33c0      	adds	r3, #192	; 0xc0
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800161e:	e031      	b.n	8001684 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001620:	4a1b      	ldr	r2, [pc, #108]	; (8001690 <__NVIC_SetPriority+0xd8>)
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	0019      	movs	r1, r3
 8001628:	230f      	movs	r3, #15
 800162a:	400b      	ands	r3, r1
 800162c:	3b08      	subs	r3, #8
 800162e:	089b      	lsrs	r3, r3, #2
 8001630:	3306      	adds	r3, #6
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	18d3      	adds	r3, r2, r3
 8001636:	3304      	adds	r3, #4
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	1dfa      	adds	r2, r7, #7
 800163c:	7812      	ldrb	r2, [r2, #0]
 800163e:	0011      	movs	r1, r2
 8001640:	2203      	movs	r2, #3
 8001642:	400a      	ands	r2, r1
 8001644:	00d2      	lsls	r2, r2, #3
 8001646:	21ff      	movs	r1, #255	; 0xff
 8001648:	4091      	lsls	r1, r2
 800164a:	000a      	movs	r2, r1
 800164c:	43d2      	mvns	r2, r2
 800164e:	401a      	ands	r2, r3
 8001650:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	019b      	lsls	r3, r3, #6
 8001656:	22ff      	movs	r2, #255	; 0xff
 8001658:	401a      	ands	r2, r3
 800165a:	1dfb      	adds	r3, r7, #7
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	0018      	movs	r0, r3
 8001660:	2303      	movs	r3, #3
 8001662:	4003      	ands	r3, r0
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001668:	4809      	ldr	r0, [pc, #36]	; (8001690 <__NVIC_SetPriority+0xd8>)
 800166a:	1dfb      	adds	r3, r7, #7
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	001c      	movs	r4, r3
 8001670:	230f      	movs	r3, #15
 8001672:	4023      	ands	r3, r4
 8001674:	3b08      	subs	r3, #8
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	430a      	orrs	r2, r1
 800167a:	3306      	adds	r3, #6
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	18c3      	adds	r3, r0, r3
 8001680:	3304      	adds	r3, #4
 8001682:	601a      	str	r2, [r3, #0]
}
 8001684:	46c0      	nop			; (mov r8, r8)
 8001686:	46bd      	mov	sp, r7
 8001688:	b003      	add	sp, #12
 800168a:	bd90      	pop	{r4, r7, pc}
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	4a0c      	ldr	r2, [pc, #48]	; (80016d4 <SysTick_Config+0x40>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a6:	2301      	movs	r3, #1
 80016a8:	e010      	b.n	80016cc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <SysTick_Config+0x44>)
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	3a01      	subs	r2, #1
 80016b0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b2:	2301      	movs	r3, #1
 80016b4:	425b      	negs	r3, r3
 80016b6:	2103      	movs	r1, #3
 80016b8:	0018      	movs	r0, r3
 80016ba:	f7ff ff7d 	bl	80015b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <SysTick_Config+0x44>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <SysTick_Config+0x44>)
 80016c6:	2207      	movs	r2, #7
 80016c8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	0018      	movs	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b002      	add	sp, #8
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	00ffffff 	.word	0x00ffffff
 80016d8:	e000e010 	.word	0xe000e010

080016dc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	210f      	movs	r1, #15
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	1c02      	adds	r2, r0, #0
 80016ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	187b      	adds	r3, r7, r1
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	b25b      	sxtb	r3, r3
 80016f6:	0011      	movs	r1, r2
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7ff ff5d 	bl	80015b8 <__NVIC_SetPriority>
}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	46bd      	mov	sp, r7
 8001702:	b004      	add	sp, #16
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	0018      	movs	r0, r3
 8001712:	f7ff ffbf 	bl	8001694 <SysTick_Config>
 8001716:	0003      	movs	r3, r0
}
 8001718:	0018      	movs	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	b002      	add	sp, #8
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172e:	e14f      	b.n	80019d0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2101      	movs	r1, #1
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4091      	lsls	r1, r2
 800173a:	000a      	movs	r2, r1
 800173c:	4013      	ands	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d100      	bne.n	8001748 <HAL_GPIO_Init+0x28>
 8001746:	e140      	b.n	80019ca <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x38>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b12      	cmp	r3, #18
 8001756:	d123      	bne.n	80017a0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	08da      	lsrs	r2, r3, #3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3208      	adds	r2, #8
 8001760:	0092      	lsls	r2, r2, #2
 8001762:	58d3      	ldr	r3, [r2, r3]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2207      	movs	r2, #7
 800176a:	4013      	ands	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	220f      	movs	r2, #15
 8001770:	409a      	lsls	r2, r3
 8001772:	0013      	movs	r3, r2
 8001774:	43da      	mvns	r2, r3
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	691a      	ldr	r2, [r3, #16]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	2107      	movs	r1, #7
 8001784:	400b      	ands	r3, r1
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	409a      	lsls	r2, r3
 800178a:	0013      	movs	r3, r2
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	08da      	lsrs	r2, r3, #3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3208      	adds	r2, #8
 800179a:	0092      	lsls	r2, r2, #2
 800179c:	6939      	ldr	r1, [r7, #16]
 800179e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2203      	movs	r2, #3
 80017ac:	409a      	lsls	r2, r3
 80017ae:	0013      	movs	r3, r2
 80017b0:	43da      	mvns	r2, r3
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2203      	movs	r2, #3
 80017be:	401a      	ands	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	409a      	lsls	r2, r3
 80017c6:	0013      	movs	r3, r2
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d00b      	beq.n	80017f4 <HAL_GPIO_Init+0xd4>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d007      	beq.n	80017f4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017e8:	2b11      	cmp	r3, #17
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b12      	cmp	r3, #18
 80017f2:	d130      	bne.n	8001856 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	2203      	movs	r2, #3
 8001800:	409a      	lsls	r2, r3
 8001802:	0013      	movs	r3, r2
 8001804:	43da      	mvns	r2, r3
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4013      	ands	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	409a      	lsls	r2, r3
 8001816:	0013      	movs	r3, r2
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800182a:	2201      	movs	r2, #1
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	409a      	lsls	r2, r3
 8001830:	0013      	movs	r3, r2
 8001832:	43da      	mvns	r2, r3
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	091b      	lsrs	r3, r3, #4
 8001840:	2201      	movs	r2, #1
 8001842:	401a      	ands	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	409a      	lsls	r2, r3
 8001848:	0013      	movs	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	2203      	movs	r2, #3
 8001862:	409a      	lsls	r2, r3
 8001864:	0013      	movs	r3, r2
 8001866:	43da      	mvns	r2, r3
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	409a      	lsls	r2, r3
 8001878:	0013      	movs	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	055b      	lsls	r3, r3, #21
 800188e:	4013      	ands	r3, r2
 8001890:	d100      	bne.n	8001894 <HAL_GPIO_Init+0x174>
 8001892:	e09a      	b.n	80019ca <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001894:	4b54      	ldr	r3, [pc, #336]	; (80019e8 <HAL_GPIO_Init+0x2c8>)
 8001896:	699a      	ldr	r2, [r3, #24]
 8001898:	4b53      	ldr	r3, [pc, #332]	; (80019e8 <HAL_GPIO_Init+0x2c8>)
 800189a:	2101      	movs	r1, #1
 800189c:	430a      	orrs	r2, r1
 800189e:	619a      	str	r2, [r3, #24]
 80018a0:	4b51      	ldr	r3, [pc, #324]	; (80019e8 <HAL_GPIO_Init+0x2c8>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	2201      	movs	r2, #1
 80018a6:	4013      	ands	r3, r2
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018ac:	4a4f      	ldr	r2, [pc, #316]	; (80019ec <HAL_GPIO_Init+0x2cc>)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	3302      	adds	r3, #2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	589b      	ldr	r3, [r3, r2]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2203      	movs	r2, #3
 80018be:	4013      	ands	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	220f      	movs	r2, #15
 80018c4:	409a      	lsls	r2, r3
 80018c6:	0013      	movs	r3, r2
 80018c8:	43da      	mvns	r2, r3
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	2390      	movs	r3, #144	; 0x90
 80018d4:	05db      	lsls	r3, r3, #23
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d013      	beq.n	8001902 <HAL_GPIO_Init+0x1e2>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a44      	ldr	r2, [pc, #272]	; (80019f0 <HAL_GPIO_Init+0x2d0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00d      	beq.n	80018fe <HAL_GPIO_Init+0x1de>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a43      	ldr	r2, [pc, #268]	; (80019f4 <HAL_GPIO_Init+0x2d4>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d007      	beq.n	80018fa <HAL_GPIO_Init+0x1da>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a42      	ldr	r2, [pc, #264]	; (80019f8 <HAL_GPIO_Init+0x2d8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d101      	bne.n	80018f6 <HAL_GPIO_Init+0x1d6>
 80018f2:	2303      	movs	r3, #3
 80018f4:	e006      	b.n	8001904 <HAL_GPIO_Init+0x1e4>
 80018f6:	2305      	movs	r3, #5
 80018f8:	e004      	b.n	8001904 <HAL_GPIO_Init+0x1e4>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e002      	b.n	8001904 <HAL_GPIO_Init+0x1e4>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <HAL_GPIO_Init+0x1e4>
 8001902:	2300      	movs	r3, #0
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	2103      	movs	r1, #3
 8001908:	400a      	ands	r2, r1
 800190a:	0092      	lsls	r2, r2, #2
 800190c:	4093      	lsls	r3, r2
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001914:	4935      	ldr	r1, [pc, #212]	; (80019ec <HAL_GPIO_Init+0x2cc>)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	3302      	adds	r3, #2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001922:	4b36      	ldr	r3, [pc, #216]	; (80019fc <HAL_GPIO_Init+0x2dc>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	43da      	mvns	r2, r3
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	025b      	lsls	r3, r3, #9
 800193a:	4013      	ands	r3, r2
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001946:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <HAL_GPIO_Init+0x2dc>)
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800194c:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_GPIO_Init+0x2dc>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	43da      	mvns	r2, r3
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	029b      	lsls	r3, r3, #10
 8001964:	4013      	ands	r3, r2
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001970:	4b22      	ldr	r3, [pc, #136]	; (80019fc <HAL_GPIO_Init+0x2dc>)
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001976:	4b21      	ldr	r3, [pc, #132]	; (80019fc <HAL_GPIO_Init+0x2dc>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	43da      	mvns	r2, r3
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	035b      	lsls	r3, r3, #13
 800198e:	4013      	ands	r3, r2
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800199a:	4b18      	ldr	r3, [pc, #96]	; (80019fc <HAL_GPIO_Init+0x2dc>)
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019a0:	4b16      	ldr	r3, [pc, #88]	; (80019fc <HAL_GPIO_Init+0x2dc>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	43da      	mvns	r2, r3
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	039b      	lsls	r3, r3, #14
 80019b8:	4013      	ands	r3, r2
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_GPIO_Init+0x2dc>)
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3301      	adds	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	40da      	lsrs	r2, r3
 80019d8:	1e13      	subs	r3, r2, #0
 80019da:	d000      	beq.n	80019de <HAL_GPIO_Init+0x2be>
 80019dc:	e6a8      	b.n	8001730 <HAL_GPIO_Init+0x10>
  } 
}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b006      	add	sp, #24
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010000 	.word	0x40010000
 80019f0:	48000400 	.word	0x48000400
 80019f4:	48000800 	.word	0x48000800
 80019f8:	48000c00 	.word	0x48000c00
 80019fc:	40010400 	.word	0x40010400

08001a00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	000a      	movs	r2, r1
 8001a0a:	1cbb      	adds	r3, r7, #2
 8001a0c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	1cba      	adds	r2, r7, #2
 8001a14:	8812      	ldrh	r2, [r2, #0]
 8001a16:	4013      	ands	r3, r2
 8001a18:	d004      	beq.n	8001a24 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001a1a:	230f      	movs	r3, #15
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
 8001a22:	e003      	b.n	8001a2c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a24:	230f      	movs	r3, #15
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001a2c:	230f      	movs	r3, #15
 8001a2e:	18fb      	adds	r3, r7, r3
 8001a30:	781b      	ldrb	r3, [r3, #0]
  }
 8001a32:	0018      	movs	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b004      	add	sp, #16
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	0008      	movs	r0, r1
 8001a44:	0011      	movs	r1, r2
 8001a46:	1cbb      	adds	r3, r7, #2
 8001a48:	1c02      	adds	r2, r0, #0
 8001a4a:	801a      	strh	r2, [r3, #0]
 8001a4c:	1c7b      	adds	r3, r7, #1
 8001a4e:	1c0a      	adds	r2, r1, #0
 8001a50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a52:	1c7b      	adds	r3, r7, #1
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d004      	beq.n	8001a64 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a5a:	1cbb      	adds	r3, r7, #2
 8001a5c:	881a      	ldrh	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a62:	e003      	b.n	8001a6c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a64:	1cbb      	adds	r3, r7, #2
 8001a66:	881a      	ldrh	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a6c:	46c0      	nop			; (mov r8, r8)
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	b002      	add	sp, #8
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e305      	b.n	8002092 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d100      	bne.n	8001a92 <HAL_RCC_OscConfig+0x1e>
 8001a90:	e08d      	b.n	8001bae <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a92:	4bc5      	ldr	r3, [pc, #788]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	220c      	movs	r2, #12
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d00e      	beq.n	8001abc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a9e:	4bc2      	ldr	r3, [pc, #776]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d116      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x64>
 8001aaa:	4bbf      	ldr	r3, [pc, #764]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	23c0      	movs	r3, #192	; 0xc0
 8001ab0:	025b      	lsls	r3, r3, #9
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	025b      	lsls	r3, r3, #9
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d10d      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abc:	4bba      	ldr	r3, [pc, #744]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	029b      	lsls	r3, r3, #10
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d100      	bne.n	8001aca <HAL_RCC_OscConfig+0x56>
 8001ac8:	e070      	b.n	8001bac <HAL_RCC_OscConfig+0x138>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d000      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x60>
 8001ad2:	e06b      	b.n	8001bac <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e2dc      	b.n	8002092 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_OscConfig+0x7c>
 8001ae0:	4bb1      	ldr	r3, [pc, #708]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4bb0      	ldr	r3, [pc, #704]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001ae6:	2180      	movs	r1, #128	; 0x80
 8001ae8:	0249      	lsls	r1, r1, #9
 8001aea:	430a      	orrs	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	e02f      	b.n	8001b50 <HAL_RCC_OscConfig+0xdc>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10c      	bne.n	8001b12 <HAL_RCC_OscConfig+0x9e>
 8001af8:	4bab      	ldr	r3, [pc, #684]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4baa      	ldr	r3, [pc, #680]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001afe:	49ab      	ldr	r1, [pc, #684]	; (8001dac <HAL_RCC_OscConfig+0x338>)
 8001b00:	400a      	ands	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	4ba8      	ldr	r3, [pc, #672]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4ba7      	ldr	r3, [pc, #668]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001b0a:	49a9      	ldr	r1, [pc, #676]	; (8001db0 <HAL_RCC_OscConfig+0x33c>)
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	e01e      	b.n	8001b50 <HAL_RCC_OscConfig+0xdc>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b05      	cmp	r3, #5
 8001b18:	d10e      	bne.n	8001b38 <HAL_RCC_OscConfig+0xc4>
 8001b1a:	4ba3      	ldr	r3, [pc, #652]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	4ba2      	ldr	r3, [pc, #648]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001b20:	2180      	movs	r1, #128	; 0x80
 8001b22:	02c9      	lsls	r1, r1, #11
 8001b24:	430a      	orrs	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	4b9f      	ldr	r3, [pc, #636]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b9e      	ldr	r3, [pc, #632]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001b2e:	2180      	movs	r1, #128	; 0x80
 8001b30:	0249      	lsls	r1, r1, #9
 8001b32:	430a      	orrs	r2, r1
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	e00b      	b.n	8001b50 <HAL_RCC_OscConfig+0xdc>
 8001b38:	4b9b      	ldr	r3, [pc, #620]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b9a      	ldr	r3, [pc, #616]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001b3e:	499b      	ldr	r1, [pc, #620]	; (8001dac <HAL_RCC_OscConfig+0x338>)
 8001b40:	400a      	ands	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	4b98      	ldr	r3, [pc, #608]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b97      	ldr	r3, [pc, #604]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001b4a:	4999      	ldr	r1, [pc, #612]	; (8001db0 <HAL_RCC_OscConfig+0x33c>)
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d014      	beq.n	8001b82 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff faee 	bl	8001138 <HAL_GetTick>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b62:	f7ff fae9 	bl	8001138 <HAL_GetTick>
 8001b66:	0002      	movs	r2, r0
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b64      	cmp	r3, #100	; 0x64
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e28e      	b.n	8002092 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b74:	4b8c      	ldr	r3, [pc, #560]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	029b      	lsls	r3, r3, #10
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0xee>
 8001b80:	e015      	b.n	8001bae <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b82:	f7ff fad9 	bl	8001138 <HAL_GetTick>
 8001b86:	0003      	movs	r3, r0
 8001b88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b8c:	f7ff fad4 	bl	8001138 <HAL_GetTick>
 8001b90:	0002      	movs	r2, r0
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b64      	cmp	r3, #100	; 0x64
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e279      	b.n	8002092 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9e:	4b82      	ldr	r3, [pc, #520]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	029b      	lsls	r3, r3, #10
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x118>
 8001baa:	e000      	b.n	8001bae <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d100      	bne.n	8001bba <HAL_RCC_OscConfig+0x146>
 8001bb8:	e06c      	b.n	8001c94 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bba:	4b7b      	ldr	r3, [pc, #492]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d00e      	beq.n	8001be2 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bc4:	4b78      	ldr	r3, [pc, #480]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	220c      	movs	r2, #12
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d11f      	bne.n	8001c10 <HAL_RCC_OscConfig+0x19c>
 8001bd0:	4b75      	ldr	r3, [pc, #468]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	23c0      	movs	r3, #192	; 0xc0
 8001bd6:	025b      	lsls	r3, r3, #9
 8001bd8:	401a      	ands	r2, r3
 8001bda:	2380      	movs	r3, #128	; 0x80
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d116      	bne.n	8001c10 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be2:	4b71      	ldr	r3, [pc, #452]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2202      	movs	r2, #2
 8001be8:	4013      	ands	r3, r2
 8001bea:	d005      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x184>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e24c      	b.n	8002092 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf8:	4b6b      	ldr	r3, [pc, #428]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	22f8      	movs	r2, #248	; 0xf8
 8001bfe:	4393      	bics	r3, r2
 8001c00:	0019      	movs	r1, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	00da      	lsls	r2, r3, #3
 8001c08:	4b67      	ldr	r3, [pc, #412]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0e:	e041      	b.n	8001c94 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d024      	beq.n	8001c62 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c18:	4b63      	ldr	r3, [pc, #396]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b62      	ldr	r3, [pc, #392]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001c1e:	2101      	movs	r1, #1
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7ff fa88 	bl	8001138 <HAL_GetTick>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c2e:	f7ff fa83 	bl	8001138 <HAL_GetTick>
 8001c32:	0002      	movs	r2, r0
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e228      	b.n	8002092 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c40:	4b59      	ldr	r3, [pc, #356]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2202      	movs	r2, #2
 8001c46:	4013      	ands	r3, r2
 8001c48:	d0f1      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4a:	4b57      	ldr	r3, [pc, #348]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	22f8      	movs	r2, #248	; 0xf8
 8001c50:	4393      	bics	r3, r2
 8001c52:	0019      	movs	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	00da      	lsls	r2, r3, #3
 8001c5a:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	e018      	b.n	8001c94 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c62:	4b51      	ldr	r3, [pc, #324]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	4b50      	ldr	r3, [pc, #320]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001c68:	2101      	movs	r1, #1
 8001c6a:	438a      	bics	r2, r1
 8001c6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6e:	f7ff fa63 	bl	8001138 <HAL_GetTick>
 8001c72:	0003      	movs	r3, r0
 8001c74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c78:	f7ff fa5e 	bl	8001138 <HAL_GetTick>
 8001c7c:	0002      	movs	r2, r0
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e203      	b.n	8002092 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8a:	4b47      	ldr	r3, [pc, #284]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	4013      	ands	r3, r2
 8001c92:	d1f1      	bne.n	8001c78 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2208      	movs	r2, #8
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d036      	beq.n	8001d0c <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d019      	beq.n	8001cda <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca6:	4b40      	ldr	r3, [pc, #256]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001ca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001caa:	4b3f      	ldr	r3, [pc, #252]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001cac:	2101      	movs	r1, #1
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb2:	f7ff fa41 	bl	8001138 <HAL_GetTick>
 8001cb6:	0003      	movs	r3, r0
 8001cb8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7ff fa3c 	bl	8001138 <HAL_GetTick>
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e1e1      	b.n	8002092 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cce:	4b36      	ldr	r3, [pc, #216]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d0f1      	beq.n	8001cbc <HAL_RCC_OscConfig+0x248>
 8001cd8:	e018      	b.n	8001d0c <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cda:	4b33      	ldr	r3, [pc, #204]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cde:	4b32      	ldr	r3, [pc, #200]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	438a      	bics	r2, r1
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce6:	f7ff fa27 	bl	8001138 <HAL_GetTick>
 8001cea:	0003      	movs	r3, r0
 8001cec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf0:	f7ff fa22 	bl	8001138 <HAL_GetTick>
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e1c7      	b.n	8002092 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d02:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	2202      	movs	r2, #2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d1f1      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2204      	movs	r2, #4
 8001d12:	4013      	ands	r3, r2
 8001d14:	d100      	bne.n	8001d18 <HAL_RCC_OscConfig+0x2a4>
 8001d16:	e0b5      	b.n	8001e84 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d18:	231f      	movs	r3, #31
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d20:	4b21      	ldr	r3, [pc, #132]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001d22:	69da      	ldr	r2, [r3, #28]
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	055b      	lsls	r3, r3, #21
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d111      	bne.n	8001d50 <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001d2e:	69da      	ldr	r2, [r3, #28]
 8001d30:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001d32:	2180      	movs	r1, #128	; 0x80
 8001d34:	0549      	lsls	r1, r1, #21
 8001d36:	430a      	orrs	r2, r1
 8001d38:	61da      	str	r2, [r3, #28]
 8001d3a:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001d3c:	69da      	ldr	r2, [r3, #28]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	055b      	lsls	r3, r3, #21
 8001d42:	4013      	ands	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d48:	231f      	movs	r3, #31
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d50:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <HAL_RCC_OscConfig+0x340>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d11a      	bne.n	8001d92 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d5c:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <HAL_RCC_OscConfig+0x340>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <HAL_RCC_OscConfig+0x340>)
 8001d62:	2180      	movs	r1, #128	; 0x80
 8001d64:	0049      	lsls	r1, r1, #1
 8001d66:	430a      	orrs	r2, r1
 8001d68:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6a:	f7ff f9e5 	bl	8001138 <HAL_GetTick>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d74:	f7ff f9e0 	bl	8001138 <HAL_GetTick>
 8001d78:	0002      	movs	r2, r0
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	; 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e185      	b.n	8002092 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_RCC_OscConfig+0x340>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d10e      	bne.n	8001db8 <HAL_RCC_OscConfig+0x344>
 8001d9a:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001d9c:	6a1a      	ldr	r2, [r3, #32]
 8001d9e:	4b02      	ldr	r3, [pc, #8]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001da0:	2101      	movs	r1, #1
 8001da2:	430a      	orrs	r2, r1
 8001da4:	621a      	str	r2, [r3, #32]
 8001da6:	e035      	b.n	8001e14 <HAL_RCC_OscConfig+0x3a0>
 8001da8:	40021000 	.word	0x40021000
 8001dac:	fffeffff 	.word	0xfffeffff
 8001db0:	fffbffff 	.word	0xfffbffff
 8001db4:	40007000 	.word	0x40007000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10c      	bne.n	8001dda <HAL_RCC_OscConfig+0x366>
 8001dc0:	4bb6      	ldr	r3, [pc, #728]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001dc2:	6a1a      	ldr	r2, [r3, #32]
 8001dc4:	4bb5      	ldr	r3, [pc, #724]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	438a      	bics	r2, r1
 8001dca:	621a      	str	r2, [r3, #32]
 8001dcc:	4bb3      	ldr	r3, [pc, #716]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001dce:	6a1a      	ldr	r2, [r3, #32]
 8001dd0:	4bb2      	ldr	r3, [pc, #712]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001dd2:	2104      	movs	r1, #4
 8001dd4:	438a      	bics	r2, r1
 8001dd6:	621a      	str	r2, [r3, #32]
 8001dd8:	e01c      	b.n	8001e14 <HAL_RCC_OscConfig+0x3a0>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b05      	cmp	r3, #5
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x388>
 8001de2:	4bae      	ldr	r3, [pc, #696]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001de4:	6a1a      	ldr	r2, [r3, #32]
 8001de6:	4bad      	ldr	r3, [pc, #692]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001de8:	2104      	movs	r1, #4
 8001dea:	430a      	orrs	r2, r1
 8001dec:	621a      	str	r2, [r3, #32]
 8001dee:	4bab      	ldr	r3, [pc, #684]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001df0:	6a1a      	ldr	r2, [r3, #32]
 8001df2:	4baa      	ldr	r3, [pc, #680]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001df4:	2101      	movs	r1, #1
 8001df6:	430a      	orrs	r2, r1
 8001df8:	621a      	str	r2, [r3, #32]
 8001dfa:	e00b      	b.n	8001e14 <HAL_RCC_OscConfig+0x3a0>
 8001dfc:	4ba7      	ldr	r3, [pc, #668]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001dfe:	6a1a      	ldr	r2, [r3, #32]
 8001e00:	4ba6      	ldr	r3, [pc, #664]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001e02:	2101      	movs	r1, #1
 8001e04:	438a      	bics	r2, r1
 8001e06:	621a      	str	r2, [r3, #32]
 8001e08:	4ba4      	ldr	r3, [pc, #656]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001e0a:	6a1a      	ldr	r2, [r3, #32]
 8001e0c:	4ba3      	ldr	r3, [pc, #652]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001e0e:	2104      	movs	r1, #4
 8001e10:	438a      	bics	r2, r1
 8001e12:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d014      	beq.n	8001e46 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1c:	f7ff f98c 	bl	8001138 <HAL_GetTick>
 8001e20:	0003      	movs	r3, r0
 8001e22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e24:	e009      	b.n	8001e3a <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e26:	f7ff f987 	bl	8001138 <HAL_GetTick>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	4a9b      	ldr	r2, [pc, #620]	; (80020a0 <HAL_RCC_OscConfig+0x62c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e12b      	b.n	8002092 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3a:	4b98      	ldr	r3, [pc, #608]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	4013      	ands	r3, r2
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x3b2>
 8001e44:	e013      	b.n	8001e6e <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e46:	f7ff f977 	bl	8001138 <HAL_GetTick>
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4e:	e009      	b.n	8001e64 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e50:	f7ff f972 	bl	8001138 <HAL_GetTick>
 8001e54:	0002      	movs	r2, r0
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	4a91      	ldr	r2, [pc, #580]	; (80020a0 <HAL_RCC_OscConfig+0x62c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e116      	b.n	8002092 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e64:	4b8d      	ldr	r3, [pc, #564]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	2202      	movs	r2, #2
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e6e:	231f      	movs	r3, #31
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d105      	bne.n	8001e84 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e78:	4b88      	ldr	r3, [pc, #544]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001e7a:	69da      	ldr	r2, [r3, #28]
 8001e7c:	4b87      	ldr	r3, [pc, #540]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001e7e:	4989      	ldr	r1, [pc, #548]	; (80020a4 <HAL_RCC_OscConfig+0x630>)
 8001e80:	400a      	ands	r2, r1
 8001e82:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2210      	movs	r2, #16
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d063      	beq.n	8001f56 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d12a      	bne.n	8001eec <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e96:	4b81      	ldr	r3, [pc, #516]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e9a:	4b80      	ldr	r3, [pc, #512]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001e9c:	2104      	movs	r1, #4
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ea2:	4b7e      	ldr	r3, [pc, #504]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ea6:	4b7d      	ldr	r3, [pc, #500]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eae:	f7ff f943 	bl	8001138 <HAL_GetTick>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001eb8:	f7ff f93e 	bl	8001138 <HAL_GetTick>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e0e3      	b.n	8002092 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001eca:	4b74      	ldr	r3, [pc, #464]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ece:	2202      	movs	r2, #2
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d0f1      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ed4:	4b71      	ldr	r3, [pc, #452]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed8:	22f8      	movs	r2, #248	; 0xf8
 8001eda:	4393      	bics	r3, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	00da      	lsls	r2, r3, #3
 8001ee4:	4b6d      	ldr	r3, [pc, #436]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	635a      	str	r2, [r3, #52]	; 0x34
 8001eea:	e034      	b.n	8001f56 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	3305      	adds	r3, #5
 8001ef2:	d111      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ef4:	4b69      	ldr	r3, [pc, #420]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ef8:	4b68      	ldr	r3, [pc, #416]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001efa:	2104      	movs	r1, #4
 8001efc:	438a      	bics	r2, r1
 8001efe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f00:	4b66      	ldr	r3, [pc, #408]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f04:	22f8      	movs	r2, #248	; 0xf8
 8001f06:	4393      	bics	r3, r2
 8001f08:	0019      	movs	r1, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	00da      	lsls	r2, r3, #3
 8001f10:	4b62      	ldr	r3, [pc, #392]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001f12:	430a      	orrs	r2, r1
 8001f14:	635a      	str	r2, [r3, #52]	; 0x34
 8001f16:	e01e      	b.n	8001f56 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f18:	4b60      	ldr	r3, [pc, #384]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001f1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f1c:	4b5f      	ldr	r3, [pc, #380]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001f1e:	2104      	movs	r1, #4
 8001f20:	430a      	orrs	r2, r1
 8001f22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001f24:	4b5d      	ldr	r3, [pc, #372]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f28:	4b5c      	ldr	r3, [pc, #368]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	438a      	bics	r2, r1
 8001f2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f30:	f7ff f902 	bl	8001138 <HAL_GetTick>
 8001f34:	0003      	movs	r3, r0
 8001f36:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f3a:	f7ff f8fd 	bl	8001138 <HAL_GetTick>
 8001f3e:	0002      	movs	r2, r0
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e0a2      	b.n	8002092 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f4c:	4b53      	ldr	r3, [pc, #332]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f50:	2202      	movs	r2, #2
 8001f52:	4013      	ands	r3, r2
 8001f54:	d1f1      	bne.n	8001f3a <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d100      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4ec>
 8001f5e:	e097      	b.n	8002090 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f60:	4b4e      	ldr	r3, [pc, #312]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	220c      	movs	r2, #12
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d100      	bne.n	8001f6e <HAL_RCC_OscConfig+0x4fa>
 8001f6c:	e06b      	b.n	8002046 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d14c      	bne.n	8002010 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f76:	4b49      	ldr	r3, [pc, #292]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	4b48      	ldr	r3, [pc, #288]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001f7c:	494a      	ldr	r1, [pc, #296]	; (80020a8 <HAL_RCC_OscConfig+0x634>)
 8001f7e:	400a      	ands	r2, r1
 8001f80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7ff f8d9 	bl	8001138 <HAL_GetTick>
 8001f86:	0003      	movs	r3, r0
 8001f88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7ff f8d4 	bl	8001138 <HAL_GetTick>
 8001f90:	0002      	movs	r2, r0
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e079      	b.n	8002092 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9e:	4b3f      	ldr	r3, [pc, #252]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	049b      	lsls	r3, r3, #18
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001faa:	4b3c      	ldr	r3, [pc, #240]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fae:	220f      	movs	r2, #15
 8001fb0:	4393      	bics	r3, r2
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb8:	4b38      	ldr	r3, [pc, #224]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fbe:	4b37      	ldr	r3, [pc, #220]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4a3a      	ldr	r2, [pc, #232]	; (80020ac <HAL_RCC_OscConfig+0x638>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	4b32      	ldr	r3, [pc, #200]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd8:	4b30      	ldr	r3, [pc, #192]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b2f      	ldr	r3, [pc, #188]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001fde:	2180      	movs	r1, #128	; 0x80
 8001fe0:	0449      	lsls	r1, r1, #17
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe6:	f7ff f8a7 	bl	8001138 <HAL_GetTick>
 8001fea:	0003      	movs	r3, r0
 8001fec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7ff f8a2 	bl	8001138 <HAL_GetTick>
 8001ff4:	0002      	movs	r2, r0
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e047      	b.n	8002092 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002002:	4b26      	ldr	r3, [pc, #152]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	049b      	lsls	r3, r3, #18
 800200a:	4013      	ands	r3, r2
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x57c>
 800200e:	e03f      	b.n	8002090 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002010:	4b22      	ldr	r3, [pc, #136]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b21      	ldr	r3, [pc, #132]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8002016:	4924      	ldr	r1, [pc, #144]	; (80020a8 <HAL_RCC_OscConfig+0x634>)
 8002018:	400a      	ands	r2, r1
 800201a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7ff f88c 	bl	8001138 <HAL_GetTick>
 8002020:	0003      	movs	r3, r0
 8002022:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002026:	f7ff f887 	bl	8001138 <HAL_GetTick>
 800202a:	0002      	movs	r2, r0
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e02c      	b.n	8002092 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002038:	4b18      	ldr	r3, [pc, #96]	; (800209c <HAL_RCC_OscConfig+0x628>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	049b      	lsls	r3, r3, #18
 8002040:	4013      	ands	r3, r2
 8002042:	d1f0      	bne.n	8002026 <HAL_RCC_OscConfig+0x5b2>
 8002044:	e024      	b.n	8002090 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e01f      	b.n	8002092 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002052:	4b12      	ldr	r3, [pc, #72]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002058:	4b10      	ldr	r3, [pc, #64]	; (800209c <HAL_RCC_OscConfig+0x628>)
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	23c0      	movs	r3, #192	; 0xc0
 8002062:	025b      	lsls	r3, r3, #9
 8002064:	401a      	ands	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	429a      	cmp	r2, r3
 800206c:	d10e      	bne.n	800208c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	220f      	movs	r2, #15
 8002072:	401a      	ands	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002078:	429a      	cmp	r2, r3
 800207a:	d107      	bne.n	800208c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	23f0      	movs	r3, #240	; 0xf0
 8002080:	039b      	lsls	r3, r3, #14
 8002082:	401a      	ands	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002088:	429a      	cmp	r2, r3
 800208a:	d001      	beq.n	8002090 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e000      	b.n	8002092 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	0018      	movs	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	b008      	add	sp, #32
 8002098:	bd80      	pop	{r7, pc}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	40021000 	.word	0x40021000
 80020a0:	00001388 	.word	0x00001388
 80020a4:	efffffff 	.word	0xefffffff
 80020a8:	feffffff 	.word	0xfeffffff
 80020ac:	ffc27fff 	.word	0xffc27fff

080020b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0b3      	b.n	800222c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020c4:	4b5b      	ldr	r3, [pc, #364]	; (8002234 <HAL_RCC_ClockConfig+0x184>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2201      	movs	r2, #1
 80020ca:	4013      	ands	r3, r2
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d911      	bls.n	80020f6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d2:	4b58      	ldr	r3, [pc, #352]	; (8002234 <HAL_RCC_ClockConfig+0x184>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2201      	movs	r2, #1
 80020d8:	4393      	bics	r3, r2
 80020da:	0019      	movs	r1, r3
 80020dc:	4b55      	ldr	r3, [pc, #340]	; (8002234 <HAL_RCC_ClockConfig+0x184>)
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e4:	4b53      	ldr	r3, [pc, #332]	; (8002234 <HAL_RCC_ClockConfig+0x184>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2201      	movs	r2, #1
 80020ea:	4013      	ands	r3, r2
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d001      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e09a      	b.n	800222c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2202      	movs	r2, #2
 80020fc:	4013      	ands	r3, r2
 80020fe:	d015      	beq.n	800212c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2204      	movs	r2, #4
 8002106:	4013      	ands	r3, r2
 8002108:	d006      	beq.n	8002118 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800210a:	4b4b      	ldr	r3, [pc, #300]	; (8002238 <HAL_RCC_ClockConfig+0x188>)
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	4b4a      	ldr	r3, [pc, #296]	; (8002238 <HAL_RCC_ClockConfig+0x188>)
 8002110:	21e0      	movs	r1, #224	; 0xe0
 8002112:	00c9      	lsls	r1, r1, #3
 8002114:	430a      	orrs	r2, r1
 8002116:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002118:	4b47      	ldr	r3, [pc, #284]	; (8002238 <HAL_RCC_ClockConfig+0x188>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	22f0      	movs	r2, #240	; 0xf0
 800211e:	4393      	bics	r3, r2
 8002120:	0019      	movs	r1, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	4b44      	ldr	r3, [pc, #272]	; (8002238 <HAL_RCC_ClockConfig+0x188>)
 8002128:	430a      	orrs	r2, r1
 800212a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2201      	movs	r2, #1
 8002132:	4013      	ands	r3, r2
 8002134:	d040      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d107      	bne.n	800214e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	4b3e      	ldr	r3, [pc, #248]	; (8002238 <HAL_RCC_ClockConfig+0x188>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	029b      	lsls	r3, r3, #10
 8002146:	4013      	ands	r3, r2
 8002148:	d114      	bne.n	8002174 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e06e      	b.n	800222c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d107      	bne.n	8002166 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002156:	4b38      	ldr	r3, [pc, #224]	; (8002238 <HAL_RCC_ClockConfig+0x188>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	049b      	lsls	r3, r3, #18
 800215e:	4013      	ands	r3, r2
 8002160:	d108      	bne.n	8002174 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e062      	b.n	800222c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002166:	4b34      	ldr	r3, [pc, #208]	; (8002238 <HAL_RCC_ClockConfig+0x188>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2202      	movs	r2, #2
 800216c:	4013      	ands	r3, r2
 800216e:	d101      	bne.n	8002174 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e05b      	b.n	800222c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002174:	4b30      	ldr	r3, [pc, #192]	; (8002238 <HAL_RCC_ClockConfig+0x188>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2203      	movs	r2, #3
 800217a:	4393      	bics	r3, r2
 800217c:	0019      	movs	r1, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <HAL_RCC_ClockConfig+0x188>)
 8002184:	430a      	orrs	r2, r1
 8002186:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002188:	f7fe ffd6 	bl	8001138 <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002190:	e009      	b.n	80021a6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002192:	f7fe ffd1 	bl	8001138 <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	4a27      	ldr	r2, [pc, #156]	; (800223c <HAL_RCC_ClockConfig+0x18c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e042      	b.n	800222c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a6:	4b24      	ldr	r3, [pc, #144]	; (8002238 <HAL_RCC_ClockConfig+0x188>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	220c      	movs	r2, #12
 80021ac:	401a      	ands	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d1ec      	bne.n	8002192 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021b8:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <HAL_RCC_ClockConfig+0x184>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2201      	movs	r2, #1
 80021be:	4013      	ands	r3, r2
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d211      	bcs.n	80021ea <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c6:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <HAL_RCC_ClockConfig+0x184>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2201      	movs	r2, #1
 80021cc:	4393      	bics	r3, r2
 80021ce:	0019      	movs	r1, r3
 80021d0:	4b18      	ldr	r3, [pc, #96]	; (8002234 <HAL_RCC_ClockConfig+0x184>)
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d8:	4b16      	ldr	r3, [pc, #88]	; (8002234 <HAL_RCC_ClockConfig+0x184>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2201      	movs	r2, #1
 80021de:	4013      	ands	r3, r2
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d001      	beq.n	80021ea <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e020      	b.n	800222c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2204      	movs	r2, #4
 80021f0:	4013      	ands	r3, r2
 80021f2:	d009      	beq.n	8002208 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021f4:	4b10      	ldr	r3, [pc, #64]	; (8002238 <HAL_RCC_ClockConfig+0x188>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4a11      	ldr	r2, [pc, #68]	; (8002240 <HAL_RCC_ClockConfig+0x190>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	0019      	movs	r1, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	4b0d      	ldr	r3, [pc, #52]	; (8002238 <HAL_RCC_ClockConfig+0x188>)
 8002204:	430a      	orrs	r2, r1
 8002206:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002208:	f000 f820 	bl	800224c <HAL_RCC_GetSysClockFreq>
 800220c:	0001      	movs	r1, r0
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_RCC_ClockConfig+0x188>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	091b      	lsrs	r3, r3, #4
 8002214:	220f      	movs	r2, #15
 8002216:	4013      	ands	r3, r2
 8002218:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <HAL_RCC_ClockConfig+0x194>)
 800221a:	5cd3      	ldrb	r3, [r2, r3]
 800221c:	000a      	movs	r2, r1
 800221e:	40da      	lsrs	r2, r3
 8002220:	4b09      	ldr	r3, [pc, #36]	; (8002248 <HAL_RCC_ClockConfig+0x198>)
 8002222:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002224:	2000      	movs	r0, #0
 8002226:	f7fe ff41 	bl	80010ac <HAL_InitTick>
  
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	0018      	movs	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	b004      	add	sp, #16
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40022000 	.word	0x40022000
 8002238:	40021000 	.word	0x40021000
 800223c:	00001388 	.word	0x00001388
 8002240:	fffff8ff 	.word	0xfffff8ff
 8002244:	080038ec 	.word	0x080038ec
 8002248:	20000000 	.word	0x20000000

0800224c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b08f      	sub	sp, #60	; 0x3c
 8002250:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002252:	2314      	movs	r3, #20
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	4a2c      	ldr	r2, [pc, #176]	; (8002308 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002258:	ca13      	ldmia	r2!, {r0, r1, r4}
 800225a:	c313      	stmia	r3!, {r0, r1, r4}
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	4a2a      	ldr	r2, [pc, #168]	; (800230c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002264:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002266:	c313      	stmia	r3!, {r0, r1, r4}
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002270:	2300      	movs	r3, #0
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28
 8002274:	2300      	movs	r3, #0
 8002276:	637b      	str	r3, [r7, #52]	; 0x34
 8002278:	2300      	movs	r3, #0
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002280:	4b23      	ldr	r3, [pc, #140]	; (8002310 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002288:	220c      	movs	r2, #12
 800228a:	4013      	ands	r3, r2
 800228c:	2b04      	cmp	r3, #4
 800228e:	d002      	beq.n	8002296 <HAL_RCC_GetSysClockFreq+0x4a>
 8002290:	2b08      	cmp	r3, #8
 8002292:	d003      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x50>
 8002294:	e02f      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002296:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002298:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800229a:	e02f      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800229c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229e:	0c9b      	lsrs	r3, r3, #18
 80022a0:	220f      	movs	r2, #15
 80022a2:	4013      	ands	r3, r2
 80022a4:	2214      	movs	r2, #20
 80022a6:	18ba      	adds	r2, r7, r2
 80022a8:	5cd3      	ldrb	r3, [r2, r3]
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80022ac:	4b18      	ldr	r3, [pc, #96]	; (8002310 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	220f      	movs	r2, #15
 80022b2:	4013      	ands	r3, r2
 80022b4:	1d3a      	adds	r2, r7, #4
 80022b6:	5cd3      	ldrb	r3, [r2, r3]
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80022ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022bc:	23c0      	movs	r3, #192	; 0xc0
 80022be:	025b      	lsls	r3, r3, #9
 80022c0:	401a      	ands	r2, r3
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	025b      	lsls	r3, r3, #9
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d109      	bne.n	80022de <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022cc:	4811      	ldr	r0, [pc, #68]	; (8002314 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022ce:	f7fd ff19 	bl	8000104 <__udivsi3>
 80022d2:	0003      	movs	r3, r0
 80022d4:	001a      	movs	r2, r3
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	4353      	muls	r3, r2
 80022da:	637b      	str	r3, [r7, #52]	; 0x34
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022e0:	480c      	ldr	r0, [pc, #48]	; (8002314 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022e2:	f7fd ff0f 	bl	8000104 <__udivsi3>
 80022e6:	0003      	movs	r3, r0
 80022e8:	001a      	movs	r2, r3
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	4353      	muls	r3, r2
 80022ee:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80022f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022f4:	e002      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022fa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80022fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80022fe:	0018      	movs	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	b00f      	add	sp, #60	; 0x3c
 8002304:	bd90      	pop	{r4, r7, pc}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	080038cc 	.word	0x080038cc
 800230c:	080038dc 	.word	0x080038dc
 8002310:	40021000 	.word	0x40021000
 8002314:	007a1200 	.word	0x007a1200

08002318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800231c:	4b02      	ldr	r3, [pc, #8]	; (8002328 <HAL_RCC_GetHCLKFreq+0x10>)
 800231e:	681b      	ldr	r3, [r3, #0]
}
 8002320:	0018      	movs	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	20000000 	.word	0x20000000

0800232c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002330:	f7ff fff2 	bl	8002318 <HAL_RCC_GetHCLKFreq>
 8002334:	0001      	movs	r1, r0
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	2207      	movs	r2, #7
 800233e:	4013      	ands	r3, r2
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002342:	5cd3      	ldrb	r3, [r2, r3]
 8002344:	40d9      	lsrs	r1, r3
 8002346:	000b      	movs	r3, r1
}    
 8002348:	0018      	movs	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	40021000 	.word	0x40021000
 8002354:	080038fc 	.word	0x080038fc

08002358 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	025b      	lsls	r3, r3, #9
 8002370:	4013      	ands	r3, r2
 8002372:	d100      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002374:	e08f      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002376:	2317      	movs	r3, #23
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800237e:	4b57      	ldr	r3, [pc, #348]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002380:	69da      	ldr	r2, [r3, #28]
 8002382:	2380      	movs	r3, #128	; 0x80
 8002384:	055b      	lsls	r3, r3, #21
 8002386:	4013      	ands	r3, r2
 8002388:	d111      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800238a:	4b54      	ldr	r3, [pc, #336]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800238c:	69da      	ldr	r2, [r3, #28]
 800238e:	4b53      	ldr	r3, [pc, #332]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002390:	2180      	movs	r1, #128	; 0x80
 8002392:	0549      	lsls	r1, r1, #21
 8002394:	430a      	orrs	r2, r1
 8002396:	61da      	str	r2, [r3, #28]
 8002398:	4b50      	ldr	r3, [pc, #320]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800239a:	69da      	ldr	r2, [r3, #28]
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	055b      	lsls	r3, r3, #21
 80023a0:	4013      	ands	r3, r2
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a6:	2317      	movs	r3, #23
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	2201      	movs	r2, #1
 80023ac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ae:	4b4c      	ldr	r3, [pc, #304]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4013      	ands	r3, r2
 80023b8:	d11a      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ba:	4b49      	ldr	r3, [pc, #292]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	4b48      	ldr	r3, [pc, #288]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80023c0:	2180      	movs	r1, #128	; 0x80
 80023c2:	0049      	lsls	r1, r1, #1
 80023c4:	430a      	orrs	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c8:	f7fe feb6 	bl	8001138 <HAL_GetTick>
 80023cc:	0003      	movs	r3, r0
 80023ce:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d0:	e008      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d2:	f7fe feb1 	bl	8001138 <HAL_GetTick>
 80023d6:	0002      	movs	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b64      	cmp	r3, #100	; 0x64
 80023de:	d901      	bls.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e077      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e4:	4b3e      	ldr	r3, [pc, #248]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4013      	ands	r3, r2
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023f0:	4b3a      	ldr	r3, [pc, #232]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023f2:	6a1a      	ldr	r2, [r3, #32]
 80023f4:	23c0      	movs	r3, #192	; 0xc0
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4013      	ands	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d034      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	23c0      	movs	r3, #192	; 0xc0
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4013      	ands	r3, r2
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	429a      	cmp	r2, r3
 8002410:	d02c      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002412:	4b32      	ldr	r3, [pc, #200]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	4a33      	ldr	r2, [pc, #204]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002418:	4013      	ands	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800241c:	4b2f      	ldr	r3, [pc, #188]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800241e:	6a1a      	ldr	r2, [r3, #32]
 8002420:	4b2e      	ldr	r3, [pc, #184]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002422:	2180      	movs	r1, #128	; 0x80
 8002424:	0249      	lsls	r1, r1, #9
 8002426:	430a      	orrs	r2, r1
 8002428:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800242a:	4b2c      	ldr	r3, [pc, #176]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800242c:	6a1a      	ldr	r2, [r3, #32]
 800242e:	4b2b      	ldr	r3, [pc, #172]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002430:	492d      	ldr	r1, [pc, #180]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002432:	400a      	ands	r2, r1
 8002434:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002436:	4b29      	ldr	r3, [pc, #164]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	4013      	ands	r3, r2
 8002442:	d013      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7fe fe78 	bl	8001138 <HAL_GetTick>
 8002448:	0003      	movs	r3, r0
 800244a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244c:	e009      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7fe fe73 	bl	8001138 <HAL_GetTick>
 8002452:	0002      	movs	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	4a24      	ldr	r2, [pc, #144]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e038      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002462:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	2202      	movs	r2, #2
 8002468:	4013      	ands	r3, r2
 800246a:	d0f0      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800246c:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	4a1c      	ldr	r2, [pc, #112]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002472:	4013      	ands	r3, r2
 8002474:	0019      	movs	r1, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	4b18      	ldr	r3, [pc, #96]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800247c:	430a      	orrs	r2, r1
 800247e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002480:	2317      	movs	r3, #23
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d105      	bne.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248a:	4b14      	ldr	r3, [pc, #80]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800248c:	69da      	ldr	r2, [r3, #28]
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002490:	4917      	ldr	r1, [pc, #92]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002492:	400a      	ands	r2, r1
 8002494:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2201      	movs	r2, #1
 800249c:	4013      	ands	r3, r2
 800249e:	d009      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024a0:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a4:	2203      	movs	r2, #3
 80024a6:	4393      	bics	r3, r2
 80024a8:	0019      	movs	r1, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024b0:	430a      	orrs	r2, r1
 80024b2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2220      	movs	r2, #32
 80024ba:	4013      	ands	r3, r2
 80024bc:	d009      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024be:	4b07      	ldr	r3, [pc, #28]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	2210      	movs	r2, #16
 80024c4:	4393      	bics	r3, r2
 80024c6:	0019      	movs	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024ce:	430a      	orrs	r2, r1
 80024d0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	0018      	movs	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b006      	add	sp, #24
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40007000 	.word	0x40007000
 80024e4:	fffffcff 	.word	0xfffffcff
 80024e8:	fffeffff 	.word	0xfffeffff
 80024ec:	00001388 	.word	0x00001388
 80024f0:	efffffff 	.word	0xefffffff

080024f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e08a      	b.n	800261c <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	225d      	movs	r2, #93	; 0x5d
 8002510:	5c9b      	ldrb	r3, [r3, r2]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d107      	bne.n	8002528 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	225c      	movs	r2, #92	; 0x5c
 800251c:	2100      	movs	r1, #0
 800251e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	0018      	movs	r0, r3
 8002524:	f7fe fbb6 	bl	8000c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	225d      	movs	r2, #93	; 0x5d
 800252c:	2102      	movs	r1, #2
 800252e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2140      	movs	r1, #64	; 0x40
 800253c:	438a      	bics	r2, r1
 800253e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	23e0      	movs	r3, #224	; 0xe0
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	429a      	cmp	r2, r3
 800254a:	d902      	bls.n	8002552 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	e002      	b.n	8002558 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	015b      	lsls	r3, r3, #5
 8002556:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	23f0      	movs	r3, #240	; 0xf0
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	429a      	cmp	r2, r3
 8002562:	d008      	beq.n	8002576 <HAL_SPI_Init+0x82>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	23e0      	movs	r3, #224	; 0xe0
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	429a      	cmp	r2, r3
 800256e:	d002      	beq.n	8002576 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10c      	bne.n	8002598 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	23e0      	movs	r3, #224	; 0xe0
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	429a      	cmp	r2, r3
 8002588:	d903      	bls.n	8002592 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2202      	movs	r2, #2
 800258e:	631a      	str	r2, [r3, #48]	; 0x30
 8002590:	e002      	b.n	8002598 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6999      	ldr	r1, [r3, #24]
 80025b2:	2380      	movs	r3, #128	; 0x80
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	400b      	ands	r3, r1
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	0011      	movs	r1, r2
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	0c1b      	lsrs	r3, r3, #16
 80025da:	2204      	movs	r2, #4
 80025dc:	401a      	ands	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	0011      	movs	r1, r2
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	69da      	ldr	r2, [r3, #28]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4907      	ldr	r1, [pc, #28]	; (8002624 <HAL_SPI_Init+0x130>)
 8002608:	400a      	ands	r2, r1
 800260a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	225d      	movs	r2, #93	; 0x5d
 8002616:	2101      	movs	r1, #1
 8002618:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	0018      	movs	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	b004      	add	sp, #16
 8002622:	bd80      	pop	{r7, pc}
 8002624:	fffff7ff 	.word	0xfffff7ff

08002628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e01e      	b.n	8002678 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	223d      	movs	r2, #61	; 0x3d
 800263e:	5c9b      	ldrb	r3, [r3, r2]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d107      	bne.n	8002656 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	223c      	movs	r2, #60	; 0x3c
 800264a:	2100      	movs	r1, #0
 800264c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	0018      	movs	r0, r3
 8002652:	f7fe fb85 	bl	8000d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	223d      	movs	r2, #61	; 0x3d
 800265a:	2102      	movs	r1, #2
 800265c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3304      	adds	r3, #4
 8002666:	0019      	movs	r1, r3
 8002668:	0010      	movs	r0, r2
 800266a:	f000 f9b3 	bl	80029d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	223d      	movs	r2, #61	; 0x3d
 8002672:	2101      	movs	r1, #1
 8002674:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	0018      	movs	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	b002      	add	sp, #8
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e01e      	b.n	80026d0 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	223d      	movs	r2, #61	; 0x3d
 8002696:	5c9b      	ldrb	r3, [r3, r2]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d107      	bne.n	80026ae <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	223c      	movs	r2, #60	; 0x3c
 80026a2:	2100      	movs	r1, #0
 80026a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	0018      	movs	r0, r3
 80026aa:	f000 f815 	bl	80026d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	223d      	movs	r2, #61	; 0x3d
 80026b2:	2102      	movs	r1, #2
 80026b4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3304      	adds	r3, #4
 80026be:	0019      	movs	r1, r3
 80026c0:	0010      	movs	r0, r2
 80026c2:	f000 f987 	bl	80029d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	223d      	movs	r2, #61	; 0x3d
 80026ca:	2101      	movs	r1, #1
 80026cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b002      	add	sp, #8
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b002      	add	sp, #8
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	223c      	movs	r2, #60	; 0x3c
 80026f8:	5c9b      	ldrb	r3, [r3, r2]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80026fe:	2302      	movs	r3, #2
 8002700:	e0a4      	b.n	800284c <HAL_TIM_PWM_ConfigChannel+0x164>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	223c      	movs	r2, #60	; 0x3c
 8002706:	2101      	movs	r1, #1
 8002708:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	223d      	movs	r2, #61	; 0x3d
 800270e:	2102      	movs	r1, #2
 8002710:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b04      	cmp	r3, #4
 8002716:	d029      	beq.n	800276c <HAL_TIM_PWM_ConfigChannel+0x84>
 8002718:	d802      	bhi.n	8002720 <HAL_TIM_PWM_ConfigChannel+0x38>
 800271a:	2b00      	cmp	r3, #0
 800271c:	d005      	beq.n	800272a <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800271e:	e08c      	b.n	800283a <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8002720:	2b08      	cmp	r3, #8
 8002722:	d046      	beq.n	80027b2 <HAL_TIM_PWM_ConfigChannel+0xca>
 8002724:	2b0c      	cmp	r3, #12
 8002726:	d065      	beq.n	80027f4 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002728:	e087      	b.n	800283a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	0011      	movs	r1, r2
 8002732:	0018      	movs	r0, r3
 8002734:	f000 f9c4 	bl	8002ac0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699a      	ldr	r2, [r3, #24]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2108      	movs	r1, #8
 8002744:	430a      	orrs	r2, r1
 8002746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699a      	ldr	r2, [r3, #24]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2104      	movs	r1, #4
 8002754:	438a      	bics	r2, r1
 8002756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6999      	ldr	r1, [r3, #24]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	691a      	ldr	r2, [r3, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	619a      	str	r2, [r3, #24]
      break;
 800276a:	e066      	b.n	800283a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	0011      	movs	r1, r2
 8002774:	0018      	movs	r0, r3
 8002776:	f000 fa2b 	bl	8002bd0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699a      	ldr	r2, [r3, #24]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2180      	movs	r1, #128	; 0x80
 8002786:	0109      	lsls	r1, r1, #4
 8002788:	430a      	orrs	r2, r1
 800278a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699a      	ldr	r2, [r3, #24]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	492f      	ldr	r1, [pc, #188]	; (8002854 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002798:	400a      	ands	r2, r1
 800279a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6999      	ldr	r1, [r3, #24]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	021a      	lsls	r2, r3, #8
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	619a      	str	r2, [r3, #24]
      break;
 80027b0:	e043      	b.n	800283a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	0011      	movs	r1, r2
 80027ba:	0018      	movs	r0, r3
 80027bc:	f000 fa8c 	bl	8002cd8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	69da      	ldr	r2, [r3, #28]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2108      	movs	r1, #8
 80027cc:	430a      	orrs	r2, r1
 80027ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	69da      	ldr	r2, [r3, #28]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2104      	movs	r1, #4
 80027dc:	438a      	bics	r2, r1
 80027de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69d9      	ldr	r1, [r3, #28]
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	61da      	str	r2, [r3, #28]
      break;
 80027f2:	e022      	b.n	800283a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	0011      	movs	r1, r2
 80027fc:	0018      	movs	r0, r3
 80027fe:	f000 faf1 	bl	8002de4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69da      	ldr	r2, [r3, #28]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2180      	movs	r1, #128	; 0x80
 800280e:	0109      	lsls	r1, r1, #4
 8002810:	430a      	orrs	r2, r1
 8002812:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69da      	ldr	r2, [r3, #28]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	490d      	ldr	r1, [pc, #52]	; (8002854 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002820:	400a      	ands	r2, r1
 8002822:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	69d9      	ldr	r1, [r3, #28]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	021a      	lsls	r2, r3, #8
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	61da      	str	r2, [r3, #28]
      break;
 8002838:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	223d      	movs	r2, #61	; 0x3d
 800283e:	2101      	movs	r1, #1
 8002840:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	223c      	movs	r2, #60	; 0x3c
 8002846:	2100      	movs	r1, #0
 8002848:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	0018      	movs	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	b004      	add	sp, #16
 8002852:	bd80      	pop	{r7, pc}
 8002854:	fffffbff 	.word	0xfffffbff

08002858 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	223c      	movs	r2, #60	; 0x3c
 8002866:	5c9b      	ldrb	r3, [r3, r2]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_TIM_ConfigClockSource+0x18>
 800286c:	2302      	movs	r3, #2
 800286e:	e0ab      	b.n	80029c8 <HAL_TIM_ConfigClockSource+0x170>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	223c      	movs	r2, #60	; 0x3c
 8002874:	2101      	movs	r1, #1
 8002876:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	223d      	movs	r2, #61	; 0x3d
 800287c:	2102      	movs	r1, #2
 800287e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2277      	movs	r2, #119	; 0x77
 800288c:	4393      	bics	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4a4f      	ldr	r2, [pc, #316]	; (80029d0 <HAL_TIM_ConfigClockSource+0x178>)
 8002894:	4013      	ands	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b40      	cmp	r3, #64	; 0x40
 80028a6:	d100      	bne.n	80028aa <HAL_TIM_ConfigClockSource+0x52>
 80028a8:	e06b      	b.n	8002982 <HAL_TIM_ConfigClockSource+0x12a>
 80028aa:	d80e      	bhi.n	80028ca <HAL_TIM_ConfigClockSource+0x72>
 80028ac:	2b10      	cmp	r3, #16
 80028ae:	d100      	bne.n	80028b2 <HAL_TIM_ConfigClockSource+0x5a>
 80028b0:	e077      	b.n	80029a2 <HAL_TIM_ConfigClockSource+0x14a>
 80028b2:	d803      	bhi.n	80028bc <HAL_TIM_ConfigClockSource+0x64>
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d100      	bne.n	80028ba <HAL_TIM_ConfigClockSource+0x62>
 80028b8:	e073      	b.n	80029a2 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80028ba:	e07c      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d100      	bne.n	80028c2 <HAL_TIM_ConfigClockSource+0x6a>
 80028c0:	e06f      	b.n	80029a2 <HAL_TIM_ConfigClockSource+0x14a>
 80028c2:	2b30      	cmp	r3, #48	; 0x30
 80028c4:	d100      	bne.n	80028c8 <HAL_TIM_ConfigClockSource+0x70>
 80028c6:	e06c      	b.n	80029a2 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80028c8:	e075      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80028ca:	2b70      	cmp	r3, #112	; 0x70
 80028cc:	d00e      	beq.n	80028ec <HAL_TIM_ConfigClockSource+0x94>
 80028ce:	d804      	bhi.n	80028da <HAL_TIM_ConfigClockSource+0x82>
 80028d0:	2b50      	cmp	r3, #80	; 0x50
 80028d2:	d036      	beq.n	8002942 <HAL_TIM_ConfigClockSource+0xea>
 80028d4:	2b60      	cmp	r3, #96	; 0x60
 80028d6:	d044      	beq.n	8002962 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80028d8:	e06d      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80028da:	2280      	movs	r2, #128	; 0x80
 80028dc:	0152      	lsls	r2, r2, #5
 80028de:	4293      	cmp	r3, r2
 80028e0:	d068      	beq.n	80029b4 <HAL_TIM_ConfigClockSource+0x15c>
 80028e2:	2280      	movs	r2, #128	; 0x80
 80028e4:	0192      	lsls	r2, r2, #6
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d017      	beq.n	800291a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80028ea:	e064      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6818      	ldr	r0, [r3, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	6899      	ldr	r1, [r3, #8]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f000 fb56 	bl	8002fac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2277      	movs	r2, #119	; 0x77
 800290c:	4313      	orrs	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	609a      	str	r2, [r3, #8]
      break;
 8002918:	e04d      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	6899      	ldr	r1, [r3, #8]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f000 fb3f 	bl	8002fac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2180      	movs	r1, #128	; 0x80
 800293a:	01c9      	lsls	r1, r1, #7
 800293c:	430a      	orrs	r2, r1
 800293e:	609a      	str	r2, [r3, #8]
      break;
 8002940:	e039      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6859      	ldr	r1, [r3, #4]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	001a      	movs	r2, r3
 8002950:	f000 fab2 	bl	8002eb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2150      	movs	r1, #80	; 0x50
 800295a:	0018      	movs	r0, r3
 800295c:	f000 fb0c 	bl	8002f78 <TIM_ITRx_SetConfig>
      break;
 8002960:	e029      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6859      	ldr	r1, [r3, #4]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	001a      	movs	r2, r3
 8002970:	f000 fad0 	bl	8002f14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2160      	movs	r1, #96	; 0x60
 800297a:	0018      	movs	r0, r3
 800297c:	f000 fafc 	bl	8002f78 <TIM_ITRx_SetConfig>
      break;
 8002980:	e019      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6859      	ldr	r1, [r3, #4]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	001a      	movs	r2, r3
 8002990:	f000 fa92 	bl	8002eb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2140      	movs	r1, #64	; 0x40
 800299a:	0018      	movs	r0, r3
 800299c:	f000 faec 	bl	8002f78 <TIM_ITRx_SetConfig>
      break;
 80029a0:	e009      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	0019      	movs	r1, r3
 80029ac:	0010      	movs	r0, r2
 80029ae:	f000 fae3 	bl	8002f78 <TIM_ITRx_SetConfig>
      break;
 80029b2:	e000      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80029b4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	223d      	movs	r2, #61	; 0x3d
 80029ba:	2101      	movs	r1, #1
 80029bc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	223c      	movs	r2, #60	; 0x3c
 80029c2:	2100      	movs	r1, #0
 80029c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	0018      	movs	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b004      	add	sp, #16
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	ffff00ff 	.word	0xffff00ff

080029d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a2f      	ldr	r2, [pc, #188]	; (8002aa4 <TIM_Base_SetConfig+0xd0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d003      	beq.n	80029f4 <TIM_Base_SetConfig+0x20>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a2e      	ldr	r2, [pc, #184]	; (8002aa8 <TIM_Base_SetConfig+0xd4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d108      	bne.n	8002a06 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2270      	movs	r2, #112	; 0x70
 80029f8:	4393      	bics	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a26      	ldr	r2, [pc, #152]	; (8002aa4 <TIM_Base_SetConfig+0xd0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <TIM_Base_SetConfig+0x62>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a25      	ldr	r2, [pc, #148]	; (8002aa8 <TIM_Base_SetConfig+0xd4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00f      	beq.n	8002a36 <TIM_Base_SetConfig+0x62>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a24      	ldr	r2, [pc, #144]	; (8002aac <TIM_Base_SetConfig+0xd8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00b      	beq.n	8002a36 <TIM_Base_SetConfig+0x62>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a23      	ldr	r2, [pc, #140]	; (8002ab0 <TIM_Base_SetConfig+0xdc>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d007      	beq.n	8002a36 <TIM_Base_SetConfig+0x62>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a22      	ldr	r2, [pc, #136]	; (8002ab4 <TIM_Base_SetConfig+0xe0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d003      	beq.n	8002a36 <TIM_Base_SetConfig+0x62>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a21      	ldr	r2, [pc, #132]	; (8002ab8 <TIM_Base_SetConfig+0xe4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d108      	bne.n	8002a48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4a20      	ldr	r2, [pc, #128]	; (8002abc <TIM_Base_SetConfig+0xe8>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2280      	movs	r2, #128	; 0x80
 8002a4c:	4393      	bics	r3, r2
 8002a4e:	001a      	movs	r2, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a0c      	ldr	r2, [pc, #48]	; (8002aa4 <TIM_Base_SetConfig+0xd0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00b      	beq.n	8002a8e <TIM_Base_SetConfig+0xba>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a0d      	ldr	r2, [pc, #52]	; (8002ab0 <TIM_Base_SetConfig+0xdc>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d007      	beq.n	8002a8e <TIM_Base_SetConfig+0xba>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a0c      	ldr	r2, [pc, #48]	; (8002ab4 <TIM_Base_SetConfig+0xe0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d003      	beq.n	8002a8e <TIM_Base_SetConfig+0xba>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a0b      	ldr	r2, [pc, #44]	; (8002ab8 <TIM_Base_SetConfig+0xe4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d103      	bne.n	8002a96 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	691a      	ldr	r2, [r3, #16]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	615a      	str	r2, [r3, #20]
}
 8002a9c:	46c0      	nop			; (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b004      	add	sp, #16
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40012c00 	.word	0x40012c00
 8002aa8:	40000400 	.word	0x40000400
 8002aac:	40002000 	.word	0x40002000
 8002ab0:	40014000 	.word	0x40014000
 8002ab4:	40014400 	.word	0x40014400
 8002ab8:	40014800 	.word	0x40014800
 8002abc:	fffffcff 	.word	0xfffffcff

08002ac0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	4393      	bics	r3, r2
 8002ad2:	001a      	movs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2270      	movs	r2, #112	; 0x70
 8002aee:	4393      	bics	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2203      	movs	r2, #3
 8002af6:	4393      	bics	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	2202      	movs	r2, #2
 8002b08:	4393      	bics	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a27      	ldr	r2, [pc, #156]	; (8002bb8 <TIM_OC1_SetConfig+0xf8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00b      	beq.n	8002b36 <TIM_OC1_SetConfig+0x76>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a26      	ldr	r2, [pc, #152]	; (8002bbc <TIM_OC1_SetConfig+0xfc>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d007      	beq.n	8002b36 <TIM_OC1_SetConfig+0x76>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a25      	ldr	r2, [pc, #148]	; (8002bc0 <TIM_OC1_SetConfig+0x100>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d003      	beq.n	8002b36 <TIM_OC1_SetConfig+0x76>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a24      	ldr	r2, [pc, #144]	; (8002bc4 <TIM_OC1_SetConfig+0x104>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d10c      	bne.n	8002b50 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2208      	movs	r2, #8
 8002b3a:	4393      	bics	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	4393      	bics	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a19      	ldr	r2, [pc, #100]	; (8002bb8 <TIM_OC1_SetConfig+0xf8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d00b      	beq.n	8002b70 <TIM_OC1_SetConfig+0xb0>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a18      	ldr	r2, [pc, #96]	; (8002bbc <TIM_OC1_SetConfig+0xfc>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d007      	beq.n	8002b70 <TIM_OC1_SetConfig+0xb0>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a17      	ldr	r2, [pc, #92]	; (8002bc0 <TIM_OC1_SetConfig+0x100>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d003      	beq.n	8002b70 <TIM_OC1_SetConfig+0xb0>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a16      	ldr	r2, [pc, #88]	; (8002bc4 <TIM_OC1_SetConfig+0x104>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d111      	bne.n	8002b94 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4a15      	ldr	r2, [pc, #84]	; (8002bc8 <TIM_OC1_SetConfig+0x108>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4a14      	ldr	r2, [pc, #80]	; (8002bcc <TIM_OC1_SetConfig+0x10c>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	621a      	str	r2, [r3, #32]
}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b006      	add	sp, #24
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	40012c00 	.word	0x40012c00
 8002bbc:	40014000 	.word	0x40014000
 8002bc0:	40014400 	.word	0x40014400
 8002bc4:	40014800 	.word	0x40014800
 8002bc8:	fffffeff 	.word	0xfffffeff
 8002bcc:	fffffdff 	.word	0xfffffdff

08002bd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	2210      	movs	r2, #16
 8002be0:	4393      	bics	r3, r2
 8002be2:	001a      	movs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4a2e      	ldr	r2, [pc, #184]	; (8002cb8 <TIM_OC2_SetConfig+0xe8>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4a2d      	ldr	r2, [pc, #180]	; (8002cbc <TIM_OC2_SetConfig+0xec>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	4393      	bics	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a24      	ldr	r2, [pc, #144]	; (8002cc0 <TIM_OC2_SetConfig+0xf0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d10d      	bne.n	8002c4e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2280      	movs	r2, #128	; 0x80
 8002c36:	4393      	bics	r3, r2
 8002c38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2240      	movs	r2, #64	; 0x40
 8002c4a:	4393      	bics	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a1b      	ldr	r2, [pc, #108]	; (8002cc0 <TIM_OC2_SetConfig+0xf0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00b      	beq.n	8002c6e <TIM_OC2_SetConfig+0x9e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a1a      	ldr	r2, [pc, #104]	; (8002cc4 <TIM_OC2_SetConfig+0xf4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d007      	beq.n	8002c6e <TIM_OC2_SetConfig+0x9e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a19      	ldr	r2, [pc, #100]	; (8002cc8 <TIM_OC2_SetConfig+0xf8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d003      	beq.n	8002c6e <TIM_OC2_SetConfig+0x9e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a18      	ldr	r2, [pc, #96]	; (8002ccc <TIM_OC2_SetConfig+0xfc>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d113      	bne.n	8002c96 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4a17      	ldr	r2, [pc, #92]	; (8002cd0 <TIM_OC2_SetConfig+0x100>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4a16      	ldr	r2, [pc, #88]	; (8002cd4 <TIM_OC2_SetConfig+0x104>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	621a      	str	r2, [r3, #32]
}
 8002cb0:	46c0      	nop			; (mov r8, r8)
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b006      	add	sp, #24
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	ffff8fff 	.word	0xffff8fff
 8002cbc:	fffffcff 	.word	0xfffffcff
 8002cc0:	40012c00 	.word	0x40012c00
 8002cc4:	40014000 	.word	0x40014000
 8002cc8:	40014400 	.word	0x40014400
 8002ccc:	40014800 	.word	0x40014800
 8002cd0:	fffffbff 	.word	0xfffffbff
 8002cd4:	fffff7ff 	.word	0xfffff7ff

08002cd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	4a35      	ldr	r2, [pc, #212]	; (8002dbc <TIM_OC3_SetConfig+0xe4>)
 8002ce8:	401a      	ands	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2270      	movs	r2, #112	; 0x70
 8002d04:	4393      	bics	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	4393      	bics	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	4a28      	ldr	r2, [pc, #160]	; (8002dc0 <TIM_OC3_SetConfig+0xe8>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	021b      	lsls	r3, r3, #8
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a24      	ldr	r2, [pc, #144]	; (8002dc4 <TIM_OC3_SetConfig+0xec>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d10d      	bne.n	8002d52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	4a23      	ldr	r2, [pc, #140]	; (8002dc8 <TIM_OC3_SetConfig+0xf0>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	4a1f      	ldr	r2, [pc, #124]	; (8002dcc <TIM_OC3_SetConfig+0xf4>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a1b      	ldr	r2, [pc, #108]	; (8002dc4 <TIM_OC3_SetConfig+0xec>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00b      	beq.n	8002d72 <TIM_OC3_SetConfig+0x9a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a1c      	ldr	r2, [pc, #112]	; (8002dd0 <TIM_OC3_SetConfig+0xf8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d007      	beq.n	8002d72 <TIM_OC3_SetConfig+0x9a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a1b      	ldr	r2, [pc, #108]	; (8002dd4 <TIM_OC3_SetConfig+0xfc>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d003      	beq.n	8002d72 <TIM_OC3_SetConfig+0x9a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a1a      	ldr	r2, [pc, #104]	; (8002dd8 <TIM_OC3_SetConfig+0x100>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d113      	bne.n	8002d9a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4a19      	ldr	r2, [pc, #100]	; (8002ddc <TIM_OC3_SetConfig+0x104>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4a18      	ldr	r2, [pc, #96]	; (8002de0 <TIM_OC3_SetConfig+0x108>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	621a      	str	r2, [r3, #32]
}
 8002db4:	46c0      	nop			; (mov r8, r8)
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b006      	add	sp, #24
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	fffffeff 	.word	0xfffffeff
 8002dc0:	fffffdff 	.word	0xfffffdff
 8002dc4:	40012c00 	.word	0x40012c00
 8002dc8:	fffff7ff 	.word	0xfffff7ff
 8002dcc:	fffffbff 	.word	0xfffffbff
 8002dd0:	40014000 	.word	0x40014000
 8002dd4:	40014400 	.word	0x40014400
 8002dd8:	40014800 	.word	0x40014800
 8002ddc:	ffffefff 	.word	0xffffefff
 8002de0:	ffffdfff 	.word	0xffffdfff

08002de4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	4a28      	ldr	r2, [pc, #160]	; (8002e94 <TIM_OC4_SetConfig+0xb0>)
 8002df4:	401a      	ands	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4a22      	ldr	r2, [pc, #136]	; (8002e98 <TIM_OC4_SetConfig+0xb4>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4a21      	ldr	r2, [pc, #132]	; (8002e9c <TIM_OC4_SetConfig+0xb8>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	021b      	lsls	r3, r3, #8
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4a1d      	ldr	r2, [pc, #116]	; (8002ea0 <TIM_OC4_SetConfig+0xbc>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	031b      	lsls	r3, r3, #12
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a19      	ldr	r2, [pc, #100]	; (8002ea4 <TIM_OC4_SetConfig+0xc0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00b      	beq.n	8002e5c <TIM_OC4_SetConfig+0x78>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a18      	ldr	r2, [pc, #96]	; (8002ea8 <TIM_OC4_SetConfig+0xc4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d007      	beq.n	8002e5c <TIM_OC4_SetConfig+0x78>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a17      	ldr	r2, [pc, #92]	; (8002eac <TIM_OC4_SetConfig+0xc8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d003      	beq.n	8002e5c <TIM_OC4_SetConfig+0x78>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a16      	ldr	r2, [pc, #88]	; (8002eb0 <TIM_OC4_SetConfig+0xcc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d109      	bne.n	8002e70 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	4a15      	ldr	r2, [pc, #84]	; (8002eb4 <TIM_OC4_SetConfig+0xd0>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	019b      	lsls	r3, r3, #6
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	621a      	str	r2, [r3, #32]
}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b006      	add	sp, #24
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	ffffefff 	.word	0xffffefff
 8002e98:	ffff8fff 	.word	0xffff8fff
 8002e9c:	fffffcff 	.word	0xfffffcff
 8002ea0:	ffffdfff 	.word	0xffffdfff
 8002ea4:	40012c00 	.word	0x40012c00
 8002ea8:	40014000 	.word	0x40014000
 8002eac:	40014400 	.word	0x40014400
 8002eb0:	40014800 	.word	0x40014800
 8002eb4:	ffffbfff 	.word	0xffffbfff

08002eb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	4393      	bics	r3, r2
 8002ed2:	001a      	movs	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	22f0      	movs	r2, #240	; 0xf0
 8002ee2:	4393      	bics	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	220a      	movs	r2, #10
 8002ef4:	4393      	bics	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	621a      	str	r2, [r3, #32]
}
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b006      	add	sp, #24
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	2210      	movs	r2, #16
 8002f26:	4393      	bics	r3, r2
 8002f28:	001a      	movs	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	4a0d      	ldr	r2, [pc, #52]	; (8002f74 <TIM_TI2_ConfigInputStage+0x60>)
 8002f3e:	4013      	ands	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	031b      	lsls	r3, r3, #12
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	22a0      	movs	r2, #160	; 0xa0
 8002f50:	4393      	bics	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	621a      	str	r2, [r3, #32]
}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	b006      	add	sp, #24
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	ffff0fff 	.word	0xffff0fff

08002f78 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2270      	movs	r2, #112	; 0x70
 8002f8c:	4393      	bics	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	2207      	movs	r2, #7
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	609a      	str	r2, [r3, #8]
}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	b004      	add	sp, #16
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	4a09      	ldr	r2, [pc, #36]	; (8002fe8 <TIM_ETR_SetConfig+0x3c>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	021a      	lsls	r2, r3, #8
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	609a      	str	r2, [r3, #8]
}
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b006      	add	sp, #24
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	ffff00ff 	.word	0xffff00ff

08002fec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	223c      	movs	r2, #60	; 0x3c
 8002ffa:	5c9b      	ldrb	r3, [r3, r2]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003000:	2302      	movs	r3, #2
 8003002:	e041      	b.n	8003088 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	223c      	movs	r2, #60	; 0x3c
 8003008:	2101      	movs	r1, #1
 800300a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	223d      	movs	r2, #61	; 0x3d
 8003010:	2102      	movs	r1, #2
 8003012:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2270      	movs	r2, #112	; 0x70
 8003028:	4393      	bics	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a13      	ldr	r2, [pc, #76]	; (8003090 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d009      	beq.n	800305c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a11      	ldr	r2, [pc, #68]	; (8003094 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d004      	beq.n	800305c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a10      	ldr	r2, [pc, #64]	; (8003098 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d10c      	bne.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2280      	movs	r2, #128	; 0x80
 8003060:	4393      	bics	r3, r2
 8003062:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	4313      	orrs	r3, r2
 800306c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	223d      	movs	r2, #61	; 0x3d
 800307a:	2101      	movs	r1, #1
 800307c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	223c      	movs	r2, #60	; 0x3c
 8003082:	2100      	movs	r1, #0
 8003084:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	0018      	movs	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	b004      	add	sp, #16
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40012c00 	.word	0x40012c00
 8003094:	40000400 	.word	0x40000400
 8003098:	40014000 	.word	0x40014000

0800309c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	223c      	movs	r2, #60	; 0x3c
 80030ae:	5c9b      	ldrb	r3, [r3, r2]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e03e      	b.n	8003136 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	223c      	movs	r2, #60	; 0x3c
 80030bc:	2101      	movs	r1, #1
 80030be:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	22ff      	movs	r2, #255	; 0xff
 80030c4:	4393      	bics	r3, r2
 80030c6:	001a      	movs	r2, r3
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4a1b      	ldr	r2, [pc, #108]	; (8003140 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80030d4:	401a      	ands	r2, r3
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	4313      	orrs	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4a18      	ldr	r2, [pc, #96]	; (8003144 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80030e2:	401a      	ands	r2, r3
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4a16      	ldr	r2, [pc, #88]	; (8003148 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80030f0:	401a      	ands	r2, r3
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4a13      	ldr	r2, [pc, #76]	; (800314c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80030fe:	401a      	ands	r2, r3
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4a11      	ldr	r2, [pc, #68]	; (8003150 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800310c:	401a      	ands	r2, r3
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4a0e      	ldr	r2, [pc, #56]	; (8003154 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800311a:	401a      	ands	r2, r3
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	4313      	orrs	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	223c      	movs	r2, #60	; 0x3c
 8003130:	2100      	movs	r1, #0
 8003132:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	0018      	movs	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	b004      	add	sp, #16
 800313c:	bd80      	pop	{r7, pc}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	fffffcff 	.word	0xfffffcff
 8003144:	fffffbff 	.word	0xfffffbff
 8003148:	fffff7ff 	.word	0xfffff7ff
 800314c:	ffffefff 	.word	0xffffefff
 8003150:	ffffdfff 	.word	0xffffdfff
 8003154:	ffffbfff 	.word	0xffffbfff

08003158 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e044      	b.n	80031f4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316e:	2b00      	cmp	r3, #0
 8003170:	d107      	bne.n	8003182 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2270      	movs	r2, #112	; 0x70
 8003176:	2100      	movs	r1, #0
 8003178:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	0018      	movs	r0, r3
 800317e:	f7fd feeb 	bl	8000f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2224      	movs	r2, #36	; 0x24
 8003186:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2101      	movs	r1, #1
 8003194:	438a      	bics	r2, r1
 8003196:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	0018      	movs	r0, r3
 800319c:	f000 f830 	bl	8003200 <UART_SetConfig>
 80031a0:	0003      	movs	r3, r0
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e024      	b.n	80031f4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	0018      	movs	r0, r3
 80031b6:	f000 f9d9 	bl	800356c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	490d      	ldr	r1, [pc, #52]	; (80031fc <HAL_UART_Init+0xa4>)
 80031c6:	400a      	ands	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2108      	movs	r1, #8
 80031d6:	438a      	bics	r2, r1
 80031d8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2101      	movs	r1, #1
 80031e6:	430a      	orrs	r2, r1
 80031e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	0018      	movs	r0, r3
 80031ee:	f000 fa71 	bl	80036d4 <UART_CheckIdleState>
 80031f2:	0003      	movs	r3, r0
}
 80031f4:	0018      	movs	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	b002      	add	sp, #8
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	fffff7ff 	.word	0xfffff7ff

08003200 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003208:	2300      	movs	r3, #0
 800320a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800320c:	2317      	movs	r3, #23
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	2200      	movs	r2, #0
 8003212:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4ac1      	ldr	r2, [pc, #772]	; (8003538 <UART_SetConfig+0x338>)
 8003234:	4013      	ands	r3, r2
 8003236:	0019      	movs	r1, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	430a      	orrs	r2, r1
 8003240:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4abc      	ldr	r2, [pc, #752]	; (800353c <UART_SetConfig+0x33c>)
 800324a:	4013      	ands	r3, r2
 800324c:	0019      	movs	r1, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4ab3      	ldr	r2, [pc, #716]	; (8003540 <UART_SetConfig+0x340>)
 8003272:	4013      	ands	r3, r2
 8003274:	0019      	movs	r1, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	430a      	orrs	r2, r1
 800327e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4aaf      	ldr	r2, [pc, #700]	; (8003544 <UART_SetConfig+0x344>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d125      	bne.n	80032d6 <UART_SetConfig+0xd6>
 800328a:	4baf      	ldr	r3, [pc, #700]	; (8003548 <UART_SetConfig+0x348>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	2203      	movs	r2, #3
 8003290:	4013      	ands	r3, r2
 8003292:	2b01      	cmp	r3, #1
 8003294:	d00f      	beq.n	80032b6 <UART_SetConfig+0xb6>
 8003296:	d304      	bcc.n	80032a2 <UART_SetConfig+0xa2>
 8003298:	2b02      	cmp	r3, #2
 800329a:	d011      	beq.n	80032c0 <UART_SetConfig+0xc0>
 800329c:	2b03      	cmp	r3, #3
 800329e:	d005      	beq.n	80032ac <UART_SetConfig+0xac>
 80032a0:	e013      	b.n	80032ca <UART_SetConfig+0xca>
 80032a2:	231f      	movs	r3, #31
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	2200      	movs	r2, #0
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	e04a      	b.n	8003342 <UART_SetConfig+0x142>
 80032ac:	231f      	movs	r3, #31
 80032ae:	18fb      	adds	r3, r7, r3
 80032b0:	2202      	movs	r2, #2
 80032b2:	701a      	strb	r2, [r3, #0]
 80032b4:	e045      	b.n	8003342 <UART_SetConfig+0x142>
 80032b6:	231f      	movs	r3, #31
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	2204      	movs	r2, #4
 80032bc:	701a      	strb	r2, [r3, #0]
 80032be:	e040      	b.n	8003342 <UART_SetConfig+0x142>
 80032c0:	231f      	movs	r3, #31
 80032c2:	18fb      	adds	r3, r7, r3
 80032c4:	2208      	movs	r2, #8
 80032c6:	701a      	strb	r2, [r3, #0]
 80032c8:	e03b      	b.n	8003342 <UART_SetConfig+0x142>
 80032ca:	231f      	movs	r3, #31
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	2210      	movs	r2, #16
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	e035      	b.n	8003342 <UART_SetConfig+0x142>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a9c      	ldr	r2, [pc, #624]	; (800354c <UART_SetConfig+0x34c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d104      	bne.n	80032ea <UART_SetConfig+0xea>
 80032e0:	231f      	movs	r3, #31
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
 80032e8:	e02b      	b.n	8003342 <UART_SetConfig+0x142>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a98      	ldr	r2, [pc, #608]	; (8003550 <UART_SetConfig+0x350>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d104      	bne.n	80032fe <UART_SetConfig+0xfe>
 80032f4:	231f      	movs	r3, #31
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
 80032fc:	e021      	b.n	8003342 <UART_SetConfig+0x142>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a94      	ldr	r2, [pc, #592]	; (8003554 <UART_SetConfig+0x354>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d104      	bne.n	8003312 <UART_SetConfig+0x112>
 8003308:	231f      	movs	r3, #31
 800330a:	18fb      	adds	r3, r7, r3
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
 8003310:	e017      	b.n	8003342 <UART_SetConfig+0x142>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a90      	ldr	r2, [pc, #576]	; (8003558 <UART_SetConfig+0x358>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d104      	bne.n	8003326 <UART_SetConfig+0x126>
 800331c:	231f      	movs	r3, #31
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	2200      	movs	r2, #0
 8003322:	701a      	strb	r2, [r3, #0]
 8003324:	e00d      	b.n	8003342 <UART_SetConfig+0x142>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a8c      	ldr	r2, [pc, #560]	; (800355c <UART_SetConfig+0x35c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d104      	bne.n	800333a <UART_SetConfig+0x13a>
 8003330:	231f      	movs	r3, #31
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
 8003338:	e003      	b.n	8003342 <UART_SetConfig+0x142>
 800333a:	231f      	movs	r3, #31
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	2210      	movs	r2, #16
 8003340:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69da      	ldr	r2, [r3, #28]
 8003346:	2380      	movs	r3, #128	; 0x80
 8003348:	021b      	lsls	r3, r3, #8
 800334a:	429a      	cmp	r2, r3
 800334c:	d000      	beq.n	8003350 <UART_SetConfig+0x150>
 800334e:	e07d      	b.n	800344c <UART_SetConfig+0x24c>
  {
    switch (clocksource)
 8003350:	231f      	movs	r3, #31
 8003352:	18fb      	adds	r3, r7, r3
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d01c      	beq.n	8003394 <UART_SetConfig+0x194>
 800335a:	dc02      	bgt.n	8003362 <UART_SetConfig+0x162>
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <UART_SetConfig+0x16c>
 8003360:	e04b      	b.n	80033fa <UART_SetConfig+0x1fa>
 8003362:	2b04      	cmp	r3, #4
 8003364:	d025      	beq.n	80033b2 <UART_SetConfig+0x1b2>
 8003366:	2b08      	cmp	r3, #8
 8003368:	d037      	beq.n	80033da <UART_SetConfig+0x1da>
 800336a:	e046      	b.n	80033fa <UART_SetConfig+0x1fa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800336c:	f7fe ffde 	bl	800232c <HAL_RCC_GetPCLK1Freq>
 8003370:	0003      	movs	r3, r0
 8003372:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	005a      	lsls	r2, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	085b      	lsrs	r3, r3, #1
 800337e:	18d2      	adds	r2, r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	0019      	movs	r1, r3
 8003386:	0010      	movs	r0, r2
 8003388:	f7fc febc 	bl	8000104 <__udivsi3>
 800338c:	0003      	movs	r3, r0
 800338e:	b29b      	uxth	r3, r3
 8003390:	61bb      	str	r3, [r7, #24]
        break;
 8003392:	e037      	b.n	8003404 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	085b      	lsrs	r3, r3, #1
 800339a:	4a71      	ldr	r2, [pc, #452]	; (8003560 <UART_SetConfig+0x360>)
 800339c:	189a      	adds	r2, r3, r2
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	0019      	movs	r1, r3
 80033a4:	0010      	movs	r0, r2
 80033a6:	f7fc fead 	bl	8000104 <__udivsi3>
 80033aa:	0003      	movs	r3, r0
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	61bb      	str	r3, [r7, #24]
        break;
 80033b0:	e028      	b.n	8003404 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033b2:	f7fe ff4b 	bl	800224c <HAL_RCC_GetSysClockFreq>
 80033b6:	0003      	movs	r3, r0
 80033b8:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	005a      	lsls	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	085b      	lsrs	r3, r3, #1
 80033c4:	18d2      	adds	r2, r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	0019      	movs	r1, r3
 80033cc:	0010      	movs	r0, r2
 80033ce:	f7fc fe99 	bl	8000104 <__udivsi3>
 80033d2:	0003      	movs	r3, r0
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	61bb      	str	r3, [r7, #24]
        break;
 80033d8:	e014      	b.n	8003404 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	2280      	movs	r2, #128	; 0x80
 80033e2:	0252      	lsls	r2, r2, #9
 80033e4:	189a      	adds	r2, r3, r2
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	0019      	movs	r1, r3
 80033ec:	0010      	movs	r0, r2
 80033ee:	f7fc fe89 	bl	8000104 <__udivsi3>
 80033f2:	0003      	movs	r3, r0
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	61bb      	str	r3, [r7, #24]
        break;
 80033f8:	e004      	b.n	8003404 <UART_SetConfig+0x204>
      default:
        ret = HAL_ERROR;
 80033fa:	2317      	movs	r3, #23
 80033fc:	18fb      	adds	r3, r7, r3
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]
        break;
 8003402:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	2b0f      	cmp	r3, #15
 8003408:	d91b      	bls.n	8003442 <UART_SetConfig+0x242>
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	4a55      	ldr	r2, [pc, #340]	; (8003564 <UART_SetConfig+0x364>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d817      	bhi.n	8003442 <UART_SetConfig+0x242>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	b29a      	uxth	r2, r3
 8003416:	200a      	movs	r0, #10
 8003418:	183b      	adds	r3, r7, r0
 800341a:	210f      	movs	r1, #15
 800341c:	438a      	bics	r2, r1
 800341e:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	085b      	lsrs	r3, r3, #1
 8003424:	b29b      	uxth	r3, r3
 8003426:	2207      	movs	r2, #7
 8003428:	4013      	ands	r3, r2
 800342a:	b299      	uxth	r1, r3
 800342c:	183b      	adds	r3, r7, r0
 800342e:	183a      	adds	r2, r7, r0
 8003430:	8812      	ldrh	r2, [r2, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	183a      	adds	r2, r7, r0
 800343c:	8812      	ldrh	r2, [r2, #0]
 800343e:	60da      	str	r2, [r3, #12]
 8003440:	e06c      	b.n	800351c <UART_SetConfig+0x31c>
    }
    else
    {
      ret = HAL_ERROR;
 8003442:	2317      	movs	r3, #23
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	2201      	movs	r2, #1
 8003448:	701a      	strb	r2, [r3, #0]
 800344a:	e067      	b.n	800351c <UART_SetConfig+0x31c>
    }
  }
  else
  {
    switch (clocksource)
 800344c:	231f      	movs	r3, #31
 800344e:	18fb      	adds	r3, r7, r3
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d01b      	beq.n	800348e <UART_SetConfig+0x28e>
 8003456:	dc02      	bgt.n	800345e <UART_SetConfig+0x25e>
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <UART_SetConfig+0x268>
 800345c:	e049      	b.n	80034f2 <UART_SetConfig+0x2f2>
 800345e:	2b04      	cmp	r3, #4
 8003460:	d024      	beq.n	80034ac <UART_SetConfig+0x2ac>
 8003462:	2b08      	cmp	r3, #8
 8003464:	d035      	beq.n	80034d2 <UART_SetConfig+0x2d2>
 8003466:	e044      	b.n	80034f2 <UART_SetConfig+0x2f2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003468:	f7fe ff60 	bl	800232c <HAL_RCC_GetPCLK1Freq>
 800346c:	0003      	movs	r3, r0
 800346e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	085a      	lsrs	r2, r3, #1
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	18d2      	adds	r2, r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	0019      	movs	r1, r3
 8003480:	0010      	movs	r0, r2
 8003482:	f7fc fe3f 	bl	8000104 <__udivsi3>
 8003486:	0003      	movs	r3, r0
 8003488:	b29b      	uxth	r3, r3
 800348a:	61bb      	str	r3, [r7, #24]
        break;
 800348c:	e036      	b.n	80034fc <UART_SetConfig+0x2fc>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	085b      	lsrs	r3, r3, #1
 8003494:	4a34      	ldr	r2, [pc, #208]	; (8003568 <UART_SetConfig+0x368>)
 8003496:	189a      	adds	r2, r3, r2
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	0019      	movs	r1, r3
 800349e:	0010      	movs	r0, r2
 80034a0:	f7fc fe30 	bl	8000104 <__udivsi3>
 80034a4:	0003      	movs	r3, r0
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	61bb      	str	r3, [r7, #24]
        break;
 80034aa:	e027      	b.n	80034fc <UART_SetConfig+0x2fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ac:	f7fe fece 	bl	800224c <HAL_RCC_GetSysClockFreq>
 80034b0:	0003      	movs	r3, r0
 80034b2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	085a      	lsrs	r2, r3, #1
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	18d2      	adds	r2, r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	0019      	movs	r1, r3
 80034c4:	0010      	movs	r0, r2
 80034c6:	f7fc fe1d 	bl	8000104 <__udivsi3>
 80034ca:	0003      	movs	r3, r0
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	61bb      	str	r3, [r7, #24]
        break;
 80034d0:	e014      	b.n	80034fc <UART_SetConfig+0x2fc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	085b      	lsrs	r3, r3, #1
 80034d8:	2280      	movs	r2, #128	; 0x80
 80034da:	0212      	lsls	r2, r2, #8
 80034dc:	189a      	adds	r2, r3, r2
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	0019      	movs	r1, r3
 80034e4:	0010      	movs	r0, r2
 80034e6:	f7fc fe0d 	bl	8000104 <__udivsi3>
 80034ea:	0003      	movs	r3, r0
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	61bb      	str	r3, [r7, #24]
        break;
 80034f0:	e004      	b.n	80034fc <UART_SetConfig+0x2fc>
      default:
        ret = HAL_ERROR;
 80034f2:	2317      	movs	r3, #23
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	2201      	movs	r2, #1
 80034f8:	701a      	strb	r2, [r3, #0]
        break;
 80034fa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	2b0f      	cmp	r3, #15
 8003500:	d908      	bls.n	8003514 <UART_SetConfig+0x314>
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	4a17      	ldr	r2, [pc, #92]	; (8003564 <UART_SetConfig+0x364>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d804      	bhi.n	8003514 <UART_SetConfig+0x314>
    {
      huart->Instance->BRR = usartdiv;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	e003      	b.n	800351c <UART_SetConfig+0x31c>
    }
    else
    {
      ret = HAL_ERROR;
 8003514:	2317      	movs	r3, #23
 8003516:	18fb      	adds	r3, r7, r3
 8003518:	2201      	movs	r2, #1
 800351a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003528:	2317      	movs	r3, #23
 800352a:	18fb      	adds	r3, r7, r3
 800352c:	781b      	ldrb	r3, [r3, #0]
}
 800352e:	0018      	movs	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	b008      	add	sp, #32
 8003534:	bd80      	pop	{r7, pc}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	efff69f3 	.word	0xefff69f3
 800353c:	ffffcfff 	.word	0xffffcfff
 8003540:	fffff4ff 	.word	0xfffff4ff
 8003544:	40013800 	.word	0x40013800
 8003548:	40021000 	.word	0x40021000
 800354c:	40004400 	.word	0x40004400
 8003550:	40004800 	.word	0x40004800
 8003554:	40004c00 	.word	0x40004c00
 8003558:	40005000 	.word	0x40005000
 800355c:	40011400 	.word	0x40011400
 8003560:	00f42400 	.word	0x00f42400
 8003564:	0000ffff 	.word	0x0000ffff
 8003568:	007a1200 	.word	0x007a1200

0800356c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	2201      	movs	r2, #1
 800357a:	4013      	ands	r3, r2
 800357c:	d00b      	beq.n	8003596 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	4a4a      	ldr	r2, [pc, #296]	; (80036b0 <UART_AdvFeatureConfig+0x144>)
 8003586:	4013      	ands	r3, r2
 8003588:	0019      	movs	r1, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	2202      	movs	r2, #2
 800359c:	4013      	ands	r3, r2
 800359e:	d00b      	beq.n	80035b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	4a43      	ldr	r2, [pc, #268]	; (80036b4 <UART_AdvFeatureConfig+0x148>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	0019      	movs	r1, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	2204      	movs	r2, #4
 80035be:	4013      	ands	r3, r2
 80035c0:	d00b      	beq.n	80035da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	4a3b      	ldr	r2, [pc, #236]	; (80036b8 <UART_AdvFeatureConfig+0x14c>)
 80035ca:	4013      	ands	r3, r2
 80035cc:	0019      	movs	r1, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	2208      	movs	r2, #8
 80035e0:	4013      	ands	r3, r2
 80035e2:	d00b      	beq.n	80035fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4a34      	ldr	r2, [pc, #208]	; (80036bc <UART_AdvFeatureConfig+0x150>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	0019      	movs	r1, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	2210      	movs	r2, #16
 8003602:	4013      	ands	r3, r2
 8003604:	d00b      	beq.n	800361e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	4a2c      	ldr	r2, [pc, #176]	; (80036c0 <UART_AdvFeatureConfig+0x154>)
 800360e:	4013      	ands	r3, r2
 8003610:	0019      	movs	r1, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	2220      	movs	r2, #32
 8003624:	4013      	ands	r3, r2
 8003626:	d00b      	beq.n	8003640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	4a25      	ldr	r2, [pc, #148]	; (80036c4 <UART_AdvFeatureConfig+0x158>)
 8003630:	4013      	ands	r3, r2
 8003632:	0019      	movs	r1, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	2240      	movs	r2, #64	; 0x40
 8003646:	4013      	ands	r3, r2
 8003648:	d01d      	beq.n	8003686 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	4a1d      	ldr	r2, [pc, #116]	; (80036c8 <UART_AdvFeatureConfig+0x15c>)
 8003652:	4013      	ands	r3, r2
 8003654:	0019      	movs	r1, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	035b      	lsls	r3, r3, #13
 800366a:	429a      	cmp	r2, r3
 800366c:	d10b      	bne.n	8003686 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	4a15      	ldr	r2, [pc, #84]	; (80036cc <UART_AdvFeatureConfig+0x160>)
 8003676:	4013      	ands	r3, r2
 8003678:	0019      	movs	r1, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	2280      	movs	r2, #128	; 0x80
 800368c:	4013      	ands	r3, r2
 800368e:	d00b      	beq.n	80036a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	4a0e      	ldr	r2, [pc, #56]	; (80036d0 <UART_AdvFeatureConfig+0x164>)
 8003698:	4013      	ands	r3, r2
 800369a:	0019      	movs	r1, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	605a      	str	r2, [r3, #4]
  }
}
 80036a8:	46c0      	nop			; (mov r8, r8)
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b002      	add	sp, #8
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	fffdffff 	.word	0xfffdffff
 80036b4:	fffeffff 	.word	0xfffeffff
 80036b8:	fffbffff 	.word	0xfffbffff
 80036bc:	ffff7fff 	.word	0xffff7fff
 80036c0:	ffffefff 	.word	0xffffefff
 80036c4:	ffffdfff 	.word	0xffffdfff
 80036c8:	ffefffff 	.word	0xffefffff
 80036cc:	ff9fffff 	.word	0xff9fffff
 80036d0:	fff7ffff 	.word	0xfff7ffff

080036d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af02      	add	r7, sp, #8
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80036e2:	f7fd fd29 	bl	8001138 <HAL_GetTick>
 80036e6:	0003      	movs	r3, r0
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2208      	movs	r2, #8
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d10d      	bne.n	8003714 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	2380      	movs	r3, #128	; 0x80
 80036fc:	0399      	lsls	r1, r3, #14
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	4b16      	ldr	r3, [pc, #88]	; (800375c <UART_CheckIdleState+0x88>)
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	0013      	movs	r3, r2
 8003706:	2200      	movs	r2, #0
 8003708:	f000 f82a 	bl	8003760 <UART_WaitOnFlagUntilTimeout>
 800370c:	1e03      	subs	r3, r0, #0
 800370e:	d001      	beq.n	8003714 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e01f      	b.n	8003754 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2204      	movs	r2, #4
 800371c:	4013      	ands	r3, r2
 800371e:	2b04      	cmp	r3, #4
 8003720:	d10d      	bne.n	800373e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	2380      	movs	r3, #128	; 0x80
 8003726:	03d9      	lsls	r1, r3, #15
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	4b0c      	ldr	r3, [pc, #48]	; (800375c <UART_CheckIdleState+0x88>)
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	0013      	movs	r3, r2
 8003730:	2200      	movs	r2, #0
 8003732:	f000 f815 	bl	8003760 <UART_WaitOnFlagUntilTimeout>
 8003736:	1e03      	subs	r3, r0, #0
 8003738:	d001      	beq.n	800373e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e00a      	b.n	8003754 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2220      	movs	r2, #32
 8003748:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2270      	movs	r2, #112	; 0x70
 800374e:	2100      	movs	r1, #0
 8003750:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	0018      	movs	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	b004      	add	sp, #16
 800375a:	bd80      	pop	{r7, pc}
 800375c:	01ffffff 	.word	0x01ffffff

08003760 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	1dfb      	adds	r3, r7, #7
 800376e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003770:	e05d      	b.n	800382e <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	3301      	adds	r3, #1
 8003776:	d05a      	beq.n	800382e <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003778:	f7fd fcde 	bl	8001138 <HAL_GetTick>
 800377c:	0002      	movs	r2, r0
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	429a      	cmp	r2, r3
 8003786:	d302      	bcc.n	800378e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d11b      	bne.n	80037c6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	492f      	ldr	r1, [pc, #188]	; (8003858 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800379a:	400a      	ands	r2, r1
 800379c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2101      	movs	r1, #1
 80037aa:	438a      	bics	r2, r1
 80037ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2220      	movs	r2, #32
 80037b2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2270      	movs	r2, #112	; 0x70
 80037be:	2100      	movs	r1, #0
 80037c0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e043      	b.n	800384e <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2204      	movs	r2, #4
 80037ce:	4013      	ands	r3, r2
 80037d0:	d02d      	beq.n	800382e <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69da      	ldr	r2, [r3, #28]
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	401a      	ands	r2, r3
 80037de:	2380      	movs	r3, #128	; 0x80
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d123      	bne.n	800382e <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2280      	movs	r2, #128	; 0x80
 80037ec:	0112      	lsls	r2, r2, #4
 80037ee:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4917      	ldr	r1, [pc, #92]	; (8003858 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80037fc:	400a      	ands	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2101      	movs	r1, #1
 800380c:	438a      	bics	r2, r1
 800380e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2220      	movs	r2, #32
 800381a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2270      	movs	r2, #112	; 0x70
 8003826:	2100      	movs	r1, #0
 8003828:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e00f      	b.n	800384e <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	4013      	ands	r3, r2
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	425a      	negs	r2, r3
 800383e:	4153      	adcs	r3, r2
 8003840:	b2db      	uxtb	r3, r3
 8003842:	001a      	movs	r2, r3
 8003844:	1dfb      	adds	r3, r7, #7
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d092      	beq.n	8003772 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	b004      	add	sp, #16
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	fffffe5f 	.word	0xfffffe5f

0800385c <__libc_init_array>:
 800385c:	b570      	push	{r4, r5, r6, lr}
 800385e:	2600      	movs	r6, #0
 8003860:	4d0c      	ldr	r5, [pc, #48]	; (8003894 <__libc_init_array+0x38>)
 8003862:	4c0d      	ldr	r4, [pc, #52]	; (8003898 <__libc_init_array+0x3c>)
 8003864:	1b64      	subs	r4, r4, r5
 8003866:	10a4      	asrs	r4, r4, #2
 8003868:	42a6      	cmp	r6, r4
 800386a:	d109      	bne.n	8003880 <__libc_init_array+0x24>
 800386c:	2600      	movs	r6, #0
 800386e:	f000 f821 	bl	80038b4 <_init>
 8003872:	4d0a      	ldr	r5, [pc, #40]	; (800389c <__libc_init_array+0x40>)
 8003874:	4c0a      	ldr	r4, [pc, #40]	; (80038a0 <__libc_init_array+0x44>)
 8003876:	1b64      	subs	r4, r4, r5
 8003878:	10a4      	asrs	r4, r4, #2
 800387a:	42a6      	cmp	r6, r4
 800387c:	d105      	bne.n	800388a <__libc_init_array+0x2e>
 800387e:	bd70      	pop	{r4, r5, r6, pc}
 8003880:	00b3      	lsls	r3, r6, #2
 8003882:	58eb      	ldr	r3, [r5, r3]
 8003884:	4798      	blx	r3
 8003886:	3601      	adds	r6, #1
 8003888:	e7ee      	b.n	8003868 <__libc_init_array+0xc>
 800388a:	00b3      	lsls	r3, r6, #2
 800388c:	58eb      	ldr	r3, [r5, r3]
 800388e:	4798      	blx	r3
 8003890:	3601      	adds	r6, #1
 8003892:	e7f2      	b.n	800387a <__libc_init_array+0x1e>
 8003894:	08003904 	.word	0x08003904
 8003898:	08003904 	.word	0x08003904
 800389c:	08003904 	.word	0x08003904
 80038a0:	08003908 	.word	0x08003908

080038a4 <memset>:
 80038a4:	0003      	movs	r3, r0
 80038a6:	1812      	adds	r2, r2, r0
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d100      	bne.n	80038ae <memset+0xa>
 80038ac:	4770      	bx	lr
 80038ae:	7019      	strb	r1, [r3, #0]
 80038b0:	3301      	adds	r3, #1
 80038b2:	e7f9      	b.n	80038a8 <memset+0x4>

080038b4 <_init>:
 80038b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ba:	bc08      	pop	{r3}
 80038bc:	469e      	mov	lr, r3
 80038be:	4770      	bx	lr

080038c0 <_fini>:
 80038c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038c6:	bc08      	pop	{r3}
 80038c8:	469e      	mov	lr, r3
 80038ca:	4770      	bx	lr
