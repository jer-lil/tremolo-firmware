
Tremolo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080046b0  080046b0  000146b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046e8  080046e8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080046e8  080046e8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046e8  080046e8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046e8  080046e8  000146e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046ec  080046ec  000146ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080046f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b50  20000010  08004700  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b60  08004700  00020b60  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7b3  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cd3  00000000  00000000  0002c7eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e88  00000000  00000000  0002e4c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d90  00000000  00000000  0002f348  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000de9a  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aca2  00000000  00000000  0003df72  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005463d  00000000  00000000  00048c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009d251  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034cc  00000000  00000000  0009d2cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004698 	.word	0x08004698

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08004698 	.word	0x08004698

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f0:	b5b0      	push	{r4, r5, r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f6:	f001 f89d 	bl	8001534 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fa:	f000 f8e9 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fe:	f000 fc83 	bl	8000d08 <MX_GPIO_Init>
  MX_DMA_Init();
 8000402:	f000 fc5b 	bl	8000cbc <MX_DMA_Init>
  MX_ADC_Init();
 8000406:	f000 f945 	bl	8000694 <MX_ADC_Init>
  MX_SPI2_Init();
 800040a:	f000 fa5f 	bl	80008cc <MX_SPI2_Init>
  MX_TIM3_Init();
 800040e:	f000 faf1 	bl	80009f4 <MX_TIM3_Init>
  MX_TIM16_Init();
 8000412:	f000 fba1 	bl	8000b58 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000416:	f000 fc21 	bl	8000c5c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800041a:	f000 fa95 	bl	8000948 <MX_TIM1_Init>
  MX_SPI1_Init();
 800041e:	f000 fa17 	bl	8000850 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LED_RGB_Red_GPIO_Port, LED_RGB_Red_Pin, GPIO_PIN_SET);
 8000422:	2380      	movs	r3, #128	; 0x80
 8000424:	00db      	lsls	r3, r3, #3
 8000426:	485e      	ldr	r0, [pc, #376]	; (80005a0 <main+0x1b0>)
 8000428:	2201      	movs	r2, #1
 800042a:	0019      	movs	r1, r3
 800042c:	f002 f8b9 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RGB_Green_GPIO_Port, LED_RGB_Green_Pin, GPIO_PIN_SET);
 8000430:	2380      	movs	r3, #128	; 0x80
 8000432:	011b      	lsls	r3, r3, #4
 8000434:	485a      	ldr	r0, [pc, #360]	; (80005a0 <main+0x1b0>)
 8000436:	2201      	movs	r2, #1
 8000438:	0019      	movs	r1, r3
 800043a:	f002 f8b2 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RGB_Blue_GPIO_Port, LED_RGB_Blue_Pin, GPIO_PIN_SET);
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	015b      	lsls	r3, r3, #5
 8000442:	4857      	ldr	r0, [pc, #348]	; (80005a0 <main+0x1b0>)
 8000444:	2201      	movs	r2, #1
 8000446:	0019      	movs	r1, r3
 8000448:	f002 f8ab 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	01db      	lsls	r3, r3, #7
 8000450:	4853      	ldr	r0, [pc, #332]	; (80005a0 <main+0x1b0>)
 8000452:	2201      	movs	r2, #1
 8000454:	0019      	movs	r1, r3
 8000456:	f002 f8a4 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);
 800045a:	2380      	movs	r3, #128	; 0x80
 800045c:	019b      	lsls	r3, r3, #6
 800045e:	4850      	ldr	r0, [pc, #320]	; (80005a0 <main+0x1b0>)
 8000460:	2201      	movs	r2, #1
 8000462:	0019      	movs	r1, r3
 8000464:	f002 f89d 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BYP_RELAY_GPIO_Port, BYP_RELAY_Pin, GPIO_PIN_SET);
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	00db      	lsls	r3, r3, #3
 800046c:	484d      	ldr	r0, [pc, #308]	; (80005a4 <main+0x1b4>)
 800046e:	2201      	movs	r2, #1
 8000470:	0019      	movs	r1, r3
 8000472:	f002 f896 	bl	80025a2 <HAL_GPIO_WritePin>

  HAL_ADC_Start_DMA(&hadc, (uint32_t*)&Adc, 11);
 8000476:	494c      	ldr	r1, [pc, #304]	; (80005a8 <main+0x1b8>)
 8000478:	4b4c      	ldr	r3, [pc, #304]	; (80005ac <main+0x1bc>)
 800047a:	220b      	movs	r2, #11
 800047c:	0018      	movs	r0, r3
 800047e:	f001 f9fd 	bl	800187c <HAL_ADC_Start_DMA>


  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000482:	4b4b      	ldr	r3, [pc, #300]	; (80005b0 <main+0x1c0>)
 8000484:	2100      	movs	r1, #0
 8000486:	0018      	movs	r0, r3
 8000488:	f002 ff62 	bl	8003350 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim16, TIM_CHANNEL_1);
 800048c:	4b49      	ldr	r3, [pc, #292]	; (80005b4 <main+0x1c4>)
 800048e:	2100      	movs	r1, #0
 8000490:	0018      	movs	r0, r3
 8000492:	f002 fedd 	bl	8003250 <HAL_TIM_OC_Start>
  HAL_DMA_Start_IT(&hdma_tim16_ch1_up, (uint32_t)dma_wavetable, (uint32_t)&(TIM3->CCR1), WAVETABLE_WIDTH);
 8000496:	4948      	ldr	r1, [pc, #288]	; (80005b8 <main+0x1c8>)
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	00db      	lsls	r3, r3, #3
 800049c:	4a47      	ldr	r2, [pc, #284]	; (80005bc <main+0x1cc>)
 800049e:	4848      	ldr	r0, [pc, #288]	; (80005c0 <main+0x1d0>)
 80004a0:	f001 fda2 	bl	8001fe8 <HAL_DMA_Start_IT>
  __HAL_TIM_ENABLE_DMA(&htim16, TIM_DMA_CC1);
 80004a4:	4b43      	ldr	r3, [pc, #268]	; (80005b4 <main+0x1c4>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	68da      	ldr	r2, [r3, #12]
 80004aa:	4b42      	ldr	r3, [pc, #264]	; (80005b4 <main+0x1c4>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2180      	movs	r1, #128	; 0x80
 80004b0:	0089      	lsls	r1, r1, #2
 80004b2:	430a      	orrs	r2, r1
 80004b4:	60da      	str	r2, [r3, #12]
	  TIM16->ARR = new_period;
	   */
	  //HAL_UART_Transmit(&s_UARTHandle, buffer, sizeof(buffer), HAL_MAX_DELAY);


	  TIM_OC_InitTypeDef sConfigOC = {0};
 80004b6:	003b      	movs	r3, r7
 80004b8:	0018      	movs	r0, r3
 80004ba:	231c      	movs	r3, #28
 80004bc:	001a      	movs	r2, r3
 80004be:	2100      	movs	r1, #0
 80004c0:	f004 f8e2 	bl	8004688 <memset>
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004c4:	003b      	movs	r3, r7
 80004c6:	2260      	movs	r2, #96	; 0x60
 80004c8:	601a      	str	r2, [r3, #0]
	  //sConfigOC.Pulse = dma_wavetable[i];
	  sConfigOC.Pulse = 511;
 80004ca:	003b      	movs	r3, r7
 80004cc:	4a3d      	ldr	r2, [pc, #244]	; (80005c4 <main+0x1d4>)
 80004ce:	605a      	str	r2, [r3, #4]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004d0:	003b      	movs	r3, r7
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004d6:	003b      	movs	r3, r7
 80004d8:	2200      	movs	r2, #0
 80004da:	611a      	str	r2, [r3, #16]

	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004dc:	0039      	movs	r1, r7
 80004de:	4b34      	ldr	r3, [pc, #208]	; (80005b0 <main+0x1c0>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	0018      	movs	r0, r3
 80004e4:	f002 ffce 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 80004e8:	1e03      	subs	r3, r0, #0
 80004ea:	d001      	beq.n	80004f0 <main+0x100>
	  {
		  Error_Handler();
 80004ec:	f000 fcea 	bl	8000ec4 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004f0:	0039      	movs	r1, r7
 80004f2:	4b2f      	ldr	r3, [pc, #188]	; (80005b0 <main+0x1c0>)
 80004f4:	2204      	movs	r2, #4
 80004f6:	0018      	movs	r0, r3
 80004f8:	f002 ffc4 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 80004fc:	1e03      	subs	r3, r0, #0
 80004fe:	d001      	beq.n	8000504 <main+0x114>
	  {
		  Error_Handler();
 8000500:	f000 fce0 	bl	8000ec4 <Error_Handler>
	  }
	  //sConfigOC.Pulse = PWM_PERIOD - dma_wavetable[i];
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000504:	0039      	movs	r1, r7
 8000506:	4b2a      	ldr	r3, [pc, #168]	; (80005b0 <main+0x1c0>)
 8000508:	2208      	movs	r2, #8
 800050a:	0018      	movs	r0, r3
 800050c:	f002 ffba 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 8000510:	1e03      	subs	r3, r0, #0
 8000512:	d001      	beq.n	8000518 <main+0x128>
	  {
		  Error_Handler();
 8000514:	f000 fcd6 	bl	8000ec4 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000518:	0039      	movs	r1, r7
 800051a:	4b25      	ldr	r3, [pc, #148]	; (80005b0 <main+0x1c0>)
 800051c:	220c      	movs	r2, #12
 800051e:	0018      	movs	r0, r3
 8000520:	f002 ffb0 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d001      	beq.n	800052c <main+0x13c>
	  {
		  Error_Handler();
 8000528:	f000 fccc 	bl	8000ec4 <Error_Handler>
	  }


		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800052c:	4b20      	ldr	r3, [pc, #128]	; (80005b0 <main+0x1c0>)
 800052e:	2100      	movs	r1, #0
 8000530:	0018      	movs	r0, r3
 8000532:	f002 ff0d 	bl	8003350 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000536:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <main+0x1c0>)
 8000538:	2104      	movs	r1, #4
 800053a:	0018      	movs	r0, r3
 800053c:	f002 ff08 	bl	8003350 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <main+0x1c0>)
 8000542:	2108      	movs	r1, #8
 8000544:	0018      	movs	r0, r3
 8000546:	f002 ff03 	bl	8003350 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800054a:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <main+0x1c0>)
 800054c:	210c      	movs	r1, #12
 800054e:	0018      	movs	r0, r3
 8000550:	f002 fefe 	bl	8003350 <HAL_TIM_PWM_Start>


	  GPIO_PinState bypass_state = HAL_GPIO_ReadPin(BYPASS_GPIO_Port, BYPASS_Pin);
 8000554:	251f      	movs	r5, #31
 8000556:	197c      	adds	r4, r7, r5
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <main+0x1b4>)
 800055a:	2101      	movs	r1, #1
 800055c:	0018      	movs	r0, r3
 800055e:	f002 f803 	bl	8002568 <HAL_GPIO_ReadPin>
 8000562:	0003      	movs	r3, r0
 8000564:	7023      	strb	r3, [r4, #0]
	  HAL_GPIO_WritePin(LED_RGB_Red_GPIO_Port, LED_RGB_Red_Pin, bypass_state);
 8000566:	197b      	adds	r3, r7, r5
 8000568:	781a      	ldrb	r2, [r3, #0]
 800056a:	2380      	movs	r3, #128	; 0x80
 800056c:	00db      	lsls	r3, r3, #3
 800056e:	480c      	ldr	r0, [pc, #48]	; (80005a0 <main+0x1b0>)
 8000570:	0019      	movs	r1, r3
 8000572:	f002 f816 	bl	80025a2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BYP_RELAY_GPIO_Port, BYP_RELAY_Pin, bypass_state);
 8000576:	197b      	adds	r3, r7, r5
 8000578:	781a      	ldrb	r2, [r3, #0]
 800057a:	2380      	movs	r3, #128	; 0x80
 800057c:	00db      	lsls	r3, r3, #3
 800057e:	4809      	ldr	r0, [pc, #36]	; (80005a4 <main+0x1b4>)
 8000580:	0019      	movs	r1, r3
 8000582:	f002 f80e 	bl	80025a2 <HAL_GPIO_WritePin>


	  i = (i + 1) % 1023;
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <main+0x1d8>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	490f      	ldr	r1, [pc, #60]	; (80005cc <main+0x1dc>)
 800058e:	0018      	movs	r0, r3
 8000590:	f7ff ff28 	bl	80003e4 <__aeabi_idivmod>
 8000594:	000b      	movs	r3, r1
 8000596:	001a      	movs	r2, r3
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <main+0x1d8>)
 800059a:	601a      	str	r2, [r3, #0]
  {
 800059c:	e78b      	b.n	80004b6 <main+0xc6>
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	48000800 	.word	0x48000800
 80005a4:	48000400 	.word	0x48000400
 80005a8:	200008d0 	.word	0x200008d0
 80005ac:	20000a98 	.word	0x20000a98
 80005b0:	20000890 	.word	0x20000890
 80005b4:	20000ad8 	.word	0x20000ad8
 80005b8:	2000002c 	.word	0x2000002c
 80005bc:	40000434 	.word	0x40000434
 80005c0:	20000b18 	.word	0x20000b18
 80005c4:	000001ff 	.word	0x000001ff
 80005c8:	20000000 	.word	0x20000000
 80005cc:	000003ff 	.word	0x000003ff

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b095      	sub	sp, #84	; 0x54
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	2420      	movs	r4, #32
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	0018      	movs	r0, r3
 80005dc:	2330      	movs	r3, #48	; 0x30
 80005de:	001a      	movs	r2, r3
 80005e0:	2100      	movs	r1, #0
 80005e2:	f004 f851 	bl	8004688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e6:	2310      	movs	r3, #16
 80005e8:	18fb      	adds	r3, r7, r3
 80005ea:	0018      	movs	r0, r3
 80005ec:	2310      	movs	r3, #16
 80005ee:	001a      	movs	r2, r3
 80005f0:	2100      	movs	r1, #0
 80005f2:	f004 f849 	bl	8004688 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f6:	003b      	movs	r3, r7
 80005f8:	0018      	movs	r0, r3
 80005fa:	2310      	movs	r3, #16
 80005fc:	001a      	movs	r2, r3
 80005fe:	2100      	movs	r1, #0
 8000600:	f004 f842 	bl	8004688 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	0021      	movs	r1, r4
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2202      	movs	r2, #2
 800060a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2201      	movs	r2, #1
 8000610:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2210      	movs	r2, #16
 8000616:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2202      	movs	r2, #2
 800061c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2280      	movs	r2, #128	; 0x80
 8000622:	0212      	lsls	r2, r2, #8
 8000624:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2280      	movs	r2, #128	; 0x80
 800062a:	0352      	lsls	r2, r2, #13
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2200      	movs	r2, #0
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	187b      	adds	r3, r7, r1
 8000636:	0018      	movs	r0, r3
 8000638:	f001 ffd0 	bl	80025dc <HAL_RCC_OscConfig>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000640:	f000 fc40 	bl	8000ec4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	2110      	movs	r1, #16
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2207      	movs	r2, #7
 800064a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2202      	movs	r2, #2
 8000650:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2101      	movs	r1, #1
 8000662:	0018      	movs	r0, r3
 8000664:	f002 fad8 	bl	8002c18 <HAL_RCC_ClockConfig>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800066c:	f000 fc2a 	bl	8000ec4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000670:	003b      	movs	r3, r7
 8000672:	2201      	movs	r2, #1
 8000674:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000676:	003b      	movs	r3, r7
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800067c:	003b      	movs	r3, r7
 800067e:	0018      	movs	r0, r3
 8000680:	f002 fc1e 	bl	8002ec0 <HAL_RCCEx_PeriphCLKConfig>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000688:	f000 fc1c 	bl	8000ec4 <Error_Handler>
  }
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	b015      	add	sp, #84	; 0x54
 8000692:	bd90      	pop	{r4, r7, pc}

08000694 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	0018      	movs	r0, r3
 800069e:	230c      	movs	r3, #12
 80006a0:	001a      	movs	r2, r3
 80006a2:	2100      	movs	r1, #0
 80006a4:	f003 fff0 	bl	8004688 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80006a8:	4b67      	ldr	r3, [pc, #412]	; (8000848 <MX_ADC_Init+0x1b4>)
 80006aa:	4a68      	ldr	r2, [pc, #416]	; (800084c <MX_ADC_Init+0x1b8>)
 80006ac:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006ae:	4b66      	ldr	r3, [pc, #408]	; (8000848 <MX_ADC_Init+0x1b4>)
 80006b0:	2280      	movs	r2, #128	; 0x80
 80006b2:	0612      	lsls	r2, r2, #24
 80006b4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 80006b6:	4b64      	ldr	r3, [pc, #400]	; (8000848 <MX_ADC_Init+0x1b4>)
 80006b8:	2208      	movs	r2, #8
 80006ba:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006bc:	4b62      	ldr	r3, [pc, #392]	; (8000848 <MX_ADC_Init+0x1b4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80006c2:	4b61      	ldr	r3, [pc, #388]	; (8000848 <MX_ADC_Init+0x1b4>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c8:	4b5f      	ldr	r3, [pc, #380]	; (8000848 <MX_ADC_Init+0x1b4>)
 80006ca:	2204      	movs	r2, #4
 80006cc:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80006ce:	4b5e      	ldr	r3, [pc, #376]	; (8000848 <MX_ADC_Init+0x1b4>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80006d4:	4b5c      	ldr	r3, [pc, #368]	; (8000848 <MX_ADC_Init+0x1b4>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80006da:	4b5b      	ldr	r3, [pc, #364]	; (8000848 <MX_ADC_Init+0x1b4>)
 80006dc:	2201      	movs	r2, #1
 80006de:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80006e0:	4b59      	ldr	r3, [pc, #356]	; (8000848 <MX_ADC_Init+0x1b4>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e6:	4b58      	ldr	r3, [pc, #352]	; (8000848 <MX_ADC_Init+0x1b4>)
 80006e8:	22c2      	movs	r2, #194	; 0xc2
 80006ea:	32ff      	adds	r2, #255	; 0xff
 80006ec:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ee:	4b56      	ldr	r3, [pc, #344]	; (8000848 <MX_ADC_Init+0x1b4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80006f4:	4b54      	ldr	r3, [pc, #336]	; (8000848 <MX_ADC_Init+0x1b4>)
 80006f6:	2224      	movs	r2, #36	; 0x24
 80006f8:	2101      	movs	r1, #1
 80006fa:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006fc:	4b52      	ldr	r3, [pc, #328]	; (8000848 <MX_ADC_Init+0x1b4>)
 80006fe:	2201      	movs	r2, #1
 8000700:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000702:	4b51      	ldr	r3, [pc, #324]	; (8000848 <MX_ADC_Init+0x1b4>)
 8000704:	0018      	movs	r0, r3
 8000706:	f000 ff79 	bl	80015fc <HAL_ADC_Init>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 800070e:	f000 fbd9 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	0152      	lsls	r2, r2, #5
 800071e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2204      	movs	r2, #4
 8000724:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000726:	1d3a      	adds	r2, r7, #4
 8000728:	4b47      	ldr	r3, [pc, #284]	; (8000848 <MX_ADC_Init+0x1b4>)
 800072a:	0011      	movs	r1, r2
 800072c:	0018      	movs	r0, r3
 800072e:	f001 f93f 	bl	80019b0 <HAL_ADC_ConfigChannel>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000736:	f000 fbc5 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2201      	movs	r2, #1
 800073e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000740:	1d3a      	adds	r2, r7, #4
 8000742:	4b41      	ldr	r3, [pc, #260]	; (8000848 <MX_ADC_Init+0x1b4>)
 8000744:	0011      	movs	r1, r2
 8000746:	0018      	movs	r0, r3
 8000748:	f001 f932 	bl	80019b0 <HAL_ADC_ConfigChannel>
 800074c:	1e03      	subs	r3, r0, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000750:	f000 fbb8 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2202      	movs	r2, #2
 8000758:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800075a:	1d3a      	adds	r2, r7, #4
 800075c:	4b3a      	ldr	r3, [pc, #232]	; (8000848 <MX_ADC_Init+0x1b4>)
 800075e:	0011      	movs	r1, r2
 8000760:	0018      	movs	r0, r3
 8000762:	f001 f925 	bl	80019b0 <HAL_ADC_ConfigChannel>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 800076a:	f000 fbab 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2203      	movs	r2, #3
 8000772:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000774:	1d3a      	adds	r2, r7, #4
 8000776:	4b34      	ldr	r3, [pc, #208]	; (8000848 <MX_ADC_Init+0x1b4>)
 8000778:	0011      	movs	r1, r2
 800077a:	0018      	movs	r0, r3
 800077c:	f001 f918 	bl	80019b0 <HAL_ADC_ConfigChannel>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000784:	f000 fb9e 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2204      	movs	r2, #4
 800078c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800078e:	1d3a      	adds	r2, r7, #4
 8000790:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <MX_ADC_Init+0x1b4>)
 8000792:	0011      	movs	r1, r2
 8000794:	0018      	movs	r0, r3
 8000796:	f001 f90b 	bl	80019b0 <HAL_ADC_ConfigChannel>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 800079e:	f000 fb91 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2206      	movs	r2, #6
 80007a6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007a8:	1d3a      	adds	r2, r7, #4
 80007aa:	4b27      	ldr	r3, [pc, #156]	; (8000848 <MX_ADC_Init+0x1b4>)
 80007ac:	0011      	movs	r1, r2
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 f8fe 	bl	80019b0 <HAL_ADC_ConfigChannel>
 80007b4:	1e03      	subs	r3, r0, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC_Init+0x128>
  {
    Error_Handler();
 80007b8:	f000 fb84 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	220a      	movs	r2, #10
 80007c0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007c2:	1d3a      	adds	r2, r7, #4
 80007c4:	4b20      	ldr	r3, [pc, #128]	; (8000848 <MX_ADC_Init+0x1b4>)
 80007c6:	0011      	movs	r1, r2
 80007c8:	0018      	movs	r0, r3
 80007ca:	f001 f8f1 	bl	80019b0 <HAL_ADC_ConfigChannel>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 80007d2:	f000 fb77 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	220b      	movs	r2, #11
 80007da:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007dc:	1d3a      	adds	r2, r7, #4
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_ADC_Init+0x1b4>)
 80007e0:	0011      	movs	r1, r2
 80007e2:	0018      	movs	r0, r3
 80007e4:	f001 f8e4 	bl	80019b0 <HAL_ADC_ConfigChannel>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 80007ec:	f000 fb6a 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	220c      	movs	r2, #12
 80007f4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007f6:	1d3a      	adds	r2, r7, #4
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_ADC_Init+0x1b4>)
 80007fa:	0011      	movs	r1, r2
 80007fc:	0018      	movs	r0, r3
 80007fe:	f001 f8d7 	bl	80019b0 <HAL_ADC_ConfigChannel>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d001      	beq.n	800080a <MX_ADC_Init+0x176>
  {
    Error_Handler();
 8000806:	f000 fb5d 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	220d      	movs	r2, #13
 800080e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000810:	1d3a      	adds	r2, r7, #4
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <MX_ADC_Init+0x1b4>)
 8000814:	0011      	movs	r1, r2
 8000816:	0018      	movs	r0, r3
 8000818:	f001 f8ca 	bl	80019b0 <HAL_ADC_ConfigChannel>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8000820:	f000 fb50 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	220e      	movs	r2, #14
 8000828:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800082a:	1d3a      	adds	r2, r7, #4
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_ADC_Init+0x1b4>)
 800082e:	0011      	movs	r1, r2
 8000830:	0018      	movs	r0, r3
 8000832:	f001 f8bd 	bl	80019b0 <HAL_ADC_ConfigChannel>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 800083a:	f000 fb43 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	b004      	add	sp, #16
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	20000a98 	.word	0x20000a98
 800084c:	40012400 	.word	0x40012400

08000850 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_SPI1_Init+0x74>)
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <MX_SPI1_Init+0x78>)
 8000858:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_SPI1_Init+0x74>)
 800085c:	2282      	movs	r2, #130	; 0x82
 800085e:	0052      	lsls	r2, r2, #1
 8000860:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_SPI1_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MX_SPI1_Init+0x74>)
 800086a:	22e0      	movs	r2, #224	; 0xe0
 800086c:	00d2      	lsls	r2, r2, #3
 800086e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_SPI1_Init+0x74>)
 8000872:	2202      	movs	r2, #2
 8000874:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_SPI1_Init+0x74>)
 8000878:	2201      	movs	r2, #1
 800087a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_SPI1_Init+0x74>)
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	0092      	lsls	r2, r2, #2
 8000882:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_SPI1_Init+0x74>)
 8000886:	2228      	movs	r2, #40	; 0x28
 8000888:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_SPI1_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_SPI1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_SPI1_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_SPI1_Init+0x74>)
 800089e:	2207      	movs	r2, #7
 80008a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_SPI1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_SPI1_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ae:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <MX_SPI1_Init+0x74>)
 80008b0:	0018      	movs	r0, r3
 80008b2:	f002 fbd3 	bl	800305c <HAL_SPI_Init>
 80008b6:	1e03      	subs	r3, r0, #0
 80008b8:	d001      	beq.n	80008be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008ba:	f000 fb03 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200009f0 	.word	0x200009f0
 80008c8:	40013000 	.word	0x40013000

080008cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_SPI2_Init+0x74>)
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <MX_SPI2_Init+0x78>)
 80008d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_SPI2_Init+0x74>)
 80008d8:	2282      	movs	r2, #130	; 0x82
 80008da:	0052      	lsls	r2, r2, #1
 80008dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_SPI2_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_SPI2_Init+0x74>)
 80008e6:	22c0      	movs	r2, #192	; 0xc0
 80008e8:	0092      	lsls	r2, r2, #2
 80008ea:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_SPI2_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_SPI2_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_SPI2_Init+0x74>)
 80008fa:	2280      	movs	r2, #128	; 0x80
 80008fc:	02d2      	lsls	r2, r2, #11
 80008fe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_SPI2_Init+0x74>)
 8000902:	2210      	movs	r2, #16
 8000904:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_SPI2_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_SPI2_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_SPI2_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_SPI2_Init+0x74>)
 800091a:	2207      	movs	r2, #7
 800091c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_SPI2_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_SPI2_Init+0x74>)
 8000926:	2208      	movs	r2, #8
 8000928:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800092a:	4b05      	ldr	r3, [pc, #20]	; (8000940 <MX_SPI2_Init+0x74>)
 800092c:	0018      	movs	r0, r3
 800092e:	f002 fb95 	bl	800305c <HAL_SPI_Init>
 8000932:	1e03      	subs	r3, r0, #0
 8000934:	d001      	beq.n	800093a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000936:	f000 fac5 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2000082c 	.word	0x2000082c
 8000944:	40003800 	.word	0x40003800

08000948 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094e:	2308      	movs	r3, #8
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	0018      	movs	r0, r3
 8000954:	2310      	movs	r3, #16
 8000956:	001a      	movs	r2, r3
 8000958:	2100      	movs	r1, #0
 800095a:	f003 fe95 	bl	8004688 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095e:	003b      	movs	r3, r7
 8000960:	0018      	movs	r0, r3
 8000962:	2308      	movs	r3, #8
 8000964:	001a      	movs	r2, r3
 8000966:	2100      	movs	r1, #0
 8000968:	f003 fe8e 	bl	8004688 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <MX_TIM1_Init+0xa4>)
 800096e:	4a20      	ldr	r2, [pc, #128]	; (80009f0 <MX_TIM1_Init+0xa8>)
 8000970:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000972:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <MX_TIM1_Init+0xa4>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000978:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <MX_TIM1_Init+0xa4>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800097e:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_TIM1_Init+0xa4>)
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000984:	4b19      	ldr	r3, [pc, #100]	; (80009ec <MX_TIM1_Init+0xa4>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_TIM1_Init+0xa4>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_TIM1_Init+0xa4>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_TIM1_Init+0xa4>)
 8000998:	0018      	movs	r0, r3
 800099a:	f002 fbf9 	bl	8003190 <HAL_TIM_Base_Init>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80009a2:	f000 fa8f 	bl	8000ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a6:	2108      	movs	r1, #8
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2280      	movs	r2, #128	; 0x80
 80009ac:	0152      	lsls	r2, r2, #5
 80009ae:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009b0:	187a      	adds	r2, r7, r1
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_TIM1_Init+0xa4>)
 80009b4:	0011      	movs	r1, r2
 80009b6:	0018      	movs	r0, r3
 80009b8:	f002 fe1c 	bl	80035f4 <HAL_TIM_ConfigClockSource>
 80009bc:	1e03      	subs	r3, r0, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80009c0:	f000 fa80 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c4:	003b      	movs	r3, r7
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ca:	003b      	movs	r3, r7
 80009cc:	2200      	movs	r2, #0
 80009ce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009d0:	003a      	movs	r2, r7
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_TIM1_Init+0xa4>)
 80009d4:	0011      	movs	r1, r2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f003 f9fa 	bl	8003dd0 <HAL_TIMEx_MasterConfigSynchronization>
 80009dc:	1e03      	subs	r3, r0, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80009e0:	f000 fa70 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b006      	add	sp, #24
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200009b0 	.word	0x200009b0
 80009f0:	40012c00 	.word	0x40012c00

080009f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08e      	sub	sp, #56	; 0x38
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fa:	2328      	movs	r3, #40	; 0x28
 80009fc:	18fb      	adds	r3, r7, r3
 80009fe:	0018      	movs	r0, r3
 8000a00:	2310      	movs	r3, #16
 8000a02:	001a      	movs	r2, r3
 8000a04:	2100      	movs	r1, #0
 8000a06:	f003 fe3f 	bl	8004688 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0a:	2320      	movs	r3, #32
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	0018      	movs	r0, r3
 8000a10:	2308      	movs	r3, #8
 8000a12:	001a      	movs	r2, r3
 8000a14:	2100      	movs	r1, #0
 8000a16:	f003 fe37 	bl	8004688 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	231c      	movs	r3, #28
 8000a20:	001a      	movs	r2, r3
 8000a22:	2100      	movs	r1, #0
 8000a24:	f003 fe30 	bl	8004688 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a28:	4b49      	ldr	r3, [pc, #292]	; (8000b50 <MX_TIM3_Init+0x15c>)
 8000a2a:	4a4a      	ldr	r2, [pc, #296]	; (8000b54 <MX_TIM3_Init+0x160>)
 8000a2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a2e:	4b48      	ldr	r3, [pc, #288]	; (8000b50 <MX_TIM3_Init+0x15c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a34:	4b46      	ldr	r3, [pc, #280]	; (8000b50 <MX_TIM3_Init+0x15c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0x400;
 8000a3a:	4b45      	ldr	r3, [pc, #276]	; (8000b50 <MX_TIM3_Init+0x15c>)
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	00d2      	lsls	r2, r2, #3
 8000a40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a42:	4b43      	ldr	r3, [pc, #268]	; (8000b50 <MX_TIM3_Init+0x15c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a48:	4b41      	ldr	r3, [pc, #260]	; (8000b50 <MX_TIM3_Init+0x15c>)
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a4e:	4b40      	ldr	r3, [pc, #256]	; (8000b50 <MX_TIM3_Init+0x15c>)
 8000a50:	0018      	movs	r0, r3
 8000a52:	f002 fb9d 	bl	8003190 <HAL_TIM_Base_Init>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000a5a:	f000 fa33 	bl	8000ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a5e:	2128      	movs	r1, #40	; 0x28
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2280      	movs	r2, #128	; 0x80
 8000a64:	0152      	lsls	r2, r2, #5
 8000a66:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a68:	187a      	adds	r2, r7, r1
 8000a6a:	4b39      	ldr	r3, [pc, #228]	; (8000b50 <MX_TIM3_Init+0x15c>)
 8000a6c:	0011      	movs	r1, r2
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f002 fdc0 	bl	80035f4 <HAL_TIM_ConfigClockSource>
 8000a74:	1e03      	subs	r3, r0, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000a78:	f000 fa24 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a7c:	4b34      	ldr	r3, [pc, #208]	; (8000b50 <MX_TIM3_Init+0x15c>)
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f002 fc32 	bl	80032e8 <HAL_TIM_PWM_Init>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a88:	f000 fa1c 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2200      	movs	r2, #0
 8000a98:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a9a:	187a      	adds	r2, r7, r1
 8000a9c:	4b2c      	ldr	r3, [pc, #176]	; (8000b50 <MX_TIM3_Init+0x15c>)
 8000a9e:	0011      	movs	r1, r2
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f003 f995 	bl	8003dd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa6:	1e03      	subs	r3, r0, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000aaa:	f000 fa0b 	bl	8000ec4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2260      	movs	r2, #96	; 0x60
 8000ab2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac6:	1d39      	adds	r1, r7, #4
 8000ac8:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <MX_TIM3_Init+0x15c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	0018      	movs	r0, r3
 8000ace:	f002 fcd9 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000ad6:	f000 f9f5 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ada:	1d39      	adds	r1, r7, #4
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <MX_TIM3_Init+0x15c>)
 8000ade:	2204      	movs	r2, #4
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f002 fccf 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 8000ae6:	1e03      	subs	r3, r0, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 8000aea:	f000 f9eb 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aee:	1d39      	adds	r1, r7, #4
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <MX_TIM3_Init+0x15c>)
 8000af2:	2208      	movs	r2, #8
 8000af4:	0018      	movs	r0, r3
 8000af6:	f002 fcc5 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 8000afa:	1e03      	subs	r3, r0, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 8000afe:	f000 f9e1 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b02:	1d39      	adds	r1, r7, #4
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <MX_TIM3_Init+0x15c>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f002 fcbb 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 8000b0e:	1e03      	subs	r3, r0, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM3_Init+0x122>
  {
    Error_Handler();
 8000b12:	f000 f9d7 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_TIM3_Init+0x15c>)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f002 fc18 	bl	8003350 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_TIM3_Init+0x15c>)
 8000b22:	2104      	movs	r1, #4
 8000b24:	0018      	movs	r0, r3
 8000b26:	f002 fc13 	bl	8003350 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_TIM3_Init+0x15c>)
 8000b2c:	2108      	movs	r1, #8
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f002 fc0e 	bl	8003350 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_TIM3_Init+0x15c>)
 8000b36:	210c      	movs	r1, #12
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f002 fc09 	bl	8003350 <HAL_TIM_PWM_Start>


  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b3e:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <MX_TIM3_Init+0x15c>)
 8000b40:	0018      	movs	r0, r3
 8000b42:	f000 fbc3 	bl	80012cc <HAL_TIM_MspPostInit>

}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b00e      	add	sp, #56	; 0x38
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	20000890 	.word	0x20000890
 8000b54:	40000400 	.word	0x40000400

08000b58 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b090      	sub	sp, #64	; 0x40
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5e:	2324      	movs	r3, #36	; 0x24
 8000b60:	18fb      	adds	r3, r7, r3
 8000b62:	0018      	movs	r0, r3
 8000b64:	231c      	movs	r3, #28
 8000b66:	001a      	movs	r2, r3
 8000b68:	2100      	movs	r1, #0
 8000b6a:	f003 fd8d 	bl	8004688 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	0018      	movs	r0, r3
 8000b72:	2320      	movs	r3, #32
 8000b74:	001a      	movs	r2, r3
 8000b76:	2100      	movs	r1, #0
 8000b78:	f003 fd86 	bl	8004688 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b7c:	4b34      	ldr	r3, [pc, #208]	; (8000c50 <MX_TIM16_Init+0xf8>)
 8000b7e:	4a35      	ldr	r2, [pc, #212]	; (8000c54 <MX_TIM16_Init+0xfc>)
 8000b80:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2;
 8000b82:	4b33      	ldr	r3, [pc, #204]	; (8000c50 <MX_TIM16_Init+0xf8>)
 8000b84:	2202      	movs	r2, #2
 8000b86:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b88:	4b31      	ldr	r3, [pc, #196]	; (8000c50 <MX_TIM16_Init+0xf8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0xBFFF;
 8000b8e:	4b30      	ldr	r3, [pc, #192]	; (8000c50 <MX_TIM16_Init+0xf8>)
 8000b90:	4a31      	ldr	r2, [pc, #196]	; (8000c58 <MX_TIM16_Init+0x100>)
 8000b92:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b94:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <MX_TIM16_Init+0xf8>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b9a:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <MX_TIM16_Init+0xf8>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ba0:	4b2b      	ldr	r3, [pc, #172]	; (8000c50 <MX_TIM16_Init+0xf8>)
 8000ba2:	2280      	movs	r2, #128	; 0x80
 8000ba4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ba6:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <MX_TIM16_Init+0xf8>)
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f002 faf1 	bl	8003190 <HAL_TIM_Base_Init>
 8000bae:	1e03      	subs	r3, r0, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000bb2:	f000 f987 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000bb6:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <MX_TIM16_Init+0xf8>)
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f002 fb15 	bl	80031e8 <HAL_TIM_OC_Init>
 8000bbe:	1e03      	subs	r3, r0, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8000bc2:	f000 f97f 	bl	8000ec4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000bc6:	2124      	movs	r1, #36	; 0x24
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2200      	movs	r2, #0
 8000bea:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bf2:	1879      	adds	r1, r7, r1
 8000bf4:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <MX_TIM16_Init+0xf8>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f002 fbf5 	bl	80033e8 <HAL_TIM_OC_ConfigChannel>
 8000bfe:	1e03      	subs	r3, r0, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8000c02:	f000 f95f 	bl	8000ec4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2200      	movs	r2, #0
 8000c10:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2280      	movs	r2, #128	; 0x80
 8000c28:	0192      	lsls	r2, r2, #6
 8000c2a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000c32:	1d3a      	adds	r2, r7, #4
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_TIM16_Init+0xf8>)
 8000c36:	0011      	movs	r1, r2
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f003 f921 	bl	8003e80 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c3e:	1e03      	subs	r3, r0, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 8000c42:	f000 f93f 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b010      	add	sp, #64	; 0x40
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	20000ad8 	.word	0x20000ad8
 8000c54:	40014400 	.word	0x40014400
 8000c58:	0000bfff 	.word	0x0000bfff

08000c5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_USART1_UART_Init+0x58>)
 8000c62:	4a15      	ldr	r2, [pc, #84]	; (8000cb8 <MX_USART1_UART_Init+0x5c>)
 8000c64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_USART1_UART_Init+0x58>)
 8000c68:	22e1      	movs	r2, #225	; 0xe1
 8000c6a:	0252      	lsls	r2, r2, #9
 8000c6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_USART1_UART_Init+0x58>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_USART1_UART_Init+0x58>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_USART1_UART_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_USART1_UART_Init+0x58>)
 8000c82:	220c      	movs	r2, #12
 8000c84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_USART1_UART_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_USART1_UART_Init+0x58>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_USART1_UART_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_USART1_UART_Init+0x58>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c9e:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <MX_USART1_UART_Init+0x58>)
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f003 f94b 	bl	8003f3c <HAL_UART_Init>
 8000ca6:	1e03      	subs	r3, r0, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000caa:	f000 f90b 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000930 	.word	0x20000930
 8000cb8:	40013800 	.word	0x40013800

08000cbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <MX_DMA_Init+0x48>)
 8000cc4:	695a      	ldr	r2, [r3, #20]
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_DMA_Init+0x48>)
 8000cc8:	2101      	movs	r1, #1
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	615a      	str	r2, [r3, #20]
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <MX_DMA_Init+0x48>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2009      	movs	r0, #9
 8000ce0:	f001 f908 	bl	8001ef4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ce4:	2009      	movs	r0, #9
 8000ce6:	f001 f91a 	bl	8001f1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	200a      	movs	r0, #10
 8000cf0:	f001 f900 	bl	8001ef4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000cf4:	200a      	movs	r0, #10
 8000cf6:	f001 f912 	bl	8001f1e <HAL_NVIC_EnableIRQ>

}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b002      	add	sp, #8
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	40021000 	.word	0x40021000

08000d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b089      	sub	sp, #36	; 0x24
 8000d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0e:	240c      	movs	r4, #12
 8000d10:	193b      	adds	r3, r7, r4
 8000d12:	0018      	movs	r0, r3
 8000d14:	2314      	movs	r3, #20
 8000d16:	001a      	movs	r2, r3
 8000d18:	2100      	movs	r1, #0
 8000d1a:	f003 fcb5 	bl	8004688 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1e:	4b66      	ldr	r3, [pc, #408]	; (8000eb8 <MX_GPIO_Init+0x1b0>)
 8000d20:	695a      	ldr	r2, [r3, #20]
 8000d22:	4b65      	ldr	r3, [pc, #404]	; (8000eb8 <MX_GPIO_Init+0x1b0>)
 8000d24:	2180      	movs	r1, #128	; 0x80
 8000d26:	0309      	lsls	r1, r1, #12
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	615a      	str	r2, [r3, #20]
 8000d2c:	4b62      	ldr	r3, [pc, #392]	; (8000eb8 <MX_GPIO_Init+0x1b0>)
 8000d2e:	695a      	ldr	r2, [r3, #20]
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	031b      	lsls	r3, r3, #12
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b5f      	ldr	r3, [pc, #380]	; (8000eb8 <MX_GPIO_Init+0x1b0>)
 8000d3c:	695a      	ldr	r2, [r3, #20]
 8000d3e:	4b5e      	ldr	r3, [pc, #376]	; (8000eb8 <MX_GPIO_Init+0x1b0>)
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	0289      	lsls	r1, r1, #10
 8000d44:	430a      	orrs	r2, r1
 8000d46:	615a      	str	r2, [r3, #20]
 8000d48:	4b5b      	ldr	r3, [pc, #364]	; (8000eb8 <MX_GPIO_Init+0x1b0>)
 8000d4a:	695a      	ldr	r2, [r3, #20]
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	029b      	lsls	r3, r3, #10
 8000d50:	4013      	ands	r3, r2
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	4b58      	ldr	r3, [pc, #352]	; (8000eb8 <MX_GPIO_Init+0x1b0>)
 8000d58:	695a      	ldr	r2, [r3, #20]
 8000d5a:	4b57      	ldr	r3, [pc, #348]	; (8000eb8 <MX_GPIO_Init+0x1b0>)
 8000d5c:	2180      	movs	r1, #128	; 0x80
 8000d5e:	02c9      	lsls	r1, r1, #11
 8000d60:	430a      	orrs	r2, r1
 8000d62:	615a      	str	r2, [r3, #20]
 8000d64:	4b54      	ldr	r3, [pc, #336]	; (8000eb8 <MX_GPIO_Init+0x1b0>)
 8000d66:	695a      	ldr	r2, [r3, #20]
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	02db      	lsls	r3, r3, #11
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Green_Pin|LED_Red_Pin|LED_RGB_Red_Pin|LED_RGB_Green_Pin
 8000d72:	23f8      	movs	r3, #248	; 0xf8
 8000d74:	01db      	lsls	r3, r3, #7
 8000d76:	4851      	ldr	r0, [pc, #324]	; (8000ebc <MX_GPIO_Init+0x1b4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	0019      	movs	r1, r3
 8000d7c:	f001 fc11 	bl	80025a2 <HAL_GPIO_WritePin>
                          |LED_RGB_Blue_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BYP_RELAY_GPIO_Port, BYP_RELAY_Pin, GPIO_PIN_RESET);
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	484e      	ldr	r0, [pc, #312]	; (8000ec0 <MX_GPIO_Init+0x1b8>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	0019      	movs	r1, r3
 8000d8a:	f001 fc0a 	bl	80025a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_DC_GPIO_Port, SPI_DC_Pin, GPIO_PIN_SET);
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	011b      	lsls	r3, r3, #4
 8000d92:	484b      	ldr	r0, [pc, #300]	; (8000ec0 <MX_GPIO_Init+0x1b8>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	0019      	movs	r1, r3
 8000d98:	f001 fc03 	bl	80025a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_RST_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8000d9c:	2390      	movs	r3, #144	; 0x90
 8000d9e:	0119      	lsls	r1, r3, #4
 8000da0:	2390      	movs	r3, #144	; 0x90
 8000da2:	05db      	lsls	r3, r3, #23
 8000da4:	2200      	movs	r2, #0
 8000da6:	0018      	movs	r0, r3
 8000da8:	f001 fbfb 	bl	80025a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Green_Pin LED_Red_Pin LED_RGB_Red_Pin LED_RGB_Green_Pin
                           LED_RGB_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Red_Pin|LED_RGB_Red_Pin|LED_RGB_Green_Pin
 8000dac:	193b      	adds	r3, r7, r4
 8000dae:	22f8      	movs	r2, #248	; 0xf8
 8000db0:	01d2      	lsls	r2, r2, #7
 8000db2:	601a      	str	r2, [r3, #0]
                          |LED_RGB_Blue_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	193b      	adds	r3, r7, r4
 8000db6:	2201      	movs	r2, #1
 8000db8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	193b      	adds	r3, r7, r4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	0021      	movs	r1, r4
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc8:	000c      	movs	r4, r1
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	4a3b      	ldr	r2, [pc, #236]	; (8000ebc <MX_GPIO_Init+0x1b4>)
 8000dce:	0019      	movs	r1, r3
 8000dd0:	0010      	movs	r0, r2
 8000dd2:	f001 fa59 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXP_SW_Pin */
  GPIO_InitStruct.Pin = EXP_SW_Pin;
 8000dd6:	0021      	movs	r1, r4
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2220      	movs	r2, #32
 8000ddc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2200      	movs	r2, #0
 8000de2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	2201      	movs	r2, #1
 8000de8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(EXP_SW_GPIO_Port, &GPIO_InitStruct);
 8000dea:	000c      	movs	r4, r1
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	4a33      	ldr	r2, [pc, #204]	; (8000ebc <MX_GPIO_Init+0x1b4>)
 8000df0:	0019      	movs	r1, r3
 8000df2:	0010      	movs	r0, r2
 8000df4:	f001 fa48 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pins : BYPASS_Pin TAP_Pin HARM_SW_Pin PAN_SW_Pin */
  GPIO_InitStruct.Pin = BYPASS_Pin|TAP_Pin|HARM_SW_Pin|PAN_SW_Pin;
 8000df8:	0021      	movs	r1, r4
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	220f      	movs	r2, #15
 8000dfe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	2200      	movs	r2, #0
 8000e04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2201      	movs	r2, #1
 8000e0a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0c:	000c      	movs	r4, r1
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	4a2b      	ldr	r2, [pc, #172]	; (8000ec0 <MX_GPIO_Init+0x1b8>)
 8000e12:	0019      	movs	r1, r3
 8000e14:	0010      	movs	r0, r2
 8000e16:	f001 fa37 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pins : BYP_RELAY_Pin SPI_DC_Pin */
  GPIO_InitStruct.Pin = BYP_RELAY_Pin|SPI_DC_Pin;
 8000e1a:	0021      	movs	r1, r4
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	22c0      	movs	r2, #192	; 0xc0
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	2201      	movs	r2, #1
 8000e28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	187b      	adds	r3, r7, r1
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e36:	000c      	movs	r4, r1
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	4a21      	ldr	r2, [pc, #132]	; (8000ec0 <MX_GPIO_Init+0x1b8>)
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	0010      	movs	r0, r2
 8000e40:	f001 fa22 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_RST_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_RST_Pin|SPI_CS_Pin;
 8000e44:	0021      	movs	r1, r4
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	2290      	movs	r2, #144	; 0x90
 8000e4a:	0112      	lsls	r2, r2, #4
 8000e4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4e:	000c      	movs	r4, r1
 8000e50:	193b      	adds	r3, r7, r4
 8000e52:	2201      	movs	r2, #1
 8000e54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	193b      	adds	r3, r7, r4
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	193b      	adds	r3, r7, r4
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	193a      	adds	r2, r7, r4
 8000e64:	2390      	movs	r3, #144	; 0x90
 8000e66:	05db      	lsls	r3, r3, #23
 8000e68:	0011      	movs	r1, r2
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f001 fa0c 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_5_Pin GPIO_6_Pin */
  GPIO_InitStruct.Pin = GPIO_5_Pin|GPIO_6_Pin;
 8000e70:	193b      	adds	r3, r7, r4
 8000e72:	2290      	movs	r2, #144	; 0x90
 8000e74:	0212      	lsls	r2, r2, #8
 8000e76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e78:	193b      	adds	r3, r7, r4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	193a      	adds	r2, r7, r4
 8000e86:	2390      	movs	r3, #144	; 0x90
 8000e88:	05db      	lsls	r3, r3, #23
 8000e8a:	0011      	movs	r1, r2
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f001 f9fb 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pins : GP_SW_1_Pin GP_SW_2_Pin GP_SW_3_Pin GP_SW_4_Pin */
  GPIO_InitStruct.Pin = GP_SW_1_Pin|GP_SW_2_Pin|GP_SW_3_Pin|GP_SW_4_Pin;
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	22f0      	movs	r2, #240	; 0xf0
 8000e96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e98:	193b      	adds	r3, r7, r4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	193b      	adds	r3, r7, r4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea4:	193b      	adds	r3, r7, r4
 8000ea6:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <MX_GPIO_Init+0x1b8>)
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	0010      	movs	r0, r2
 8000eac:	f001 f9ec 	bl	8002288 <HAL_GPIO_Init>

}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b009      	add	sp, #36	; 0x24
 8000eb6:	bd90      	pop	{r4, r7, pc}
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	48000800 	.word	0x48000800
 8000ec0:	48000400 	.word	0x48000400

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <HAL_MspInit+0x44>)
 8000ed8:	699a      	ldr	r2, [r3, #24]
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <HAL_MspInit+0x44>)
 8000edc:	2101      	movs	r1, #1
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	619a      	str	r2, [r3, #24]
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <HAL_MspInit+0x44>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4013      	ands	r3, r2
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <HAL_MspInit+0x44>)
 8000ef0:	69da      	ldr	r2, [r3, #28]
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_MspInit+0x44>)
 8000ef4:	2180      	movs	r1, #128	; 0x80
 8000ef6:	0549      	lsls	r1, r1, #21
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	61da      	str	r2, [r3, #28]
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_MspInit+0x44>)
 8000efe:	69da      	ldr	r2, [r3, #28]
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	055b      	lsls	r3, r3, #21
 8000f04:	4013      	ands	r3, r2
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	40021000 	.word	0x40021000

08000f18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b08b      	sub	sp, #44	; 0x2c
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	2314      	movs	r3, #20
 8000f22:	18fb      	adds	r3, r7, r3
 8000f24:	0018      	movs	r0, r3
 8000f26:	2314      	movs	r3, #20
 8000f28:	001a      	movs	r2, r3
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	f003 fbac 	bl	8004688 <memset>
  if(hadc->Instance==ADC1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a45      	ldr	r2, [pc, #276]	; (800104c <HAL_ADC_MspInit+0x134>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d000      	beq.n	8000f3c <HAL_ADC_MspInit+0x24>
 8000f3a:	e083      	b.n	8001044 <HAL_ADC_MspInit+0x12c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f3c:	4b44      	ldr	r3, [pc, #272]	; (8001050 <HAL_ADC_MspInit+0x138>)
 8000f3e:	699a      	ldr	r2, [r3, #24]
 8000f40:	4b43      	ldr	r3, [pc, #268]	; (8001050 <HAL_ADC_MspInit+0x138>)
 8000f42:	2180      	movs	r1, #128	; 0x80
 8000f44:	0089      	lsls	r1, r1, #2
 8000f46:	430a      	orrs	r2, r1
 8000f48:	619a      	str	r2, [r3, #24]
 8000f4a:	4b41      	ldr	r3, [pc, #260]	; (8001050 <HAL_ADC_MspInit+0x138>)
 8000f4c:	699a      	ldr	r2, [r3, #24]
 8000f4e:	2380      	movs	r3, #128	; 0x80
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f58:	4b3d      	ldr	r3, [pc, #244]	; (8001050 <HAL_ADC_MspInit+0x138>)
 8000f5a:	695a      	ldr	r2, [r3, #20]
 8000f5c:	4b3c      	ldr	r3, [pc, #240]	; (8001050 <HAL_ADC_MspInit+0x138>)
 8000f5e:	2180      	movs	r1, #128	; 0x80
 8000f60:	0309      	lsls	r1, r1, #12
 8000f62:	430a      	orrs	r2, r1
 8000f64:	615a      	str	r2, [r3, #20]
 8000f66:	4b3a      	ldr	r3, [pc, #232]	; (8001050 <HAL_ADC_MspInit+0x138>)
 8000f68:	695a      	ldr	r2, [r3, #20]
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	031b      	lsls	r3, r3, #12
 8000f6e:	4013      	ands	r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f74:	4b36      	ldr	r3, [pc, #216]	; (8001050 <HAL_ADC_MspInit+0x138>)
 8000f76:	695a      	ldr	r2, [r3, #20]
 8000f78:	4b35      	ldr	r3, [pc, #212]	; (8001050 <HAL_ADC_MspInit+0x138>)
 8000f7a:	2180      	movs	r1, #128	; 0x80
 8000f7c:	0289      	lsls	r1, r1, #10
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	615a      	str	r2, [r3, #20]
 8000f82:	4b33      	ldr	r3, [pc, #204]	; (8001050 <HAL_ADC_MspInit+0x138>)
 8000f84:	695a      	ldr	r2, [r3, #20]
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	029b      	lsls	r3, r3, #10
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA6     ------> ADC_IN6
    PC4     ------> ADC_IN14
    */
    GPIO_InitStruct.Pin = LDRV_1_Pin|LDRV_2_Pin|LDRV_3_Pin|LDRV_4_Pin
 8000f90:	2114      	movs	r1, #20
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	221f      	movs	r2, #31
 8000f96:	601a      	str	r2, [r3, #0]
                          |EXP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa4:	000c      	movs	r4, r1
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	4a2a      	ldr	r2, [pc, #168]	; (8001054 <HAL_ADC_MspInit+0x13c>)
 8000faa:	0019      	movs	r1, r3
 8000fac:	0010      	movs	r0, r2
 8000fae:	f001 f96b 	bl	8002288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RATE_Pin|DEPTH_Pin|SHAPE_Pin|OFFSET_Pin
 8000fb2:	0021      	movs	r1, r4
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	225f      	movs	r2, #95	; 0x5f
 8000fb8:	601a      	str	r2, [r3, #0]
                          |SUBDIV_Pin|GP_AIN1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	187a      	adds	r2, r7, r1
 8000fc8:	2390      	movs	r3, #144	; 0x90
 8000fca:	05db      	lsls	r3, r3, #23
 8000fcc:	0011      	movs	r1, r2
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f001 f95a 	bl	8002288 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000fd4:	4b20      	ldr	r3, [pc, #128]	; (8001058 <HAL_ADC_MspInit+0x140>)
 8000fd6:	4a21      	ldr	r2, [pc, #132]	; (800105c <HAL_ADC_MspInit+0x144>)
 8000fd8:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fda:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <HAL_ADC_MspInit+0x140>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <HAL_ADC_MspInit+0x140>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <HAL_ADC_MspInit+0x140>)
 8000fe8:	2280      	movs	r2, #128	; 0x80
 8000fea:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fec:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <HAL_ADC_MspInit+0x140>)
 8000fee:	2280      	movs	r2, #128	; 0x80
 8000ff0:	0052      	lsls	r2, r2, #1
 8000ff2:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_ADC_MspInit+0x140>)
 8000ff6:	2280      	movs	r2, #128	; 0x80
 8000ff8:	00d2      	lsls	r2, r2, #3
 8000ffa:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <HAL_ADC_MspInit+0x140>)
 8000ffe:	2220      	movs	r2, #32
 8001000:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_ADC_MspInit+0x140>)
 8001004:	2200      	movs	r2, #0
 8001006:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <HAL_ADC_MspInit+0x140>)
 800100a:	0018      	movs	r0, r3
 800100c:	f000 ffa4 	bl	8001f58 <HAL_DMA_Init>
 8001010:	1e03      	subs	r3, r0, #0
 8001012:	d001      	beq.n	8001018 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8001014:	f7ff ff56 	bl	8000ec4 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 8001018:	4a11      	ldr	r2, [pc, #68]	; (8001060 <HAL_ADC_MspInit+0x148>)
 800101a:	23a8      	movs	r3, #168	; 0xa8
 800101c:	58d3      	ldr	r3, [r2, r3]
 800101e:	4910      	ldr	r1, [pc, #64]	; (8001060 <HAL_ADC_MspInit+0x148>)
 8001020:	220f      	movs	r2, #15
 8001022:	4393      	bics	r3, r2
 8001024:	22a8      	movs	r2, #168	; 0xa8
 8001026:	508b      	str	r3, [r1, r2]
 8001028:	4a0d      	ldr	r2, [pc, #52]	; (8001060 <HAL_ADC_MspInit+0x148>)
 800102a:	23a8      	movs	r3, #168	; 0xa8
 800102c:	58d3      	ldr	r3, [r2, r3]
 800102e:	490c      	ldr	r1, [pc, #48]	; (8001060 <HAL_ADC_MspInit+0x148>)
 8001030:	2201      	movs	r2, #1
 8001032:	4313      	orrs	r3, r2
 8001034:	22a8      	movs	r2, #168	; 0xa8
 8001036:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_ADC_MspInit+0x140>)
 800103c:	631a      	str	r2, [r3, #48]	; 0x30
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_ADC_MspInit+0x140>)
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001044:	46c0      	nop			; (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	b00b      	add	sp, #44	; 0x2c
 800104a:	bd90      	pop	{r4, r7, pc}
 800104c:	40012400 	.word	0x40012400
 8001050:	40021000 	.word	0x40021000
 8001054:	48000800 	.word	0x48000800
 8001058:	20000a54 	.word	0x20000a54
 800105c:	40020008 	.word	0x40020008
 8001060:	40020000 	.word	0x40020000

08001064 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001064:	b590      	push	{r4, r7, lr}
 8001066:	b08d      	sub	sp, #52	; 0x34
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	231c      	movs	r3, #28
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	0018      	movs	r0, r3
 8001072:	2314      	movs	r3, #20
 8001074:	001a      	movs	r2, r3
 8001076:	2100      	movs	r1, #0
 8001078:	f003 fb06 	bl	8004688 <memset>
  if(hspi->Instance==SPI1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a45      	ldr	r2, [pc, #276]	; (8001198 <HAL_SPI_MspInit+0x134>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d133      	bne.n	80010ee <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001086:	4b45      	ldr	r3, [pc, #276]	; (800119c <HAL_SPI_MspInit+0x138>)
 8001088:	699a      	ldr	r2, [r3, #24]
 800108a:	4b44      	ldr	r3, [pc, #272]	; (800119c <HAL_SPI_MspInit+0x138>)
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	0149      	lsls	r1, r1, #5
 8001090:	430a      	orrs	r2, r1
 8001092:	619a      	str	r2, [r3, #24]
 8001094:	4b41      	ldr	r3, [pc, #260]	; (800119c <HAL_SPI_MspInit+0x138>)
 8001096:	699a      	ldr	r2, [r3, #24]
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	015b      	lsls	r3, r3, #5
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
 80010a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	4b3e      	ldr	r3, [pc, #248]	; (800119c <HAL_SPI_MspInit+0x138>)
 80010a4:	695a      	ldr	r2, [r3, #20]
 80010a6:	4b3d      	ldr	r3, [pc, #244]	; (800119c <HAL_SPI_MspInit+0x138>)
 80010a8:	2180      	movs	r1, #128	; 0x80
 80010aa:	0289      	lsls	r1, r1, #10
 80010ac:	430a      	orrs	r2, r1
 80010ae:	615a      	str	r2, [r3, #20]
 80010b0:	4b3a      	ldr	r3, [pc, #232]	; (800119c <HAL_SPI_MspInit+0x138>)
 80010b2:	695a      	ldr	r2, [r3, #20]
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	029b      	lsls	r3, r3, #10
 80010b8:	4013      	ands	r3, r2
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010be:	211c      	movs	r1, #28
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	22a0      	movs	r2, #160	; 0xa0
 80010c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	187b      	adds	r3, r7, r1
 80010c8:	2202      	movs	r2, #2
 80010ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	187b      	adds	r3, r7, r1
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	2203      	movs	r2, #3
 80010d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	187a      	adds	r2, r7, r1
 80010e0:	2390      	movs	r3, #144	; 0x90
 80010e2:	05db      	lsls	r3, r3, #23
 80010e4:	0011      	movs	r1, r2
 80010e6:	0018      	movs	r0, r3
 80010e8:	f001 f8ce 	bl	8002288 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010ec:	e04f      	b.n	800118e <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a2b      	ldr	r2, [pc, #172]	; (80011a0 <HAL_SPI_MspInit+0x13c>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d14a      	bne.n	800118e <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010f8:	4b28      	ldr	r3, [pc, #160]	; (800119c <HAL_SPI_MspInit+0x138>)
 80010fa:	69da      	ldr	r2, [r3, #28]
 80010fc:	4b27      	ldr	r3, [pc, #156]	; (800119c <HAL_SPI_MspInit+0x138>)
 80010fe:	2180      	movs	r1, #128	; 0x80
 8001100:	01c9      	lsls	r1, r1, #7
 8001102:	430a      	orrs	r2, r1
 8001104:	61da      	str	r2, [r3, #28]
 8001106:	4b25      	ldr	r3, [pc, #148]	; (800119c <HAL_SPI_MspInit+0x138>)
 8001108:	69da      	ldr	r2, [r3, #28]
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	01db      	lsls	r3, r3, #7
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001114:	4b21      	ldr	r3, [pc, #132]	; (800119c <HAL_SPI_MspInit+0x138>)
 8001116:	695a      	ldr	r2, [r3, #20]
 8001118:	4b20      	ldr	r3, [pc, #128]	; (800119c <HAL_SPI_MspInit+0x138>)
 800111a:	2180      	movs	r1, #128	; 0x80
 800111c:	02c9      	lsls	r1, r1, #11
 800111e:	430a      	orrs	r2, r1
 8001120:	615a      	str	r2, [r3, #20]
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <HAL_SPI_MspInit+0x138>)
 8001124:	695a      	ldr	r2, [r3, #20]
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	02db      	lsls	r3, r3, #11
 800112a:	4013      	ands	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001130:	211c      	movs	r1, #28
 8001132:	187b      	adds	r3, r7, r1
 8001134:	2280      	movs	r2, #128	; 0x80
 8001136:	0152      	lsls	r2, r2, #5
 8001138:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	187b      	adds	r3, r7, r1
 800113c:	2202      	movs	r2, #2
 800113e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001140:	187b      	adds	r3, r7, r1
 8001142:	2201      	movs	r2, #1
 8001144:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001146:	187b      	adds	r3, r7, r1
 8001148:	2203      	movs	r2, #3
 800114a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800114c:	187b      	adds	r3, r7, r1
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001152:	000c      	movs	r4, r1
 8001154:	187b      	adds	r3, r7, r1
 8001156:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <HAL_SPI_MspInit+0x140>)
 8001158:	0019      	movs	r1, r3
 800115a:	0010      	movs	r0, r2
 800115c:	f001 f894 	bl	8002288 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001160:	0021      	movs	r1, r4
 8001162:	187b      	adds	r3, r7, r1
 8001164:	22e0      	movs	r2, #224	; 0xe0
 8001166:	0212      	lsls	r2, r2, #8
 8001168:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	187b      	adds	r3, r7, r1
 800116c:	2202      	movs	r2, #2
 800116e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	187b      	adds	r3, r7, r1
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001176:	187b      	adds	r3, r7, r1
 8001178:	2203      	movs	r2, #3
 800117a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800117c:	187b      	adds	r3, r7, r1
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	187b      	adds	r3, r7, r1
 8001184:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <HAL_SPI_MspInit+0x140>)
 8001186:	0019      	movs	r1, r3
 8001188:	0010      	movs	r0, r2
 800118a:	f001 f87d 	bl	8002288 <HAL_GPIO_Init>
}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	46bd      	mov	sp, r7
 8001192:	b00d      	add	sp, #52	; 0x34
 8001194:	bd90      	pop	{r4, r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	40013000 	.word	0x40013000
 800119c:	40021000 	.word	0x40021000
 80011a0:	40003800 	.word	0x40003800
 80011a4:	48000400 	.word	0x48000400

080011a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a3d      	ldr	r2, [pc, #244]	; (80012ac <HAL_TIM_Base_MspInit+0x104>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d10e      	bne.n	80011d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ba:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <HAL_TIM_Base_MspInit+0x108>)
 80011bc:	699a      	ldr	r2, [r3, #24]
 80011be:	4b3c      	ldr	r3, [pc, #240]	; (80012b0 <HAL_TIM_Base_MspInit+0x108>)
 80011c0:	2180      	movs	r1, #128	; 0x80
 80011c2:	0109      	lsls	r1, r1, #4
 80011c4:	430a      	orrs	r2, r1
 80011c6:	619a      	str	r2, [r3, #24]
 80011c8:	4b39      	ldr	r3, [pc, #228]	; (80012b0 <HAL_TIM_Base_MspInit+0x108>)
 80011ca:	699a      	ldr	r2, [r3, #24]
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	011b      	lsls	r3, r3, #4
 80011d0:	4013      	ands	r3, r2
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80011d6:	e064      	b.n	80012a2 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM3)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a35      	ldr	r2, [pc, #212]	; (80012b4 <HAL_TIM_Base_MspInit+0x10c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d10c      	bne.n	80011fc <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011e2:	4b33      	ldr	r3, [pc, #204]	; (80012b0 <HAL_TIM_Base_MspInit+0x108>)
 80011e4:	69da      	ldr	r2, [r3, #28]
 80011e6:	4b32      	ldr	r3, [pc, #200]	; (80012b0 <HAL_TIM_Base_MspInit+0x108>)
 80011e8:	2102      	movs	r1, #2
 80011ea:	430a      	orrs	r2, r1
 80011ec:	61da      	str	r2, [r3, #28]
 80011ee:	4b30      	ldr	r3, [pc, #192]	; (80012b0 <HAL_TIM_Base_MspInit+0x108>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	2202      	movs	r2, #2
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
}
 80011fa:	e052      	b.n	80012a2 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM16)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a2d      	ldr	r2, [pc, #180]	; (80012b8 <HAL_TIM_Base_MspInit+0x110>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d14d      	bne.n	80012a2 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001206:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <HAL_TIM_Base_MspInit+0x108>)
 8001208:	699a      	ldr	r2, [r3, #24]
 800120a:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <HAL_TIM_Base_MspInit+0x108>)
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	0289      	lsls	r1, r1, #10
 8001210:	430a      	orrs	r2, r1
 8001212:	619a      	str	r2, [r3, #24]
 8001214:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <HAL_TIM_Base_MspInit+0x108>)
 8001216:	699a      	ldr	r2, [r3, #24]
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	029b      	lsls	r3, r3, #10
 800121c:	4013      	ands	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    hdma_tim16_ch1_up.Instance = DMA1_Channel3;
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <HAL_TIM_Base_MspInit+0x114>)
 8001224:	4a26      	ldr	r2, [pc, #152]	; (80012c0 <HAL_TIM_Base_MspInit+0x118>)
 8001226:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <HAL_TIM_Base_MspInit+0x114>)
 800122a:	2210      	movs	r2, #16
 800122c:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800122e:	4b23      	ldr	r3, [pc, #140]	; (80012bc <HAL_TIM_Base_MspInit+0x114>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001234:	4b21      	ldr	r3, [pc, #132]	; (80012bc <HAL_TIM_Base_MspInit+0x114>)
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <HAL_TIM_Base_MspInit+0x114>)
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	0052      	lsls	r2, r2, #1
 8001240:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <HAL_TIM_Base_MspInit+0x114>)
 8001244:	2280      	movs	r2, #128	; 0x80
 8001246:	00d2      	lsls	r2, r2, #3
 8001248:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.Mode = DMA_CIRCULAR;
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <HAL_TIM_Base_MspInit+0x114>)
 800124c:	2220      	movs	r2, #32
 800124e:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <HAL_TIM_Base_MspInit+0x114>)
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	0192      	lsls	r2, r2, #6
 8001256:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <HAL_TIM_Base_MspInit+0x114>)
 800125a:	0018      	movs	r0, r3
 800125c:	f000 fe7c 	bl	8001f58 <HAL_DMA_Init>
 8001260:	1e03      	subs	r3, r0, #0
 8001262:	d001      	beq.n	8001268 <HAL_TIM_Base_MspInit+0xc0>
      Error_Handler();
 8001264:	f7ff fe2e 	bl	8000ec4 <Error_Handler>
    __HAL_DMA1_REMAP(HAL_DMA1_CH3_TIM16_CH1);
 8001268:	4a16      	ldr	r2, [pc, #88]	; (80012c4 <HAL_TIM_Base_MspInit+0x11c>)
 800126a:	23a8      	movs	r3, #168	; 0xa8
 800126c:	58d3      	ldr	r3, [r2, r3]
 800126e:	4915      	ldr	r1, [pc, #84]	; (80012c4 <HAL_TIM_Base_MspInit+0x11c>)
 8001270:	4a15      	ldr	r2, [pc, #84]	; (80012c8 <HAL_TIM_Base_MspInit+0x120>)
 8001272:	4013      	ands	r3, r2
 8001274:	22a8      	movs	r2, #168	; 0xa8
 8001276:	508b      	str	r3, [r1, r2]
 8001278:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <HAL_TIM_Base_MspInit+0x11c>)
 800127a:	23a8      	movs	r3, #168	; 0xa8
 800127c:	58d3      	ldr	r3, [r2, r3]
 800127e:	4911      	ldr	r1, [pc, #68]	; (80012c4 <HAL_TIM_Base_MspInit+0x11c>)
 8001280:	22e0      	movs	r2, #224	; 0xe0
 8001282:	00d2      	lsls	r2, r2, #3
 8001284:	4313      	orrs	r3, r2
 8001286:	22a8      	movs	r2, #168	; 0xa8
 8001288:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <HAL_TIM_Base_MspInit+0x114>)
 800128e:	625a      	str	r2, [r3, #36]	; 0x24
 8001290:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_TIM_Base_MspInit+0x114>)
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a08      	ldr	r2, [pc, #32]	; (80012bc <HAL_TIM_Base_MspInit+0x114>)
 800129a:	621a      	str	r2, [r3, #32]
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <HAL_TIM_Base_MspInit+0x114>)
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b006      	add	sp, #24
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	40012c00 	.word	0x40012c00
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40000400 	.word	0x40000400
 80012b8:	40014400 	.word	0x40014400
 80012bc:	20000b18 	.word	0x20000b18
 80012c0:	40020030 	.word	0x40020030
 80012c4:	40020000 	.word	0x40020000
 80012c8:	fffff0ff 	.word	0xfffff0ff

080012cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	230c      	movs	r3, #12
 80012d6:	18fb      	adds	r3, r7, r3
 80012d8:	0018      	movs	r0, r3
 80012da:	2314      	movs	r3, #20
 80012dc:	001a      	movs	r2, r3
 80012de:	2100      	movs	r1, #0
 80012e0:	f003 f9d2 	bl	8004688 <memset>
  if(htim->Instance==TIM3)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a15      	ldr	r2, [pc, #84]	; (8001340 <HAL_TIM_MspPostInit+0x74>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d124      	bne.n	8001338 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_TIM_MspPostInit+0x78>)
 80012f0:	695a      	ldr	r2, [r3, #20]
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <HAL_TIM_MspPostInit+0x78>)
 80012f4:	2180      	movs	r1, #128	; 0x80
 80012f6:	0309      	lsls	r1, r1, #12
 80012f8:	430a      	orrs	r2, r1
 80012fa:	615a      	str	r2, [r3, #20]
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <HAL_TIM_MspPostInit+0x78>)
 80012fe:	695a      	ldr	r2, [r3, #20]
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	031b      	lsls	r3, r3, #12
 8001304:	4013      	ands	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin|PWM3_Pin|PWM4_Pin;
 800130a:	210c      	movs	r1, #12
 800130c:	187b      	adds	r3, r7, r1
 800130e:	22f0      	movs	r2, #240	; 0xf0
 8001310:	0092      	lsls	r2, r2, #2
 8001312:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	187b      	adds	r3, r7, r1
 8001316:	2202      	movs	r2, #2
 8001318:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	187b      	adds	r3, r7, r1
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	187b      	adds	r3, r7, r1
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8001326:	187b      	adds	r3, r7, r1
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132c:	187b      	adds	r3, r7, r1
 800132e:	4a06      	ldr	r2, [pc, #24]	; (8001348 <HAL_TIM_MspPostInit+0x7c>)
 8001330:	0019      	movs	r1, r3
 8001332:	0010      	movs	r0, r2
 8001334:	f000 ffa8 	bl	8002288 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	b008      	add	sp, #32
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40000400 	.word	0x40000400
 8001344:	40021000 	.word	0x40021000
 8001348:	48000800 	.word	0x48000800

0800134c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	2314      	movs	r3, #20
 8001356:	18fb      	adds	r3, r7, r3
 8001358:	0018      	movs	r0, r3
 800135a:	2314      	movs	r3, #20
 800135c:	001a      	movs	r2, r3
 800135e:	2100      	movs	r1, #0
 8001360:	f003 f992 	bl	8004688 <memset>
  if(huart->Instance==USART1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a39      	ldr	r2, [pc, #228]	; (8001450 <HAL_UART_MspInit+0x104>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d16b      	bne.n	8001446 <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800136e:	4b39      	ldr	r3, [pc, #228]	; (8001454 <HAL_UART_MspInit+0x108>)
 8001370:	699a      	ldr	r2, [r3, #24]
 8001372:	4b38      	ldr	r3, [pc, #224]	; (8001454 <HAL_UART_MspInit+0x108>)
 8001374:	2180      	movs	r1, #128	; 0x80
 8001376:	01c9      	lsls	r1, r1, #7
 8001378:	430a      	orrs	r2, r1
 800137a:	619a      	str	r2, [r3, #24]
 800137c:	4b35      	ldr	r3, [pc, #212]	; (8001454 <HAL_UART_MspInit+0x108>)
 800137e:	699a      	ldr	r2, [r3, #24]
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	01db      	lsls	r3, r3, #7
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	4b32      	ldr	r3, [pc, #200]	; (8001454 <HAL_UART_MspInit+0x108>)
 800138c:	695a      	ldr	r2, [r3, #20]
 800138e:	4b31      	ldr	r3, [pc, #196]	; (8001454 <HAL_UART_MspInit+0x108>)
 8001390:	2180      	movs	r1, #128	; 0x80
 8001392:	0289      	lsls	r1, r1, #10
 8001394:	430a      	orrs	r2, r1
 8001396:	615a      	str	r2, [r3, #20]
 8001398:	4b2e      	ldr	r3, [pc, #184]	; (8001454 <HAL_UART_MspInit+0x108>)
 800139a:	695a      	ldr	r2, [r3, #20]
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	029b      	lsls	r3, r3, #10
 80013a0:	4013      	ands	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013a6:	2114      	movs	r1, #20
 80013a8:	187b      	adds	r3, r7, r1
 80013aa:	22c0      	movs	r2, #192	; 0xc0
 80013ac:	00d2      	lsls	r2, r2, #3
 80013ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	187b      	adds	r3, r7, r1
 80013b2:	2202      	movs	r2, #2
 80013b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	187b      	adds	r3, r7, r1
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013bc:	187b      	adds	r3, r7, r1
 80013be:	2203      	movs	r2, #3
 80013c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80013c2:	187b      	adds	r3, r7, r1
 80013c4:	2201      	movs	r2, #1
 80013c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c8:	187a      	adds	r2, r7, r1
 80013ca:	2390      	movs	r3, #144	; 0x90
 80013cc:	05db      	lsls	r3, r3, #23
 80013ce:	0011      	movs	r1, r2
 80013d0:	0018      	movs	r0, r3
 80013d2:	f000 ff59 	bl	8002288 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <HAL_UART_MspInit+0x10c>)
 80013d8:	4a20      	ldr	r2, [pc, #128]	; (800145c <HAL_UART_MspInit+0x110>)
 80013da:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013dc:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <HAL_UART_MspInit+0x10c>)
 80013de:	2210      	movs	r2, #16
 80013e0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <HAL_UART_MspInit+0x10c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <HAL_UART_MspInit+0x10c>)
 80013ea:	2280      	movs	r2, #128	; 0x80
 80013ec:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013ee:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <HAL_UART_MspInit+0x10c>)
 80013f0:	2280      	movs	r2, #128	; 0x80
 80013f2:	0052      	lsls	r2, r2, #1
 80013f4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <HAL_UART_MspInit+0x10c>)
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	00d2      	lsls	r2, r2, #3
 80013fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80013fe:	4b16      	ldr	r3, [pc, #88]	; (8001458 <HAL_UART_MspInit+0x10c>)
 8001400:	2220      	movs	r2, #32
 8001402:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001404:	4b14      	ldr	r3, [pc, #80]	; (8001458 <HAL_UART_MspInit+0x10c>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <HAL_UART_MspInit+0x10c>)
 800140c:	0018      	movs	r0, r3
 800140e:	f000 fda3 	bl	8001f58 <HAL_DMA_Init>
 8001412:	1e03      	subs	r3, r0, #0
 8001414:	d001      	beq.n	800141a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001416:	f7ff fd55 	bl	8000ec4 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800141a:	4a11      	ldr	r2, [pc, #68]	; (8001460 <HAL_UART_MspInit+0x114>)
 800141c:	23a8      	movs	r3, #168	; 0xa8
 800141e:	58d3      	ldr	r3, [r2, r3]
 8001420:	490f      	ldr	r1, [pc, #60]	; (8001460 <HAL_UART_MspInit+0x114>)
 8001422:	22f0      	movs	r2, #240	; 0xf0
 8001424:	4393      	bics	r3, r2
 8001426:	22a8      	movs	r2, #168	; 0xa8
 8001428:	508b      	str	r3, [r1, r2]
 800142a:	4a0d      	ldr	r2, [pc, #52]	; (8001460 <HAL_UART_MspInit+0x114>)
 800142c:	23a8      	movs	r3, #168	; 0xa8
 800142e:	58d3      	ldr	r3, [r2, r3]
 8001430:	490b      	ldr	r1, [pc, #44]	; (8001460 <HAL_UART_MspInit+0x114>)
 8001432:	2280      	movs	r2, #128	; 0x80
 8001434:	4313      	orrs	r3, r2
 8001436:	22a8      	movs	r2, #168	; 0xa8
 8001438:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a06      	ldr	r2, [pc, #24]	; (8001458 <HAL_UART_MspInit+0x10c>)
 800143e:	669a      	str	r2, [r3, #104]	; 0x68
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_UART_MspInit+0x10c>)
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	46bd      	mov	sp, r7
 800144a:	b00a      	add	sp, #40	; 0x28
 800144c:	bd80      	pop	{r7, pc}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	40013800 	.word	0x40013800
 8001454:	40021000 	.word	0x40021000
 8001458:	200008ec 	.word	0x200008ec
 800145c:	4002001c 	.word	0x4002001c
 8001460:	40020000 	.word	0x40020000

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001468:	46c0      	nop			; (mov r8, r8)
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <HardFault_Handler+0x4>

08001474 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148c:	f000 f89a 	bl	80015c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <DMA1_Channel1_IRQHandler+0x14>)
 800149e:	0018      	movs	r0, r3
 80014a0:	f000 fe08 	bl	80020b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	20000a54 	.word	0x20000a54

080014b0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <DMA1_Channel2_3_IRQHandler+0x1c>)
 80014b6:	0018      	movs	r0, r3
 80014b8:	f000 fdfc 	bl	80020b4 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <DMA1_Channel2_3_IRQHandler+0x20>)
 80014be:	0018      	movs	r0, r3
 80014c0:	f000 fdf8 	bl	80020b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80014c4:	46c0      	nop			; (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	200008ec 	.word	0x200008ec
 80014d0:	20000b18 	.word	0x20000b18

080014d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80014d8:	46c0      	nop			; (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014e0:	480d      	ldr	r0, [pc, #52]	; (8001518 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e4:	480d      	ldr	r0, [pc, #52]	; (800151c <LoopForever+0x6>)
  ldr r1, =_edata
 80014e6:	490e      	ldr	r1, [pc, #56]	; (8001520 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014e8:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <LoopForever+0xe>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ec:	e002      	b.n	80014f4 <LoopCopyDataInit>

080014ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f2:	3304      	adds	r3, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f8:	d3f9      	bcc.n	80014ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fa:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014fc:	4c0b      	ldr	r4, [pc, #44]	; (800152c <LoopForever+0x16>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001500:	e001      	b.n	8001506 <LoopFillZerobss>

08001502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001504:	3204      	adds	r2, #4

08001506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001508:	d3fb      	bcc.n	8001502 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800150a:	f7ff ffe3 	bl	80014d4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800150e:	f003 f897 	bl	8004640 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001512:	f7fe ff6d 	bl	80003f0 <main>

08001516 <LoopForever>:

LoopForever:
    b LoopForever
 8001516:	e7fe      	b.n	8001516 <LoopForever>
  ldr   r0, =_estack
 8001518:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800151c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001520:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001524:	080046f0 	.word	0x080046f0
  ldr r2, =_sbss
 8001528:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800152c:	20000b60 	.word	0x20000b60

08001530 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001530:	e7fe      	b.n	8001530 <ADC1_IRQHandler>
	...

08001534 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <HAL_Init+0x24>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_Init+0x24>)
 800153e:	2110      	movs	r1, #16
 8001540:	430a      	orrs	r2, r1
 8001542:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001544:	2000      	movs	r0, #0
 8001546:	f000 f809 	bl	800155c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800154a:	f7ff fcc1 	bl	8000ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	0018      	movs	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	40022000 	.word	0x40022000

0800155c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_InitTick+0x5c>)
 8001566:	681c      	ldr	r4, [r3, #0]
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <HAL_InitTick+0x60>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	0019      	movs	r1, r3
 800156e:	23fa      	movs	r3, #250	; 0xfa
 8001570:	0098      	lsls	r0, r3, #2
 8001572:	f7fe fdc7 	bl	8000104 <__udivsi3>
 8001576:	0003      	movs	r3, r0
 8001578:	0019      	movs	r1, r3
 800157a:	0020      	movs	r0, r4
 800157c:	f7fe fdc2 	bl	8000104 <__udivsi3>
 8001580:	0003      	movs	r3, r0
 8001582:	0018      	movs	r0, r3
 8001584:	f000 fcdb 	bl	8001f3e <HAL_SYSTICK_Config>
 8001588:	1e03      	subs	r3, r0, #0
 800158a:	d001      	beq.n	8001590 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e00f      	b.n	80015b0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b03      	cmp	r3, #3
 8001594:	d80b      	bhi.n	80015ae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	2301      	movs	r3, #1
 800159a:	425b      	negs	r3, r3
 800159c:	2200      	movs	r2, #0
 800159e:	0018      	movs	r0, r3
 80015a0:	f000 fca8 	bl	8001ef4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_InitTick+0x64>)
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e000      	b.n	80015b0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b003      	add	sp, #12
 80015b6:	bd90      	pop	{r4, r7, pc}
 80015b8:	20000004 	.word	0x20000004
 80015bc:	2000000c 	.word	0x2000000c
 80015c0:	20000008 	.word	0x20000008

080015c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <HAL_IncTick+0x1c>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	001a      	movs	r2, r3
 80015ce:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <HAL_IncTick+0x20>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	18d2      	adds	r2, r2, r3
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <HAL_IncTick+0x20>)
 80015d6:	601a      	str	r2, [r3, #0]
}
 80015d8:	46c0      	nop			; (mov r8, r8)
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	2000000c 	.word	0x2000000c
 80015e4:	20000b5c 	.word	0x20000b5c

080015e8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  return uwTick;
 80015ec:	4b02      	ldr	r3, [pc, #8]	; (80015f8 <HAL_GetTick+0x10>)
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	0018      	movs	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	20000b5c 	.word	0x20000b5c

080015fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001604:	230f      	movs	r3, #15
 8001606:	18fb      	adds	r3, r7, r3
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e125      	b.n	8001866 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10a      	bne.n	8001638 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2234      	movs	r2, #52	; 0x34
 800162c:	2100      	movs	r1, #0
 800162e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	0018      	movs	r0, r3
 8001634:	f7ff fc70 	bl	8000f18 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163c:	2210      	movs	r2, #16
 800163e:	4013      	ands	r3, r2
 8001640:	d000      	beq.n	8001644 <HAL_ADC_Init+0x48>
 8001642:	e103      	b.n	800184c <HAL_ADC_Init+0x250>
 8001644:	230f      	movs	r3, #15
 8001646:	18fb      	adds	r3, r7, r3
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d000      	beq.n	8001650 <HAL_ADC_Init+0x54>
 800164e:	e0fd      	b.n	800184c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2204      	movs	r2, #4
 8001658:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800165a:	d000      	beq.n	800165e <HAL_ADC_Init+0x62>
 800165c:	e0f6      	b.n	800184c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001662:	4a83      	ldr	r2, [pc, #524]	; (8001870 <HAL_ADC_Init+0x274>)
 8001664:	4013      	ands	r3, r2
 8001666:	2202      	movs	r2, #2
 8001668:	431a      	orrs	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2203      	movs	r2, #3
 8001676:	4013      	ands	r3, r2
 8001678:	2b01      	cmp	r3, #1
 800167a:	d112      	bne.n	80016a2 <HAL_ADC_Init+0xa6>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2201      	movs	r2, #1
 8001684:	4013      	ands	r3, r2
 8001686:	2b01      	cmp	r3, #1
 8001688:	d009      	beq.n	800169e <HAL_ADC_Init+0xa2>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	401a      	ands	r2, r3
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	429a      	cmp	r2, r3
 800169c:	d101      	bne.n	80016a2 <HAL_ADC_Init+0xa6>
 800169e:	2301      	movs	r3, #1
 80016a0:	e000      	b.n	80016a4 <HAL_ADC_Init+0xa8>
 80016a2:	2300      	movs	r3, #0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d116      	bne.n	80016d6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	2218      	movs	r2, #24
 80016b0:	4393      	bics	r3, r2
 80016b2:	0019      	movs	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	0899      	lsrs	r1, r3, #2
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4964      	ldr	r1, [pc, #400]	; (8001874 <HAL_ADC_Init+0x278>)
 80016e2:	400a      	ands	r2, r1
 80016e4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	7e1b      	ldrb	r3, [r3, #24]
 80016ea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7e5b      	ldrb	r3, [r3, #25]
 80016f0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016f2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7e9b      	ldrb	r3, [r3, #26]
 80016f8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80016fa:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	2b01      	cmp	r3, #1
 8001702:	d002      	beq.n	800170a <HAL_ADC_Init+0x10e>
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	015b      	lsls	r3, r3, #5
 8001708:	e000      	b.n	800170c <HAL_ADC_Init+0x110>
 800170a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800170c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001712:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d101      	bne.n	8001720 <HAL_ADC_Init+0x124>
 800171c:	2304      	movs	r3, #4
 800171e:	e000      	b.n	8001722 <HAL_ADC_Init+0x126>
 8001720:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001722:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2124      	movs	r1, #36	; 0x24
 8001728:	5c5b      	ldrb	r3, [r3, r1]
 800172a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800172c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	4313      	orrs	r3, r2
 8001732:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7edb      	ldrb	r3, [r3, #27]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d115      	bne.n	8001768 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7e9b      	ldrb	r3, [r3, #26]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d105      	bne.n	8001750 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2280      	movs	r2, #128	; 0x80
 8001748:	0252      	lsls	r2, r2, #9
 800174a:	4313      	orrs	r3, r2
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	e00b      	b.n	8001768 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001754:	2220      	movs	r2, #32
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001760:	2201      	movs	r2, #1
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69da      	ldr	r2, [r3, #28]
 800176c:	23c2      	movs	r3, #194	; 0xc2
 800176e:	33ff      	adds	r3, #255	; 0xff
 8001770:	429a      	cmp	r2, r3
 8001772:	d007      	beq.n	8001784 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800177c:	4313      	orrs	r3, r2
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	4313      	orrs	r3, r2
 8001782:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68d9      	ldr	r1, [r3, #12]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	430a      	orrs	r2, r1
 8001792:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	055b      	lsls	r3, r3, #21
 800179c:	429a      	cmp	r2, r3
 800179e:	d01b      	beq.n	80017d8 <HAL_ADC_Init+0x1dc>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d017      	beq.n	80017d8 <HAL_ADC_Init+0x1dc>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d013      	beq.n	80017d8 <HAL_ADC_Init+0x1dc>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d00f      	beq.n	80017d8 <HAL_ADC_Init+0x1dc>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d00b      	beq.n	80017d8 <HAL_ADC_Init+0x1dc>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c4:	2b05      	cmp	r3, #5
 80017c6:	d007      	beq.n	80017d8 <HAL_ADC_Init+0x1dc>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	2b06      	cmp	r3, #6
 80017ce:	d003      	beq.n	80017d8 <HAL_ADC_Init+0x1dc>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	2b07      	cmp	r3, #7
 80017d6:	d112      	bne.n	80017fe <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	695a      	ldr	r2, [r3, #20]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2107      	movs	r1, #7
 80017e4:	438a      	bics	r2, r1
 80017e6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6959      	ldr	r1, [r3, #20]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f2:	2207      	movs	r2, #7
 80017f4:	401a      	ands	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	4a1c      	ldr	r2, [pc, #112]	; (8001878 <HAL_ADC_Init+0x27c>)
 8001806:	4013      	ands	r3, r2
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	429a      	cmp	r2, r3
 800180c:	d10b      	bne.n	8001826 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001818:	2203      	movs	r2, #3
 800181a:	4393      	bics	r3, r2
 800181c:	2201      	movs	r2, #1
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001824:	e01c      	b.n	8001860 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800182a:	2212      	movs	r2, #18
 800182c:	4393      	bics	r3, r2
 800182e:	2210      	movs	r2, #16
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183a:	2201      	movs	r2, #1
 800183c:	431a      	orrs	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001842:	230f      	movs	r3, #15
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800184a:	e009      	b.n	8001860 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001850:	2210      	movs	r2, #16
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001858:	230f      	movs	r3, #15
 800185a:	18fb      	adds	r3, r7, r3
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001860:	230f      	movs	r3, #15
 8001862:	18fb      	adds	r3, r7, r3
 8001864:	781b      	ldrb	r3, [r3, #0]
}
 8001866:	0018      	movs	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	b004      	add	sp, #16
 800186c:	bd80      	pop	{r7, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	fffffefd 	.word	0xfffffefd
 8001874:	fffe0219 	.word	0xfffe0219
 8001878:	833fffe7 	.word	0x833fffe7

0800187c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001888:	2317      	movs	r3, #23
 800188a:	18fb      	adds	r3, r7, r3
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2204      	movs	r2, #4
 8001898:	4013      	ands	r3, r2
 800189a:	d15e      	bne.n	800195a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2234      	movs	r2, #52	; 0x34
 80018a0:	5c9b      	ldrb	r3, [r3, r2]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d101      	bne.n	80018aa <HAL_ADC_Start_DMA+0x2e>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e05e      	b.n	8001968 <HAL_ADC_Start_DMA+0xec>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2234      	movs	r2, #52	; 0x34
 80018ae:	2101      	movs	r1, #1
 80018b0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	7e5b      	ldrb	r3, [r3, #25]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d007      	beq.n	80018ca <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80018ba:	2317      	movs	r3, #23
 80018bc:	18fc      	adds	r4, r7, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	0018      	movs	r0, r3
 80018c2:	f000 f96b 	bl	8001b9c <ADC_Enable>
 80018c6:	0003      	movs	r3, r0
 80018c8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018ca:	2317      	movs	r3, #23
 80018cc:	18fb      	adds	r3, r7, r3
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d146      	bne.n	8001962 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d8:	4a25      	ldr	r2, [pc, #148]	; (8001970 <HAL_ADC_Start_DMA+0xf4>)
 80018da:	4013      	ands	r3, r2
 80018dc:	2280      	movs	r2, #128	; 0x80
 80018de:	0052      	lsls	r2, r2, #1
 80018e0:	431a      	orrs	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2234      	movs	r2, #52	; 0x34
 80018f0:	2100      	movs	r1, #0
 80018f2:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	4a1e      	ldr	r2, [pc, #120]	; (8001974 <HAL_ADC_Start_DMA+0xf8>)
 80018fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <HAL_ADC_Start_DMA+0xfc>)
 8001902:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001908:	4a1c      	ldr	r2, [pc, #112]	; (800197c <HAL_ADC_Start_DMA+0x100>)
 800190a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	221c      	movs	r2, #28
 8001912:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2110      	movs	r1, #16
 8001920:	430a      	orrs	r2, r1
 8001922:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2101      	movs	r1, #1
 8001930:	430a      	orrs	r2, r1
 8001932:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	3340      	adds	r3, #64	; 0x40
 800193e:	0019      	movs	r1, r3
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f000 fb50 	bl	8001fe8 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2104      	movs	r1, #4
 8001954:	430a      	orrs	r2, r1
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	e003      	b.n	8001962 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800195a:	2317      	movs	r3, #23
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	2202      	movs	r2, #2
 8001960:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001962:	2317      	movs	r3, #23
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	781b      	ldrb	r3, [r3, #0]
}
 8001968:	0018      	movs	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	b007      	add	sp, #28
 800196e:	bd90      	pop	{r4, r7, pc}
 8001970:	fffff0fe 	.word	0xfffff0fe
 8001974:	08001c95 	.word	0x08001c95
 8001978:	08001d49 	.word	0x08001d49
 800197c:	08001d67 	.word	0x08001d67

08001980 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001988:	46c0      	nop			; (mov r8, r8)
 800198a:	46bd      	mov	sp, r7
 800198c:	b002      	add	sp, #8
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001998:	46c0      	nop			; (mov r8, r8)
 800199a:	46bd      	mov	sp, r7
 800199c:	b002      	add	sp, #8
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019a8:	46c0      	nop			; (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b002      	add	sp, #8
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ba:	230f      	movs	r3, #15
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	055b      	lsls	r3, r3, #21
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d011      	beq.n	80019f6 <HAL_ADC_ConfigChannel+0x46>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d00d      	beq.n	80019f6 <HAL_ADC_ConfigChannel+0x46>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d009      	beq.n	80019f6 <HAL_ADC_ConfigChannel+0x46>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	d005      	beq.n	80019f6 <HAL_ADC_ConfigChannel+0x46>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d001      	beq.n	80019f6 <HAL_ADC_ConfigChannel+0x46>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2234      	movs	r2, #52	; 0x34
 80019fa:	5c9b      	ldrb	r3, [r3, r2]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x54>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e0bb      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x1cc>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2234      	movs	r2, #52	; 0x34
 8001a08:	2101      	movs	r1, #1
 8001a0a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2204      	movs	r2, #4
 8001a14:	4013      	ands	r3, r2
 8001a16:	d000      	beq.n	8001a1a <HAL_ADC_ConfigChannel+0x6a>
 8001a18:	e09f      	b.n	8001b5a <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	4a59      	ldr	r2, [pc, #356]	; (8001b84 <HAL_ADC_ConfigChannel+0x1d4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d100      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x76>
 8001a24:	e077      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2201      	movs	r2, #1
 8001a32:	409a      	lsls	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	055b      	lsls	r3, r3, #21
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d037      	beq.n	8001ab8 <HAL_ADC_ConfigChannel+0x108>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d033      	beq.n	8001ab8 <HAL_ADC_ConfigChannel+0x108>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d02f      	beq.n	8001ab8 <HAL_ADC_ConfigChannel+0x108>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d02b      	beq.n	8001ab8 <HAL_ADC_ConfigChannel+0x108>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d027      	beq.n	8001ab8 <HAL_ADC_ConfigChannel+0x108>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	2b05      	cmp	r3, #5
 8001a6e:	d023      	beq.n	8001ab8 <HAL_ADC_ConfigChannel+0x108>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	2b06      	cmp	r3, #6
 8001a76:	d01f      	beq.n	8001ab8 <HAL_ADC_ConfigChannel+0x108>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7c:	2b07      	cmp	r3, #7
 8001a7e:	d01b      	beq.n	8001ab8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	2107      	movs	r1, #7
 8001a8c:	400b      	ands	r3, r1
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d012      	beq.n	8001ab8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695a      	ldr	r2, [r3, #20]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2107      	movs	r1, #7
 8001a9e:	438a      	bics	r2, r1
 8001aa0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6959      	ldr	r1, [r3, #20]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2207      	movs	r2, #7
 8001aae:	401a      	ands	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b10      	cmp	r3, #16
 8001abe:	d003      	beq.n	8001ac8 <HAL_ADC_ConfigChannel+0x118>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b11      	cmp	r3, #17
 8001ac6:	d152      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001ac8:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <HAL_ADC_ConfigChannel+0x1d8>)
 8001aca:	6819      	ldr	r1, [r3, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b10      	cmp	r3, #16
 8001ad2:	d102      	bne.n	8001ada <HAL_ADC_ConfigChannel+0x12a>
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	041b      	lsls	r3, r3, #16
 8001ad8:	e001      	b.n	8001ade <HAL_ADC_ConfigChannel+0x12e>
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	03db      	lsls	r3, r3, #15
 8001ade:	4a2a      	ldr	r2, [pc, #168]	; (8001b88 <HAL_ADC_ConfigChannel+0x1d8>)
 8001ae0:	430b      	orrs	r3, r1
 8001ae2:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b10      	cmp	r3, #16
 8001aea:	d140      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001aec:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <HAL_ADC_ConfigChannel+0x1dc>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4927      	ldr	r1, [pc, #156]	; (8001b90 <HAL_ADC_ConfigChannel+0x1e0>)
 8001af2:	0018      	movs	r0, r3
 8001af4:	f7fe fb06 	bl	8000104 <__udivsi3>
 8001af8:	0003      	movs	r3, r0
 8001afa:	001a      	movs	r2, r3
 8001afc:	0013      	movs	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	189b      	adds	r3, r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b06:	e002      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f9      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x158>
 8001b14:	e02b      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2101      	movs	r1, #1
 8001b22:	4099      	lsls	r1, r3
 8001b24:	000b      	movs	r3, r1
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	400a      	ands	r2, r1
 8001b2e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b10      	cmp	r3, #16
 8001b36:	d003      	beq.n	8001b40 <HAL_ADC_ConfigChannel+0x190>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b11      	cmp	r3, #17
 8001b3e:	d116      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <HAL_ADC_ConfigChannel+0x1d8>)
 8001b42:	6819      	ldr	r1, [r3, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b10      	cmp	r3, #16
 8001b4a:	d101      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x1a0>
 8001b4c:	4a11      	ldr	r2, [pc, #68]	; (8001b94 <HAL_ADC_ConfigChannel+0x1e4>)
 8001b4e:	e000      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x1a2>
 8001b50:	4a11      	ldr	r2, [pc, #68]	; (8001b98 <HAL_ADC_ConfigChannel+0x1e8>)
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <HAL_ADC_ConfigChannel+0x1d8>)
 8001b54:	400a      	ands	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	e009      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5e:	2220      	movs	r2, #32
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001b66:	230f      	movs	r3, #15
 8001b68:	18fb      	adds	r3, r7, r3
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2234      	movs	r2, #52	; 0x34
 8001b72:	2100      	movs	r1, #0
 8001b74:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001b76:	230f      	movs	r3, #15
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	781b      	ldrb	r3, [r3, #0]
}
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b004      	add	sp, #16
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	00001001 	.word	0x00001001
 8001b88:	40012708 	.word	0x40012708
 8001b8c:	20000004 	.word	0x20000004
 8001b90:	000f4240 	.word	0x000f4240
 8001b94:	ff7fffff 	.word	0xff7fffff
 8001b98:	ffbfffff 	.word	0xffbfffff

08001b9c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d112      	bne.n	8001be0 <ADC_Enable+0x44>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d009      	beq.n	8001bdc <ADC_Enable+0x40>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	021b      	lsls	r3, r3, #8
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d101      	bne.n	8001be0 <ADC_Enable+0x44>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <ADC_Enable+0x46>
 8001be0:	2300      	movs	r3, #0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d14b      	bne.n	8001c7e <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4a26      	ldr	r2, [pc, #152]	; (8001c88 <ADC_Enable+0xec>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d00d      	beq.n	8001c0e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf6:	2210      	movs	r2, #16
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c02:	2201      	movs	r2, #1
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e038      	b.n	8001c80 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2101      	movs	r1, #1
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <ADC_Enable+0xf0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	491b      	ldr	r1, [pc, #108]	; (8001c90 <ADC_Enable+0xf4>)
 8001c24:	0018      	movs	r0, r3
 8001c26:	f7fe fa6d 	bl	8000104 <__udivsi3>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c2e:	e002      	b.n	8001c36 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1f9      	bne.n	8001c30 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c3c:	f7ff fcd4 	bl	80015e8 <HAL_GetTick>
 8001c40:	0003      	movs	r3, r0
 8001c42:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c44:	e014      	b.n	8001c70 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c46:	f7ff fccf 	bl	80015e8 <HAL_GetTick>
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d90d      	bls.n	8001c70 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c58:	2210      	movs	r2, #16
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c64:	2201      	movs	r2, #1
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e007      	b.n	8001c80 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2201      	movs	r2, #1
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d1e3      	bne.n	8001c46 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	0018      	movs	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b004      	add	sp, #16
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	80000017 	.word	0x80000017
 8001c8c:	20000004 	.word	0x20000004
 8001c90:	000f4240 	.word	0x000f4240

08001c94 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca6:	2250      	movs	r2, #80	; 0x50
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d140      	bne.n	8001d2e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb0:	2280      	movs	r2, #128	; 0x80
 8001cb2:	0092      	lsls	r2, r2, #2
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	23c0      	movs	r3, #192	; 0xc0
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d12d      	bne.n	8001d24 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d129      	bne.n	8001d24 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2208      	movs	r2, #8
 8001cd8:	4013      	ands	r3, r2
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d122      	bne.n	8001d24 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d110      	bne.n	8001d0c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	210c      	movs	r1, #12
 8001cf6:	438a      	bics	r2, r1
 8001cf8:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfe:	4a11      	ldr	r2, [pc, #68]	; (8001d44 <ADC_DMAConvCplt+0xb0>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	2201      	movs	r2, #1
 8001d04:	431a      	orrs	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	639a      	str	r2, [r3, #56]	; 0x38
 8001d0a:	e00b      	b.n	8001d24 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d10:	2220      	movs	r2, #32
 8001d12:	431a      	orrs	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	0018      	movs	r0, r3
 8001d28:	f7ff fe2a 	bl	8001980 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001d2c:	e005      	b.n	8001d3a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	0010      	movs	r0, r2
 8001d38:	4798      	blx	r3
}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b004      	add	sp, #16
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	fffffefe 	.word	0xfffffefe

08001d48 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f7ff fe19 	bl	8001990 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b004      	add	sp, #16
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d78:	2240      	movs	r2, #64	; 0x40
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d84:	2204      	movs	r2, #4
 8001d86:	431a      	orrs	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f7ff fe06 	bl	80019a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d94:	46c0      	nop			; (mov r8, r8)
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b004      	add	sp, #16
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	0002      	movs	r2, r0
 8001da4:	1dfb      	adds	r3, r7, #7
 8001da6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001da8:	1dfb      	adds	r3, r7, #7
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b7f      	cmp	r3, #127	; 0x7f
 8001dae:	d809      	bhi.n	8001dc4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db0:	1dfb      	adds	r3, r7, #7
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	001a      	movs	r2, r3
 8001db6:	231f      	movs	r3, #31
 8001db8:	401a      	ands	r2, r3
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <__NVIC_EnableIRQ+0x30>)
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	4091      	lsls	r1, r2
 8001dc0:	000a      	movs	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]
  }
}
 8001dc4:	46c0      	nop			; (mov r8, r8)
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b002      	add	sp, #8
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	e000e100 	.word	0xe000e100

08001dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	6039      	str	r1, [r7, #0]
 8001dda:	1dfb      	adds	r3, r7, #7
 8001ddc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dde:	1dfb      	adds	r3, r7, #7
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b7f      	cmp	r3, #127	; 0x7f
 8001de4:	d828      	bhi.n	8001e38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001de6:	4a2f      	ldr	r2, [pc, #188]	; (8001ea4 <__NVIC_SetPriority+0xd4>)
 8001de8:	1dfb      	adds	r3, r7, #7
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	b25b      	sxtb	r3, r3
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	33c0      	adds	r3, #192	; 0xc0
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	589b      	ldr	r3, [r3, r2]
 8001df6:	1dfa      	adds	r2, r7, #7
 8001df8:	7812      	ldrb	r2, [r2, #0]
 8001dfa:	0011      	movs	r1, r2
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	400a      	ands	r2, r1
 8001e00:	00d2      	lsls	r2, r2, #3
 8001e02:	21ff      	movs	r1, #255	; 0xff
 8001e04:	4091      	lsls	r1, r2
 8001e06:	000a      	movs	r2, r1
 8001e08:	43d2      	mvns	r2, r2
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	019b      	lsls	r3, r3, #6
 8001e12:	22ff      	movs	r2, #255	; 0xff
 8001e14:	401a      	ands	r2, r3
 8001e16:	1dfb      	adds	r3, r7, #7
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	4003      	ands	r3, r0
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e24:	481f      	ldr	r0, [pc, #124]	; (8001ea4 <__NVIC_SetPriority+0xd4>)
 8001e26:	1dfb      	adds	r3, r7, #7
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	b25b      	sxtb	r3, r3
 8001e2c:	089b      	lsrs	r3, r3, #2
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	33c0      	adds	r3, #192	; 0xc0
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e36:	e031      	b.n	8001e9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e38:	4a1b      	ldr	r2, [pc, #108]	; (8001ea8 <__NVIC_SetPriority+0xd8>)
 8001e3a:	1dfb      	adds	r3, r7, #7
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	0019      	movs	r1, r3
 8001e40:	230f      	movs	r3, #15
 8001e42:	400b      	ands	r3, r1
 8001e44:	3b08      	subs	r3, #8
 8001e46:	089b      	lsrs	r3, r3, #2
 8001e48:	3306      	adds	r3, #6
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	18d3      	adds	r3, r2, r3
 8001e4e:	3304      	adds	r3, #4
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	1dfa      	adds	r2, r7, #7
 8001e54:	7812      	ldrb	r2, [r2, #0]
 8001e56:	0011      	movs	r1, r2
 8001e58:	2203      	movs	r2, #3
 8001e5a:	400a      	ands	r2, r1
 8001e5c:	00d2      	lsls	r2, r2, #3
 8001e5e:	21ff      	movs	r1, #255	; 0xff
 8001e60:	4091      	lsls	r1, r2
 8001e62:	000a      	movs	r2, r1
 8001e64:	43d2      	mvns	r2, r2
 8001e66:	401a      	ands	r2, r3
 8001e68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	019b      	lsls	r3, r3, #6
 8001e6e:	22ff      	movs	r2, #255	; 0xff
 8001e70:	401a      	ands	r2, r3
 8001e72:	1dfb      	adds	r3, r7, #7
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	0018      	movs	r0, r3
 8001e78:	2303      	movs	r3, #3
 8001e7a:	4003      	ands	r3, r0
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e80:	4809      	ldr	r0, [pc, #36]	; (8001ea8 <__NVIC_SetPriority+0xd8>)
 8001e82:	1dfb      	adds	r3, r7, #7
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	001c      	movs	r4, r3
 8001e88:	230f      	movs	r3, #15
 8001e8a:	4023      	ands	r3, r4
 8001e8c:	3b08      	subs	r3, #8
 8001e8e:	089b      	lsrs	r3, r3, #2
 8001e90:	430a      	orrs	r2, r1
 8001e92:	3306      	adds	r3, #6
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	18c3      	adds	r3, r0, r3
 8001e98:	3304      	adds	r3, #4
 8001e9a:	601a      	str	r2, [r3, #0]
}
 8001e9c:	46c0      	nop			; (mov r8, r8)
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b003      	add	sp, #12
 8001ea2:	bd90      	pop	{r4, r7, pc}
 8001ea4:	e000e100 	.word	0xe000e100
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	4a0c      	ldr	r2, [pc, #48]	; (8001eec <SysTick_Config+0x40>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d901      	bls.n	8001ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e010      	b.n	8001ee4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <SysTick_Config+0x44>)
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	3a01      	subs	r2, #1
 8001ec8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eca:	2301      	movs	r3, #1
 8001ecc:	425b      	negs	r3, r3
 8001ece:	2103      	movs	r1, #3
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f7ff ff7d 	bl	8001dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <SysTick_Config+0x44>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <SysTick_Config+0x44>)
 8001ede:	2207      	movs	r2, #7
 8001ee0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b002      	add	sp, #8
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	00ffffff 	.word	0x00ffffff
 8001ef0:	e000e010 	.word	0xe000e010

08001ef4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
 8001efe:	210f      	movs	r1, #15
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	1c02      	adds	r2, r0, #0
 8001f04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	187b      	adds	r3, r7, r1
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	b25b      	sxtb	r3, r3
 8001f0e:	0011      	movs	r1, r2
 8001f10:	0018      	movs	r0, r3
 8001f12:	f7ff ff5d 	bl	8001dd0 <__NVIC_SetPriority>
}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	b004      	add	sp, #16
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	0002      	movs	r2, r0
 8001f26:	1dfb      	adds	r3, r7, #7
 8001f28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f2a:	1dfb      	adds	r3, r7, #7
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	b25b      	sxtb	r3, r3
 8001f30:	0018      	movs	r0, r3
 8001f32:	f7ff ff33 	bl	8001d9c <__NVIC_EnableIRQ>
}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b002      	add	sp, #8
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f7ff ffaf 	bl	8001eac <SysTick_Config>
 8001f4e:	0003      	movs	r3, r0
}
 8001f50:	0018      	movs	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b002      	add	sp, #8
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e036      	b.n	8001fdc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2221      	movs	r2, #33	; 0x21
 8001f72:	2102      	movs	r1, #2
 8001f74:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4a18      	ldr	r2, [pc, #96]	; (8001fe4 <HAL_DMA_Init+0x8c>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f000 f946 	bl	8002250 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2221      	movs	r2, #33	; 0x21
 8001fce:	2101      	movs	r1, #1
 8001fd0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}  
 8001fdc:	0018      	movs	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b004      	add	sp, #16
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	ffffc00f 	.word	0xffffc00f

08001fe8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
 8001ff4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001ff6:	2317      	movs	r3, #23
 8001ff8:	18fb      	adds	r3, r7, r3
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2220      	movs	r2, #32
 8002002:	5c9b      	ldrb	r3, [r3, r2]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_DMA_Start_IT+0x24>
 8002008:	2302      	movs	r3, #2
 800200a:	e04f      	b.n	80020ac <HAL_DMA_Start_IT+0xc4>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	2101      	movs	r1, #1
 8002012:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2221      	movs	r2, #33	; 0x21
 8002018:	5c9b      	ldrb	r3, [r3, r2]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d13a      	bne.n	8002096 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2221      	movs	r2, #33	; 0x21
 8002024:	2102      	movs	r1, #2
 8002026:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2101      	movs	r1, #1
 800203a:	438a      	bics	r2, r1
 800203c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 f8d7 	bl	80021f8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	2b00      	cmp	r3, #0
 8002050:	d008      	beq.n	8002064 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	210e      	movs	r1, #14
 800205e:	430a      	orrs	r2, r1
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	e00f      	b.n	8002084 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	210a      	movs	r1, #10
 8002070:	430a      	orrs	r2, r1
 8002072:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2104      	movs	r1, #4
 8002080:	438a      	bics	r2, r1
 8002082:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2101      	movs	r1, #1
 8002090:	430a      	orrs	r2, r1
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	e007      	b.n	80020a6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2220      	movs	r2, #32
 800209a:	2100      	movs	r1, #0
 800209c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800209e:	2317      	movs	r3, #23
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	2202      	movs	r2, #2
 80020a4:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80020a6:	2317      	movs	r3, #23
 80020a8:	18fb      	adds	r3, r7, r3
 80020aa:	781b      	ldrb	r3, [r3, #0]
} 
 80020ac:	0018      	movs	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b006      	add	sp, #24
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	2204      	movs	r2, #4
 80020d2:	409a      	lsls	r2, r3
 80020d4:	0013      	movs	r3, r2
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4013      	ands	r3, r2
 80020da:	d024      	beq.n	8002126 <HAL_DMA_IRQHandler+0x72>
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2204      	movs	r2, #4
 80020e0:	4013      	ands	r3, r2
 80020e2:	d020      	beq.n	8002126 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2220      	movs	r2, #32
 80020ec:	4013      	ands	r3, r2
 80020ee:	d107      	bne.n	8002100 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2104      	movs	r1, #4
 80020fc:	438a      	bics	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002108:	2104      	movs	r1, #4
 800210a:	4091      	lsls	r1, r2
 800210c:	000a      	movs	r2, r1
 800210e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d100      	bne.n	800211a <HAL_DMA_IRQHandler+0x66>
 8002118:	e06a      	b.n	80021f0 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	0010      	movs	r0, r2
 8002122:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002124:	e064      	b.n	80021f0 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	2202      	movs	r2, #2
 800212c:	409a      	lsls	r2, r3
 800212e:	0013      	movs	r3, r2
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4013      	ands	r3, r2
 8002134:	d02b      	beq.n	800218e <HAL_DMA_IRQHandler+0xda>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2202      	movs	r2, #2
 800213a:	4013      	ands	r3, r2
 800213c:	d027      	beq.n	800218e <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2220      	movs	r2, #32
 8002146:	4013      	ands	r3, r2
 8002148:	d10b      	bne.n	8002162 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	210a      	movs	r1, #10
 8002156:	438a      	bics	r2, r1
 8002158:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2221      	movs	r2, #33	; 0x21
 800215e:	2101      	movs	r1, #1
 8002160:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216a:	2102      	movs	r1, #2
 800216c:	4091      	lsls	r1, r2
 800216e:	000a      	movs	r2, r1
 8002170:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2220      	movs	r2, #32
 8002176:	2100      	movs	r1, #0
 8002178:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217e:	2b00      	cmp	r3, #0
 8002180:	d036      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	0010      	movs	r0, r2
 800218a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800218c:	e030      	b.n	80021f0 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	2208      	movs	r2, #8
 8002194:	409a      	lsls	r2, r3
 8002196:	0013      	movs	r3, r2
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4013      	ands	r3, r2
 800219c:	d028      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x13c>
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2208      	movs	r2, #8
 80021a2:	4013      	ands	r3, r2
 80021a4:	d024      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	210e      	movs	r1, #14
 80021b2:	438a      	bics	r2, r1
 80021b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021be:	2101      	movs	r1, #1
 80021c0:	4091      	lsls	r1, r2
 80021c2:	000a      	movs	r2, r1
 80021c4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2221      	movs	r2, #33	; 0x21
 80021d0:	2101      	movs	r1, #1
 80021d2:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2220      	movs	r2, #32
 80021d8:	2100      	movs	r1, #0
 80021da:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	0010      	movs	r0, r2
 80021ec:	4798      	blx	r3
    }
   }
}  
 80021ee:	e7ff      	b.n	80021f0 <HAL_DMA_IRQHandler+0x13c>
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b004      	add	sp, #16
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220e:	2101      	movs	r1, #1
 8002210:	4091      	lsls	r1, r2
 8002212:	000a      	movs	r2, r1
 8002214:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b10      	cmp	r3, #16
 8002224:	d108      	bne.n	8002238 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002236:	e007      	b.n	8002248 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	60da      	str	r2, [r3, #12]
}
 8002248:	46c0      	nop			; (mov r8, r8)
 800224a:	46bd      	mov	sp, r7
 800224c:	b004      	add	sp, #16
 800224e:	bd80      	pop	{r7, pc}

08002250 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a08      	ldr	r2, [pc, #32]	; (8002280 <DMA_CalcBaseAndBitshift+0x30>)
 800225e:	4694      	mov	ip, r2
 8002260:	4463      	add	r3, ip
 8002262:	2114      	movs	r1, #20
 8002264:	0018      	movs	r0, r3
 8002266:	f7fd ff4d 	bl	8000104 <__udivsi3>
 800226a:	0003      	movs	r3, r0
 800226c:	009a      	lsls	r2, r3, #2
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a03      	ldr	r2, [pc, #12]	; (8002284 <DMA_CalcBaseAndBitshift+0x34>)
 8002276:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002278:	46c0      	nop			; (mov r8, r8)
 800227a:	46bd      	mov	sp, r7
 800227c:	b002      	add	sp, #8
 800227e:	bd80      	pop	{r7, pc}
 8002280:	bffdfff8 	.word	0xbffdfff8
 8002284:	40020000 	.word	0x40020000

08002288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002296:	e14f      	b.n	8002538 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2101      	movs	r1, #1
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4091      	lsls	r1, r2
 80022a2:	000a      	movs	r2, r1
 80022a4:	4013      	ands	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d100      	bne.n	80022b0 <HAL_GPIO_Init+0x28>
 80022ae:	e140      	b.n	8002532 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x38>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b12      	cmp	r3, #18
 80022be:	d123      	bne.n	8002308 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	08da      	lsrs	r2, r3, #3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3208      	adds	r2, #8
 80022c8:	0092      	lsls	r2, r2, #2
 80022ca:	58d3      	ldr	r3, [r2, r3]
 80022cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2207      	movs	r2, #7
 80022d2:	4013      	ands	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	220f      	movs	r2, #15
 80022d8:	409a      	lsls	r2, r3
 80022da:	0013      	movs	r3, r2
 80022dc:	43da      	mvns	r2, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	2107      	movs	r1, #7
 80022ec:	400b      	ands	r3, r1
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	409a      	lsls	r2, r3
 80022f2:	0013      	movs	r3, r2
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	08da      	lsrs	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3208      	adds	r2, #8
 8002302:	0092      	lsls	r2, r2, #2
 8002304:	6939      	ldr	r1, [r7, #16]
 8002306:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	2203      	movs	r2, #3
 8002314:	409a      	lsls	r2, r3
 8002316:	0013      	movs	r3, r2
 8002318:	43da      	mvns	r2, r3
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2203      	movs	r2, #3
 8002326:	401a      	ands	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	409a      	lsls	r2, r3
 800232e:	0013      	movs	r3, r2
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4313      	orrs	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d00b      	beq.n	800235c <HAL_GPIO_Init+0xd4>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d007      	beq.n	800235c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002350:	2b11      	cmp	r3, #17
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b12      	cmp	r3, #18
 800235a:	d130      	bne.n	80023be <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	409a      	lsls	r2, r3
 800236a:	0013      	movs	r3, r2
 800236c:	43da      	mvns	r2, r3
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	409a      	lsls	r2, r3
 800237e:	0013      	movs	r3, r2
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002392:	2201      	movs	r2, #1
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	409a      	lsls	r2, r3
 8002398:	0013      	movs	r3, r2
 800239a:	43da      	mvns	r2, r3
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4013      	ands	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	2201      	movs	r2, #1
 80023aa:	401a      	ands	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	409a      	lsls	r2, r3
 80023b0:	0013      	movs	r3, r2
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	2203      	movs	r2, #3
 80023ca:	409a      	lsls	r2, r3
 80023cc:	0013      	movs	r3, r2
 80023ce:	43da      	mvns	r2, r3
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	409a      	lsls	r2, r3
 80023e0:	0013      	movs	r3, r2
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	2380      	movs	r3, #128	; 0x80
 80023f4:	055b      	lsls	r3, r3, #21
 80023f6:	4013      	ands	r3, r2
 80023f8:	d100      	bne.n	80023fc <HAL_GPIO_Init+0x174>
 80023fa:	e09a      	b.n	8002532 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fc:	4b54      	ldr	r3, [pc, #336]	; (8002550 <HAL_GPIO_Init+0x2c8>)
 80023fe:	699a      	ldr	r2, [r3, #24]
 8002400:	4b53      	ldr	r3, [pc, #332]	; (8002550 <HAL_GPIO_Init+0x2c8>)
 8002402:	2101      	movs	r1, #1
 8002404:	430a      	orrs	r2, r1
 8002406:	619a      	str	r2, [r3, #24]
 8002408:	4b51      	ldr	r3, [pc, #324]	; (8002550 <HAL_GPIO_Init+0x2c8>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	2201      	movs	r2, #1
 800240e:	4013      	ands	r3, r2
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002414:	4a4f      	ldr	r2, [pc, #316]	; (8002554 <HAL_GPIO_Init+0x2cc>)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	089b      	lsrs	r3, r3, #2
 800241a:	3302      	adds	r3, #2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	589b      	ldr	r3, [r3, r2]
 8002420:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2203      	movs	r2, #3
 8002426:	4013      	ands	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	220f      	movs	r2, #15
 800242c:	409a      	lsls	r2, r3
 800242e:	0013      	movs	r3, r2
 8002430:	43da      	mvns	r2, r3
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	2390      	movs	r3, #144	; 0x90
 800243c:	05db      	lsls	r3, r3, #23
 800243e:	429a      	cmp	r2, r3
 8002440:	d013      	beq.n	800246a <HAL_GPIO_Init+0x1e2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a44      	ldr	r2, [pc, #272]	; (8002558 <HAL_GPIO_Init+0x2d0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d00d      	beq.n	8002466 <HAL_GPIO_Init+0x1de>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a43      	ldr	r2, [pc, #268]	; (800255c <HAL_GPIO_Init+0x2d4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d007      	beq.n	8002462 <HAL_GPIO_Init+0x1da>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a42      	ldr	r2, [pc, #264]	; (8002560 <HAL_GPIO_Init+0x2d8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d101      	bne.n	800245e <HAL_GPIO_Init+0x1d6>
 800245a:	2303      	movs	r3, #3
 800245c:	e006      	b.n	800246c <HAL_GPIO_Init+0x1e4>
 800245e:	2305      	movs	r3, #5
 8002460:	e004      	b.n	800246c <HAL_GPIO_Init+0x1e4>
 8002462:	2302      	movs	r3, #2
 8002464:	e002      	b.n	800246c <HAL_GPIO_Init+0x1e4>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_GPIO_Init+0x1e4>
 800246a:	2300      	movs	r3, #0
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	2103      	movs	r1, #3
 8002470:	400a      	ands	r2, r1
 8002472:	0092      	lsls	r2, r2, #2
 8002474:	4093      	lsls	r3, r2
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800247c:	4935      	ldr	r1, [pc, #212]	; (8002554 <HAL_GPIO_Init+0x2cc>)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	089b      	lsrs	r3, r3, #2
 8002482:	3302      	adds	r3, #2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800248a:	4b36      	ldr	r3, [pc, #216]	; (8002564 <HAL_GPIO_Init+0x2dc>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	43da      	mvns	r2, r3
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4013      	ands	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	025b      	lsls	r3, r3, #9
 80024a2:	4013      	ands	r3, r2
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024ae:	4b2d      	ldr	r3, [pc, #180]	; (8002564 <HAL_GPIO_Init+0x2dc>)
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80024b4:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <HAL_GPIO_Init+0x2dc>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	43da      	mvns	r2, r3
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	029b      	lsls	r3, r3, #10
 80024cc:	4013      	ands	r3, r2
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024d8:	4b22      	ldr	r3, [pc, #136]	; (8002564 <HAL_GPIO_Init+0x2dc>)
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024de:	4b21      	ldr	r3, [pc, #132]	; (8002564 <HAL_GPIO_Init+0x2dc>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	43da      	mvns	r2, r3
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	035b      	lsls	r3, r3, #13
 80024f6:	4013      	ands	r3, r2
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002502:	4b18      	ldr	r3, [pc, #96]	; (8002564 <HAL_GPIO_Init+0x2dc>)
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002508:	4b16      	ldr	r3, [pc, #88]	; (8002564 <HAL_GPIO_Init+0x2dc>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	43da      	mvns	r2, r3
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	039b      	lsls	r3, r3, #14
 8002520:	4013      	ands	r3, r2
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800252c:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <HAL_GPIO_Init+0x2dc>)
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	3301      	adds	r3, #1
 8002536:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	40da      	lsrs	r2, r3
 8002540:	1e13      	subs	r3, r2, #0
 8002542:	d000      	beq.n	8002546 <HAL_GPIO_Init+0x2be>
 8002544:	e6a8      	b.n	8002298 <HAL_GPIO_Init+0x10>
  } 
}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	46bd      	mov	sp, r7
 800254a:	b006      	add	sp, #24
 800254c:	bd80      	pop	{r7, pc}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	40021000 	.word	0x40021000
 8002554:	40010000 	.word	0x40010000
 8002558:	48000400 	.word	0x48000400
 800255c:	48000800 	.word	0x48000800
 8002560:	48000c00 	.word	0x48000c00
 8002564:	40010400 	.word	0x40010400

08002568 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	000a      	movs	r2, r1
 8002572:	1cbb      	adds	r3, r7, #2
 8002574:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	1cba      	adds	r2, r7, #2
 800257c:	8812      	ldrh	r2, [r2, #0]
 800257e:	4013      	ands	r3, r2
 8002580:	d004      	beq.n	800258c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002582:	230f      	movs	r3, #15
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	2201      	movs	r2, #1
 8002588:	701a      	strb	r2, [r3, #0]
 800258a:	e003      	b.n	8002594 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800258c:	230f      	movs	r3, #15
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002594:	230f      	movs	r3, #15
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	781b      	ldrb	r3, [r3, #0]
  }
 800259a:	0018      	movs	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	b004      	add	sp, #16
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	0008      	movs	r0, r1
 80025ac:	0011      	movs	r1, r2
 80025ae:	1cbb      	adds	r3, r7, #2
 80025b0:	1c02      	adds	r2, r0, #0
 80025b2:	801a      	strh	r2, [r3, #0]
 80025b4:	1c7b      	adds	r3, r7, #1
 80025b6:	1c0a      	adds	r2, r1, #0
 80025b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025ba:	1c7b      	adds	r3, r7, #1
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d004      	beq.n	80025cc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025c2:	1cbb      	adds	r3, r7, #2
 80025c4:	881a      	ldrh	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025ca:	e003      	b.n	80025d4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025cc:	1cbb      	adds	r3, r7, #2
 80025ce:	881a      	ldrh	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025d4:	46c0      	nop			; (mov r8, r8)
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b002      	add	sp, #8
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e305      	b.n	8002bfa <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2201      	movs	r2, #1
 80025f4:	4013      	ands	r3, r2
 80025f6:	d100      	bne.n	80025fa <HAL_RCC_OscConfig+0x1e>
 80025f8:	e08d      	b.n	8002716 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025fa:	4bc5      	ldr	r3, [pc, #788]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	220c      	movs	r2, #12
 8002600:	4013      	ands	r3, r2
 8002602:	2b04      	cmp	r3, #4
 8002604:	d00e      	beq.n	8002624 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002606:	4bc2      	ldr	r3, [pc, #776]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	220c      	movs	r2, #12
 800260c:	4013      	ands	r3, r2
 800260e:	2b08      	cmp	r3, #8
 8002610:	d116      	bne.n	8002640 <HAL_RCC_OscConfig+0x64>
 8002612:	4bbf      	ldr	r3, [pc, #764]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	23c0      	movs	r3, #192	; 0xc0
 8002618:	025b      	lsls	r3, r3, #9
 800261a:	401a      	ands	r2, r3
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	025b      	lsls	r3, r3, #9
 8002620:	429a      	cmp	r2, r3
 8002622:	d10d      	bne.n	8002640 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002624:	4bba      	ldr	r3, [pc, #744]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	2380      	movs	r3, #128	; 0x80
 800262a:	029b      	lsls	r3, r3, #10
 800262c:	4013      	ands	r3, r2
 800262e:	d100      	bne.n	8002632 <HAL_RCC_OscConfig+0x56>
 8002630:	e070      	b.n	8002714 <HAL_RCC_OscConfig+0x138>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d000      	beq.n	800263c <HAL_RCC_OscConfig+0x60>
 800263a:	e06b      	b.n	8002714 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e2dc      	b.n	8002bfa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d107      	bne.n	8002658 <HAL_RCC_OscConfig+0x7c>
 8002648:	4bb1      	ldr	r3, [pc, #708]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4bb0      	ldr	r3, [pc, #704]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 800264e:	2180      	movs	r1, #128	; 0x80
 8002650:	0249      	lsls	r1, r1, #9
 8002652:	430a      	orrs	r2, r1
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	e02f      	b.n	80026b8 <HAL_RCC_OscConfig+0xdc>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10c      	bne.n	800267a <HAL_RCC_OscConfig+0x9e>
 8002660:	4bab      	ldr	r3, [pc, #684]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4baa      	ldr	r3, [pc, #680]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002666:	49ab      	ldr	r1, [pc, #684]	; (8002914 <HAL_RCC_OscConfig+0x338>)
 8002668:	400a      	ands	r2, r1
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	4ba8      	ldr	r3, [pc, #672]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4ba7      	ldr	r3, [pc, #668]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002672:	49a9      	ldr	r1, [pc, #676]	; (8002918 <HAL_RCC_OscConfig+0x33c>)
 8002674:	400a      	ands	r2, r1
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	e01e      	b.n	80026b8 <HAL_RCC_OscConfig+0xdc>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b05      	cmp	r3, #5
 8002680:	d10e      	bne.n	80026a0 <HAL_RCC_OscConfig+0xc4>
 8002682:	4ba3      	ldr	r3, [pc, #652]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	4ba2      	ldr	r3, [pc, #648]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002688:	2180      	movs	r1, #128	; 0x80
 800268a:	02c9      	lsls	r1, r1, #11
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	4b9f      	ldr	r3, [pc, #636]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b9e      	ldr	r3, [pc, #632]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002696:	2180      	movs	r1, #128	; 0x80
 8002698:	0249      	lsls	r1, r1, #9
 800269a:	430a      	orrs	r2, r1
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	e00b      	b.n	80026b8 <HAL_RCC_OscConfig+0xdc>
 80026a0:	4b9b      	ldr	r3, [pc, #620]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b9a      	ldr	r3, [pc, #616]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 80026a6:	499b      	ldr	r1, [pc, #620]	; (8002914 <HAL_RCC_OscConfig+0x338>)
 80026a8:	400a      	ands	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	4b98      	ldr	r3, [pc, #608]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b97      	ldr	r3, [pc, #604]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 80026b2:	4999      	ldr	r1, [pc, #612]	; (8002918 <HAL_RCC_OscConfig+0x33c>)
 80026b4:	400a      	ands	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d014      	beq.n	80026ea <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c0:	f7fe ff92 	bl	80015e8 <HAL_GetTick>
 80026c4:	0003      	movs	r3, r0
 80026c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ca:	f7fe ff8d 	bl	80015e8 <HAL_GetTick>
 80026ce:	0002      	movs	r2, r0
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b64      	cmp	r3, #100	; 0x64
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e28e      	b.n	8002bfa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026dc:	4b8c      	ldr	r3, [pc, #560]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	029b      	lsls	r3, r3, #10
 80026e4:	4013      	ands	r3, r2
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0xee>
 80026e8:	e015      	b.n	8002716 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ea:	f7fe ff7d 	bl	80015e8 <HAL_GetTick>
 80026ee:	0003      	movs	r3, r0
 80026f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f4:	f7fe ff78 	bl	80015e8 <HAL_GetTick>
 80026f8:	0002      	movs	r2, r0
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b64      	cmp	r3, #100	; 0x64
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e279      	b.n	8002bfa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002706:	4b82      	ldr	r3, [pc, #520]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	029b      	lsls	r3, r3, #10
 800270e:	4013      	ands	r3, r2
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0x118>
 8002712:	e000      	b.n	8002716 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002714:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2202      	movs	r2, #2
 800271c:	4013      	ands	r3, r2
 800271e:	d100      	bne.n	8002722 <HAL_RCC_OscConfig+0x146>
 8002720:	e06c      	b.n	80027fc <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002722:	4b7b      	ldr	r3, [pc, #492]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	220c      	movs	r2, #12
 8002728:	4013      	ands	r3, r2
 800272a:	d00e      	beq.n	800274a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800272c:	4b78      	ldr	r3, [pc, #480]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	220c      	movs	r2, #12
 8002732:	4013      	ands	r3, r2
 8002734:	2b08      	cmp	r3, #8
 8002736:	d11f      	bne.n	8002778 <HAL_RCC_OscConfig+0x19c>
 8002738:	4b75      	ldr	r3, [pc, #468]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	23c0      	movs	r3, #192	; 0xc0
 800273e:	025b      	lsls	r3, r3, #9
 8002740:	401a      	ands	r2, r3
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	429a      	cmp	r2, r3
 8002748:	d116      	bne.n	8002778 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274a:	4b71      	ldr	r3, [pc, #452]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2202      	movs	r2, #2
 8002750:	4013      	ands	r3, r2
 8002752:	d005      	beq.n	8002760 <HAL_RCC_OscConfig+0x184>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d001      	beq.n	8002760 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e24c      	b.n	8002bfa <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002760:	4b6b      	ldr	r3, [pc, #428]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	22f8      	movs	r2, #248	; 0xf8
 8002766:	4393      	bics	r3, r2
 8002768:	0019      	movs	r1, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00da      	lsls	r2, r3, #3
 8002770:	4b67      	ldr	r3, [pc, #412]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002772:	430a      	orrs	r2, r1
 8002774:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002776:	e041      	b.n	80027fc <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d024      	beq.n	80027ca <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002780:	4b63      	ldr	r3, [pc, #396]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b62      	ldr	r3, [pc, #392]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002786:	2101      	movs	r1, #1
 8002788:	430a      	orrs	r2, r1
 800278a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7fe ff2c 	bl	80015e8 <HAL_GetTick>
 8002790:	0003      	movs	r3, r0
 8002792:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002796:	f7fe ff27 	bl	80015e8 <HAL_GetTick>
 800279a:	0002      	movs	r2, r0
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e228      	b.n	8002bfa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a8:	4b59      	ldr	r3, [pc, #356]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2202      	movs	r2, #2
 80027ae:	4013      	ands	r3, r2
 80027b0:	d0f1      	beq.n	8002796 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b2:	4b57      	ldr	r3, [pc, #348]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	22f8      	movs	r2, #248	; 0xf8
 80027b8:	4393      	bics	r3, r2
 80027ba:	0019      	movs	r1, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	00da      	lsls	r2, r3, #3
 80027c2:	4b53      	ldr	r3, [pc, #332]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 80027c4:	430a      	orrs	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	e018      	b.n	80027fc <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ca:	4b51      	ldr	r3, [pc, #324]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	4b50      	ldr	r3, [pc, #320]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 80027d0:	2101      	movs	r1, #1
 80027d2:	438a      	bics	r2, r1
 80027d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d6:	f7fe ff07 	bl	80015e8 <HAL_GetTick>
 80027da:	0003      	movs	r3, r0
 80027dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e0:	f7fe ff02 	bl	80015e8 <HAL_GetTick>
 80027e4:	0002      	movs	r2, r0
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e203      	b.n	8002bfa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f2:	4b47      	ldr	r3, [pc, #284]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2202      	movs	r2, #2
 80027f8:	4013      	ands	r3, r2
 80027fa:	d1f1      	bne.n	80027e0 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2208      	movs	r2, #8
 8002802:	4013      	ands	r3, r2
 8002804:	d036      	beq.n	8002874 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d019      	beq.n	8002842 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280e:	4b40      	ldr	r3, [pc, #256]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002812:	4b3f      	ldr	r3, [pc, #252]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002814:	2101      	movs	r1, #1
 8002816:	430a      	orrs	r2, r1
 8002818:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281a:	f7fe fee5 	bl	80015e8 <HAL_GetTick>
 800281e:	0003      	movs	r3, r0
 8002820:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002824:	f7fe fee0 	bl	80015e8 <HAL_GetTick>
 8002828:	0002      	movs	r2, r0
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e1e1      	b.n	8002bfa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002836:	4b36      	ldr	r3, [pc, #216]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	2202      	movs	r2, #2
 800283c:	4013      	ands	r3, r2
 800283e:	d0f1      	beq.n	8002824 <HAL_RCC_OscConfig+0x248>
 8002840:	e018      	b.n	8002874 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002842:	4b33      	ldr	r3, [pc, #204]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002844:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002846:	4b32      	ldr	r3, [pc, #200]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002848:	2101      	movs	r1, #1
 800284a:	438a      	bics	r2, r1
 800284c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284e:	f7fe fecb 	bl	80015e8 <HAL_GetTick>
 8002852:	0003      	movs	r3, r0
 8002854:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002858:	f7fe fec6 	bl	80015e8 <HAL_GetTick>
 800285c:	0002      	movs	r2, r0
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e1c7      	b.n	8002bfa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286a:	4b29      	ldr	r3, [pc, #164]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	2202      	movs	r2, #2
 8002870:	4013      	ands	r3, r2
 8002872:	d1f1      	bne.n	8002858 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2204      	movs	r2, #4
 800287a:	4013      	ands	r3, r2
 800287c:	d100      	bne.n	8002880 <HAL_RCC_OscConfig+0x2a4>
 800287e:	e0b5      	b.n	80029ec <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002880:	231f      	movs	r3, #31
 8002882:	18fb      	adds	r3, r7, r3
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002888:	4b21      	ldr	r3, [pc, #132]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 800288a:	69da      	ldr	r2, [r3, #28]
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	055b      	lsls	r3, r3, #21
 8002890:	4013      	ands	r3, r2
 8002892:	d111      	bne.n	80028b8 <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002894:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002896:	69da      	ldr	r2, [r3, #28]
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 800289a:	2180      	movs	r1, #128	; 0x80
 800289c:	0549      	lsls	r1, r1, #21
 800289e:	430a      	orrs	r2, r1
 80028a0:	61da      	str	r2, [r3, #28]
 80028a2:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 80028a4:	69da      	ldr	r2, [r3, #28]
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	055b      	lsls	r3, r3, #21
 80028aa:	4013      	ands	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80028b0:	231f      	movs	r3, #31
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	2201      	movs	r2, #1
 80028b6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b8:	4b18      	ldr	r3, [pc, #96]	; (800291c <HAL_RCC_OscConfig+0x340>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4013      	ands	r3, r2
 80028c2:	d11a      	bne.n	80028fa <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028c4:	4b15      	ldr	r3, [pc, #84]	; (800291c <HAL_RCC_OscConfig+0x340>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b14      	ldr	r3, [pc, #80]	; (800291c <HAL_RCC_OscConfig+0x340>)
 80028ca:	2180      	movs	r1, #128	; 0x80
 80028cc:	0049      	lsls	r1, r1, #1
 80028ce:	430a      	orrs	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d2:	f7fe fe89 	bl	80015e8 <HAL_GetTick>
 80028d6:	0003      	movs	r3, r0
 80028d8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028dc:	f7fe fe84 	bl	80015e8 <HAL_GetTick>
 80028e0:	0002      	movs	r2, r0
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	; 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e185      	b.n	8002bfa <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ee:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_RCC_OscConfig+0x340>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	2380      	movs	r3, #128	; 0x80
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4013      	ands	r3, r2
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d10e      	bne.n	8002920 <HAL_RCC_OscConfig+0x344>
 8002902:	4b03      	ldr	r3, [pc, #12]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002904:	6a1a      	ldr	r2, [r3, #32]
 8002906:	4b02      	ldr	r3, [pc, #8]	; (8002910 <HAL_RCC_OscConfig+0x334>)
 8002908:	2101      	movs	r1, #1
 800290a:	430a      	orrs	r2, r1
 800290c:	621a      	str	r2, [r3, #32]
 800290e:	e035      	b.n	800297c <HAL_RCC_OscConfig+0x3a0>
 8002910:	40021000 	.word	0x40021000
 8002914:	fffeffff 	.word	0xfffeffff
 8002918:	fffbffff 	.word	0xfffbffff
 800291c:	40007000 	.word	0x40007000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10c      	bne.n	8002942 <HAL_RCC_OscConfig+0x366>
 8002928:	4bb6      	ldr	r3, [pc, #728]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 800292a:	6a1a      	ldr	r2, [r3, #32]
 800292c:	4bb5      	ldr	r3, [pc, #724]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 800292e:	2101      	movs	r1, #1
 8002930:	438a      	bics	r2, r1
 8002932:	621a      	str	r2, [r3, #32]
 8002934:	4bb3      	ldr	r3, [pc, #716]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002936:	6a1a      	ldr	r2, [r3, #32]
 8002938:	4bb2      	ldr	r3, [pc, #712]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 800293a:	2104      	movs	r1, #4
 800293c:	438a      	bics	r2, r1
 800293e:	621a      	str	r2, [r3, #32]
 8002940:	e01c      	b.n	800297c <HAL_RCC_OscConfig+0x3a0>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b05      	cmp	r3, #5
 8002948:	d10c      	bne.n	8002964 <HAL_RCC_OscConfig+0x388>
 800294a:	4bae      	ldr	r3, [pc, #696]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 800294c:	6a1a      	ldr	r2, [r3, #32]
 800294e:	4bad      	ldr	r3, [pc, #692]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002950:	2104      	movs	r1, #4
 8002952:	430a      	orrs	r2, r1
 8002954:	621a      	str	r2, [r3, #32]
 8002956:	4bab      	ldr	r3, [pc, #684]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002958:	6a1a      	ldr	r2, [r3, #32]
 800295a:	4baa      	ldr	r3, [pc, #680]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 800295c:	2101      	movs	r1, #1
 800295e:	430a      	orrs	r2, r1
 8002960:	621a      	str	r2, [r3, #32]
 8002962:	e00b      	b.n	800297c <HAL_RCC_OscConfig+0x3a0>
 8002964:	4ba7      	ldr	r3, [pc, #668]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002966:	6a1a      	ldr	r2, [r3, #32]
 8002968:	4ba6      	ldr	r3, [pc, #664]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 800296a:	2101      	movs	r1, #1
 800296c:	438a      	bics	r2, r1
 800296e:	621a      	str	r2, [r3, #32]
 8002970:	4ba4      	ldr	r3, [pc, #656]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002972:	6a1a      	ldr	r2, [r3, #32]
 8002974:	4ba3      	ldr	r3, [pc, #652]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002976:	2104      	movs	r1, #4
 8002978:	438a      	bics	r2, r1
 800297a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d014      	beq.n	80029ae <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002984:	f7fe fe30 	bl	80015e8 <HAL_GetTick>
 8002988:	0003      	movs	r3, r0
 800298a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298c:	e009      	b.n	80029a2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800298e:	f7fe fe2b 	bl	80015e8 <HAL_GetTick>
 8002992:	0002      	movs	r2, r0
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	4a9b      	ldr	r2, [pc, #620]	; (8002c08 <HAL_RCC_OscConfig+0x62c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e12b      	b.n	8002bfa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a2:	4b98      	ldr	r3, [pc, #608]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	2202      	movs	r2, #2
 80029a8:	4013      	ands	r3, r2
 80029aa:	d0f0      	beq.n	800298e <HAL_RCC_OscConfig+0x3b2>
 80029ac:	e013      	b.n	80029d6 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ae:	f7fe fe1b 	bl	80015e8 <HAL_GetTick>
 80029b2:	0003      	movs	r3, r0
 80029b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b6:	e009      	b.n	80029cc <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7fe fe16 	bl	80015e8 <HAL_GetTick>
 80029bc:	0002      	movs	r2, r0
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	4a91      	ldr	r2, [pc, #580]	; (8002c08 <HAL_RCC_OscConfig+0x62c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e116      	b.n	8002bfa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029cc:	4b8d      	ldr	r3, [pc, #564]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	2202      	movs	r2, #2
 80029d2:	4013      	ands	r3, r2
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029d6:	231f      	movs	r3, #31
 80029d8:	18fb      	adds	r3, r7, r3
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d105      	bne.n	80029ec <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e0:	4b88      	ldr	r3, [pc, #544]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 80029e2:	69da      	ldr	r2, [r3, #28]
 80029e4:	4b87      	ldr	r3, [pc, #540]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 80029e6:	4989      	ldr	r1, [pc, #548]	; (8002c0c <HAL_RCC_OscConfig+0x630>)
 80029e8:	400a      	ands	r2, r1
 80029ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2210      	movs	r2, #16
 80029f2:	4013      	ands	r3, r2
 80029f4:	d063      	beq.n	8002abe <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d12a      	bne.n	8002a54 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80029fe:	4b81      	ldr	r3, [pc, #516]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a02:	4b80      	ldr	r3, [pc, #512]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002a04:	2104      	movs	r1, #4
 8002a06:	430a      	orrs	r2, r1
 8002a08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002a0a:	4b7e      	ldr	r3, [pc, #504]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a0e:	4b7d      	ldr	r3, [pc, #500]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002a10:	2101      	movs	r1, #1
 8002a12:	430a      	orrs	r2, r1
 8002a14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a16:	f7fe fde7 	bl	80015e8 <HAL_GetTick>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a20:	f7fe fde2 	bl	80015e8 <HAL_GetTick>
 8002a24:	0002      	movs	r2, r0
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e0e3      	b.n	8002bfa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a32:	4b74      	ldr	r3, [pc, #464]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a36:	2202      	movs	r2, #2
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d0f1      	beq.n	8002a20 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a3c:	4b71      	ldr	r3, [pc, #452]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a40:	22f8      	movs	r2, #248	; 0xf8
 8002a42:	4393      	bics	r3, r2
 8002a44:	0019      	movs	r1, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	00da      	lsls	r2, r3, #3
 8002a4c:	4b6d      	ldr	r3, [pc, #436]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	635a      	str	r2, [r3, #52]	; 0x34
 8002a52:	e034      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	3305      	adds	r3, #5
 8002a5a:	d111      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002a5c:	4b69      	ldr	r3, [pc, #420]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a60:	4b68      	ldr	r3, [pc, #416]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002a62:	2104      	movs	r1, #4
 8002a64:	438a      	bics	r2, r1
 8002a66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a68:	4b66      	ldr	r3, [pc, #408]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6c:	22f8      	movs	r2, #248	; 0xf8
 8002a6e:	4393      	bics	r3, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	00da      	lsls	r2, r3, #3
 8002a78:	4b62      	ldr	r3, [pc, #392]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a7e:	e01e      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a80:	4b60      	ldr	r3, [pc, #384]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a84:	4b5f      	ldr	r3, [pc, #380]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002a86:	2104      	movs	r1, #4
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002a8c:	4b5d      	ldr	r3, [pc, #372]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002a8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a90:	4b5c      	ldr	r3, [pc, #368]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002a92:	2101      	movs	r1, #1
 8002a94:	438a      	bics	r2, r1
 8002a96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a98:	f7fe fda6 	bl	80015e8 <HAL_GetTick>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002aa2:	f7fe fda1 	bl	80015e8 <HAL_GetTick>
 8002aa6:	0002      	movs	r2, r0
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e0a2      	b.n	8002bfa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ab4:	4b53      	ldr	r3, [pc, #332]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab8:	2202      	movs	r2, #2
 8002aba:	4013      	ands	r3, r2
 8002abc:	d1f1      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d100      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4ec>
 8002ac6:	e097      	b.n	8002bf8 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ac8:	4b4e      	ldr	r3, [pc, #312]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	220c      	movs	r2, #12
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d100      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x4fa>
 8002ad4:	e06b      	b.n	8002bae <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d14c      	bne.n	8002b78 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ade:	4b49      	ldr	r3, [pc, #292]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4b48      	ldr	r3, [pc, #288]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002ae4:	494a      	ldr	r1, [pc, #296]	; (8002c10 <HAL_RCC_OscConfig+0x634>)
 8002ae6:	400a      	ands	r2, r1
 8002ae8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aea:	f7fe fd7d 	bl	80015e8 <HAL_GetTick>
 8002aee:	0003      	movs	r3, r0
 8002af0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af4:	f7fe fd78 	bl	80015e8 <HAL_GetTick>
 8002af8:	0002      	movs	r2, r0
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e079      	b.n	8002bfa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b06:	4b3f      	ldr	r3, [pc, #252]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	2380      	movs	r3, #128	; 0x80
 8002b0c:	049b      	lsls	r3, r3, #18
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b12:	4b3c      	ldr	r3, [pc, #240]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	220f      	movs	r2, #15
 8002b18:	4393      	bics	r3, r2
 8002b1a:	0019      	movs	r1, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b20:	4b38      	ldr	r3, [pc, #224]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002b22:	430a      	orrs	r2, r1
 8002b24:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b26:	4b37      	ldr	r3, [pc, #220]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4a3a      	ldr	r2, [pc, #232]	; (8002c14 <HAL_RCC_OscConfig+0x638>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	0019      	movs	r1, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	4b32      	ldr	r3, [pc, #200]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b40:	4b30      	ldr	r3, [pc, #192]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4b2f      	ldr	r3, [pc, #188]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002b46:	2180      	movs	r1, #128	; 0x80
 8002b48:	0449      	lsls	r1, r1, #17
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7fe fd4b 	bl	80015e8 <HAL_GetTick>
 8002b52:	0003      	movs	r3, r0
 8002b54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b58:	f7fe fd46 	bl	80015e8 <HAL_GetTick>
 8002b5c:	0002      	movs	r2, r0
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e047      	b.n	8002bfa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b6a:	4b26      	ldr	r3, [pc, #152]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	049b      	lsls	r3, r3, #18
 8002b72:	4013      	ands	r3, r2
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0x57c>
 8002b76:	e03f      	b.n	8002bf8 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b78:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002b7e:	4924      	ldr	r1, [pc, #144]	; (8002c10 <HAL_RCC_OscConfig+0x634>)
 8002b80:	400a      	ands	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b84:	f7fe fd30 	bl	80015e8 <HAL_GetTick>
 8002b88:	0003      	movs	r3, r0
 8002b8a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b8e:	f7fe fd2b 	bl	80015e8 <HAL_GetTick>
 8002b92:	0002      	movs	r2, r0
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e02c      	b.n	8002bfa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba0:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	2380      	movs	r3, #128	; 0x80
 8002ba6:	049b      	lsls	r3, r3, #18
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d1f0      	bne.n	8002b8e <HAL_RCC_OscConfig+0x5b2>
 8002bac:	e024      	b.n	8002bf8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e01f      	b.n	8002bfa <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002bba:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002bc0:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <HAL_RCC_OscConfig+0x628>)
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	23c0      	movs	r3, #192	; 0xc0
 8002bca:	025b      	lsls	r3, r3, #9
 8002bcc:	401a      	ands	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d10e      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	220f      	movs	r2, #15
 8002bda:	401a      	ands	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d107      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	23f0      	movs	r3, #240	; 0xf0
 8002be8:	039b      	lsls	r3, r3, #14
 8002bea:	401a      	ands	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b008      	add	sp, #32
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	40021000 	.word	0x40021000
 8002c08:	00001388 	.word	0x00001388
 8002c0c:	efffffff 	.word	0xefffffff
 8002c10:	feffffff 	.word	0xfeffffff
 8002c14:	ffc27fff 	.word	0xffc27fff

08002c18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0b3      	b.n	8002d94 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b5b      	ldr	r3, [pc, #364]	; (8002d9c <HAL_RCC_ClockConfig+0x184>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2201      	movs	r2, #1
 8002c32:	4013      	ands	r3, r2
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d911      	bls.n	8002c5e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b58      	ldr	r3, [pc, #352]	; (8002d9c <HAL_RCC_ClockConfig+0x184>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	4393      	bics	r3, r2
 8002c42:	0019      	movs	r1, r3
 8002c44:	4b55      	ldr	r3, [pc, #340]	; (8002d9c <HAL_RCC_ClockConfig+0x184>)
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4c:	4b53      	ldr	r3, [pc, #332]	; (8002d9c <HAL_RCC_ClockConfig+0x184>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2201      	movs	r2, #1
 8002c52:	4013      	ands	r3, r2
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d001      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e09a      	b.n	8002d94 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2202      	movs	r2, #2
 8002c64:	4013      	ands	r3, r2
 8002c66:	d015      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d006      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c72:	4b4b      	ldr	r3, [pc, #300]	; (8002da0 <HAL_RCC_ClockConfig+0x188>)
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	4b4a      	ldr	r3, [pc, #296]	; (8002da0 <HAL_RCC_ClockConfig+0x188>)
 8002c78:	21e0      	movs	r1, #224	; 0xe0
 8002c7a:	00c9      	lsls	r1, r1, #3
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c80:	4b47      	ldr	r3, [pc, #284]	; (8002da0 <HAL_RCC_ClockConfig+0x188>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	22f0      	movs	r2, #240	; 0xf0
 8002c86:	4393      	bics	r3, r2
 8002c88:	0019      	movs	r1, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	4b44      	ldr	r3, [pc, #272]	; (8002da0 <HAL_RCC_ClockConfig+0x188>)
 8002c90:	430a      	orrs	r2, r1
 8002c92:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d040      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d107      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	4b3e      	ldr	r3, [pc, #248]	; (8002da0 <HAL_RCC_ClockConfig+0x188>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	029b      	lsls	r3, r3, #10
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d114      	bne.n	8002cdc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e06e      	b.n	8002d94 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cbe:	4b38      	ldr	r3, [pc, #224]	; (8002da0 <HAL_RCC_ClockConfig+0x188>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	2380      	movs	r3, #128	; 0x80
 8002cc4:	049b      	lsls	r3, r3, #18
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d108      	bne.n	8002cdc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e062      	b.n	8002d94 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cce:	4b34      	ldr	r3, [pc, #208]	; (8002da0 <HAL_RCC_ClockConfig+0x188>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d101      	bne.n	8002cdc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e05b      	b.n	8002d94 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cdc:	4b30      	ldr	r3, [pc, #192]	; (8002da0 <HAL_RCC_ClockConfig+0x188>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	4393      	bics	r3, r2
 8002ce4:	0019      	movs	r1, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	4b2d      	ldr	r3, [pc, #180]	; (8002da0 <HAL_RCC_ClockConfig+0x188>)
 8002cec:	430a      	orrs	r2, r1
 8002cee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf0:	f7fe fc7a 	bl	80015e8 <HAL_GetTick>
 8002cf4:	0003      	movs	r3, r0
 8002cf6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf8:	e009      	b.n	8002d0e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cfa:	f7fe fc75 	bl	80015e8 <HAL_GetTick>
 8002cfe:	0002      	movs	r2, r0
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	4a27      	ldr	r2, [pc, #156]	; (8002da4 <HAL_RCC_ClockConfig+0x18c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e042      	b.n	8002d94 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0e:	4b24      	ldr	r3, [pc, #144]	; (8002da0 <HAL_RCC_ClockConfig+0x188>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	220c      	movs	r2, #12
 8002d14:	401a      	ands	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d1ec      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d20:	4b1e      	ldr	r3, [pc, #120]	; (8002d9c <HAL_RCC_ClockConfig+0x184>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2201      	movs	r2, #1
 8002d26:	4013      	ands	r3, r2
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d211      	bcs.n	8002d52 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2e:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <HAL_RCC_ClockConfig+0x184>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2201      	movs	r2, #1
 8002d34:	4393      	bics	r3, r2
 8002d36:	0019      	movs	r1, r3
 8002d38:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <HAL_RCC_ClockConfig+0x184>)
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d40:	4b16      	ldr	r3, [pc, #88]	; (8002d9c <HAL_RCC_ClockConfig+0x184>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2201      	movs	r2, #1
 8002d46:	4013      	ands	r3, r2
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d001      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e020      	b.n	8002d94 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2204      	movs	r2, #4
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d009      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d5c:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <HAL_RCC_ClockConfig+0x188>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4a11      	ldr	r2, [pc, #68]	; (8002da8 <HAL_RCC_ClockConfig+0x190>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	0019      	movs	r1, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <HAL_RCC_ClockConfig+0x188>)
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d70:	f000 f820 	bl	8002db4 <HAL_RCC_GetSysClockFreq>
 8002d74:	0001      	movs	r1, r0
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <HAL_RCC_ClockConfig+0x188>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	091b      	lsrs	r3, r3, #4
 8002d7c:	220f      	movs	r2, #15
 8002d7e:	4013      	ands	r3, r2
 8002d80:	4a0a      	ldr	r2, [pc, #40]	; (8002dac <HAL_RCC_ClockConfig+0x194>)
 8002d82:	5cd3      	ldrb	r3, [r2, r3]
 8002d84:	000a      	movs	r2, r1
 8002d86:	40da      	lsrs	r2, r3
 8002d88:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <HAL_RCC_ClockConfig+0x198>)
 8002d8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	f7fe fbe5 	bl	800155c <HAL_InitTick>
  
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	0018      	movs	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b004      	add	sp, #16
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40022000 	.word	0x40022000
 8002da0:	40021000 	.word	0x40021000
 8002da4:	00001388 	.word	0x00001388
 8002da8:	fffff8ff 	.word	0xfffff8ff
 8002dac:	080046d0 	.word	0x080046d0
 8002db0:	20000004 	.word	0x20000004

08002db4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db4:	b590      	push	{r4, r7, lr}
 8002db6:	b08f      	sub	sp, #60	; 0x3c
 8002db8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002dba:	2314      	movs	r3, #20
 8002dbc:	18fb      	adds	r3, r7, r3
 8002dbe:	4a2c      	ldr	r2, [pc, #176]	; (8002e70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dc0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002dc2:	c313      	stmia	r3!, {r0, r1, r4}
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002dc8:	1d3b      	adds	r3, r7, #4
 8002dca:	4a2a      	ldr	r2, [pc, #168]	; (8002e74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dcc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002dce:	c313      	stmia	r3!, {r0, r1, r4}
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd8:	2300      	movs	r3, #0
 8002dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ddc:	2300      	movs	r3, #0
 8002dde:	637b      	str	r3, [r7, #52]	; 0x34
 8002de0:	2300      	movs	r3, #0
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002de8:	4b23      	ldr	r3, [pc, #140]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df0:	220c      	movs	r2, #12
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d002      	beq.n	8002dfe <HAL_RCC_GetSysClockFreq+0x4a>
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d003      	beq.n	8002e04 <HAL_RCC_GetSysClockFreq+0x50>
 8002dfc:	e02f      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dfe:	4b1f      	ldr	r3, [pc, #124]	; (8002e7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e00:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e02:	e02f      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e06:	0c9b      	lsrs	r3, r3, #18
 8002e08:	220f      	movs	r2, #15
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2214      	movs	r2, #20
 8002e0e:	18ba      	adds	r2, r7, r2
 8002e10:	5cd3      	ldrb	r3, [r2, r3]
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002e14:	4b18      	ldr	r3, [pc, #96]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	220f      	movs	r2, #15
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	1d3a      	adds	r2, r7, #4
 8002e1e:	5cd3      	ldrb	r3, [r2, r3]
 8002e20:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e24:	23c0      	movs	r3, #192	; 0xc0
 8002e26:	025b      	lsls	r3, r3, #9
 8002e28:	401a      	ands	r2, r3
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	025b      	lsls	r3, r3, #9
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d109      	bne.n	8002e46 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e34:	4811      	ldr	r0, [pc, #68]	; (8002e7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e36:	f7fd f965 	bl	8000104 <__udivsi3>
 8002e3a:	0003      	movs	r3, r0
 8002e3c:	001a      	movs	r2, r3
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	4353      	muls	r3, r2
 8002e42:	637b      	str	r3, [r7, #52]	; 0x34
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e48:	480c      	ldr	r0, [pc, #48]	; (8002e7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e4a:	f7fd f95b 	bl	8000104 <__udivsi3>
 8002e4e:	0003      	movs	r3, r0
 8002e50:	001a      	movs	r2, r3
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	4353      	muls	r3, r2
 8002e56:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e5a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e5c:	e002      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e5e:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e60:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e62:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b00f      	add	sp, #60	; 0x3c
 8002e6c:	bd90      	pop	{r4, r7, pc}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	080046b0 	.word	0x080046b0
 8002e74:	080046c0 	.word	0x080046c0
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	007a1200 	.word	0x007a1200

08002e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e84:	4b02      	ldr	r3, [pc, #8]	; (8002e90 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e86:	681b      	ldr	r3, [r3, #0]
}
 8002e88:	0018      	movs	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	20000004 	.word	0x20000004

08002e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002e98:	f7ff fff2 	bl	8002e80 <HAL_RCC_GetHCLKFreq>
 8002e9c:	0001      	movs	r1, r0
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	2207      	movs	r2, #7
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	4a04      	ldr	r2, [pc, #16]	; (8002ebc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002eaa:	5cd3      	ldrb	r3, [r2, r3]
 8002eac:	40d9      	lsrs	r1, r3
 8002eae:	000b      	movs	r3, r1
}    
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	080046e0 	.word	0x080046e0

08002ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	025b      	lsls	r3, r3, #9
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d100      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002edc:	e08f      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002ede:	2317      	movs	r3, #23
 8002ee0:	18fb      	adds	r3, r7, r3
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ee6:	4b57      	ldr	r3, [pc, #348]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ee8:	69da      	ldr	r2, [r3, #28]
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	055b      	lsls	r3, r3, #21
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d111      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ef2:	4b54      	ldr	r3, [pc, #336]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ef4:	69da      	ldr	r2, [r3, #28]
 8002ef6:	4b53      	ldr	r3, [pc, #332]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ef8:	2180      	movs	r1, #128	; 0x80
 8002efa:	0549      	lsls	r1, r1, #21
 8002efc:	430a      	orrs	r2, r1
 8002efe:	61da      	str	r2, [r3, #28]
 8002f00:	4b50      	ldr	r3, [pc, #320]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f02:	69da      	ldr	r2, [r3, #28]
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	055b      	lsls	r3, r3, #21
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f0e:	2317      	movs	r3, #23
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f16:	4b4c      	ldr	r3, [pc, #304]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d11a      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f22:	4b49      	ldr	r3, [pc, #292]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	4b48      	ldr	r3, [pc, #288]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f28:	2180      	movs	r1, #128	; 0x80
 8002f2a:	0049      	lsls	r1, r1, #1
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f30:	f7fe fb5a 	bl	80015e8 <HAL_GetTick>
 8002f34:	0003      	movs	r3, r0
 8002f36:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f38:	e008      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3a:	f7fe fb55 	bl	80015e8 <HAL_GetTick>
 8002f3e:	0002      	movs	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b64      	cmp	r3, #100	; 0x64
 8002f46:	d901      	bls.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e077      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4c:	4b3e      	ldr	r3, [pc, #248]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4013      	ands	r3, r2
 8002f56:	d0f0      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f58:	4b3a      	ldr	r3, [pc, #232]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f5a:	6a1a      	ldr	r2, [r3, #32]
 8002f5c:	23c0      	movs	r3, #192	; 0xc0
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4013      	ands	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d034      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	23c0      	movs	r3, #192	; 0xc0
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4013      	ands	r3, r2
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d02c      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f7a:	4b32      	ldr	r3, [pc, #200]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	4a33      	ldr	r2, [pc, #204]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f84:	4b2f      	ldr	r3, [pc, #188]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f86:	6a1a      	ldr	r2, [r3, #32]
 8002f88:	4b2e      	ldr	r3, [pc, #184]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f8a:	2180      	movs	r1, #128	; 0x80
 8002f8c:	0249      	lsls	r1, r1, #9
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f92:	4b2c      	ldr	r3, [pc, #176]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f94:	6a1a      	ldr	r2, [r3, #32]
 8002f96:	4b2b      	ldr	r3, [pc, #172]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f98:	492d      	ldr	r1, [pc, #180]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002f9a:	400a      	ands	r2, r1
 8002f9c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f9e:	4b29      	ldr	r3, [pc, #164]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d013      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7fe fb1c 	bl	80015e8 <HAL_GetTick>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb4:	e009      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb6:	f7fe fb17 	bl	80015e8 <HAL_GetTick>
 8002fba:	0002      	movs	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	4a24      	ldr	r2, [pc, #144]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e038      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fca:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d0f0      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	4a1c      	ldr	r2, [pc, #112]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	0019      	movs	r1, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	4b18      	ldr	r3, [pc, #96]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fe8:	2317      	movs	r3, #23
 8002fea:	18fb      	adds	r3, r7, r3
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d105      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff2:	4b14      	ldr	r3, [pc, #80]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ff4:	69da      	ldr	r2, [r3, #28]
 8002ff6:	4b13      	ldr	r3, [pc, #76]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ff8:	4917      	ldr	r1, [pc, #92]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002ffa:	400a      	ands	r2, r1
 8002ffc:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2201      	movs	r2, #1
 8003004:	4013      	ands	r3, r2
 8003006:	d009      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003008:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	2203      	movs	r2, #3
 800300e:	4393      	bics	r3, r2
 8003010:	0019      	movs	r1, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003018:	430a      	orrs	r2, r1
 800301a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2220      	movs	r2, #32
 8003022:	4013      	ands	r3, r2
 8003024:	d009      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003026:	4b07      	ldr	r3, [pc, #28]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	2210      	movs	r2, #16
 800302c:	4393      	bics	r3, r2
 800302e:	0019      	movs	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	4b03      	ldr	r3, [pc, #12]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003036:	430a      	orrs	r2, r1
 8003038:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b006      	add	sp, #24
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40021000 	.word	0x40021000
 8003048:	40007000 	.word	0x40007000
 800304c:	fffffcff 	.word	0xfffffcff
 8003050:	fffeffff 	.word	0xfffeffff
 8003054:	00001388 	.word	0x00001388
 8003058:	efffffff 	.word	0xefffffff

0800305c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e08a      	b.n	8003184 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	225d      	movs	r2, #93	; 0x5d
 8003078:	5c9b      	ldrb	r3, [r3, r2]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d107      	bne.n	8003090 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	225c      	movs	r2, #92	; 0x5c
 8003084:	2100      	movs	r1, #0
 8003086:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	0018      	movs	r0, r3
 800308c:	f7fd ffea 	bl	8001064 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	225d      	movs	r2, #93	; 0x5d
 8003094:	2102      	movs	r1, #2
 8003096:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2140      	movs	r1, #64	; 0x40
 80030a4:	438a      	bics	r2, r1
 80030a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	23e0      	movs	r3, #224	; 0xe0
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d902      	bls.n	80030ba <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	e002      	b.n	80030c0 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	015b      	lsls	r3, r3, #5
 80030be:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	23f0      	movs	r3, #240	; 0xf0
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d008      	beq.n	80030de <HAL_SPI_Init+0x82>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	23e0      	movs	r3, #224	; 0xe0
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d002      	beq.n	80030de <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10c      	bne.n	8003100 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	23e0      	movs	r3, #224	; 0xe0
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d903      	bls.n	80030fa <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2202      	movs	r2, #2
 80030f6:	631a      	str	r2, [r3, #48]	; 0x30
 80030f8:	e002      	b.n	8003100 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6999      	ldr	r1, [r3, #24]
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	400b      	ands	r3, r1
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	431a      	orrs	r2, r3
 800312e:	0011      	movs	r1, r2
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	0c1b      	lsrs	r3, r3, #16
 8003142:	2204      	movs	r2, #4
 8003144:	401a      	ands	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	431a      	orrs	r2, r3
 8003158:	0011      	movs	r1, r2
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	430a      	orrs	r2, r1
 8003162:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	69da      	ldr	r2, [r3, #28]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4907      	ldr	r1, [pc, #28]	; (800318c <HAL_SPI_Init+0x130>)
 8003170:	400a      	ands	r2, r1
 8003172:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	225d      	movs	r2, #93	; 0x5d
 800317e:	2101      	movs	r1, #1
 8003180:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	0018      	movs	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	b004      	add	sp, #16
 800318a:	bd80      	pop	{r7, pc}
 800318c:	fffff7ff 	.word	0xfffff7ff

08003190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e01e      	b.n	80031e0 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	223d      	movs	r2, #61	; 0x3d
 80031a6:	5c9b      	ldrb	r3, [r3, r2]
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d107      	bne.n	80031be <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	223c      	movs	r2, #60	; 0x3c
 80031b2:	2100      	movs	r1, #0
 80031b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	0018      	movs	r0, r3
 80031ba:	f7fd fff5 	bl	80011a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	223d      	movs	r2, #61	; 0x3d
 80031c2:	2102      	movs	r1, #2
 80031c4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3304      	adds	r3, #4
 80031ce:	0019      	movs	r1, r3
 80031d0:	0010      	movs	r0, r2
 80031d2:	f000 facd 	bl	8003770 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	223d      	movs	r2, #61	; 0x3d
 80031da:	2101      	movs	r1, #1
 80031dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	0018      	movs	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b002      	add	sp, #8
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e01e      	b.n	8003238 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	223d      	movs	r2, #61	; 0x3d
 80031fe:	5c9b      	ldrb	r3, [r3, r2]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d107      	bne.n	8003216 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	223c      	movs	r2, #60	; 0x3c
 800320a:	2100      	movs	r1, #0
 800320c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	0018      	movs	r0, r3
 8003212:	f000 f815 	bl	8003240 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	223d      	movs	r2, #61	; 0x3d
 800321a:	2102      	movs	r1, #2
 800321c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3304      	adds	r3, #4
 8003226:	0019      	movs	r1, r3
 8003228:	0010      	movs	r0, r2
 800322a:	f000 faa1 	bl	8003770 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	223d      	movs	r2, #61	; 0x3d
 8003232:	2101      	movs	r1, #1
 8003234:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	0018      	movs	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	b002      	add	sp, #8
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003248:	46c0      	nop			; (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	b002      	add	sp, #8
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6839      	ldr	r1, [r7, #0]
 8003260:	2201      	movs	r2, #1
 8003262:	0018      	movs	r0, r3
 8003264:	f000 fd90 	bl	8003d88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a1a      	ldr	r2, [pc, #104]	; (80032d8 <HAL_TIM_OC_Start+0x88>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d00e      	beq.n	8003290 <HAL_TIM_OC_Start+0x40>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a19      	ldr	r2, [pc, #100]	; (80032dc <HAL_TIM_OC_Start+0x8c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d009      	beq.n	8003290 <HAL_TIM_OC_Start+0x40>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a17      	ldr	r2, [pc, #92]	; (80032e0 <HAL_TIM_OC_Start+0x90>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d004      	beq.n	8003290 <HAL_TIM_OC_Start+0x40>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a16      	ldr	r2, [pc, #88]	; (80032e4 <HAL_TIM_OC_Start+0x94>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d101      	bne.n	8003294 <HAL_TIM_OC_Start+0x44>
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <HAL_TIM_OC_Start+0x46>
 8003294:	2300      	movs	r3, #0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_TIM_OC_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2180      	movs	r1, #128	; 0x80
 80032a6:	0209      	lsls	r1, r1, #8
 80032a8:	430a      	orrs	r2, r1
 80032aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2207      	movs	r2, #7
 80032b4:	4013      	ands	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b06      	cmp	r3, #6
 80032bc:	d007      	beq.n	80032ce <HAL_TIM_OC_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2101      	movs	r1, #1
 80032ca:	430a      	orrs	r2, r1
 80032cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	0018      	movs	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b004      	add	sp, #16
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40012c00 	.word	0x40012c00
 80032dc:	40014000 	.word	0x40014000
 80032e0:	40014400 	.word	0x40014400
 80032e4:	40014800 	.word	0x40014800

080032e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e01e      	b.n	8003338 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	223d      	movs	r2, #61	; 0x3d
 80032fe:	5c9b      	ldrb	r3, [r3, r2]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d107      	bne.n	8003316 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	223c      	movs	r2, #60	; 0x3c
 800330a:	2100      	movs	r1, #0
 800330c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	0018      	movs	r0, r3
 8003312:	f000 f815 	bl	8003340 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	223d      	movs	r2, #61	; 0x3d
 800331a:	2102      	movs	r1, #2
 800331c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3304      	adds	r3, #4
 8003326:	0019      	movs	r1, r3
 8003328:	0010      	movs	r0, r2
 800332a:	f000 fa21 	bl	8003770 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	223d      	movs	r2, #61	; 0x3d
 8003332:	2101      	movs	r1, #1
 8003334:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	0018      	movs	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	b002      	add	sp, #8
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003348:	46c0      	nop			; (mov r8, r8)
 800334a:	46bd      	mov	sp, r7
 800334c:	b002      	add	sp, #8
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6839      	ldr	r1, [r7, #0]
 8003360:	2201      	movs	r2, #1
 8003362:	0018      	movs	r0, r3
 8003364:	f000 fd10 	bl	8003d88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a1a      	ldr	r2, [pc, #104]	; (80033d8 <HAL_TIM_PWM_Start+0x88>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00e      	beq.n	8003390 <HAL_TIM_PWM_Start+0x40>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a19      	ldr	r2, [pc, #100]	; (80033dc <HAL_TIM_PWM_Start+0x8c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d009      	beq.n	8003390 <HAL_TIM_PWM_Start+0x40>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a17      	ldr	r2, [pc, #92]	; (80033e0 <HAL_TIM_PWM_Start+0x90>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d004      	beq.n	8003390 <HAL_TIM_PWM_Start+0x40>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a16      	ldr	r2, [pc, #88]	; (80033e4 <HAL_TIM_PWM_Start+0x94>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d101      	bne.n	8003394 <HAL_TIM_PWM_Start+0x44>
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <HAL_TIM_PWM_Start+0x46>
 8003394:	2300      	movs	r3, #0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d008      	beq.n	80033ac <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2180      	movs	r1, #128	; 0x80
 80033a6:	0209      	lsls	r1, r1, #8
 80033a8:	430a      	orrs	r2, r1
 80033aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2207      	movs	r2, #7
 80033b4:	4013      	ands	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b06      	cmp	r3, #6
 80033bc:	d007      	beq.n	80033ce <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2101      	movs	r1, #1
 80033ca:	430a      	orrs	r2, r1
 80033cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	0018      	movs	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b004      	add	sp, #16
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40012c00 	.word	0x40012c00
 80033dc:	40014000 	.word	0x40014000
 80033e0:	40014400 	.word	0x40014400
 80033e4:	40014800 	.word	0x40014800

080033e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	223c      	movs	r2, #60	; 0x3c
 80033f8:	5c9b      	ldrb	r3, [r3, r2]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_TIM_OC_ConfigChannel+0x1a>
 80033fe:	2302      	movs	r3, #2
 8003400:	e03c      	b.n	800347c <HAL_TIM_OC_ConfigChannel+0x94>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	223c      	movs	r2, #60	; 0x3c
 8003406:	2101      	movs	r1, #1
 8003408:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	223d      	movs	r2, #61	; 0x3d
 800340e:	2102      	movs	r1, #2
 8003410:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b04      	cmp	r3, #4
 8003416:	d010      	beq.n	800343a <HAL_TIM_OC_ConfigChannel+0x52>
 8003418:	d802      	bhi.n	8003420 <HAL_TIM_OC_ConfigChannel+0x38>
 800341a:	2b00      	cmp	r3, #0
 800341c:	d005      	beq.n	800342a <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 800341e:	e024      	b.n	800346a <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 8003420:	2b08      	cmp	r3, #8
 8003422:	d012      	beq.n	800344a <HAL_TIM_OC_ConfigChannel+0x62>
 8003424:	2b0c      	cmp	r3, #12
 8003426:	d018      	beq.n	800345a <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 8003428:	e01f      	b.n	800346a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	0011      	movs	r1, r2
 8003432:	0018      	movs	r0, r3
 8003434:	f000 fa12 	bl	800385c <TIM_OC1_SetConfig>
      break;
 8003438:	e017      	b.n	800346a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	0011      	movs	r1, r2
 8003442:	0018      	movs	r0, r3
 8003444:	f000 fa92 	bl	800396c <TIM_OC2_SetConfig>
      break;
 8003448:	e00f      	b.n	800346a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	0011      	movs	r1, r2
 8003452:	0018      	movs	r0, r3
 8003454:	f000 fb0e 	bl	8003a74 <TIM_OC3_SetConfig>
      break;
 8003458:	e007      	b.n	800346a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	0011      	movs	r1, r2
 8003462:	0018      	movs	r0, r3
 8003464:	f000 fb8c 	bl	8003b80 <TIM_OC4_SetConfig>
      break;
 8003468:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	223d      	movs	r2, #61	; 0x3d
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	223c      	movs	r2, #60	; 0x3c
 8003476:	2100      	movs	r1, #0
 8003478:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	0018      	movs	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	b004      	add	sp, #16
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	223c      	movs	r2, #60	; 0x3c
 8003494:	5c9b      	ldrb	r3, [r3, r2]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800349a:	2302      	movs	r3, #2
 800349c:	e0a4      	b.n	80035e8 <HAL_TIM_PWM_ConfigChannel+0x164>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	223c      	movs	r2, #60	; 0x3c
 80034a2:	2101      	movs	r1, #1
 80034a4:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	223d      	movs	r2, #61	; 0x3d
 80034aa:	2102      	movs	r1, #2
 80034ac:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d029      	beq.n	8003508 <HAL_TIM_PWM_ConfigChannel+0x84>
 80034b4:	d802      	bhi.n	80034bc <HAL_TIM_PWM_ConfigChannel+0x38>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 80034ba:	e08c      	b.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d046      	beq.n	800354e <HAL_TIM_PWM_ConfigChannel+0xca>
 80034c0:	2b0c      	cmp	r3, #12
 80034c2:	d065      	beq.n	8003590 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 80034c4:	e087      	b.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	0011      	movs	r1, r2
 80034ce:	0018      	movs	r0, r3
 80034d0:	f000 f9c4 	bl	800385c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2108      	movs	r1, #8
 80034e0:	430a      	orrs	r2, r1
 80034e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2104      	movs	r1, #4
 80034f0:	438a      	bics	r2, r1
 80034f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6999      	ldr	r1, [r3, #24]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	619a      	str	r2, [r3, #24]
      break;
 8003506:	e066      	b.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	0011      	movs	r1, r2
 8003510:	0018      	movs	r0, r3
 8003512:	f000 fa2b 	bl	800396c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699a      	ldr	r2, [r3, #24]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2180      	movs	r1, #128	; 0x80
 8003522:	0109      	lsls	r1, r1, #4
 8003524:	430a      	orrs	r2, r1
 8003526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699a      	ldr	r2, [r3, #24]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	492f      	ldr	r1, [pc, #188]	; (80035f0 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8003534:	400a      	ands	r2, r1
 8003536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6999      	ldr	r1, [r3, #24]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	021a      	lsls	r2, r3, #8
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	619a      	str	r2, [r3, #24]
      break;
 800354c:	e043      	b.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	0011      	movs	r1, r2
 8003556:	0018      	movs	r0, r3
 8003558:	f000 fa8c 	bl	8003a74 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69da      	ldr	r2, [r3, #28]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2108      	movs	r1, #8
 8003568:	430a      	orrs	r2, r1
 800356a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69da      	ldr	r2, [r3, #28]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2104      	movs	r1, #4
 8003578:	438a      	bics	r2, r1
 800357a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69d9      	ldr	r1, [r3, #28]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	61da      	str	r2, [r3, #28]
      break;
 800358e:	e022      	b.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	0011      	movs	r1, r2
 8003598:	0018      	movs	r0, r3
 800359a:	f000 faf1 	bl	8003b80 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69da      	ldr	r2, [r3, #28]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2180      	movs	r1, #128	; 0x80
 80035aa:	0109      	lsls	r1, r1, #4
 80035ac:	430a      	orrs	r2, r1
 80035ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	69da      	ldr	r2, [r3, #28]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	490d      	ldr	r1, [pc, #52]	; (80035f0 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80035bc:	400a      	ands	r2, r1
 80035be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	69d9      	ldr	r1, [r3, #28]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	021a      	lsls	r2, r3, #8
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	61da      	str	r2, [r3, #28]
      break;
 80035d4:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	223d      	movs	r2, #61	; 0x3d
 80035da:	2101      	movs	r1, #1
 80035dc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	223c      	movs	r2, #60	; 0x3c
 80035e2:	2100      	movs	r1, #0
 80035e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	0018      	movs	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b004      	add	sp, #16
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	fffffbff 	.word	0xfffffbff

080035f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	223c      	movs	r2, #60	; 0x3c
 8003602:	5c9b      	ldrb	r3, [r3, r2]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_TIM_ConfigClockSource+0x18>
 8003608:	2302      	movs	r3, #2
 800360a:	e0ab      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x170>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	223c      	movs	r2, #60	; 0x3c
 8003610:	2101      	movs	r1, #1
 8003612:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	223d      	movs	r2, #61	; 0x3d
 8003618:	2102      	movs	r1, #2
 800361a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2277      	movs	r2, #119	; 0x77
 8003628:	4393      	bics	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4a4f      	ldr	r2, [pc, #316]	; (800376c <HAL_TIM_ConfigClockSource+0x178>)
 8003630:	4013      	ands	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b40      	cmp	r3, #64	; 0x40
 8003642:	d100      	bne.n	8003646 <HAL_TIM_ConfigClockSource+0x52>
 8003644:	e06b      	b.n	800371e <HAL_TIM_ConfigClockSource+0x12a>
 8003646:	d80e      	bhi.n	8003666 <HAL_TIM_ConfigClockSource+0x72>
 8003648:	2b10      	cmp	r3, #16
 800364a:	d100      	bne.n	800364e <HAL_TIM_ConfigClockSource+0x5a>
 800364c:	e077      	b.n	800373e <HAL_TIM_ConfigClockSource+0x14a>
 800364e:	d803      	bhi.n	8003658 <HAL_TIM_ConfigClockSource+0x64>
 8003650:	2b00      	cmp	r3, #0
 8003652:	d100      	bne.n	8003656 <HAL_TIM_ConfigClockSource+0x62>
 8003654:	e073      	b.n	800373e <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003656:	e07c      	b.n	8003752 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003658:	2b20      	cmp	r3, #32
 800365a:	d100      	bne.n	800365e <HAL_TIM_ConfigClockSource+0x6a>
 800365c:	e06f      	b.n	800373e <HAL_TIM_ConfigClockSource+0x14a>
 800365e:	2b30      	cmp	r3, #48	; 0x30
 8003660:	d100      	bne.n	8003664 <HAL_TIM_ConfigClockSource+0x70>
 8003662:	e06c      	b.n	800373e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8003664:	e075      	b.n	8003752 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003666:	2b70      	cmp	r3, #112	; 0x70
 8003668:	d00e      	beq.n	8003688 <HAL_TIM_ConfigClockSource+0x94>
 800366a:	d804      	bhi.n	8003676 <HAL_TIM_ConfigClockSource+0x82>
 800366c:	2b50      	cmp	r3, #80	; 0x50
 800366e:	d036      	beq.n	80036de <HAL_TIM_ConfigClockSource+0xea>
 8003670:	2b60      	cmp	r3, #96	; 0x60
 8003672:	d044      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8003674:	e06d      	b.n	8003752 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003676:	2280      	movs	r2, #128	; 0x80
 8003678:	0152      	lsls	r2, r2, #5
 800367a:	4293      	cmp	r3, r2
 800367c:	d068      	beq.n	8003750 <HAL_TIM_ConfigClockSource+0x15c>
 800367e:	2280      	movs	r2, #128	; 0x80
 8003680:	0192      	lsls	r2, r2, #6
 8003682:	4293      	cmp	r3, r2
 8003684:	d017      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8003686:	e064      	b.n	8003752 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6818      	ldr	r0, [r3, #0]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	6899      	ldr	r1, [r3, #8]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f000 fb56 	bl	8003d48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2277      	movs	r2, #119	; 0x77
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	609a      	str	r2, [r3, #8]
      break;
 80036b4:	e04d      	b.n	8003752 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6899      	ldr	r1, [r3, #8]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f000 fb3f 	bl	8003d48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2180      	movs	r1, #128	; 0x80
 80036d6:	01c9      	lsls	r1, r1, #7
 80036d8:	430a      	orrs	r2, r1
 80036da:	609a      	str	r2, [r3, #8]
      break;
 80036dc:	e039      	b.n	8003752 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	6859      	ldr	r1, [r3, #4]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	001a      	movs	r2, r3
 80036ec:	f000 fab2 	bl	8003c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2150      	movs	r1, #80	; 0x50
 80036f6:	0018      	movs	r0, r3
 80036f8:	f000 fb0c 	bl	8003d14 <TIM_ITRx_SetConfig>
      break;
 80036fc:	e029      	b.n	8003752 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6818      	ldr	r0, [r3, #0]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	6859      	ldr	r1, [r3, #4]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	001a      	movs	r2, r3
 800370c:	f000 fad0 	bl	8003cb0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2160      	movs	r1, #96	; 0x60
 8003716:	0018      	movs	r0, r3
 8003718:	f000 fafc 	bl	8003d14 <TIM_ITRx_SetConfig>
      break;
 800371c:	e019      	b.n	8003752 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	6859      	ldr	r1, [r3, #4]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	001a      	movs	r2, r3
 800372c:	f000 fa92 	bl	8003c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2140      	movs	r1, #64	; 0x40
 8003736:	0018      	movs	r0, r3
 8003738:	f000 faec 	bl	8003d14 <TIM_ITRx_SetConfig>
      break;
 800373c:	e009      	b.n	8003752 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	0019      	movs	r1, r3
 8003748:	0010      	movs	r0, r2
 800374a:	f000 fae3 	bl	8003d14 <TIM_ITRx_SetConfig>
      break;
 800374e:	e000      	b.n	8003752 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003750:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	223d      	movs	r2, #61	; 0x3d
 8003756:	2101      	movs	r1, #1
 8003758:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	223c      	movs	r2, #60	; 0x3c
 800375e:	2100      	movs	r1, #0
 8003760:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	0018      	movs	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	b004      	add	sp, #16
 800376a:	bd80      	pop	{r7, pc}
 800376c:	ffff00ff 	.word	0xffff00ff

08003770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a2f      	ldr	r2, [pc, #188]	; (8003840 <TIM_Base_SetConfig+0xd0>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d003      	beq.n	8003790 <TIM_Base_SetConfig+0x20>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a2e      	ldr	r2, [pc, #184]	; (8003844 <TIM_Base_SetConfig+0xd4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d108      	bne.n	80037a2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2270      	movs	r2, #112	; 0x70
 8003794:	4393      	bics	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a26      	ldr	r2, [pc, #152]	; (8003840 <TIM_Base_SetConfig+0xd0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d013      	beq.n	80037d2 <TIM_Base_SetConfig+0x62>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a25      	ldr	r2, [pc, #148]	; (8003844 <TIM_Base_SetConfig+0xd4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00f      	beq.n	80037d2 <TIM_Base_SetConfig+0x62>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a24      	ldr	r2, [pc, #144]	; (8003848 <TIM_Base_SetConfig+0xd8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00b      	beq.n	80037d2 <TIM_Base_SetConfig+0x62>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a23      	ldr	r2, [pc, #140]	; (800384c <TIM_Base_SetConfig+0xdc>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d007      	beq.n	80037d2 <TIM_Base_SetConfig+0x62>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a22      	ldr	r2, [pc, #136]	; (8003850 <TIM_Base_SetConfig+0xe0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d003      	beq.n	80037d2 <TIM_Base_SetConfig+0x62>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a21      	ldr	r2, [pc, #132]	; (8003854 <TIM_Base_SetConfig+0xe4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d108      	bne.n	80037e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4a20      	ldr	r2, [pc, #128]	; (8003858 <TIM_Base_SetConfig+0xe8>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2280      	movs	r2, #128	; 0x80
 80037e8:	4393      	bics	r3, r2
 80037ea:	001a      	movs	r2, r3
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a0c      	ldr	r2, [pc, #48]	; (8003840 <TIM_Base_SetConfig+0xd0>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00b      	beq.n	800382a <TIM_Base_SetConfig+0xba>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a0d      	ldr	r2, [pc, #52]	; (800384c <TIM_Base_SetConfig+0xdc>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d007      	beq.n	800382a <TIM_Base_SetConfig+0xba>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a0c      	ldr	r2, [pc, #48]	; (8003850 <TIM_Base_SetConfig+0xe0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d003      	beq.n	800382a <TIM_Base_SetConfig+0xba>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a0b      	ldr	r2, [pc, #44]	; (8003854 <TIM_Base_SetConfig+0xe4>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d103      	bne.n	8003832 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	615a      	str	r2, [r3, #20]
}
 8003838:	46c0      	nop			; (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	b004      	add	sp, #16
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40012c00 	.word	0x40012c00
 8003844:	40000400 	.word	0x40000400
 8003848:	40002000 	.word	0x40002000
 800384c:	40014000 	.word	0x40014000
 8003850:	40014400 	.word	0x40014400
 8003854:	40014800 	.word	0x40014800
 8003858:	fffffcff 	.word	0xfffffcff

0800385c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	2201      	movs	r2, #1
 800386c:	4393      	bics	r3, r2
 800386e:	001a      	movs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2270      	movs	r2, #112	; 0x70
 800388a:	4393      	bics	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2203      	movs	r2, #3
 8003892:	4393      	bics	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2202      	movs	r2, #2
 80038a4:	4393      	bics	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a27      	ldr	r2, [pc, #156]	; (8003954 <TIM_OC1_SetConfig+0xf8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00b      	beq.n	80038d2 <TIM_OC1_SetConfig+0x76>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a26      	ldr	r2, [pc, #152]	; (8003958 <TIM_OC1_SetConfig+0xfc>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d007      	beq.n	80038d2 <TIM_OC1_SetConfig+0x76>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a25      	ldr	r2, [pc, #148]	; (800395c <TIM_OC1_SetConfig+0x100>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d003      	beq.n	80038d2 <TIM_OC1_SetConfig+0x76>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a24      	ldr	r2, [pc, #144]	; (8003960 <TIM_OC1_SetConfig+0x104>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d10c      	bne.n	80038ec <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2208      	movs	r2, #8
 80038d6:	4393      	bics	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2204      	movs	r2, #4
 80038e8:	4393      	bics	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a19      	ldr	r2, [pc, #100]	; (8003954 <TIM_OC1_SetConfig+0xf8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d00b      	beq.n	800390c <TIM_OC1_SetConfig+0xb0>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a18      	ldr	r2, [pc, #96]	; (8003958 <TIM_OC1_SetConfig+0xfc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d007      	beq.n	800390c <TIM_OC1_SetConfig+0xb0>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a17      	ldr	r2, [pc, #92]	; (800395c <TIM_OC1_SetConfig+0x100>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d003      	beq.n	800390c <TIM_OC1_SetConfig+0xb0>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a16      	ldr	r2, [pc, #88]	; (8003960 <TIM_OC1_SetConfig+0x104>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d111      	bne.n	8003930 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4a15      	ldr	r2, [pc, #84]	; (8003964 <TIM_OC1_SetConfig+0x108>)
 8003910:	4013      	ands	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4a14      	ldr	r2, [pc, #80]	; (8003968 <TIM_OC1_SetConfig+0x10c>)
 8003918:	4013      	ands	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	621a      	str	r2, [r3, #32]
}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	46bd      	mov	sp, r7
 800394e:	b006      	add	sp, #24
 8003950:	bd80      	pop	{r7, pc}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	40012c00 	.word	0x40012c00
 8003958:	40014000 	.word	0x40014000
 800395c:	40014400 	.word	0x40014400
 8003960:	40014800 	.word	0x40014800
 8003964:	fffffeff 	.word	0xfffffeff
 8003968:	fffffdff 	.word	0xfffffdff

0800396c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	2210      	movs	r2, #16
 800397c:	4393      	bics	r3, r2
 800397e:	001a      	movs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4a2e      	ldr	r2, [pc, #184]	; (8003a54 <TIM_OC2_SetConfig+0xe8>)
 800399a:	4013      	ands	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4a2d      	ldr	r2, [pc, #180]	; (8003a58 <TIM_OC2_SetConfig+0xec>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	021b      	lsls	r3, r3, #8
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2220      	movs	r2, #32
 80039b6:	4393      	bics	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a24      	ldr	r2, [pc, #144]	; (8003a5c <TIM_OC2_SetConfig+0xf0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d10d      	bne.n	80039ea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2280      	movs	r2, #128	; 0x80
 80039d2:	4393      	bics	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2240      	movs	r2, #64	; 0x40
 80039e6:	4393      	bics	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a1b      	ldr	r2, [pc, #108]	; (8003a5c <TIM_OC2_SetConfig+0xf0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00b      	beq.n	8003a0a <TIM_OC2_SetConfig+0x9e>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a1a      	ldr	r2, [pc, #104]	; (8003a60 <TIM_OC2_SetConfig+0xf4>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d007      	beq.n	8003a0a <TIM_OC2_SetConfig+0x9e>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a19      	ldr	r2, [pc, #100]	; (8003a64 <TIM_OC2_SetConfig+0xf8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d003      	beq.n	8003a0a <TIM_OC2_SetConfig+0x9e>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a18      	ldr	r2, [pc, #96]	; (8003a68 <TIM_OC2_SetConfig+0xfc>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d113      	bne.n	8003a32 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4a17      	ldr	r2, [pc, #92]	; (8003a6c <TIM_OC2_SetConfig+0x100>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	4a16      	ldr	r2, [pc, #88]	; (8003a70 <TIM_OC2_SetConfig+0x104>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	621a      	str	r2, [r3, #32]
}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b006      	add	sp, #24
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	ffff8fff 	.word	0xffff8fff
 8003a58:	fffffcff 	.word	0xfffffcff
 8003a5c:	40012c00 	.word	0x40012c00
 8003a60:	40014000 	.word	0x40014000
 8003a64:	40014400 	.word	0x40014400
 8003a68:	40014800 	.word	0x40014800
 8003a6c:	fffffbff 	.word	0xfffffbff
 8003a70:	fffff7ff 	.word	0xfffff7ff

08003a74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	4a35      	ldr	r2, [pc, #212]	; (8003b58 <TIM_OC3_SetConfig+0xe4>)
 8003a84:	401a      	ands	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2270      	movs	r2, #112	; 0x70
 8003aa0:	4393      	bics	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2203      	movs	r2, #3
 8003aa8:	4393      	bics	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	4a28      	ldr	r2, [pc, #160]	; (8003b5c <TIM_OC3_SetConfig+0xe8>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	021b      	lsls	r3, r3, #8
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a24      	ldr	r2, [pc, #144]	; (8003b60 <TIM_OC3_SetConfig+0xec>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d10d      	bne.n	8003aee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	4a23      	ldr	r2, [pc, #140]	; (8003b64 <TIM_OC3_SetConfig+0xf0>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	021b      	lsls	r3, r3, #8
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	4a1f      	ldr	r2, [pc, #124]	; (8003b68 <TIM_OC3_SetConfig+0xf4>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a1b      	ldr	r2, [pc, #108]	; (8003b60 <TIM_OC3_SetConfig+0xec>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00b      	beq.n	8003b0e <TIM_OC3_SetConfig+0x9a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a1c      	ldr	r2, [pc, #112]	; (8003b6c <TIM_OC3_SetConfig+0xf8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d007      	beq.n	8003b0e <TIM_OC3_SetConfig+0x9a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a1b      	ldr	r2, [pc, #108]	; (8003b70 <TIM_OC3_SetConfig+0xfc>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d003      	beq.n	8003b0e <TIM_OC3_SetConfig+0x9a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a1a      	ldr	r2, [pc, #104]	; (8003b74 <TIM_OC3_SetConfig+0x100>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d113      	bne.n	8003b36 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4a19      	ldr	r2, [pc, #100]	; (8003b78 <TIM_OC3_SetConfig+0x104>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4a18      	ldr	r2, [pc, #96]	; (8003b7c <TIM_OC3_SetConfig+0x108>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	621a      	str	r2, [r3, #32]
}
 8003b50:	46c0      	nop			; (mov r8, r8)
 8003b52:	46bd      	mov	sp, r7
 8003b54:	b006      	add	sp, #24
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	fffffeff 	.word	0xfffffeff
 8003b5c:	fffffdff 	.word	0xfffffdff
 8003b60:	40012c00 	.word	0x40012c00
 8003b64:	fffff7ff 	.word	0xfffff7ff
 8003b68:	fffffbff 	.word	0xfffffbff
 8003b6c:	40014000 	.word	0x40014000
 8003b70:	40014400 	.word	0x40014400
 8003b74:	40014800 	.word	0x40014800
 8003b78:	ffffefff 	.word	0xffffefff
 8003b7c:	ffffdfff 	.word	0xffffdfff

08003b80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	4a28      	ldr	r2, [pc, #160]	; (8003c30 <TIM_OC4_SetConfig+0xb0>)
 8003b90:	401a      	ands	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4a22      	ldr	r2, [pc, #136]	; (8003c34 <TIM_OC4_SetConfig+0xb4>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4a21      	ldr	r2, [pc, #132]	; (8003c38 <TIM_OC4_SetConfig+0xb8>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	021b      	lsls	r3, r3, #8
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4a1d      	ldr	r2, [pc, #116]	; (8003c3c <TIM_OC4_SetConfig+0xbc>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	031b      	lsls	r3, r3, #12
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a19      	ldr	r2, [pc, #100]	; (8003c40 <TIM_OC4_SetConfig+0xc0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00b      	beq.n	8003bf8 <TIM_OC4_SetConfig+0x78>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a18      	ldr	r2, [pc, #96]	; (8003c44 <TIM_OC4_SetConfig+0xc4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d007      	beq.n	8003bf8 <TIM_OC4_SetConfig+0x78>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a17      	ldr	r2, [pc, #92]	; (8003c48 <TIM_OC4_SetConfig+0xc8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d003      	beq.n	8003bf8 <TIM_OC4_SetConfig+0x78>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a16      	ldr	r2, [pc, #88]	; (8003c4c <TIM_OC4_SetConfig+0xcc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d109      	bne.n	8003c0c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	4a15      	ldr	r2, [pc, #84]	; (8003c50 <TIM_OC4_SetConfig+0xd0>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	019b      	lsls	r3, r3, #6
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	621a      	str	r2, [r3, #32]
}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b006      	add	sp, #24
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	ffffefff 	.word	0xffffefff
 8003c34:	ffff8fff 	.word	0xffff8fff
 8003c38:	fffffcff 	.word	0xfffffcff
 8003c3c:	ffffdfff 	.word	0xffffdfff
 8003c40:	40012c00 	.word	0x40012c00
 8003c44:	40014000 	.word	0x40014000
 8003c48:	40014400 	.word	0x40014400
 8003c4c:	40014800 	.word	0x40014800
 8003c50:	ffffbfff 	.word	0xffffbfff

08003c54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	4393      	bics	r3, r2
 8003c6e:	001a      	movs	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	22f0      	movs	r2, #240	; 0xf0
 8003c7e:	4393      	bics	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	220a      	movs	r2, #10
 8003c90:	4393      	bics	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	621a      	str	r2, [r3, #32]
}
 8003ca8:	46c0      	nop			; (mov r8, r8)
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b006      	add	sp, #24
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	2210      	movs	r2, #16
 8003cc2:	4393      	bics	r3, r2
 8003cc4:	001a      	movs	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	4a0d      	ldr	r2, [pc, #52]	; (8003d10 <TIM_TI2_ConfigInputStage+0x60>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	031b      	lsls	r3, r3, #12
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	22a0      	movs	r2, #160	; 0xa0
 8003cec:	4393      	bics	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	621a      	str	r2, [r3, #32]
}
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b006      	add	sp, #24
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	ffff0fff 	.word	0xffff0fff

08003d14 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2270      	movs	r2, #112	; 0x70
 8003d28:	4393      	bics	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	2207      	movs	r2, #7
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	609a      	str	r2, [r3, #8]
}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b004      	add	sp, #16
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	4a09      	ldr	r2, [pc, #36]	; (8003d84 <TIM_ETR_SetConfig+0x3c>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	021a      	lsls	r2, r3, #8
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	609a      	str	r2, [r3, #8]
}
 8003d7c:	46c0      	nop			; (mov r8, r8)
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b006      	add	sp, #24
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	ffff00ff 	.word	0xffff00ff

08003d88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	221f      	movs	r2, #31
 8003d98:	4013      	ands	r3, r2
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	409a      	lsls	r2, r3
 8003d9e:	0013      	movs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	43d2      	mvns	r2, r2
 8003daa:	401a      	ands	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a1a      	ldr	r2, [r3, #32]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	211f      	movs	r1, #31
 8003db8:	400b      	ands	r3, r1
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	4099      	lsls	r1, r3
 8003dbe:	000b      	movs	r3, r1
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	621a      	str	r2, [r3, #32]
}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b006      	add	sp, #24
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	223c      	movs	r2, #60	; 0x3c
 8003dde:	5c9b      	ldrb	r3, [r3, r2]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e041      	b.n	8003e6c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	223c      	movs	r2, #60	; 0x3c
 8003dec:	2101      	movs	r1, #1
 8003dee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	223d      	movs	r2, #61	; 0x3d
 8003df4:	2102      	movs	r1, #2
 8003df6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2270      	movs	r2, #112	; 0x70
 8003e0c:	4393      	bics	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a13      	ldr	r2, [pc, #76]	; (8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d009      	beq.n	8003e40 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a11      	ldr	r2, [pc, #68]	; (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d004      	beq.n	8003e40 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a10      	ldr	r2, [pc, #64]	; (8003e7c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d10c      	bne.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2280      	movs	r2, #128	; 0x80
 8003e44:	4393      	bics	r3, r2
 8003e46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	223d      	movs	r2, #61	; 0x3d
 8003e5e:	2101      	movs	r1, #1
 8003e60:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	223c      	movs	r2, #60	; 0x3c
 8003e66:	2100      	movs	r1, #0
 8003e68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b004      	add	sp, #16
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40012c00 	.word	0x40012c00
 8003e78:	40000400 	.word	0x40000400
 8003e7c:	40014000 	.word	0x40014000

08003e80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	223c      	movs	r2, #60	; 0x3c
 8003e92:	5c9b      	ldrb	r3, [r3, r2]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e03e      	b.n	8003f1a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	223c      	movs	r2, #60	; 0x3c
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	22ff      	movs	r2, #255	; 0xff
 8003ea8:	4393      	bics	r3, r2
 8003eaa:	001a      	movs	r2, r3
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4a1b      	ldr	r2, [pc, #108]	; (8003f24 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003eb8:	401a      	ands	r2, r3
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003ec6:	401a      	ands	r2, r3
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4a16      	ldr	r2, [pc, #88]	; (8003f2c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003ed4:	401a      	ands	r2, r3
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4a13      	ldr	r2, [pc, #76]	; (8003f30 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4a11      	ldr	r2, [pc, #68]	; (8003f34 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003ef0:	401a      	ands	r2, r3
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4a0e      	ldr	r2, [pc, #56]	; (8003f38 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003efe:	401a      	ands	r2, r3
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	223c      	movs	r2, #60	; 0x3c
 8003f14:	2100      	movs	r1, #0
 8003f16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b004      	add	sp, #16
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	fffffcff 	.word	0xfffffcff
 8003f28:	fffffbff 	.word	0xfffffbff
 8003f2c:	fffff7ff 	.word	0xfffff7ff
 8003f30:	ffffefff 	.word	0xffffefff
 8003f34:	ffffdfff 	.word	0xffffdfff
 8003f38:	ffffbfff 	.word	0xffffbfff

08003f3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e044      	b.n	8003fd8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d107      	bne.n	8003f66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2270      	movs	r2, #112	; 0x70
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	0018      	movs	r0, r3
 8003f62:	f7fd f9f3 	bl	800134c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2224      	movs	r2, #36	; 0x24
 8003f6a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2101      	movs	r1, #1
 8003f78:	438a      	bics	r2, r1
 8003f7a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f000 f830 	bl	8003fe4 <UART_SetConfig>
 8003f84:	0003      	movs	r3, r0
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e024      	b.n	8003fd8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f000 f9d9 	bl	8004350 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	490d      	ldr	r1, [pc, #52]	; (8003fe0 <HAL_UART_Init+0xa4>)
 8003faa:	400a      	ands	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2108      	movs	r1, #8
 8003fba:	438a      	bics	r2, r1
 8003fbc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2101      	movs	r1, #1
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f000 fa71 	bl	80044b8 <UART_CheckIdleState>
 8003fd6:	0003      	movs	r3, r0
}
 8003fd8:	0018      	movs	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	b002      	add	sp, #8
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	fffff7ff 	.word	0xfffff7ff

08003fe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ff0:	2317      	movs	r3, #23
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4ac1      	ldr	r2, [pc, #772]	; (800431c <UART_SetConfig+0x338>)
 8004018:	4013      	ands	r3, r2
 800401a:	0019      	movs	r1, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	430a      	orrs	r2, r1
 8004024:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	4abc      	ldr	r2, [pc, #752]	; (8004320 <UART_SetConfig+0x33c>)
 800402e:	4013      	ands	r3, r2
 8004030:	0019      	movs	r1, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	4ab3      	ldr	r2, [pc, #716]	; (8004324 <UART_SetConfig+0x340>)
 8004056:	4013      	ands	r3, r2
 8004058:	0019      	movs	r1, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	430a      	orrs	r2, r1
 8004062:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4aaf      	ldr	r2, [pc, #700]	; (8004328 <UART_SetConfig+0x344>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d125      	bne.n	80040ba <UART_SetConfig+0xd6>
 800406e:	4baf      	ldr	r3, [pc, #700]	; (800432c <UART_SetConfig+0x348>)
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	2203      	movs	r2, #3
 8004074:	4013      	ands	r3, r2
 8004076:	2b01      	cmp	r3, #1
 8004078:	d00f      	beq.n	800409a <UART_SetConfig+0xb6>
 800407a:	d304      	bcc.n	8004086 <UART_SetConfig+0xa2>
 800407c:	2b02      	cmp	r3, #2
 800407e:	d011      	beq.n	80040a4 <UART_SetConfig+0xc0>
 8004080:	2b03      	cmp	r3, #3
 8004082:	d005      	beq.n	8004090 <UART_SetConfig+0xac>
 8004084:	e013      	b.n	80040ae <UART_SetConfig+0xca>
 8004086:	231f      	movs	r3, #31
 8004088:	18fb      	adds	r3, r7, r3
 800408a:	2200      	movs	r2, #0
 800408c:	701a      	strb	r2, [r3, #0]
 800408e:	e04a      	b.n	8004126 <UART_SetConfig+0x142>
 8004090:	231f      	movs	r3, #31
 8004092:	18fb      	adds	r3, r7, r3
 8004094:	2202      	movs	r2, #2
 8004096:	701a      	strb	r2, [r3, #0]
 8004098:	e045      	b.n	8004126 <UART_SetConfig+0x142>
 800409a:	231f      	movs	r3, #31
 800409c:	18fb      	adds	r3, r7, r3
 800409e:	2204      	movs	r2, #4
 80040a0:	701a      	strb	r2, [r3, #0]
 80040a2:	e040      	b.n	8004126 <UART_SetConfig+0x142>
 80040a4:	231f      	movs	r3, #31
 80040a6:	18fb      	adds	r3, r7, r3
 80040a8:	2208      	movs	r2, #8
 80040aa:	701a      	strb	r2, [r3, #0]
 80040ac:	e03b      	b.n	8004126 <UART_SetConfig+0x142>
 80040ae:	231f      	movs	r3, #31
 80040b0:	18fb      	adds	r3, r7, r3
 80040b2:	2210      	movs	r2, #16
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	e035      	b.n	8004126 <UART_SetConfig+0x142>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a9c      	ldr	r2, [pc, #624]	; (8004330 <UART_SetConfig+0x34c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d104      	bne.n	80040ce <UART_SetConfig+0xea>
 80040c4:	231f      	movs	r3, #31
 80040c6:	18fb      	adds	r3, r7, r3
 80040c8:	2200      	movs	r2, #0
 80040ca:	701a      	strb	r2, [r3, #0]
 80040cc:	e02b      	b.n	8004126 <UART_SetConfig+0x142>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a98      	ldr	r2, [pc, #608]	; (8004334 <UART_SetConfig+0x350>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d104      	bne.n	80040e2 <UART_SetConfig+0xfe>
 80040d8:	231f      	movs	r3, #31
 80040da:	18fb      	adds	r3, r7, r3
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]
 80040e0:	e021      	b.n	8004126 <UART_SetConfig+0x142>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a94      	ldr	r2, [pc, #592]	; (8004338 <UART_SetConfig+0x354>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d104      	bne.n	80040f6 <UART_SetConfig+0x112>
 80040ec:	231f      	movs	r3, #31
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	2200      	movs	r2, #0
 80040f2:	701a      	strb	r2, [r3, #0]
 80040f4:	e017      	b.n	8004126 <UART_SetConfig+0x142>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a90      	ldr	r2, [pc, #576]	; (800433c <UART_SetConfig+0x358>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d104      	bne.n	800410a <UART_SetConfig+0x126>
 8004100:	231f      	movs	r3, #31
 8004102:	18fb      	adds	r3, r7, r3
 8004104:	2200      	movs	r2, #0
 8004106:	701a      	strb	r2, [r3, #0]
 8004108:	e00d      	b.n	8004126 <UART_SetConfig+0x142>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a8c      	ldr	r2, [pc, #560]	; (8004340 <UART_SetConfig+0x35c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d104      	bne.n	800411e <UART_SetConfig+0x13a>
 8004114:	231f      	movs	r3, #31
 8004116:	18fb      	adds	r3, r7, r3
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	e003      	b.n	8004126 <UART_SetConfig+0x142>
 800411e:	231f      	movs	r3, #31
 8004120:	18fb      	adds	r3, r7, r3
 8004122:	2210      	movs	r2, #16
 8004124:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69da      	ldr	r2, [r3, #28]
 800412a:	2380      	movs	r3, #128	; 0x80
 800412c:	021b      	lsls	r3, r3, #8
 800412e:	429a      	cmp	r2, r3
 8004130:	d000      	beq.n	8004134 <UART_SetConfig+0x150>
 8004132:	e07d      	b.n	8004230 <UART_SetConfig+0x24c>
  {
    switch (clocksource)
 8004134:	231f      	movs	r3, #31
 8004136:	18fb      	adds	r3, r7, r3
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d01c      	beq.n	8004178 <UART_SetConfig+0x194>
 800413e:	dc02      	bgt.n	8004146 <UART_SetConfig+0x162>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <UART_SetConfig+0x16c>
 8004144:	e04b      	b.n	80041de <UART_SetConfig+0x1fa>
 8004146:	2b04      	cmp	r3, #4
 8004148:	d025      	beq.n	8004196 <UART_SetConfig+0x1b2>
 800414a:	2b08      	cmp	r3, #8
 800414c:	d037      	beq.n	80041be <UART_SetConfig+0x1da>
 800414e:	e046      	b.n	80041de <UART_SetConfig+0x1fa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004150:	f7fe fea0 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8004154:	0003      	movs	r3, r0
 8004156:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	005a      	lsls	r2, r3, #1
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	085b      	lsrs	r3, r3, #1
 8004162:	18d2      	adds	r2, r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	0019      	movs	r1, r3
 800416a:	0010      	movs	r0, r2
 800416c:	f7fb ffca 	bl	8000104 <__udivsi3>
 8004170:	0003      	movs	r3, r0
 8004172:	b29b      	uxth	r3, r3
 8004174:	61bb      	str	r3, [r7, #24]
        break;
 8004176:	e037      	b.n	80041e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	085b      	lsrs	r3, r3, #1
 800417e:	4a71      	ldr	r2, [pc, #452]	; (8004344 <UART_SetConfig+0x360>)
 8004180:	189a      	adds	r2, r3, r2
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	0019      	movs	r1, r3
 8004188:	0010      	movs	r0, r2
 800418a:	f7fb ffbb 	bl	8000104 <__udivsi3>
 800418e:	0003      	movs	r3, r0
 8004190:	b29b      	uxth	r3, r3
 8004192:	61bb      	str	r3, [r7, #24]
        break;
 8004194:	e028      	b.n	80041e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004196:	f7fe fe0d 	bl	8002db4 <HAL_RCC_GetSysClockFreq>
 800419a:	0003      	movs	r3, r0
 800419c:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	005a      	lsls	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	085b      	lsrs	r3, r3, #1
 80041a8:	18d2      	adds	r2, r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	0019      	movs	r1, r3
 80041b0:	0010      	movs	r0, r2
 80041b2:	f7fb ffa7 	bl	8000104 <__udivsi3>
 80041b6:	0003      	movs	r3, r0
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	61bb      	str	r3, [r7, #24]
        break;
 80041bc:	e014      	b.n	80041e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	085b      	lsrs	r3, r3, #1
 80041c4:	2280      	movs	r2, #128	; 0x80
 80041c6:	0252      	lsls	r2, r2, #9
 80041c8:	189a      	adds	r2, r3, r2
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	0019      	movs	r1, r3
 80041d0:	0010      	movs	r0, r2
 80041d2:	f7fb ff97 	bl	8000104 <__udivsi3>
 80041d6:	0003      	movs	r3, r0
 80041d8:	b29b      	uxth	r3, r3
 80041da:	61bb      	str	r3, [r7, #24]
        break;
 80041dc:	e004      	b.n	80041e8 <UART_SetConfig+0x204>
      default:
        ret = HAL_ERROR;
 80041de:	2317      	movs	r3, #23
 80041e0:	18fb      	adds	r3, r7, r3
 80041e2:	2201      	movs	r2, #1
 80041e4:	701a      	strb	r2, [r3, #0]
        break;
 80041e6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	2b0f      	cmp	r3, #15
 80041ec:	d91b      	bls.n	8004226 <UART_SetConfig+0x242>
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	4a55      	ldr	r2, [pc, #340]	; (8004348 <UART_SetConfig+0x364>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d817      	bhi.n	8004226 <UART_SetConfig+0x242>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	200a      	movs	r0, #10
 80041fc:	183b      	adds	r3, r7, r0
 80041fe:	210f      	movs	r1, #15
 8004200:	438a      	bics	r2, r1
 8004202:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	085b      	lsrs	r3, r3, #1
 8004208:	b29b      	uxth	r3, r3
 800420a:	2207      	movs	r2, #7
 800420c:	4013      	ands	r3, r2
 800420e:	b299      	uxth	r1, r3
 8004210:	183b      	adds	r3, r7, r0
 8004212:	183a      	adds	r2, r7, r0
 8004214:	8812      	ldrh	r2, [r2, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	183a      	adds	r2, r7, r0
 8004220:	8812      	ldrh	r2, [r2, #0]
 8004222:	60da      	str	r2, [r3, #12]
 8004224:	e06c      	b.n	8004300 <UART_SetConfig+0x31c>
    }
    else
    {
      ret = HAL_ERROR;
 8004226:	2317      	movs	r3, #23
 8004228:	18fb      	adds	r3, r7, r3
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	e067      	b.n	8004300 <UART_SetConfig+0x31c>
    }
  }
  else
  {
    switch (clocksource)
 8004230:	231f      	movs	r3, #31
 8004232:	18fb      	adds	r3, r7, r3
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b02      	cmp	r3, #2
 8004238:	d01b      	beq.n	8004272 <UART_SetConfig+0x28e>
 800423a:	dc02      	bgt.n	8004242 <UART_SetConfig+0x25e>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <UART_SetConfig+0x268>
 8004240:	e049      	b.n	80042d6 <UART_SetConfig+0x2f2>
 8004242:	2b04      	cmp	r3, #4
 8004244:	d024      	beq.n	8004290 <UART_SetConfig+0x2ac>
 8004246:	2b08      	cmp	r3, #8
 8004248:	d035      	beq.n	80042b6 <UART_SetConfig+0x2d2>
 800424a:	e044      	b.n	80042d6 <UART_SetConfig+0x2f2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800424c:	f7fe fe22 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8004250:	0003      	movs	r3, r0
 8004252:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	085a      	lsrs	r2, r3, #1
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	18d2      	adds	r2, r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	0019      	movs	r1, r3
 8004264:	0010      	movs	r0, r2
 8004266:	f7fb ff4d 	bl	8000104 <__udivsi3>
 800426a:	0003      	movs	r3, r0
 800426c:	b29b      	uxth	r3, r3
 800426e:	61bb      	str	r3, [r7, #24]
        break;
 8004270:	e036      	b.n	80042e0 <UART_SetConfig+0x2fc>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	085b      	lsrs	r3, r3, #1
 8004278:	4a34      	ldr	r2, [pc, #208]	; (800434c <UART_SetConfig+0x368>)
 800427a:	189a      	adds	r2, r3, r2
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	0019      	movs	r1, r3
 8004282:	0010      	movs	r0, r2
 8004284:	f7fb ff3e 	bl	8000104 <__udivsi3>
 8004288:	0003      	movs	r3, r0
 800428a:	b29b      	uxth	r3, r3
 800428c:	61bb      	str	r3, [r7, #24]
        break;
 800428e:	e027      	b.n	80042e0 <UART_SetConfig+0x2fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004290:	f7fe fd90 	bl	8002db4 <HAL_RCC_GetSysClockFreq>
 8004294:	0003      	movs	r3, r0
 8004296:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	085a      	lsrs	r2, r3, #1
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	18d2      	adds	r2, r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	0019      	movs	r1, r3
 80042a8:	0010      	movs	r0, r2
 80042aa:	f7fb ff2b 	bl	8000104 <__udivsi3>
 80042ae:	0003      	movs	r3, r0
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	61bb      	str	r3, [r7, #24]
        break;
 80042b4:	e014      	b.n	80042e0 <UART_SetConfig+0x2fc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	085b      	lsrs	r3, r3, #1
 80042bc:	2280      	movs	r2, #128	; 0x80
 80042be:	0212      	lsls	r2, r2, #8
 80042c0:	189a      	adds	r2, r3, r2
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	0019      	movs	r1, r3
 80042c8:	0010      	movs	r0, r2
 80042ca:	f7fb ff1b 	bl	8000104 <__udivsi3>
 80042ce:	0003      	movs	r3, r0
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	61bb      	str	r3, [r7, #24]
        break;
 80042d4:	e004      	b.n	80042e0 <UART_SetConfig+0x2fc>
      default:
        ret = HAL_ERROR;
 80042d6:	2317      	movs	r3, #23
 80042d8:	18fb      	adds	r3, r7, r3
 80042da:	2201      	movs	r2, #1
 80042dc:	701a      	strb	r2, [r3, #0]
        break;
 80042de:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	2b0f      	cmp	r3, #15
 80042e4:	d908      	bls.n	80042f8 <UART_SetConfig+0x314>
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	4a17      	ldr	r2, [pc, #92]	; (8004348 <UART_SetConfig+0x364>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d804      	bhi.n	80042f8 <UART_SetConfig+0x314>
    {
      huart->Instance->BRR = usartdiv;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	60da      	str	r2, [r3, #12]
 80042f6:	e003      	b.n	8004300 <UART_SetConfig+0x31c>
    }
    else
    {
      ret = HAL_ERROR;
 80042f8:	2317      	movs	r3, #23
 80042fa:	18fb      	adds	r3, r7, r3
 80042fc:	2201      	movs	r2, #1
 80042fe:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800430c:	2317      	movs	r3, #23
 800430e:	18fb      	adds	r3, r7, r3
 8004310:	781b      	ldrb	r3, [r3, #0]
}
 8004312:	0018      	movs	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	b008      	add	sp, #32
 8004318:	bd80      	pop	{r7, pc}
 800431a:	46c0      	nop			; (mov r8, r8)
 800431c:	efff69f3 	.word	0xefff69f3
 8004320:	ffffcfff 	.word	0xffffcfff
 8004324:	fffff4ff 	.word	0xfffff4ff
 8004328:	40013800 	.word	0x40013800
 800432c:	40021000 	.word	0x40021000
 8004330:	40004400 	.word	0x40004400
 8004334:	40004800 	.word	0x40004800
 8004338:	40004c00 	.word	0x40004c00
 800433c:	40005000 	.word	0x40005000
 8004340:	40011400 	.word	0x40011400
 8004344:	00f42400 	.word	0x00f42400
 8004348:	0000ffff 	.word	0x0000ffff
 800434c:	007a1200 	.word	0x007a1200

08004350 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	2201      	movs	r2, #1
 800435e:	4013      	ands	r3, r2
 8004360:	d00b      	beq.n	800437a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	4a4a      	ldr	r2, [pc, #296]	; (8004494 <UART_AdvFeatureConfig+0x144>)
 800436a:	4013      	ands	r3, r2
 800436c:	0019      	movs	r1, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	2202      	movs	r2, #2
 8004380:	4013      	ands	r3, r2
 8004382:	d00b      	beq.n	800439c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	4a43      	ldr	r2, [pc, #268]	; (8004498 <UART_AdvFeatureConfig+0x148>)
 800438c:	4013      	ands	r3, r2
 800438e:	0019      	movs	r1, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	2204      	movs	r2, #4
 80043a2:	4013      	ands	r3, r2
 80043a4:	d00b      	beq.n	80043be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	4a3b      	ldr	r2, [pc, #236]	; (800449c <UART_AdvFeatureConfig+0x14c>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	0019      	movs	r1, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	2208      	movs	r2, #8
 80043c4:	4013      	ands	r3, r2
 80043c6:	d00b      	beq.n	80043e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	4a34      	ldr	r2, [pc, #208]	; (80044a0 <UART_AdvFeatureConfig+0x150>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	0019      	movs	r1, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	2210      	movs	r2, #16
 80043e6:	4013      	ands	r3, r2
 80043e8:	d00b      	beq.n	8004402 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	4a2c      	ldr	r2, [pc, #176]	; (80044a4 <UART_AdvFeatureConfig+0x154>)
 80043f2:	4013      	ands	r3, r2
 80043f4:	0019      	movs	r1, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	2220      	movs	r2, #32
 8004408:	4013      	ands	r3, r2
 800440a:	d00b      	beq.n	8004424 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	4a25      	ldr	r2, [pc, #148]	; (80044a8 <UART_AdvFeatureConfig+0x158>)
 8004414:	4013      	ands	r3, r2
 8004416:	0019      	movs	r1, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	2240      	movs	r2, #64	; 0x40
 800442a:	4013      	ands	r3, r2
 800442c:	d01d      	beq.n	800446a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4a1d      	ldr	r2, [pc, #116]	; (80044ac <UART_AdvFeatureConfig+0x15c>)
 8004436:	4013      	ands	r3, r2
 8004438:	0019      	movs	r1, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800444a:	2380      	movs	r3, #128	; 0x80
 800444c:	035b      	lsls	r3, r3, #13
 800444e:	429a      	cmp	r2, r3
 8004450:	d10b      	bne.n	800446a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	4a15      	ldr	r2, [pc, #84]	; (80044b0 <UART_AdvFeatureConfig+0x160>)
 800445a:	4013      	ands	r3, r2
 800445c:	0019      	movs	r1, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	2280      	movs	r2, #128	; 0x80
 8004470:	4013      	ands	r3, r2
 8004472:	d00b      	beq.n	800448c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	4a0e      	ldr	r2, [pc, #56]	; (80044b4 <UART_AdvFeatureConfig+0x164>)
 800447c:	4013      	ands	r3, r2
 800447e:	0019      	movs	r1, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	605a      	str	r2, [r3, #4]
  }
}
 800448c:	46c0      	nop			; (mov r8, r8)
 800448e:	46bd      	mov	sp, r7
 8004490:	b002      	add	sp, #8
 8004492:	bd80      	pop	{r7, pc}
 8004494:	fffdffff 	.word	0xfffdffff
 8004498:	fffeffff 	.word	0xfffeffff
 800449c:	fffbffff 	.word	0xfffbffff
 80044a0:	ffff7fff 	.word	0xffff7fff
 80044a4:	ffffefff 	.word	0xffffefff
 80044a8:	ffffdfff 	.word	0xffffdfff
 80044ac:	ffefffff 	.word	0xffefffff
 80044b0:	ff9fffff 	.word	0xff9fffff
 80044b4:	fff7ffff 	.word	0xfff7ffff

080044b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af02      	add	r7, sp, #8
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80044c6:	f7fd f88f 	bl	80015e8 <HAL_GetTick>
 80044ca:	0003      	movs	r3, r0
 80044cc:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2208      	movs	r2, #8
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d10d      	bne.n	80044f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	2380      	movs	r3, #128	; 0x80
 80044e0:	0399      	lsls	r1, r3, #14
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	4b16      	ldr	r3, [pc, #88]	; (8004540 <UART_CheckIdleState+0x88>)
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	0013      	movs	r3, r2
 80044ea:	2200      	movs	r2, #0
 80044ec:	f000 f82a 	bl	8004544 <UART_WaitOnFlagUntilTimeout>
 80044f0:	1e03      	subs	r3, r0, #0
 80044f2:	d001      	beq.n	80044f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e01f      	b.n	8004538 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2204      	movs	r2, #4
 8004500:	4013      	ands	r3, r2
 8004502:	2b04      	cmp	r3, #4
 8004504:	d10d      	bne.n	8004522 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	2380      	movs	r3, #128	; 0x80
 800450a:	03d9      	lsls	r1, r3, #15
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	4b0c      	ldr	r3, [pc, #48]	; (8004540 <UART_CheckIdleState+0x88>)
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	0013      	movs	r3, r2
 8004514:	2200      	movs	r2, #0
 8004516:	f000 f815 	bl	8004544 <UART_WaitOnFlagUntilTimeout>
 800451a:	1e03      	subs	r3, r0, #0
 800451c:	d001      	beq.n	8004522 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e00a      	b.n	8004538 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2220      	movs	r2, #32
 8004526:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2270      	movs	r2, #112	; 0x70
 8004532:	2100      	movs	r1, #0
 8004534:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	0018      	movs	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	b004      	add	sp, #16
 800453e:	bd80      	pop	{r7, pc}
 8004540:	01ffffff 	.word	0x01ffffff

08004544 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	603b      	str	r3, [r7, #0]
 8004550:	1dfb      	adds	r3, r7, #7
 8004552:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004554:	e05d      	b.n	8004612 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	3301      	adds	r3, #1
 800455a:	d05a      	beq.n	8004612 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455c:	f7fd f844 	bl	80015e8 <HAL_GetTick>
 8004560:	0002      	movs	r2, r0
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	429a      	cmp	r2, r3
 800456a:	d302      	bcc.n	8004572 <UART_WaitOnFlagUntilTimeout+0x2e>
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d11b      	bne.n	80045aa <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	492f      	ldr	r1, [pc, #188]	; (800463c <UART_WaitOnFlagUntilTimeout+0xf8>)
 800457e:	400a      	ands	r2, r1
 8004580:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2101      	movs	r1, #1
 800458e:	438a      	bics	r2, r1
 8004590:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2220      	movs	r2, #32
 8004596:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2270      	movs	r2, #112	; 0x70
 80045a2:	2100      	movs	r1, #0
 80045a4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e043      	b.n	8004632 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2204      	movs	r2, #4
 80045b2:	4013      	ands	r3, r2
 80045b4:	d02d      	beq.n	8004612 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69da      	ldr	r2, [r3, #28]
 80045bc:	2380      	movs	r3, #128	; 0x80
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	401a      	ands	r2, r3
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d123      	bne.n	8004612 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2280      	movs	r2, #128	; 0x80
 80045d0:	0112      	lsls	r2, r2, #4
 80045d2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4917      	ldr	r1, [pc, #92]	; (800463c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80045e0:	400a      	ands	r2, r1
 80045e2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2101      	movs	r1, #1
 80045f0:	438a      	bics	r2, r1
 80045f2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2220      	movs	r2, #32
 80045f8:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2220      	movs	r2, #32
 80045fe:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2220      	movs	r2, #32
 8004604:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2270      	movs	r2, #112	; 0x70
 800460a:	2100      	movs	r1, #0
 800460c:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e00f      	b.n	8004632 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	4013      	ands	r3, r2
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	425a      	negs	r2, r3
 8004622:	4153      	adcs	r3, r2
 8004624:	b2db      	uxtb	r3, r3
 8004626:	001a      	movs	r2, r3
 8004628:	1dfb      	adds	r3, r7, #7
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d092      	beq.n	8004556 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	0018      	movs	r0, r3
 8004634:	46bd      	mov	sp, r7
 8004636:	b004      	add	sp, #16
 8004638:	bd80      	pop	{r7, pc}
 800463a:	46c0      	nop			; (mov r8, r8)
 800463c:	fffffe5f 	.word	0xfffffe5f

08004640 <__libc_init_array>:
 8004640:	b570      	push	{r4, r5, r6, lr}
 8004642:	2600      	movs	r6, #0
 8004644:	4d0c      	ldr	r5, [pc, #48]	; (8004678 <__libc_init_array+0x38>)
 8004646:	4c0d      	ldr	r4, [pc, #52]	; (800467c <__libc_init_array+0x3c>)
 8004648:	1b64      	subs	r4, r4, r5
 800464a:	10a4      	asrs	r4, r4, #2
 800464c:	42a6      	cmp	r6, r4
 800464e:	d109      	bne.n	8004664 <__libc_init_array+0x24>
 8004650:	2600      	movs	r6, #0
 8004652:	f000 f821 	bl	8004698 <_init>
 8004656:	4d0a      	ldr	r5, [pc, #40]	; (8004680 <__libc_init_array+0x40>)
 8004658:	4c0a      	ldr	r4, [pc, #40]	; (8004684 <__libc_init_array+0x44>)
 800465a:	1b64      	subs	r4, r4, r5
 800465c:	10a4      	asrs	r4, r4, #2
 800465e:	42a6      	cmp	r6, r4
 8004660:	d105      	bne.n	800466e <__libc_init_array+0x2e>
 8004662:	bd70      	pop	{r4, r5, r6, pc}
 8004664:	00b3      	lsls	r3, r6, #2
 8004666:	58eb      	ldr	r3, [r5, r3]
 8004668:	4798      	blx	r3
 800466a:	3601      	adds	r6, #1
 800466c:	e7ee      	b.n	800464c <__libc_init_array+0xc>
 800466e:	00b3      	lsls	r3, r6, #2
 8004670:	58eb      	ldr	r3, [r5, r3]
 8004672:	4798      	blx	r3
 8004674:	3601      	adds	r6, #1
 8004676:	e7f2      	b.n	800465e <__libc_init_array+0x1e>
 8004678:	080046e8 	.word	0x080046e8
 800467c:	080046e8 	.word	0x080046e8
 8004680:	080046e8 	.word	0x080046e8
 8004684:	080046ec 	.word	0x080046ec

08004688 <memset>:
 8004688:	0003      	movs	r3, r0
 800468a:	1812      	adds	r2, r2, r0
 800468c:	4293      	cmp	r3, r2
 800468e:	d100      	bne.n	8004692 <memset+0xa>
 8004690:	4770      	bx	lr
 8004692:	7019      	strb	r1, [r3, #0]
 8004694:	3301      	adds	r3, #1
 8004696:	e7f9      	b.n	800468c <memset+0x4>

08004698 <_init>:
 8004698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469e:	bc08      	pop	{r3}
 80046a0:	469e      	mov	lr, r3
 80046a2:	4770      	bx	lr

080046a4 <_fini>:
 80046a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046aa:	bc08      	pop	{r3}
 80046ac:	469e      	mov	lr, r3
 80046ae:	4770      	bx	lr
